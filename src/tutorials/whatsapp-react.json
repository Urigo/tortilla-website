[
  {
    "repoUrl": "https://github.com/Urigo/WhatsApp-Clone-Client-React",
    "branchName": "master",
    "historyBranchName": "master-history",
    "releases": [
      {
        "releaseVersion": "next",
        "releaseDate": "2019-02-15 21:49:53 +0800",
        "tagName": "master@next",
        "tagRevision": "7d0a33d6e569512c2ca07bfd1cda34f98c4fed62",
        "historyRevision": "2739f63cdb7148052e9b506df507c84de3839ada",
        "changesDiff": "diff --git a/.gitignore b/.gitignore\nnew file mode 100644\nindex 0000000..5171c54\n--- /dev/null\n+++ b/.gitignore\n@@ -0,0 +1,2 @@\n+node_modules\n+npm-debug.log\n\\ No newline at end of file\ndiff --git a/.tortilla/manuals/templates/root.tmpl b/.tortilla/manuals/templates/root.tmpl\nnew file mode 100644\nindex 0000000..a1324b2\n--- /dev/null\n+++ b/.tortilla/manuals/templates/root.tmpl\n@@ -0,0 +1,43 @@\n+<p align=\"center\"><img src=\"https://cdn-images-1.medium.com/max/1600/1*cSBu9zeo8fSnf1Cc-UeR_g.jpeg\" width=\"640\"></p>\n+\n+You might have seen it around already - an open-source WhatsApp Clone tutorial; a project which was originally started in 2015 by [Uri Goldshtein](https://github.com/urigo) based on Angular-Meteor and Ionic, and have been throughout different incarnations ever since.\n+\n+This time around, I'm happy to announce that a new version of the WhatsApp Clone is coming, and it's based on React 16.7 (Hooks & Suspense), Styled-Components, Material-UI, TypeScript, GraphQL-Subscriptions/Codegen/Modules, PostgreSQL and TypeORM.\n+\n+The step-by-step implementations of the server and client can be found here:\n+\n+- Server - [urigo/whatsapp-clone-server](https://github.com/urigo/whatsapp-clone-server)\n+\n+- Client - [urigo/whatsapp-clone-client](https://github.com/urigo/whatsapp-clone-client-react)\n+\n+<p align=\"center\"><img src=\"https://cdn-images-1.medium.com/max/1040/1*fFUJd7moWtjvMZ5dE-A80g.gif\" alt=\"whatsapp\" width=\"240\"></p>\n+\n+### Why is it so good?\n+\n+This app was built with all the latest and hottest technologies out there. The purpose is simple - it should be a guideline for building a proper app, thus we thought very carefully regards the design patterns and architecture used in it, plus, we made sure to cover all communication methods with the GraphQL-back-end in different variations (query, mutation, subscription). This way whenever you're looking to start a new app, maintain an existing one or upgrade your dev-stack, the WhatsApp-clone can be a great source to start with! It's full stack and has a complete flow.\n+\n+### Why did we choose this dev-stack?\n+\n+React, GraphQL, PostgreSQL and TypeScript for obvious reasons - they are backed by a strong ecosystem. These technologies can be used in endless variations, and there's no one way which is the most right of doing so, but we chose a way that makes the most sense for us and that we truly believe in when it comes to building apps. We've connected all 4 with TypeORM, GraphQL-Codegen, GraphQL-Modules for the following reasons:\n+\n+- The GraphQL back-end was implemented with GraphQL-Modules where logic was splitted into modules based on entity types. GraphQL-Modules is an amazing library which provides you with the ability to manage and maintain your GraphQL schema correctly. Not once nor twice I have seen people who struggle with that and get tangled upon their own creation, and with GraphQL-Modules where you have a very defined structure, this problem can be easily solved.\n+\n+- Every GraphQL/TypeScript definition were automatically generated with GraphQL-Codegen using a single command call. There's no need to maintain the same thing twice if it already exists in one way or another. This way you don't have to write TypeScript type definitions for your GraphQL documents (queries, mutations and subscriptions), GraphQL resolvers and GraphQL types.\n+\n+- The new version of React 16.7 was used with Hooks and Suspense and 100% of the project is made out of function components. The front-end communicates with the back-end using only hooks and there was no use in GraphQL-React components, which makes async tasks look a lot more readable with no extra indentations.\n+\n+- We used TypeORM to correctly split the logic of the entities in the database and define the relationships between them. Without a tool such as TypeORM, communication against the DB tends to get messy and confusion since there's no single module per entity which holds all its related logic.\n+\n+### What to expect?\n+\n+- Basic authentication.\n+\n+- Image uploading with [Cloudinary](https://cloudinary.com/).\n+\n+- Live updates with GraphQL subscriptions.\n+\n+- 100% function components with React Hooks.\n+\n+- GraphQL communication with [react-apollo-hooks](https://github.com/trojanowski/react-apollo-hooks).\n+\n+This app be extremely useful for those who have little to no background in one of the technologies in our dev-stack.\ndiff --git a/.tortilla/manuals/templates/step1.tmpl b/.tortilla/manuals/templates/step1.tmpl\nnew file mode 100644\nindex 0000000..1c779e5\n--- /dev/null\n+++ b/.tortilla/manuals/templates/step1.tmpl\n@@ -0,0 +1,318 @@\n+To create a new React app we're simply gonna use [`create-react-app`](https://github.com/facebook/create-react-app). It comes with a built-in TypeScript support which is exactly what we need. First, install the CLI if you haven't already:\n+\n+    $ yarn global add create-react-app\n+\n+And then create the app itself:\n+\n+    $ create-react-app whatsapp-clone-client\n+\n+By default, `create-react-app` will create a JavaScript project. In order to use TypeScript, we will rename our app files to have the right extension `.tsx` (TypeScript + JSX):\n+\n+    src$ mv App.js App.tsx\n+    src$ mv index.js index.tsx\n+\n+And then we will add a couple of configuration files that will basically set the building and linting rules for the TypeScript compiler:\n+\n+{{{ diffStep 1.1 module=\"client\" files=\"tsconfig.json, tslint.json\" }}}\n+\n+Once we will run the app for the first time, `react-scripts` (`create-react-app` utility scripts package) should automatically initialize some additional TypeScript related files.\n+\n+    $ yarn start\n+\n+Since in our app we'll be using the new React [hooks](https://reactjs.org/docs/hooks-intro.html) and [Suspense](https://reactjs.org/docs/react-api.html#reactsuspense) mechanisms, we will upgrade React's version to version `16.8`:\n+\n+    $ yarn upgrade react@16.8.1 react-dom@16.8.1\n+\n+The plan is to make our app talk with a [GraphQL](https://graphql.org/) back-end, so we'll be using [Apollo](https://www.apollographql.com/) to setup a client which is actually capable of such.\n+\n+First we will install all the necessary packages:\n+\n+    $ yarn add apollo-cache-inmemory@1.4.2 apollo-client@2.4.12 apollo-link@1.2.8 apollo-link-http@1.5.11 apollo-link-ws@1.0.14 apollo-utilities@1.1.2 graphql@14.1.1 react-apollo-hooks@0.3.1 subscriptions-transport-ws@0.9.15\n+    $ yarn add -D @types/graphql@14.0.5 @types/node@10.12.23\n+\n+Then we will set the server's connection URL under the `.env` file which is basically used to define constants for our application. The constants can be addressed using `process.env[CONSTANT_NAME]`. The identifier should be replaced automatically by `react-scripts` with the stored value, just like macros:\n+\n+{{{ diffStep 1.3 module=\"client\" files=\".env\" }}}\n+\n+And finally we can write our Apollo-GraphQL client module and connect it to our application:\n+\n+{{{ diffStep 1.3 module=\"client\" files=\"src/apollo-client.ts, src/index.tsx\" }}}\n+\n+> Note that this configuration assumes that the sever runs at `localhost:4000` and that it serves a GraphQL REST endpoint at `/graphql`. Feel free to make the right adjustments according to your needs.\n+\n+Needless to say that we need a back-end for our application to function properly, and so this is what we're gonna focus on. We will initialize a second project for the server in a separate directory called `whatsapp-clone-server`:\n+\n+    $ mkdir whatsapp-clone-server\n+    $ cd whatsapp-clone-server\n+\n+And then we will initialize a new Node.JS project using NPM:\n+\n+    $ npm init --yes\n+\n+There's nothing special about this command, it only creates a basic `package.json` which we can add things on top (see [reference](https://docs.npmjs.com/cli/init)). We will be using TypeScript in our project, so let's set it up by installing the necessary packages:\n+\n+    $ yarn add -D typescript@3.2.4 ts-node@8.0.1 @types/node@10.12.23\n+\n+And creating a `tsconfig.json` file:\n+\n+{{{ diffStep 1.1 module=\"server\" files=\"tsconfig.json\" }}}\n+\n+We will also set a script that will startup the server with `ts-node`, a TypeScript interpreter for Node.JS:\n+\n+```json\n+{\n+  \"start\": \"ts-node index.ts\"\n+}\n+```\n+\n+Our `pacakge.json` file should look like so by now:\n+\n+{{{ diffStep 1.1 module=\"server\" files=\"package.json\" }}}\n+\n+In our server we will be using [Express](https://expressjs.com/) to serve our GraphQL REST endpoint which will be handled by Apollo. Accordingly, let's install the necessary dependencies:\n+\n+    $ yarn add -D @types/body-parser@1.18.3 @types/cors@2.8.5 @types/express@4.16.4 @types/graphql@14.0.4\n+    $ yarn add apollo-server-express@2.3.1 body-parser@1.18.3 cors@2.8.5 express@4.16.4 graphql@14.0.2\n+\n+And setup a basic express server with a `/graphql` REST endpoint:\n+\n+{{{ diffStep 1.2 module=\"server\" files=\"index.ts, schema\" }}}\n+\n+Before we proceed any further there's an issue that needs to be clear. Since we're using TypeScript together with GraphQL, by default we will have to maintain 2 schemas: one for TypeScript and the other for GraphQL. Both schemas represent the same thing this way or another, which means that we will have to maintain the same thing twice. Instead of doing so, we will be using a tool called [GraphQL Code Generator](https://graphql-code-generator.com/) (Codegen, in short) to generate TypeScript definitions from our GraphQL schema.\n+\n+Codegen will change its behavior and generate code based on a set of templates and a configuration file that we will provide. We highly recommend you to go through the [docs page](https://graphql-code-generator.com/docs/getting-started/) of Codegen to get a better understanding of what it is and how it works. Let's install Codegen then, along with the templates that we're gonna use:\n+\n+    $ yarn -D add graphql-code-generator@0.16.0 graphql-codegen-typescript-common@0.16.0 graphql-codegen-typescript-resolvers@0.16.0\n+\n+And write its config under `codegen.yml` file:\n+\n+{{{ diffStep 1.3 module=\"server\" files=\"codegen.yml\" }}}\n+\n+We will also update the `.gitignore` file to exclude the generated typings file:\n+\n+{{{ diffStep 1.3 module=\"server\" files=\".gitignore\" }}}\n+\n+To make things easy, we will add a code generation command in our `package.json` so we can have it available to us whenever we need it. First we will add few utility packages that are necessary for the task:\n+\n+    $ yarn -D add nodemon@1.18.9 concurrently@4.1.0\n+\n+And we will update the scripts section in the `package.json` file to look like so:\n+\n+```json\n+{\n+  \"generate\": \"gql-gen\",\n+  \"generate:watch\": \"nodemon --exec yarn generate -e graphql\",\n+  \"start:server\": \"ts-node index.ts\",\n+  \"start:server:watch\": \"nodemon --exec yarn start:server -e ts\",\n+  \"dev\": \"concurrently \\\"yarn generate:watch\\\" \\\"yarn start:server:watch\\\"\",\n+  \"start\": \"yarn generate && yarn start:server\"\n+}\n+```\n+\n+The `package.json` file should look like so by now:\n+\n+{{{ diffStep 1.3 module=\"server\" files=\"package.json\" }}}\n+\n+To generate some TypeScript definitions all we have to do is run:\n+\n+    $ yarn generate\n+\n+And then we can safely run the server with:\n+\n+    $ yarn start\n+\n+Alternatively, you can run the server and watch for changes with the following command:\n+\n+    $ yarn start:server:watch\n+\n+For practice purpose only, we're gonna serve some dummy data from our GraphQL API so we can have something to work with in our client. Later on we will connect everything to a real database. This would give us an easy start. Our dummy db will consist of a set of chats, each of them has a last message, a picture and a name:\n+\n+{{{ diffStep 1.4 module=\"server\" files=\"index.ts, db.ts, entity, schema, codegen.yml\" }}}\n+\n+As you can see, we've added an `entity` folder which treats each entity independently. This will server us greatly is the new future when we will connect each entity to a database. The GraphQL resolvers are the \"projectors\" of the data stored in the fake DB, and they will serve it based on their implementation and provided parameters.\n+\n+Now, let's make the necessary modifications to our client so it can work alongside the server and show the data that it contains. Similarly to the server, we don't wanna maintain a TypeScript code base for our GraphQL documents, therefore we will install Codegen for the client as well. Let's install the necessary NPM packages:\n+\n+    $ yarn add -D graphql-code-generator@0.16.0 graphql-codegen-typescript-client@0.16.0 graphql-codegen-typescript-common@0.16.0\n+\n+Write a Codegen config:\n+\n+{{{ diffStep 1.4 module=\"client\" files=\"codegen.yml, codegen-interpreter.ts\" }}}\n+\n+And define `.gitignore` rules that will not include generated files in our git project:\n+\n+{{{ diffStep 1.4 module=\"client\" files=\"src/graphql/.gitignore\" }}}\n+\n+Few things you should note:\n+\n+- Our `codegen.yml` config references directly to the schema file in our server, which means that the server should be cloned alongside the client. Codegen also supports providing a REST endpoint, but if possible it's better to avoid it because this way you don't need to provide credentials. Indeed, the plan is to have an authentication mechanism to guard our GraphQL REST endpoint.\n+- The `codegen-interpreter.ts` file is necessary because it extends the `tsconfig.json` file without us actually changing it. If you'll try to edit the `tsconfig.json` file directly, then `react-scripts` will change it back to its original form.\n+\n+We will also add the necessary scripts to our `pacakge.json` so we can run `code-gen`:\n+\n+```json\n+{\n+  \"start\": \"concurrently \\\"yarn generate:watch\\\" \\\"react-scripts start\\\"\",\n+  \"generate\": \"gql-gen\",\n+  \"generate:watch\": \"nodemon --exec yarn generate -e graphql\"\n+}\n+```\n+\n+Be sure to install `concurrently` and `nodemon` so the scripts can work as intended:\n+\n+    $ yarn add -D nodemon@1.18.9 ts-node@7.0.1 concurrently@4.1.0\n+\n+At this point our `package.json` file should look like this:\n+\n+{{{ diffStep 1.4 module=\"client\" files=\"package.json\" }}}\n+\n+Now whenever we would like to generate some TypeScript definitions we can simply run:\n+\n+    $ yarn generate\n+\n+Alternatively we can just start the app on watch mode with `$ yarn start` and the Codegen should be listening for changes as well.\n+\n+    $ yarn start\n+\n+Now let's build a dashboard that will show all the chats in the server. Rather than implementing all the components and stylesheets from scratch, we will be using [`material-ui`](https://material-ui.com/) (aka Material). Material comes with pre-made components which are highly functional and work smooth with animations. To set it up we will first install it:\n+\n+    $ yarn add @material-ui/core@3.9.2 @material-ui/icons@3.0.2\n+\n+And then we will initialize it with the right theme values:\n+\n+{{{ diffStep 1.5 module=\"client\" files=\"src/index.tsx\" }}}\n+\n+The theme values represent the main colors in our app. If you're familiar with WhatsApp, you know that its main colors consist mostly of Green and White. The theme values will automatically give Material components the desired style.\n+\n+We will also make sure that the same values are available in our CSS stylesheet so we can use it outside Material's scope:\n+\n+{{{ diffStep 1.5 module=\"client\" files=\"src/index.css\" }}}\n+\n+Now we're ready to start implementing the view itself. The logic is very simple, we will use a query to fetch the chats from our back-end. Accordingly we will need to define the right [GraphQL fragments](https://www.apollographql.com/docs/react/advanced/fragments.html) so we can use them to build the query. In short, a fragment is used to represent an entity in our app. **It doesn't necessarily has to represent a type**, but indeed it's the most common use case:\n+\n+{{{ diffStep 1.6 module=\"client\" files=\"src/graphql/fragments\" }}}\n+\n+Let's move on to implementing the components. The layout is simple and consists of a navigation bar and a chats list. There are few important details you should note about the components:\n+\n+- They use [Material's](https://material-ui.com) pre-made components and icons, which are styled and highly functional right out of the box.\n+- Instead of using CSS to style our components we use [`styled-components`](https://www.styled-components.com/). This way we can encapsulate the style and it will live right next to the component.\n+- We will use [`react-apollo-hooks`](https://github.com/trojanowski/react-apollo-hooks) to connect our Apollo client with our React components. **This library is experimental and shouldn't be used in production yet**.\n+\n+{{{ diffStep 1.6 module=\"client\" files=\"src/components\" }}}\n+\n+Let's install the missing dependencies:\n+\n+    $ yarn add -D @types/moment@2.13.0\n+    $ yarn add graphql-tag@2.10.1 moment@2.24.0 subscriptions-transport-ws@0.9.15 styled-components@4.1.3\n+\n+And add a default profile picture to our assets directory under `public/assets/default-profile-pic.jpg`:\n+\n+![default-profile-pic.jpg](https://user-images.githubusercontent.com/7648874/51983273-38229280-24d3-11e9-98bd-363764dc6d97.jpg)\n+\n+The chats which are currently served by the server already have a picture, but it's not uncommon to have a chat without any picture in our app.\n+\n+Lastly, in order to make the list that we've just created visible, we will mount it at the main app component:\n+\n+{{{ diffStep 1.6 module=\"client\" files=\"src/App.tsx\" }}}\n+\n+Now we should be able to see the chats in the React app! We can test it out by running\n+\n+    # terminal 1\n+    server$ yarn generate\n+    server$ yarn start\n+    # terminal 2\n+    client$ yarn generate\n+    client$ yarn start\n+\n+Everything works, but it's not over yet. Our application can't be based on a served hard-coded JSON. A real app has a database. There are many advantages for using a database over an in-memory or FS stored data:\n+\n+- It is VERY fast, and can deal with large amounts of data.\n+- Data fetching can be optimized by defining indexes.\n+- You need the right read/write permissions which makes it very secure.\n+- Data will persist even if the server crashes or the machine is randomly closed.\n+- A lot more...\n+\n+We will be using [PostgreSQL](https://www.postgresql.org/) (Postgres, in short) as our database with [TypeORM](https://github.com/typeorm/typeorm) as an ORM around Postgres. First make sure that you install Postgres on your machine by following the [official installation instructions](https://www.labkey.org/Documentation/wiki-page.view?name=commonInstall).\n+\n+To make sure the whole shebang works with Node.JS, we will install few packages:\n+\n+    $ yarn add pg@7.8.0 typeorm@0.2.12 reflect-metadata@0.1.13\n+    $ yarn add -D @types/pg@7.4.11\n+\n+> The [`reflect-metadata`](https://www.npmjs.com/package/reflect-metadata) package will emit metadata for JavaScript [decorators](https://github.com/tc39/proposal-decorators). This will be used internally by TypeORM to determine column types based on their corresponding TypeScript type.\n+\n+This would require us to set some configuration so TypeORM would know where and how to connect the DB. We will use the `whatsapp` DB with the `test` username:\n+\n+{{{ diffStep 1.5 module=\"server\" files=\"ormconfig.json, index.ts\" }}}\n+\n+TypeORM wraps the official Postgres driver so you shouldn't worry about interacting with it. Feel free to edit `ormconfig.json` file based on your needs.\n+\n+We will also define the type of expected GraphQL context using Codegen. All we have to do is to create a `context.ts` file and specify it in the `codegen.yml` file:\n+\n+{{{ diffStep 1.5 module=\"server\" files=\"codegen.yml, context.ts\" }}}\n+\n+TypeORM has a very defined structure for organizing a project. Each table in our database, its columns and its relationships should be defined in an entity file under the `entity` folder. Why `entity` folder? Because the `ormconfig.json` says so. This is why originally we defined a TypeScript definition for each entity under a separate file. As for now, we will have 3 entities:\n+\n+- A chat entity.\n+- A message entity.\n+- A user entity.\n+\n+As we make progress, we will add more entities and edit the relationships between them:\n+\n+{{{ diffStep 1.6 module=\"server\" files=\"entity\" }}}\n+\n+Now that we have the entities set, we can make requests to Postgres. Let's edit our resolvers to use the entities:\n+\n+{{{ diffStep 1.6 module=\"server\" files=\"schema\" }}}\n+\n+Notice that we've used a custom scalar type to represent a `Date` object in our GraphQL schema using a package called [`graphql-iso-date`](https://www.npmjs.com/package/graphql-iso-date). Accordingly, let's install this package:\n+\n+    $ yarn add graphql-iso-date@3.6.1\n+    $ yarn add -D @types/graphql-iso-date@3.3.1\n+\n+And update `codegen.yml` to use it in the generated code file:\n+\n+{{{ diffStep 1.6 module=\"server\" files=\"codegen\" }}}\n+\n+Instead of fabricating a DB into the memory, we will replace the `db.ts` module with a function that will add sample data, using entities of course. This will be very convenient because this way we can test our app:\n+\n+{{{ diffStep 1.6 module=\"server\" files=\"db\" }}}\n+\n+Instead of adding the sample data any time we start the server, we will use an `--add-sample-data` flag which will be provided to the server's process:\n+\n+{{{ diffStep 1.6 module=\"server\" files=\"index.ts\" }}}\n+\n+> More about processes can be read [here](https://medium.com/the-guild/getting-to-know-nodes-child-process-module-8ed63038f3fa).\n+\n+Most Apollo-server implementations will assemble the GraphQL schema by importing a bunch of resolvers from different modules, if not having everything in a single place. This often times leads to a lot of problems as maintenance becomes harder the bigger the server gets, especially if we don't have a defined structure. Instead of going with that approach, we will be using [GraphQL-Modules](https://graphql-modules.com) (GQLModules, in short).\n+\n+The idea behind GQLModules is to implement the Separation of Concerns design pattern in GraphQL, and to allow you to write simple modules that only do what they need to. This way it's easier to write, maintain and test. You should get a better understanding of GQLModules as we go further with this tutorial.\n+\n+To setup GQLModules we will install a couple of packages:\n+\n+    $ yarn add @graphql-modules/core@0.4.2 @graphql-modules/sonar@0.4.2 @graphql-modules/di@0.4.2\n+\n+- The `sonar` package will be sued to detect `.graphql` files within our server.\n+- The `di` package is responsible for dependencies injection.\n+\n+Now we're gonna implement a dedicated GraphQL module for each of our entity:\n+\n+{{{ diffStep 1.7 module=\"server\" files=\"modules/(utils|auth|chat|message|user)\" }}}\n+\n+The implementation of the resolvers is NOT implemented in the resolver functions themselves, but rather in a separate provider. With this working model we can import and use the providers in various modules, not necessarily a specific one. In addition, we can mock the provider handlers, which makes it more testable.\n+\n+We've also created a module called `auth`, which will be responsible for authentication in the near future. For now we use a constant for `currentUser` so we can implement the handlers as if we already have authentication.\n+\n+We will use a main GQLModule called `app` to connect all our components and export a unified schema:\n+\n+{{{ diffStep 1.7 module=\"server\" files=\"modules/app\" }}}\n+\n+Accordingly, we will update the server to use the schema exported by the module we've just created\n+\n+{{{ diffStep 1.7 module=\"server\" files=\"index, schema\" }}}\n+\n+Now try to run the app again and see how things work. Of course, there shouldn't be any visual differences, but know that having a DB as an essential step.\n+\n+    $ yarn start --reset-dummy-data\n+\n+In the next step we refactor our back-end so it can be more maintainable, and we will setup a basic authentication mechanism. WhatsApp is not WhatsApp without authentication!\ndiff --git a/.tortilla/manuals/templates/step2.tmpl b/.tortilla/manuals/templates/step2.tmpl\nnew file mode 100644\nindex 0000000..0457aae\n--- /dev/null\n+++ b/.tortilla/manuals/templates/step2.tmpl\n@@ -0,0 +1,174 @@\n+![login](https://user-images.githubusercontent.com/7648874/52663083-c9b4ea00-2f40-11e9-9783-bf36fd88e4bb.png)\n+\n+As we're probably all familiar with WhatsApp, the app surrounds around authentication. It's a very crucial part because without authentication there would be no way to identify users and who communicates with whom. On top of all we would like to keep things private, because we don't want personal information to leak to other people. Although the original WhatsApp uses phone authentication with an SMS code, in our app we're gonna keep things simple and use a basic authentication.\n+\n+The authentication flow in the front-end app is simple and consists of the following:\n+\n+- Sign-Up\n+- Sign-In\n+- Settings\n+- Sign-Out\n+\n+The more complicated part comes when we have to match each data with its owner and check if a user is authorized to perform an operation or not.\n+\n+### Server authentication\n+\n+Authentication is a hot topic in the GraphQL world and there are some projects which aim at authenticating through GraphQL. Since often you will be required to use a specific auth framework (because of a feature you need or because of an existing authorization infrastructure) I will show you how to use a classic REST API framework within your GraphQL application. This approach is completely fine and in line with the official GraphQL best practices. We will use `Passport` for the authentication and `BasicAuth` as the auth mechanism:\n+\n+    $ yarn add bcrypt-nodejs@0.0.3 passport@0.4.0 passport-http@0.3.0\n+    $ yarn add -D @types/bcrypt-nodejs@0.0.30 @types/passport@1.0.0 @types/passport-http@0.3.7\n+\n+`BasicAuth` is basically responsible for sending a username and password in an Authorization Header together with each request and it's fully supported by any browser (meaning that we will be able to use Graphiql simply by proving username and password in the login window provided by the browser itself). It's the most simple auth mechanism but it's completely fine for our needs. Later we could decide to use something more complicated like JWT, but it's outside of the scope of this tutorial.\n+\n+We will connect the auth logic to our Express app within the auth GQLModule. Indeed, GQLModules can also be used to apply logic which is not directly related to GraphQL. This method is excellent because it ensures that our GraphQL resolvers will be set with the right infrastructure right out of the box and we can safely reuse the module:\n+\n+{{{ diffStep 2.1 module=\"server\" files=\"app, modules/auth\" }}}\n+\n+We are going to store hashes instead of plain passwords, that's why we're using `bcrypt-nodejs`. With `passport.use('basic-signin')` and `passport.use('basic-signup')` we define how the auth framework deals with our database. `app.post('/signup')` is the endpoint for creating new accounts, so we left it out of the authentication middleware (`app.use(passport.authenticate('basic-signin')`).\n+\n+We will also add an additional query called `me` which will simply return the user which is currently logged in. This will come in handy in the client:\n+\n+{{{ diffStep 2.1 module=\"server\" files=\"modules/user\" }}}\n+\n+### Client authentication\n+\n+To make things more convenient, we will create a dedicated authentication service under a separate module called `auth.service.tsx`. The auth service will take care of:\n+\n+- Performing sign-in/sign-up against the server.\n+- Storing received auth token in local storage.\n+- Providing a wrapper around guarded routes that require authorization.\n+\n+{{{ diffStep 2.1 module=\"client\" files=\"src/services, src/graphql\" }}}\n+\n+The service also includes a `useMe()` GraphQL hook that will fetch the current user. Its definition is separate since it's used vastly and shared between many components.\n+\n+Since we're using token oriented authentication, it means that any time we make a request to our GraphQL back-end we would need to authorize ourselves by sending this token. This can easily be done thanks to Apollo. By setting the client correctly we can automatically set the headers and parameters for each request that is being done.\n+\n+{{{ diffStep 2.1 module=\"client\" files=\"src/apollo-client.ts\" }}}\n+\n+This would require us to install a package called `apollo-link-context`:\n+\n+    $ yarn add apollo-link-context@1.0.12\n+\n+Now that we have that mechanism implemented we need a way to access it. For that purpose we will be implementing a sign-in form and a sign-up form. Once we create a user and sign-in we will be promoted to the main chats list screen.\n+\n+{{{ diffStep 2.2 module=\"client\" files=\"src/components/AuthScreen\" }}}\n+\n+If you'll look at the main AuthScreen component you'll see that we use a router to alternate between the sign-in and the sign-up forms. That's the meaning behind a Switch component. However, you can also notice that we use an AnimatedSwitch. As it sounds, this component will ensure that transition between routes is animated. This upgrade our UX in the app, and it is also designated to be used across other routes. If so, let's implement it. First we will need to install a package called `react-router-transition`:\n+\n+    $ yarn add react-router-transition@1.2.1\n+\n+This will enable the transition between the routes. However, we will need to specify the characteristics of the transition, so, let's implement our own version of AnimatedSwitch:\n+\n+{{{ diffStep 2.2 module=\"client\" files=\"src/components/AnimatedSwitch\" }}}\n+\n+As shown in the screenshot at the top of this page, the auth screen includes few assets that we should download: a background picture and a logo. Please download the assets below and save them in the `public/assets` directory as `chat-background.jpg` and `whatsapp-icon.jpg` respectively:\n+\n+![chat-background.jpg](https://user-images.githubusercontent.com/7648874/51983290-3f49a080-24d3-11e9-9de9-cf57354d1e3a.jpg)\n+\n+![whatsapp-icon.jpg](https://user-images.githubusercontent.com/7648874/52662552-768e6780-2f3f-11e9-931c-36a5c13ca49b.png)\n+\n+So following that, we would need to define a router that will handle changes in routes. We will be using `react-router-dom`:\n+\n+    $ yarn add react-router-dom@4.3.1\n+\n+Now that we have it let's define our routes. Note how we take advantage of the `withAuth()` method to guard our routes and make them available only to users who are authorized:\n+\n+{{{ diffStep 2.3 module=\"client\" files=\"src/App\" }}}\n+\n+Since in our auth service we basically check if the user is logged in by actually querying the server with a React hook, we will need to use a Suspense component that will catch the pending request.\n+\n+{{{ diffStep 2.3 module=\"client\" files=\"src/index\" }}}\n+\n+> It's highly recommended to go through the [docs of Suspense](https://reactjs.org/docs/react-api.html#reactsuspense) before you proceed if you're not familiar with it.\n+\n+Perfect. Now we can sign-in and sign-up, and we can view chats which belong to us. Now we're gonna implement the settings screen, where we will be able to set our profile details, such as name and picture. Let's keep the image uploading thing for a bit later, we will focus on the component itself first. The settings screen layout includes:\n+\n+- A navbar.\n+- A form with inputs.\n+\n+Accordingly, the implementation of the screen should look like so:\n+\n+{{{ diffStep 2.4 module=\"client\" files=\"src/components\" }}}\n+\n+The `optimisticResponse` object is used to predict the response so we can have it immediately and the `update` callback is used to update the cache. Anytime we receive a response from our GraphQL back-end we should update the cache, otherwise the data presented in our app will be out-dated.\n+\n+The user should be updated on 2 scenarios: Either we loose focus on the name input or we upload a new image. We used the [`useEffect`](https://reactjs.org/docs/hooks-effect.html) to determine changes in the profile picture URL and trigger an update.\n+\n+We will need to update our back-end to have an `updateUser` mutation:\n+\n+{{{ diffStep 2.2 module=\"server\" files=\"modules/user\" }}}\n+\n+Remember that a user could be correlated to a chat, for example, if a user changes its information such as name or picture, the chat informationshould be changed as well. This means that we will need to listen to changes with a [subscription](https://www.apollographql.com/docs/react/advanced/subscriptions.html) and update our cache accordingly.\n+\n+Since `react-apollo-hooks` doesn't have a built-in `useSubscription()` hook as for version `0.3.1`, we will implement a polyfill that will do exactly that. First we will ad a utility package:\n+\n+    $ yarn add react-fast-compare@2.0.4\n+\n+And then we will implement the `useSubscription()` hook:\n+\n+{{{ diffStep 2.5 module=\"client\" files=\"src/polyfills\" }}}\n+\n+Then we will define the subscription document and listen to it in a dedicated service called `cache.service`, which is responsible for updating the cache:\n+\n+{{{ diffStep 2.5 module=\"client\" files=\"src/graphql, src/services/cache\" }}}\n+\n+We should listen to subscriptions only once we're logged-in, therefore let's use the `useSubscriptions()` hook that we've just created in the `auth.service`:\n+\n+{{{ diffStep 2.5 module=\"client\" files=\"src/services/auth\" }}}\n+\n+Now we will have to implement the subscription in our server. GraphQL subscriptions are a way to push data from the server to the clients that choose to listen to real time messages from the server. To trigger a subscription event we will use a method called `publish` which is used by a class called `PubSub`. Pubsub sits between your application's logic and the GraphQL subscriptions engine - it receives a publish command from your app logic and pushes it to your GraphQL execution engine. This is how it should look like in code, in relation to `chatUpdated` subscription:\n+\n+{{{ diffStep 2.3 module=\"server\" }}}\n+\n+> See [official Apollo subscription docs page](https://www.apollographql.com/docs/apollo-server/features/subscriptions.html).\n+\n+Note that we've added a second `updateUser()` resolver in addition to the one which already exists in the `user` module. Reason being is because we want to keep the `user` module independent from the `chat` module, and so we apply logic on top of the existing one. GQLModule's engine will execute the resolvers in the right order based on the injected dependencies tree, so you shouldn't worry much about execution.\n+\n+I'd like to get back to the image uploading feature. Although it can be implemented manually, we will be using an external service for storing images. This is much more convenient: it will save us a lot of implementation, it's probably more secure, and it has built-in features such as transformation and projection.\n+\n+We will be using [Cloudinary](https://cloudinary.com/) as our storage service. A Cloudinary instance should be set for each application separately, but for the sake of demonstration we will use an instance that we set up for the public, but just know **that you should never reveal the credentials of any service that you set up**.\n+\n+First of all be sure to open an account and setup your basic app information in Cloudinary.\n+\n+Then, add a new preset called `profile-pic` where we will be resettings uploaded images' dimensions to 300px by 300px. More information on how to do that can be found in [here](https://support.cloudinary.com/hc/en-us/articles/360004967272-Upload-Preset-Configuration).\n+\n+![upload-picture-settings](https://user-images.githubusercontent.com/7648874/51096173-a984f480-17f5-11e9-893f-5227e2c564af.jpg)\n+\n+Up next, we will implement the appropriate route in our app's server. The reason we don't upload the image directly to the cloud service directly from our application is because **we risk exposing some sensitive data regards the service and some users may abuse it**. We will start by installing the right packages:\n+\n+    $ yarn add tmp@0.0.33 multer@1.4.1 cloudinary@1.13.2\n+    $ yarn add -D @types/tmp@0.0.33 @types/multer1.3.7\n+\n+We will also write custom TypeScript definitions for the `cloudinary` package since they don't exist:\n+\n+{{{ diffStep 2.4 module=\"server\" files=\"cloudinary.d.ts\" }}}\n+\n+Then we will set the right API keys in the `.env` file:\n+\n+{{{ diffStep 2.4 module=\"server\" files=\".env\" }}}\n+\n+The purpose of the `.env` file is to load environment variables into our app in a more comfortable way. For that to apply we will need to install and require a package which is called [`dotenv`](https://www.npmjs.com/package/dotenv).\n+\n+    $ yarn add dotenv@6.2.0\n+\n+{{{ diffStep 2.4 module=\"server\" files=\"index\" }}}\n+\n+> See [Cloudinary's NodeJS API](https://cloudinary.com/documentation/node_integration).\n+> See [API setup](https://cloudinary.com/documentation/solution_overview#account_and_api_setup).\n+\n+And finally, we will implement a REST endpoint in the `user` module under `/upload-profile-pic`:\n+\n+{{{ diffStep 2.4 module=\"server\" files=\"modules/user\" }}}\n+\n+Now getting back to the client, we will implement a `picture.service` that will be responsible for uploading images in our application:\n+\n+{{{ diffStep 2.6 module=\"client\" files=\"src/services/picture\" }}}\n+\n+And we will use it in the settings screen:\n+\n+{{{ diffStep 2.6 module=\"client\" files=\"src/components\" }}}\n+\n+The settings component is complete! We will connect it to the main flow by implementing the pop-over menu at the top right corner of the main screen where we will be able to navigate to the settings screen and sign-out:\n+\n+{{{ diffStep 2.7 module=\"client\" }}}\ndiff --git a/.tortilla/manuals/templates/step3.tmpl b/.tortilla/manuals/templates/step3.tmpl\nnew file mode 100644\nindex 0000000..c92715f\n--- /dev/null\n+++ b/.tortilla/manuals/templates/step3.tmpl\n@@ -0,0 +1,100 @@\n+![chats](https://user-images.githubusercontent.com/7648874/52663040-aa1dc180-2f40-11e9-9ae4-bda648916bc4.png)\n+\n+In this step we will be implementing a basic chat app. We will be able to:\n+\n+- Create chats.\n+- Remove chats.\n+- Send messages.\n+\n+The flow is gonna go like this:\n+\n+- A chat can be created by picking a user from the users list.\n+- When clicking on a chat, we will be promoted to a chat room.\n+- The chat room will have a pop-over menu where we will be able to remove the chat.\n+\n+We will start by adding a new entity called `Recipient`. The `Recipient` entity is the bridge between the `User` and the `Message` and it will tell us when the message was received and when it was read. Note that a message holds multiple recipients - this way we can extend its functionality to support group messaging where each message can have more than 2 recipients. Accordingly, we will have to make few adjustments to the existing entities:\n+\n+{{{ diffStep 3.1 module=\"server\" }}}\n+\n+The flow will require us to implement the following GraphQL operations:\n+\n+- `users` query - Will be used to create a chat by picking a user from the users list.\n+- `addMessage` mutation\n+- `addChat` mutation\n+- `removeChat` mutation\n+\n+Accordingly we will define the operations in our schema and implement their resolvers:\n+\n+{{{ diffStep 3.2 module=\"server\" }}}\n+\n+Remember that every change that happens in the back-end should trigger a subscription that will notify all the use regards that change. For the current flow, we should have the following subscriptions:\n+\n+- `messageAdded` subscription\n+- `userAdded` subscription\n+- `userUpdated` subscription - Since we will be able to create a new chat by picking from a users list, this list needs to be synced with the most recent changes.\n+\n+Let's implement these subscriptions:\n+\n+{{{ diffStep 3.3 module=\"server\" }}}\n+\n+Now that we have that ready, we will get back to the client and implement the necessary components. We will start with the chat room screen. The layout consists of the following component:\n+\n+- A navbar - Includes the name and a picture of the person we're chatting with, a \"back\" button to navigate back to the main screen, and a pop-over menu where we can remove the chat from.\n+- A messages list - The list of messages that were sent and received in the chat. This will be a scrollable view where message bubbles are colored differently based on who they belong to. Just like WhatsApp!\n+- A message box - The input that will be used to write the new message. This will include a \"send\" button right next to it.\n+\n+Let's implement the components\n+\n+{{{ diffStep 3.1 module=\"client\" files=\"src/components/ChatRoomScreen\" }}}\n+\n+We're introduced to new 2 packages in the implementation above:\n+\n+- [`uniqid`](https://www.npmjs.com/package/uniqid) - Used to generate a unique ID in our optimistic response.\n+- [`styled-components`](https://www.npmjs.com/package/styled-components) - Used to create encapsulated style for React components.\n+\n+Let's install them then:\n+\n+    $ yarn add uniqid@5.0.3 styled-components@4.1.3\n+\n+You'll notice that there's a new fragment called `fullChat`. The full chat includes the base chat details, plus a list of messages that we're gonna view in the chat room screen. Let's define the fragment then:\n+\n+{{{ diffStep 3.1 module=\"client\" files=\"src/graphql/fragments\" }}}\n+\n+At this point the chat room should be functional. Let's add a dedicated route for it and make it navigatable by clicking on a chat item from the chats list screen:\n+\n+{{{ diffStep 3.1 module=\"client\" files=\"src/App, src/components/ChatsListScreen\" }}}\n+\n+Like we said in the previous step, everything in our application is connected and so whenever there's a mutation or a change in data we should update the cache. Let's define the right subscriptions and update our `cache.service`:\n+\n+{{{ diffStep 3.1 module=\"client\" files=\"src/graphql/subscriptions, src/services/cache\" }}}\n+\n+We've already implemented all the necessary subscription handlers in the server in the beginning of this step, so things should work smoothly.\n+\n+Now we're gonna implement a users list component where we will be able to pick users and chat with them. The users list component is gonna be global to the rest of the components because we will be using it in other screens in the upcoming steps.\n+\n+{{{ diffStep 3.2 module=\"client\" files=\"src/components/UsersList\" }}}\n+\n+Now let's implement the new chat screen:\n+\n+{{{ diffStep 3.2 module=\"client\" files=\"src/components/NewChatScreen\" }}}\n+\n+And implement a dedicated route for it:\n+\n+{{{ diffStep 3.2 module=\"client\" files=\"src/App\" }}}\n+\n+We will also add a button which will redirect us right to the new chat screen:\n+\n+{{{ diffStep 3.2 module=\"client\" files=\"src/components/ChatsListScreen\" }}}\n+\n+Again, we will need to define the right subscriptions and update the cache accordingly:\n+\n+{{{ diffStep 3.2 module=\"client\" files=\"src/graphql/queries, src/graphql/subscriptions, src/services/cache\" }}}\n+\n+Now we have a real, functional chat app! Where we have a complete flow of:\n+\n+- Signing in/up.\n+- Editing profile.\n+- Creating and removing chats.\n+- Sending messages.\n+\n+In the next step we will to something slightly more complex and extend the current functionality by adding a group chatting feature where we will be able to communicate with multiple users in a single chat room.\ndiff --git a/.tortilla/manuals/templates/step4.tmpl b/.tortilla/manuals/templates/step4.tmpl\nnew file mode 100644\nindex 0000000..e8ad2b8\n--- /dev/null\n+++ b/.tortilla/manuals/templates/step4.tmpl\n@@ -0,0 +1,69 @@\n+Group messaging can be quite tricky and so I would like to explain the hierarchy between the entities. `Chat` will have the following fields:\n+\n+- `Chat.actualGroupMembers` - The current users who are currently participating in the group. Once a message was sent by someone in the group, all the members under `actualGroupMembers` will be notified with the target message.\n+\n+- `Chat.listingMembers` - The current users which have the chat listed in their view. Any user who will be kicked out of the group will not only be absent from `Chat.actualGroupMembers`, but it will also be spliced from `Chat.listingMembers`, as its existence in the chat is correlated to what it can currently view.\n+\n+- `Chat.admins` - The users who currently control the group; they will have permissions to add and remove users from the group, and change its name and picture.\n+\n+Together we can have a complete flow where users can chat with each-other in a group. In this step we will add a group-details screen, where we will be able to see the participants of the group, and we will use the existing users list component to select users that we would like to participate in our group chat. The back-end should include a new mutation called `addGroup()` that will help use create chat group.\n+\n+So before we proceed to the front-end, let's take care of the back-end. We will add the missing fields to the Chat entity, and make the necessary adjustments in existing resolvers:\n+\n+{{{ diffStep 4.1 module=\"server\" }}}\n+\n+Now we will add 2 new mutations:\n+\n+- `addGroup` mutation - Responsible for creating chat groups.\n+- `updateChat` mutation - Unlike a single chat which is synced with a user's info, a group chat will be independent, therefore we will need a method that could updated its fields.\n+\n+Let's implement those:\n+\n+{{{ diffStep 4.2 module=\"server\" }}}\n+\n+Now that the back-end is set, we will need to update the chat fragment in the client to contain the new field `isGroup`:\n+\n+{{{ diffStep 4.1 module=\"client\" }}}\n+\n+Now we will create the new-group screen. Like the new-chat screen, it will have an almost identical layout, only the behavior is gonna be slightly different. In the new screen we will be able to select multiple users before we proceed, then, we should be able to view the group details and edit them before we create the group. Let's implement the new-group screen:\n+\n+{{{ diffStep 4.2 module=\"client\" files=\"src/components/NewGroupScreen\" }}}\n+\n+Now we will add a dedicated route, and we will also create a \"New Group\" button which will be presented in the new chat screen. This way we can create a new group from the new chat screen if we want to, by simply clicking on that button and moving on to the new group screen.\n+\n+{{{ diffStep 4.2 module=\"client\" files=\"src/App, src/components/NewChatScreen\" }}}\n+\n+Up-next would be the group details screen. The layout consists of:\n+\n+- A navbar with a back button.\n+- Picture and name inputs.\n+- A horizontal list of all the participants.\n+- A \"complete\" button that will send a mutation request to the server.\n+\n+Once a name has been typed, the \"complete\" button should pop-up. Let's implement the screen then:\n+\n+{{{ diffStep 4.3 module=\"client\" files=\"src/components/GroupDetailsScreen\" }}}\n+\n+This will require us to download a new asset to the `public/assets` directory which represents the default picture for a group. Please save it as `default-group-pic.jpg`:\n+\n+![default-group-pic.jpg](https://user-images.githubusercontent.com/7648874/51983284-3b1d8300-24d3-11e9-9f8b-afe36a3b9df1.jpg)\n+\n+Let's add a route for the screen we've just created:\n+\n+{{{ diffStep 4.3 module=\"client\" files=\"src/App\" }}}\n+\n+There's one last thing missing in the flow and that would be migrating existing components to work well with the new feature of group chats.\n+\n+Starting with the chats list component, we would like to display the default profile picture for group chats:\n+\n+{{{ diffStep 4.4 module=\"client\" files=\"src/components/ChatsListScreen\" }}}\n+\n+In the messages list component, we would like to display the name of the owner of the message, so we would know exactly who sent it in case we're in a group chat:\n+\n+{{{ diffStep 4.4 module=\"client\" files=\"src/components/ChatRoomScreen/MessagesList\" }}}\n+\n+And now what we're gonna do is basically use the group details screen to show the details of the group that we're currently at. If we're an admin of the group, we would be able to edit its details, and if not, we will only be able to view its details without changing any of it. The view and some of the logic are the same whether it's a new group or an existing one, but there are slight differences. To deal with the differences, we will use \"if\" statements before we use the hooks, but **beware whenever you do that!** If you'll use an expression that is likely to change during the component's lifespan, you should NOT use a hook inside the \"if\" statement's block, because the React engine relies on the hooks to be called in a similar order.\n+\n+{{{ diffStep 4.3 module=\"client\" files=\"src/components/ChatRoomScreen/ChatNavBar, src/components/GroupDetailsScreen\" }}}\n+\n+That's it! Now we should be able to create group chats and message multiple people at once.\ndiff --git a/client/.env b/client/.env\nnew file mode 100644\nindex 0000000..9321fd6\n--- /dev/null\n+++ b/client/.env\n@@ -0,0 +1 @@\n+REACT_APP_SERVER_URL=http://localhost:4000\ndiff --git a/client/.gitignore b/client/.gitignore\nnew file mode 100644\nindex 0000000..5171c54\n--- /dev/null\n+++ b/client/.gitignore\n@@ -0,0 +1,2 @@\n+node_modules\n+npm-debug.log\n\\ No newline at end of file\ndiff --git a/client/LICENSE b/client/LICENSE\nnew file mode 100644\nindex 0000000..ca7f5e8\n--- /dev/null\n+++ b/client/LICENSE\n@@ -0,0 +1,21 @@\n+The MIT License (MIT)\n+\n+Copyright (c) 2019 Uri Goldshtein\n+\n+Permission is hereby granted, free of charge, to any person obtaining a copy\n+of this software and associated documentation files (the \"Software\"), to deal\n+in the Software without restriction, including without limitation the rights\n+to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+copies of the Software, and to permit persons to whom the Software is\n+furnished to do so, subject to the following conditions:\n+\n+The above copyright notice and this permission notice shall be included in all\n+copies or substantial portions of the Software.\n+\n+THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+SOFTWARE.\ndiff --git a/client/codegen-interpreter.ts b/client/codegen-interpreter.ts\nnew file mode 100644\nindex 0000000..ee27c4c\n--- /dev/null\n+++ b/client/codegen-interpreter.ts\n@@ -0,0 +1,6 @@\n+require('ts-node').register({\n+  transpileOnly: true,\n+  compilerOptions: {\n+    module: 'commonjs'\n+  }\n+})\ndiff --git a/client/codegen.yml b/client/codegen.yml\nnew file mode 100644\nindex 0000000..b40c715\n--- /dev/null\n+++ b/client/codegen.yml\n@@ -0,0 +1,12 @@\n+schema: ../WhatsApp-Clone-Server/schema/typeDefs.ts\n+documents:\n+  - ./src/**/*.tsx\n+  - ./src/**/*.ts\n+overwrite: true\n+require:\n+  - ts-node/../../codegen-interpreter.ts\n+generates:\n+  ./src/graphql/types.ts:\n+    plugins:\n+      - typescript-common\n+      - typescript-client\ndiff --git a/client/package.json b/client/package.json\nnew file mode 100644\nindex 0000000..35a56dd\n--- /dev/null\n+++ b/client/package.json\n@@ -0,0 +1,61 @@\n+{\n+  \"name\": \"whatsapp-clone-client\",\n+  \"version\": \"0.1.0\",\n+  \"private\": true,\n+  \"repository\": {\n+    \"type\": \"git\",\n+    \"url\": \"https://Urigo@github.com/Urigo/WhatsApp-Clone-Client-React.git\"\n+  },\n+  \"dependencies\": {\n+    \"@material-ui/core\": \"3.9.0\",\n+    \"@material-ui/icons\": \"3.0.2\",\n+    \"@types/moment\": \"^2.13.0\",\n+    \"apollo-cache-inmemory\": \"1.4.2\",\n+    \"apollo-client\": \"2.4.12\",\n+    \"apollo-link\": \"1.2.6\",\n+    \"apollo-link-context\": \"1.0.12\",\n+    \"apollo-link-http\": \"1.5.9\",\n+    \"apollo-link-ws\": \"1.0.12\",\n+    \"apollo-utilities\": \"1.1.2\",\n+    \"graphql\": \"14.1.1\",\n+    \"graphql-tag\": \"^2.10.1\",\n+    \"moment\": \"^2.23.0\",\n+    \"react\": \"16.8.0-alpha.1\",\n+    \"react-apollo-hooks\": \"0.3.1\",\n+    \"react-dom\": \"16.8.0-alpha.1\",\n+    \"react-fast-compare\": \"2.0.4\",\n+    \"react-router-dom\": \"4.3.1\",\n+    \"react-router-transition\": \"1.2.1\",\n+    \"react-scripts\": \"2.1.3\",\n+    \"subscriptions-transport-ws\": \"0.9.15\",\n+    \"styled-components\": \"4.1.3\",\n+    \"uniqid\": \"5.0.3\"\n+  },\n+  \"devDependencies\": {\n+    \"@types/graphql\": \"14.0.5\",\n+    \"@types/node\": \"10.12.18\",\n+    \"concurrently\": \"4.1.0\",\n+    \"graphql-code-generator\": \"0.16.0\",\n+    \"graphql-codegen-typescript-client\": \"0.16.0\",\n+    \"graphql-codegen-typescript-common\": \"0.16.0\",\n+    \"nodemon\": \"1.18.9\",\n+    \"ts-node\": \"7.0.1\"\n+  },\n+  \"scripts\": {\n+    \"start\": \"concurrently \\\"yarn generate:watch\\\" \\\"react-scripts start\\\"\",\n+    \"build\": \"react-scripts build\",\n+    \"test\": \"react-scripts test\",\n+    \"eject\": \"react-scripts eject\",\n+    \"generate\": \"gql-gen\",\n+    \"generate:watch\": \"nodemon --exec yarn generate -e graphql\"\n+  },\n+  \"eslintConfig\": {\n+    \"extends\": \"react-app\"\n+  },\n+  \"browserslist\": [\n+    \">0.2%\",\n+    \"not dead\",\n+    \"not ie <= 11\",\n+    \"not op_mini all\"\n+  ]\n+}\ndiff --git a/client/public/assets/chat-background.jpg b/client/public/assets/chat-background.jpg\nnew file mode 100644\nindex 0000000..12cf45c\nBinary files /dev/null and b/client/public/assets/chat-background.jpg differ\ndiff --git a/client/public/assets/default-group-pic.jpg b/client/public/assets/default-group-pic.jpg\nnew file mode 100644\nindex 0000000..ea2b844\nBinary files /dev/null and b/client/public/assets/default-group-pic.jpg differ\ndiff --git a/client/public/assets/default-profile-pic.jpg b/client/public/assets/default-profile-pic.jpg\nnew file mode 100644\nindex 0000000..d73721b\nBinary files /dev/null and b/client/public/assets/default-profile-pic.jpg differ\ndiff --git a/client/public/assets/whatsapp-icon.png b/client/public/assets/whatsapp-icon.png\nnew file mode 100644\nindex 0000000..ef4c897\nBinary files /dev/null and b/client/public/assets/whatsapp-icon.png differ\ndiff --git a/client/public/favicon.ico b/client/public/favicon.ico\nnew file mode 100755\nindex 0000000..a11777c\nBinary files /dev/null and b/client/public/favicon.ico differ\ndiff --git a/client/public/index.html b/client/public/index.html\nnew file mode 100755\nindex 0000000..323182f\n--- /dev/null\n+++ b/client/public/index.html\n@@ -0,0 +1,41 @@\n+<!DOCTYPE html>\n+<html lang=\"en\">\n+  <head>\n+    <meta charset=\"utf-8\" />\n+    <link rel=\"shortcut icon\" href=\"%PUBLIC_URL%/favicon.ico\" />\n+    <meta\n+      name=\"viewport\"\n+      content=\"width=device-width, initial-scale=1, shrink-to-fit=no\"\n+    />\n+    <meta name=\"theme-color\" content=\"#000000\" />\n+    <!--\n+      manifest.json provides metadata used when your web app is added to the\n+      homescreen on Android. See https://developers.google.com/web/fundamentals/web-app-manifest/\n+    -->\n+    <link rel=\"manifest\" href=\"%PUBLIC_URL%/manifest.json\" />\n+    <!--\n+      Notice the use of %PUBLIC_URL% in the tags above.\n+      It will be replaced with the URL of the `public` folder during the build.\n+      Only files inside the `public` folder can be referenced from the HTML.\n+\n+      Unlike \"/favicon.ico\" or \"favicon.ico\", \"%PUBLIC_URL%/favicon.ico\" will\n+      work correctly both with client-side routing and a non-root public URL.\n+      Learn how to configure a non-root public URL by running `npm run build`.\n+    -->\n+    <title>React App</title>\n+  </head>\n+  <body>\n+    <noscript>You need to enable JavaScript to run this app.</noscript>\n+    <div id=\"root\"></div>\n+    <!--\n+      This HTML file is a template.\n+      If you open it directly in the browser, you will see an empty page.\n+\n+      You can add webfonts, meta tags, or analytics to this file.\n+      The build step will place the bundled scripts into the <body> tag.\n+\n+      To begin the development, run `npm start` or `yarn start`.\n+      To create a production bundle, use `npm run build` or `yarn build`.\n+    -->\n+  </body>\n+</html>\ndiff --git a/client/public/manifest.json b/client/public/manifest.json\nnew file mode 100755\nindex 0000000..1f2f141\n--- /dev/null\n+++ b/client/public/manifest.json\n@@ -0,0 +1,15 @@\n+{\n+  \"short_name\": \"React App\",\n+  \"name\": \"Create React App Sample\",\n+  \"icons\": [\n+    {\n+      \"src\": \"favicon.ico\",\n+      \"sizes\": \"64x64 32x32 24x24 16x16\",\n+      \"type\": \"image/x-icon\"\n+    }\n+  ],\n+  \"start_url\": \".\",\n+  \"display\": \"standalone\",\n+  \"theme_color\": \"#000000\",\n+  \"background_color\": \"#ffffff\"\n+}\ndiff --git a/client/src/App.css b/client/src/App.css\nnew file mode 100755\nindex 0000000..92f956e\n--- /dev/null\n+++ b/client/src/App.css\n@@ -0,0 +1,32 @@\n+.App {\n+  text-align: center;\n+}\n+\n+.App-logo {\n+  animation: App-logo-spin infinite 20s linear;\n+  height: 40vmin;\n+}\n+\n+.App-header {\n+  background-color: #282c34;\n+  min-height: 100vh;\n+  display: flex;\n+  flex-direction: column;\n+  align-items: center;\n+  justify-content: center;\n+  font-size: calc(10px + 2vmin);\n+  color: white;\n+}\n+\n+.App-link {\n+  color: #61dafb;\n+}\n+\n+@keyframes App-logo-spin {\n+  from {\n+    transform: rotate(0deg);\n+  }\n+  to {\n+    transform: rotate(360deg);\n+  }\n+}\ndiff --git a/client/src/App.test.tsx b/client/src/App.test.tsx\nnew file mode 100755\nindex 0000000..a754b20\n--- /dev/null\n+++ b/client/src/App.test.tsx\n@@ -0,0 +1,9 @@\n+import React from 'react';\n+import ReactDOM from 'react-dom';\n+import App from './App';\n+\n+it('renders without crashing', () => {\n+  const div = document.createElement('div');\n+  ReactDOM.render(<App />, div);\n+  ReactDOM.unmountComponentAtNode(div);\n+});\ndiff --git a/client/src/App.tsx b/client/src/App.tsx\nnew file mode 100755\nindex 0000000..964d761\n--- /dev/null\n+++ b/client/src/App.tsx\n@@ -0,0 +1,31 @@\n+import * as React from 'react'\n+import { BrowserRouter, Route, Redirect } from 'react-router-dom'\n+import ChatRoomScreen from './components/ChatRoomScreen'\n+import NewChatScreen from './components/NewChatScreen'\n+import AnimatedSwitch from './components/AnimatedSwitch'\n+import AuthScreen from './components/AuthScreen'\n+import ChatsListScreen from './components/ChatsListScreen'\n+import GroupDetailsScreen from './components/GroupDetailsScreen'\n+import SettingsScreen from './components/SettingsScreen'\n+import NewGroupScreen from './components/NewGroupScreen'\n+import { withAuth } from './services/auth.service'\n+\n+const RedirectToChats = () => (\n+  <Redirect to=\"/chats\" />\n+)\n+\n+export default () => (\n+  <BrowserRouter>\n+    <AnimatedSwitch>\n+      <Route exact path=\"/sign-(in|up)\" component={AuthScreen} />\n+      <Route exact path=\"/chats\" component={withAuth(ChatsListScreen)} />\n+      <Route exact path=\"/settings\" component={withAuth(SettingsScreen)} />\n+      <Route exact path=\"/chats/:chatId\" component={withAuth(ChatRoomScreen)} />\n+      <Route exact path=\"/new-chat\" component={withAuth(NewChatScreen)} />\n+      <Route exact path=\"/new-chat/group\" component={withAuth(NewGroupScreen)} />\n+      <Route exact path=\"/new-chat/group/details\" component={withAuth(GroupDetailsScreen)} />\n+      <Route exact path=\"/chats/:chatId/details\" component={withAuth(GroupDetailsScreen)} />\n+      <Route component={RedirectToChats} />\n+    </AnimatedSwitch>\n+  </BrowserRouter>\n+)\ndiff --git a/client/src/apollo-client.ts b/client/src/apollo-client.ts\nnew file mode 100644\nindex 0000000..b9fbab1\n--- /dev/null\n+++ b/client/src/apollo-client.ts\n@@ -0,0 +1,54 @@\n+import { InMemoryCache } from 'apollo-cache-inmemory'\n+import { ApolloClient } from 'apollo-client'\n+import { ApolloLink, split } from 'apollo-link'\n+import { setContext } from 'apollo-link-context'\n+import { HttpLink } from 'apollo-link-http'\n+import { WebSocketLink } from 'apollo-link-ws'\n+import { getMainDefinition } from 'apollo-utilities'\n+import { OperationDefinitionNode } from 'graphql'\n+import { getAuthHeader } from './services/auth.service'\n+\n+const httpUri = process.env.REACT_APP_SERVER_URL + '/graphql'\n+const wsUri = httpUri.replace(/^https?/, 'ws')\n+\n+const httpLink = new HttpLink({\n+  uri: httpUri,\n+})\n+\n+const wsLink = new WebSocketLink({\n+  uri: wsUri,\n+  options: {\n+    reconnect: true,\n+    connectionParams: () => ({\n+      authToken: getAuthHeader(),\n+    }),\n+  },\n+})\n+\n+const authLink = setContext((_, { headers }) => {\n+  const auth = getAuthHeader()\n+\n+  return {\n+    headers: {\n+      ...headers,\n+      Authorization: auth,\n+    },\n+  }\n+})\n+\n+const terminatingLink = split(\n+  ({ query }) => {\n+    const { kind, operation } = getMainDefinition(query) as OperationDefinitionNode\n+    return kind === 'OperationDefinition' && operation === 'subscription'\n+  },\n+  wsLink,\n+  authLink.concat(httpLink),\n+)\n+\n+const link = ApolloLink.from([terminatingLink])\n+const cache = new InMemoryCache()\n+\n+export default new ApolloClient({\n+  link,\n+  cache,\n+})\ndiff --git a/client/src/components/AnimatedSwitch.tsx b/client/src/components/AnimatedSwitch.tsx\nnew file mode 100644\nindex 0000000..a7522ab\n--- /dev/null\n+++ b/client/src/components/AnimatedSwitch.tsx\n@@ -0,0 +1,30 @@\n+import styled from 'styled-components'\n+import { AnimatedSwitch, spring } from 'react-router-transition'\n+\n+const glide = val =>\n+  spring(val, {\n+    stiffness: 174,\n+    damping: 24,\n+  })\n+\n+const mapStyles = styles => ({\n+  transform: `translateX(${styles.offset}%)`,\n+})\n+\n+export default styled(AnimatedSwitch).attrs(() => ({\n+  atEnter: { offset: 100 },\n+  atLeave: { offset: glide(-100) },\n+  atActive: { offset: glide(0) },\n+  mapStyles,\n+}))`\n+  position: relative;\n+  overflow: hidden;\n+  width: 100%;\n+  height: 100%;\n+  > div {\n+    position: absolute;\n+    overflow: hidden;\n+    width: 100%;\n+    height: 100%;\n+  }\n+`\ndiff --git a/client/src/components/AuthScreen/SignInForm.tsx b/client/src/components/AuthScreen/SignInForm.tsx\nnew file mode 100644\nindex 0000000..4f8ef5c\n--- /dev/null\n+++ b/client/src/components/AuthScreen/SignInForm.tsx\n@@ -0,0 +1,84 @@\n+import Button from '@material-ui/core/Button'\n+import TextField from '@material-ui/core/TextField'\n+import { History } from 'history'\n+import * as React from 'react'\n+import { useState } from 'react'\n+import { signIn } from '../../services/auth.service'\n+\n+interface SignInFormProps {\n+  history: History\n+}\n+\n+export default ({ history }: SignInFormProps) => {\n+  const [username, setUsername] = useState('')\n+  const [password, setPassword] = useState('')\n+  const [error, setError] = useState('')\n+\n+  const onUsernameChange = ({ target }) => {\n+    setError('')\n+    setUsername(target.value)\n+  }\n+\n+  const onPasswordChange = ({ target }) => {\n+    setError('')\n+    setPassword(target.value)\n+  }\n+\n+  const maySignIn = () => {\n+    return !!(username && password)\n+  }\n+\n+  const handleSignIn = () => {\n+    signIn({ username, password })\n+      .then(() => {\n+        history.push('/chats')\n+      })\n+      .catch(error => {\n+        setError(error.message || error)\n+      })\n+  }\n+\n+  const handleSignUp = () => {\n+    history.push('/sign-up')\n+  }\n+\n+  return (\n+    <div className=\"SignInForm Screen\">\n+      <form>\n+        <legend>Sign in</legend>\n+        <div style={{ width: '100%' }}>\n+          <TextField\n+            className=\"AuthScreen-text-field\"\n+            label=\"Username\"\n+            value={username}\n+            onChange={onUsernameChange}\n+            margin=\"normal\"\n+            placeholder=\"Enter your username\"\n+          />\n+          <TextField\n+            className=\"AuthScreen-text-field\"\n+            label=\"Password\"\n+            type=\"password\"\n+            value={password}\n+            onChange={onPasswordChange}\n+            margin=\"normal\"\n+            placeholder=\"Enter your password\"\n+          />\n+        </div>\n+        <Button\n+          type=\"button\"\n+          color=\"secondary\"\n+          variant=\"contained\"\n+          disabled={!maySignIn()}\n+          onClick={handleSignIn}\n+        >\n+          Sign in\n+        </Button>\n+        <div className=\"AuthScreen-error\">{error}</div>\n+        <span className=\"AuthScreen-alternative\">\n+          Don't have an account yet? <a onClick={handleSignUp}>Sign up!</a>\n+        </span>\n+      </form>\n+    </div>\n+  )\n+}\ndiff --git a/client/src/components/AuthScreen/SignUpForm.tsx b/client/src/components/AuthScreen/SignUpForm.tsx\nnew file mode 100644\nindex 0000000..b486bbc\n--- /dev/null\n+++ b/client/src/components/AuthScreen/SignUpForm.tsx\n@@ -0,0 +1,127 @@\n+import Button from '@material-ui/core/Button'\n+import TextField from '@material-ui/core/TextField'\n+import { History } from 'history'\n+import * as React from 'react'\n+import { useState } from 'react'\n+import { signUp } from '../../services/auth.service'\n+\n+interface SignUpFormProps {\n+  history: History\n+}\n+\n+export default ({ history }: SignUpFormProps) => {\n+  const [name, setName] = useState('')\n+  const [username, setUsername] = useState('')\n+  const [oldPassword, setOldPassword] = useState('')\n+  const [password, setPassword] = useState('')\n+  const [error, setError] = useState('')\n+\n+  const updateName = ({ target }) => {\n+    setError('')\n+    setName(target.value)\n+  }\n+\n+  const updateUsername = ({ target }) => {\n+    setError('')\n+    setUsername(target.value)\n+  }\n+\n+  const updateOldPassword = ({ target }) => {\n+    setError('')\n+    setOldPassword(target.value)\n+  }\n+\n+  const updateNewPassword = ({ target }) => {\n+    setError('')\n+    setPassword(target.value)\n+  }\n+\n+  const maySignUp = () => {\n+    return !!(name && username && oldPassword && oldPassword === password)\n+  }\n+\n+  const handleSignUp = () => {\n+    signUp({ username, password, name })\n+      .then(() => {\n+        history.push('/sign-in')\n+      })\n+      .catch(error => {\n+        setError(error.message || error)\n+      })\n+  }\n+\n+  const handleSignIn = () => {\n+    history.push('/sign-in')\n+  }\n+\n+  return (\n+    <div className=\"SignUpForm Screen\">\n+      <form>\n+        <legend>Sign up</legend>\n+        <div\n+          style={{\n+            float: 'left',\n+            width: 'calc(50% - 10px)',\n+            paddingRight: '10px',\n+          }}\n+        >\n+          <TextField\n+            className=\"AuthScreen-text-field\"\n+            label=\"Name\"\n+            value={name}\n+            onChange={updateName}\n+            autoComplete=\"off\"\n+            margin=\"normal\"\n+          />\n+          <TextField\n+            className=\"AuthScreen-text-field\"\n+            label=\"Username\"\n+            value={username}\n+            onChange={updateUsername}\n+            autoComplete=\"off\"\n+            margin=\"normal\"\n+          />\n+        </div>\n+        <div\n+          style={{\n+            float: 'right',\n+            width: 'calc(50% - 10px)',\n+            paddingLeft: '10px',\n+          }}\n+        >\n+          <TextField\n+            className=\"AuthScreen-text-field\"\n+            label=\"Old password\"\n+            type=\"password\"\n+            value={oldPassword}\n+            onChange={updateOldPassword}\n+            autoComplete=\"off\"\n+            margin=\"normal\"\n+          />\n+          <TextField\n+            className=\"AuthScreen-text-field\"\n+            label=\"New password\"\n+            type=\"password\"\n+            value={password}\n+            onChange={updateNewPassword}\n+            autoComplete=\"off\"\n+            margin=\"normal\"\n+          />\n+        </div>\n+        <Button\n+          type=\"button\"\n+          color=\"secondary\"\n+          variant=\"contained\"\n+          disabled={!maySignUp()}\n+          onClick={handleSignUp}\n+        >\n+          Sign up\n+        </Button>\n+        <div className=\"AuthScreen-error\">{error}</div>\n+        <span className=\"AuthScreen-alternative\">\n+          Already have an accout? <a onClick={handleSignIn}>Sign in!</a>\n+        </span>\n+      </form>\n+    </div>\n+  )\n+}\ndiff --git a/client/src/components/AuthScreen/index.tsx b/client/src/components/AuthScreen/index.tsx\nnew file mode 100644\nindex 0000000..e321f08\n--- /dev/null\n+++ b/client/src/components/AuthScreen/index.tsx\n@@ -0,0 +1,118 @@\n+import * as React from 'react'\n+import { RouteComponentProps } from 'react-router-dom'\n+import { Route } from 'react-router-dom'\n+import styled from 'styled-components'\n+import AnimatedSwitch from '../AnimatedSwitch'\n+import SignInForm from './SignInForm'\n+import SignUpForm from './SignUpForm'\n+\n+const Style = styled.div`\n+  background: radial-gradient(rgb(34, 65, 67), rgb(17, 48, 50)),\n+    url(/assets/chat-background.jpg) no-repeat;\n+  background-size: cover;\n+  background-blend-mode: multiply;\n+  color: white;\n+\n+  .AuthScreen-intro {\n+    height: 265px;\n+  }\n+\n+  .AuthScreen-icon {\n+    width: 125px;\n+    height: auto;\n+    margin-left: auto;\n+    margin-right: auto;\n+    padding-top: 70px;\n+    display: block;\n+  }\n+\n+  .AuthScreen-title {\n+    width: 100%;\n+    text-align: center;\n+    color: white;\n+  }\n+\n+  .AuthScreen-text-field {\n+    width: 100%;\n+    position: relative;\n+  }\n+\n+  .AuthScreen-text-field > div::before {\n+    border-color: white !important;\n+  }\n+\n+  .AuthScreen-error {\n+    position: absolute;\n+    color: red;\n+    font-size: 15px;\n+    margin-top: 20px;\n+  }\n+\n+  .AuthScreen-alternative {\n+    position: absolute;\n+    bottom: 10px;\n+    left: 10px;\n+\n+    a {\n+      color: var(--secondary-bg);\n+    }\n+  }\n+\n+  .Screen {\n+    height: calc(100% - 265px);\n+  }\n+\n+  form {\n+    padding: 20px;\n+\n+    > div {\n+      padding-bottom: 35px;\n+    }\n+  }\n+\n+  legend {\n+    font-weight: bold;\n+    color: white;\n+  }\n+\n+  label {\n+    color: white !important;\n+  }\n+\n+  input {\n+    color: white;\n+\n+    &::placeholder {\n+      color: var(--primary-bg);\n+    }\n+  }\n+\n+  button {\n+    width: 100px;\n+    display: block;\n+    margin-left: auto;\n+    margin-right: auto;\n+    background-color: var(--secondary-bg) !important;\n+\n+    &[disabled] {\n+      color: #38a81c;\n+    }\n+\n+    &:not([disabled]) {\n+      color: white;\n+    }\n+  }\n+`\n+\n+export default ({ history, location }: RouteComponentProps) => (\n+  <Style className=\"AuthScreen Screen\">\n+    <div className=\"AuthScreen-intro\">\n+      <img src=\"assets/whatsapp-icon.png\" className=\"AuthScreen-icon\" />\n+      <h2 className=\"AuthScreen-title\">WhatsApp Clone</h2>\n+    </div>\n+    <AnimatedSwitch>\n+      <Route exact path=\"/sign-in\" component={SignInForm} />\n+      <Route exact path=\"/sign-up\" component={SignUpForm} />\n+    </AnimatedSwitch>\n+  </Style>\n+)\ndiff --git a/client/src/components/ChatRoomScreen/ChatNavbar.tsx b/client/src/components/ChatRoomScreen/ChatNavbar.tsx\nnew file mode 100644\nindex 0000000..f8349f5\n--- /dev/null\n+++ b/client/src/components/ChatRoomScreen/ChatNavbar.tsx\n@@ -0,0 +1,186 @@\n+import Button from '@material-ui/core/Button'\n+import List from '@material-ui/core/List'\n+import ListItem from '@material-ui/core/ListItem'\n+import Popover from '@material-ui/core/Popover'\n+import ArrowBackIcon from '@material-ui/icons/ArrowBack'\n+import DeleteIcon from '@material-ui/icons/Delete'\n+import InfoIcon from '@material-ui/icons/Info'\n+import MoreIcon from '@material-ui/icons/MoreVert'\n+import { defaultDataIdFromObject } from 'apollo-cache-inmemory'\n+import gql from 'graphql-tag'\n+import { History } from 'history'\n+import * as React from 'react'\n+import { useState } from 'react'\n+import { useQuery, useMutation } from 'react-apollo-hooks'\n+import styled from 'styled-components'\n+import * as fragments from '../../graphql/fragments'\n+import * as queries from '../../graphql/queries'\n+import { ChatNavbarMutation, ChatNavbarQuery, Chats } from '../../graphql/types'\n+\n+const Style = styled.div`\n+  padding: 0;\n+  display: flex;\n+  flex-direction: row;\n+\n+  margin-left: -20px;\n+  .ChatNavbar-title {\n+    line-height: 56px;\n+  }\n+\n+  .ChatNavbar-back-button {\n+    color: var(--primary-text);\n+  }\n+\n+  .ChatNavbar-picture {\n+    height: 40px;\n+    width: 40px;\n+    margin-top: 3px;\n+    margin-left: -22px;\n+    object-fit: cover;\n+    padding: 5px;\n+    border-radius: 50%;\n+  }\n+\n+  .ChatNavbar-rest {\n+    flex: 1;\n+    justify-content: flex-end;\n+  }\n+\n+  .ChatNavbar-options-btn {\n+    float: right;\n+    height: 100%;\n+    font-size: 1.2em;\n+    margin-right: -15px;\n+    color: var(--primary-text);\n+  }\n+\n+  .ChatNavbar-options-item svg {\n+    margin-right: 10px;\n+    padding-left: 15px;\n+  }\n+`\n+\n+const query = gql`\n+  query ChatNavbarQuery($chatId: ID!) {\n+    chat(chatId: $chatId) {\n+      ...Chat\n+    }\n+  }\n+  ${fragments.chat}\n+`\n+\n+const mutation = gql`\n+  mutation ChatNavbarMutation($chatId: ID!) {\n+    removeChat(chatId: $chatId)\n+  }\n+`\n+\n+interface ChatNavbarProps {\n+  chatId: string\n+  history: History\n+}\n+\n+export default ({ chatId, history }: ChatNavbarProps) => {\n+  const {\n+    data: { chat },\n+  } = useQuery<ChatNavbarQuery.Query, ChatNavbarQuery.Variables>(query, {\n+    variables: { chatId },\n+  })\n+  const removeChat = useMutation<ChatNavbarMutation.Mutation, ChatNavbarMutation.Variables>(\n+    mutation,\n+    {\n+      variables: { chatId },\n+      update: (client, { data: { removeChat } }) => {\n+        client.writeFragment({\n+          id: defaultDataIdFromObject({\n+            __typename: 'Chat',\n+            id: removeChat,\n+          }),\n+          fragment: fragments.chat,\n+          fragmentName: 'Chat',\n+          data: null,\n+        })\n+\n+        let chats\n+        try {\n+          chats = client.readQuery<Chats.Query>({\n+            query: queries.chats,\n+          }).chats\n+        } catch (e) {}\n+\n+        if (chats && chats.some(chat => chat.id === removeChat)) {\n+          const index = chats.findIndex(chat => chat.id === removeChat)\n+          chats.splice(index, 1)\n+\n+          client.writeQuery({\n+            query: queries.chats,\n+            data: { chats },\n+          })\n+        }\n+      },\n+    },\n+  )\n+  const [popped, setPopped] = useState(false)\n+\n+  const navToChats = () => {\n+    history.push('/chats')\n+  }\n+\n+  const navToGroupDetails = () => {\n+    setPopped(false)\n+    history.push(`/chats/${chatId}/details`, { chat })\n+  }\n+\n+  const handleRemoveChat = () => {\n+    setPopped(false)\n+    removeChat().then(navToChats)\n+  }\n+\n+  return (\n+    <Style className={name}>\n+      <Button className=\"ChatNavbar-back-button\" onClick={navToChats}>\n+        <ArrowBackIcon />\n+      </Button>\n+      <img\n+        className=\"ChatNavbar-picture\"\n+        src={\n+          chat.picture ||\n+          (chat.isGroup ? '/assets/default-group-pic.jpg' : '/assets/default-profile-pic.jpg')\n+        }\n+      />\n+      <div className=\"ChatNavbar-title\">{chat.name}</div>\n+      <div className=\"ChatNavbar-rest\">\n+        <Button className=\"ChatNavbar-options-btn\" onClick={setPopped.bind(null, true)}>\n+          <MoreIcon />\n+        </Button>\n+      </div>\n+      <Popover\n+        open={popped}\n+        onClose={setPopped.bind(null, false)}\n+        anchorOrigin={{\n+          vertical: 'top',\n+          horizontal: 'right',\n+        }}\n+        transformOrigin={{\n+          vertical: 'top',\n+          horizontal: 'right',\n+        }}\n+      >\n+        <Style style={{ marginLeft: '-15px' }}>\n+          <List>\n+            {chat.isGroup && (\n+              <ListItem className=\"ChatNavbar-options-item\" button onClick={navToGroupDetails}>\n+                <InfoIcon />\n+                Details\n+              </ListItem>\n+            )}\n+            <ListItem className=\"ChatNavbar-options-item\" button onClick={handleRemoveChat}>\n+              <DeleteIcon />\n+              Delete\n+            </ListItem>\n+          </List>\n+        </Style>\n+      </Popover>\n+    </Style>\n+  )\n+}\ndiff --git a/client/src/components/ChatRoomScreen/MessageBox.tsx b/client/src/components/ChatRoomScreen/MessageBox.tsx\nnew file mode 100644\nindex 0000000..a3e1c8b\n--- /dev/null\n+++ b/client/src/components/ChatRoomScreen/MessageBox.tsx\n@@ -0,0 +1,162 @@\n+import Button from '@material-ui/core/Button'\n+import SendIcon from '@material-ui/icons/Send'\n+import { defaultDataIdFromObject } from 'apollo-cache-inmemory'\n+import gql from 'graphql-tag'\n+import * as React from 'react'\n+import { useState } from 'react'\n+import { useQuery, useMutation } from 'react-apollo-hooks'\n+import styled from 'styled-components'\n+import { time as uniqid } from 'uniqid'\n+import * as fragments from '../../graphql/fragments'\n+import { MessageBoxMutation, FullChat, Message } from '../../graphql/types'\n+import { useMe } from '../../services/auth.service'\n+\n+const Style = styled.div`\n+  display: flex;\n+  height: 50px;\n+  padding: 5px;\n+  width: calc(100% - 10px);\n+\n+  .MessageBox-input {\n+    width: calc(100% - 50px);\n+    border: none;\n+    border-radius: 999px;\n+    padding: 10px;\n+    padding-left: 20px;\n+    padding-right: 20px;\n+    font-size: 15px;\n+    outline: none;\n+    box-shadow: 0 1px silver;\n+    font-size: 18px;\n+    line-height: 45px;\n+  }\n+\n+  .MessageBox-button {\n+    min-width: 50px;\n+    width: 50px;\n+    border-radius: 999px;\n+    background-color: var(--primary-bg);\n+    margin: 0 5px;\n+    margin-right: 0;\n+    color: white;\n+    padding-left: 20px;\n+    svg {\n+      margin-left: -3px;\n+    }\n+  }\n+`\n+\n+const mutation = gql`\n+  mutation MessageBoxMutation($chatId: ID!, $content: String!) {\n+    addMessage(chatId: $chatId, content: $content) {\n+      ...Message\n+    }\n+  }\n+  ${fragments.message}\n+`\n+\n+interface MessageBoxProps {\n+  chatId: string\n+}\n+\n+export default ({ chatId }: MessageBoxProps) => {\n+  const [message, setMessage] = useState('')\n+  const me = useMe()\n+\n+  const addMessage = useMutation<MessageBoxMutation.Mutation, MessageBoxMutation.Variables>(\n+    mutation,\n+    {\n+      variables: {\n+        chatId,\n+        content: message,\n+      },\n+      optimisticResponse: {\n+        __typename: 'Mutation',\n+        addMessage: {\n+          id: uniqid(),\n+          __typename: 'Message',\n+          chat: {\n+            id: chatId,\n+            __typename: 'Chat',\n+          },\n+          sender: {\n+            id: me.id,\n+            __typename: 'User',\n+            name: me.name,\n+          },\n+          content: message,\n+          createdAt: new Date(),\n+          type: 0,\n+          recipients: [],\n+          ownership: true,\n+        },\n+      },\n+      update: (client, { data: { addMessage } }) => {\n+        client.writeFragment({\n+          id: defaultDataIdFromObject(addMessage),\n+          fragment: fragments.message,\n+          data: addMessage,\n+        })\n+\n+        let fullChat\n+        try {\n+          fullChat = client.readFragment<FullChat.Fragment>({\n+            id: defaultDataIdFromObject(addMessage.chat),\n+            fragment: fragments.fullChat,\n+            fragmentName: 'FullChat',\n+          })\n+        } catch (e) {}\n+\n+        if (fullChat && !fullChat.messages.some(message => message.id === addMessage.id)) {\n+          fullChat.messages.push(addMessage)\n+          fullChat.lastMessage = addMessage\n+\n+          client.writeFragment({\n+            id: defaultDataIdFromObject(addMessage.chat),\n+            fragment: fragments.fullChat,\n+            fragmentName: 'FullChat',\n+            data: fullChat,\n+          })\n+        }\n+      },\n+    },\n+  )\n+\n+  const onKeyPress = e => {\n+    if (e.charCode === 13) {\n+      submitMessage()\n+    }\n+  }\n+\n+  const onChange = ({ target }) => {\n+    setMessage(target.value)\n+  }\n+\n+  const submitMessage = () => {\n+    if (!message) return\n+\n+    addMessage()\n+    setMessage('')\n+  }\n+\n+  return (\n+    <Style className=\"MessageBox\">\n+      <input\n+        className=\"MessageBox-input\"\n+        type=\"text\"\n+        placeholder=\"Type a message\"\n+        value={message}\n+        onKeyPress={onKeyPress}\n+        onChange={onChange}\n+      />\n+      <Button\n+        variant=\"contained\"\n+        color=\"primary\"\n+        className=\"MessageBox-button\"\n+        onClick={submitMessage}\n+      >\n+        <SendIcon />\n+      </Button>\n+    </Style>\n+  )\n+}\ndiff --git a/client/src/components/ChatRoomScreen/MessagesList.tsx b/client/src/components/ChatRoomScreen/MessagesList.tsx\nnew file mode 100644\nindex 0000000..bbebc62\n--- /dev/null\n+++ b/client/src/components/ChatRoomScreen/MessagesList.tsx\n@@ -0,0 +1,146 @@\n+import gql from 'graphql-tag'\n+import * as moment from 'moment'\n+import * as React from 'react'\n+import { useRef, useEffect } from 'react'\n+import { useQuery, useMutation } from 'react-apollo-hooks'\n+import * as ReactDOM from 'react-dom'\n+import styled from 'styled-components'\n+import * as fragments from '../../graphql/fragments'\n+import { MessagesListQuery } from '../../graphql/types'\n+\n+const Style = styled.div`\n+  display: block;\n+  height: calc(100% - 60px);\n+  width: calc(100% - 30px);\n+  overflow-y: overlay;\n+  padding: 0 15px;\n+\n+  .MessagesList-message {\n+    display: inline-block;\n+    position: relative;\n+    max-width: 100%;\n+    border-radius: 7px;\n+    box-shadow: 0 1px 2px rgba(0, 0, 0, 0.15);\n+    margin-top: 10px;\n+    margin-bottom: 10px;\n+    clear: both;\n+\n+    &::after {\n+      content: '';\n+      display: table;\n+      clear: both;\n+    }\n+  }\n+\n+  .MessagesList-message-mine {\n+    float: right;\n+    background-color: #dcf8c6;\n+\n+    &::before {\n+      right: -11px;\n+      background-image: url(/assets/message-mine.png);\n+    }\n+  }\n+\n+  .MessagesList-message-others {\n+    float: left;\n+    background-color: #fff;\n+\n+    &::before {\n+      left: -11px;\n+      background-image: url(/assets/message-other.png);\n+    }\n+  }\n+\n+  .MessagesList-message-others::before,\n+  .MessagesList-message-mine::before {\n+    content: '';\n+    position: absolute;\n+    bottom: 3px;\n+    width: 12px;\n+    height: 19px;\n+    background-position: 50% 50%;\n+    background-repeat: no-repeat;\n+    background-size: contain;\n+  }\n+\n+  .MessagesList-message-sender {\n+    font-weight: bold;\n+    margin-left: 5px;\n+    margin-top: 5px;\n+  }\n+\n+  .MessagesList-message-contents {\n+    padding: 5px 7px;\n+    word-wrap: break-word;\n+\n+    &::after {\n+      content: ' \\00a0\\00a0\\00a0\\00a0\\00a0\\00a0\\00a0\\00a0\\00a0\\00a0\\00a0\\00a0\\00a0\\00a0\\00a0\\00a0\\00a0\\00a0\\00a0';\n+      display: inline;\n+    }\n+  }\n+\n+  .MessagesList-message-timestamp {\n+    position: absolute;\n+    bottom: 2px;\n+    right: 7px;\n+    color: gray;\n+    font-size: 12px;\n+  }\n+`\n+\n+const query = gql`\n+  query MessagesListQuery($chatId: ID!) {\n+    chat(chatId: $chatId) {\n+      ...FullChat\n+    }\n+  }\n+  ${fragments.fullChat}\n+`\n+\n+interface MessagesListProps {\n+  chatId: string\n+}\n+\n+export default ({ chatId }: MessagesListProps) => {\n+  const {\n+    data: {\n+      chat: { messages, isGroup },\n+    },\n+  } = useQuery<MessagesListQuery.Query, MessagesListQuery.Variables>(query, {\n+    variables: { chatId },\n+  })\n+  const selfRef = useRef(null)\n+\n+  const resetScrollTop = () => {\n+    if (!selfRef.current) return\n+\n+    const selfDOMNode = ReactDOM.findDOMNode(selfRef.current) as HTMLElement\n+    selfDOMNode.scrollTop = Number.MAX_SAFE_INTEGER\n+  }\n+\n+  useEffect(resetScrollTop, [selfRef.current])\n+  useEffect(resetScrollTop, [messages.length])\n+\n+  return (\n+    <Style className={name} ref={selfRef}>\n+      {messages &&\n+        messages.map(message => (\n+          <div\n+            key={message.id}\n+            className={`MessagesList-message ${\n+              message.ownership ? 'MessagesList-message-mine' : 'MessagesList-message-others'\n+            }`}\n+          >\n+            {isGroup && !message.ownership && (\n+              <div className=\"MessagesList-message-sender\">{message.sender.name}</div>\n+            )}\n+            <div className=\"MessagesList-message-contents\">{message.content}</div>\n+            <span className=\"MessagesList-message-timestamp\">\n+              {moment(message.createdAt).format('HH:mm')}\n+            </span>\n+          </div>\n+        ))}\n+    </Style>\n+  )\n+}\ndiff --git a/client/src/components/ChatRoomScreen/index.tsx b/client/src/components/ChatRoomScreen/index.tsx\nnew file mode 100644\nindex 0000000..1a59a6b\n--- /dev/null\n+++ b/client/src/components/ChatRoomScreen/index.tsx\n@@ -0,0 +1,56 @@\n+import * as React from 'react'\n+import { Suspense } from 'react'\n+import { RouteComponentProps } from 'react-router-dom'\n+import styled from 'styled-components'\n+import Navbar from '../Navbar'\n+import ChatNavbar from './ChatNavbar'\n+import MessageBox from './MessageBox'\n+import MessagesList from './MessagesList'\n+\n+const Style = styled.div`\n+  .ChatScreen-body {\n+    position: relative;\n+    background: url(/assets/chat-background.jpg);\n+    width: 100%;\n+    height: calc(100% - 56px);\n+\n+    .MessagesList {\n+      position: absolute;\n+      height: calc(100% - 60px);\n+      top: 0;\n+    }\n+\n+    .MessageBox {\n+      position: absolute;\n+      bottom: 0;\n+      left: 0;\n+    }\n+\n+    .AddChatButton {\n+      right: 0;\n+      bottom: 0;\n+    }\n+  }\n+`\n+\n+export default ({ match, history }: RouteComponentProps) => {\n+  const chatId = match.params.chatId\n+\n+  return (\n+    <Style className=\"ChatScreen Screen\">\n+      <Navbar>\n+        <Suspense fallback={null}>\n+          <ChatNavbar chatId={chatId} history={history} />\n+        </Suspense>\n+      </Navbar>\n+      <div className=\"ChatScreen-body\">\n+        <Suspense fallback={null}>\n+          <MessagesList chatId={chatId} />\n+        </Suspense>\n+        <Suspense fallback={null}>\n+          <MessageBox chatId={chatId} />\n+        </Suspense>\n+      </div>\n+    </Style>\n+  )\n+}\ndiff --git a/client/src/components/ChatsListScreen/AddChatButton.tsx b/client/src/components/ChatsListScreen/AddChatButton.tsx\nnew file mode 100644\nindex 0000000..cc02ede\n--- /dev/null\n+++ b/client/src/components/ChatsListScreen/AddChatButton.tsx\n@@ -0,0 +1,38 @@\n+import Button from '@material-ui/core/Button'\n+import ChatIcon from '@material-ui/icons/Chat'\n+import { History } from 'history'\n+import * as React from 'react'\n+import styled from 'styled-components'\n+\n+const Style = styled.div`\n+  position: fixed;\n+  right: 10px;\n+  bottom: 10px;\n+\n+  button {\n+    min-width: 50px;\n+    width: 50px;\n+    height: 50px;\n+    border-radius: 999px;\n+    background-color: var(--secondary-bg);\n+    color: white;\n+  }\n+`\n+\n+interface AddChatButtonProps {\n+  history: History\n+}\n+\n+export default ({ history }: AddChatButtonProps) => {\n+  const onClick = () => {\n+    history.push('/new-chat')\n+  }\n+\n+  return (\n+    <Style className=\"AddChatButton\">\n+      <Button variant=\"contained\" color=\"secondary\" onClick={onClick}>\n+        <ChatIcon />\n+      </Button>\n+    </Style>\n+  )\n+}\ndiff --git a/client/src/components/ChatsListScreen/ChatsList.tsx b/client/src/components/ChatsListScreen/ChatsList.tsx\nnew file mode 100644\nindex 0000000..876625d\n--- /dev/null\n+++ b/client/src/components/ChatsListScreen/ChatsList.tsx\n@@ -0,0 +1,123 @@\n+import List from '@material-ui/core/List'\n+import ListItem from '@material-ui/core/ListItem'\n+import gql from 'graphql-tag'\n+import { History } from 'history'\n+import * as moment from 'moment'\n+import * as React from 'react'\n+import { useQuery } from 'react-apollo-hooks'\n+import * as ReactDOM from 'react-dom'\n+import styled from 'styled-components'\n+import * as fragments from '../../graphql/fragments'\n+import { ChatsListQuery } from '../../graphql/types'\n+\n+const Style = styled.div`\n+  height: calc(100% - 56px);\n+  overflow-y: overlay;\n+\n+  .ChatsList-chats-list {\n+    padding: 0;\n+  }\n+\n+  .ChatsList-chat-item {\n+    height: 76px;\n+    padding: 0 15px;\n+    display: flex;\n+  }\n+\n+  .ChatsList-profile-pic {\n+    height: 50px;\n+    width: 50px;\n+    object-fit: cover;\n+    border-radius: 50%;\n+  }\n+\n+  .ChatsList-info {\n+    width: calc(100% - 60px);\n+    height: calc(100% - 30px);\n+    padding: 15px 0;\n+    margin-left: 10px;\n+    border-bottom: 0.5px solid silver;\n+    position: relative;\n+  }\n+\n+  .ChatsList-name {\n+    margin-top: 5px;\n+  }\n+\n+  .ChatsList-last-message {\n+    color: gray;\n+    font-size: 15px;\n+    margin-top: 5px;\n+    text-overflow: ellipsis;\n+    overflow: hidden;\n+    white-space: nowrap;\n+  }\n+\n+  .ChatsList-timestamp {\n+    position: absolute;\n+    color: gray;\n+    top: 20px;\n+    right: 0;\n+    font-size: 13px;\n+  }\n+`\n+\n+const query = gql`\n+  query ChatsListQuery {\n+    chats {\n+      ...Chat\n+    }\n+  }\n+\n+  ${fragments.chat}\n+`\n+\n+interface ChatsListProps {\n+  history: History\n+}\n+\n+export default ({ history }: ChatsListProps) => {\n+  const {\n+    data: { chats },\n+  } = useQuery<ChatsListQuery.Query>(query)\n+\n+  const navToChat = chatId => {\n+    history.push(`chats/${chatId}`)\n+  }\n+\n+  return (\n+    <Style className=\"ChatsList\">\n+      <List className=\"ChatsList-chats-list\">\n+        {chats.map(chat => (\n+          <ListItem\n+            key={chat.id}\n+            className=\"ChatsList-chat-item\"\n+            button\n+            onClick={navToChat.bind(null, chat.id)}\n+          >\n+            <img\n+              className=\"ChatsList-profile-pic\"\n+              src={\n+                chat.picture ||\n+                (chat.isGroup\n+                  ? '/assets/default-group-pic.jpg'\n+                  : '/assets/default-profile-pic.jpg')\n+              }\n+            />\n+            <div className=\"ChatsList-info\">\n+              <div className=\"ChatsList-name\">{chat.name}</div>\n+              {chat.lastMessage && (\n+                <React.Fragment>\n+                  <div className=\"ChatsList-last-message\">{chat.lastMessage.content}</div>\n+                  <div className=\"ChatsList-timestamp\">\n+                    {moment(chat.lastMessage.createdAt).format('HH:mm')}\n+                  </div>\n+                </React.Fragment>\n+              )}\n+            </div>\n+          </ListItem>\n+        ))}\n+      </List>\n+    </Style>\n+  )\n+}\ndiff --git a/client/src/components/ChatsListScreen/ChatsNavbar.tsx b/client/src/components/ChatsListScreen/ChatsNavbar.tsx\nnew file mode 100644\nindex 0000000..9201cbf\n--- /dev/null\n+++ b/client/src/components/ChatsListScreen/ChatsNavbar.tsx\n@@ -0,0 +1,95 @@\n+import Button from '@material-ui/core/Button'\n+import List from '@material-ui/core/List'\n+import ListItem from '@material-ui/core/ListItem'\n+import Popover from '@material-ui/core/Popover'\n+import MoreIcon from '@material-ui/icons/MoreVert'\n+import SignOutIcon from '@material-ui/icons/PowerSettingsNew'\n+import SettingsIcon from '@material-ui/icons/Settings'\n+import { History } from 'history'\n+import * as React from 'react'\n+import { useState } from 'react'\n+import styled from 'styled-components'\n+import { signOut } from '../../services/auth.service'\n+\n+const Style = styled.div`\n+  padding: 0;\n+  display: flex;\n+  flex-direction: row;\n+\n+  .ChatsNavbar-title {\n+    line-height: 56px;\n+  }\n+\n+  .ChatsNavbar-options-btn {\n+    float: right;\n+    height: 100%;\n+    font-size: 1.2em;\n+    margin-right: -15px;\n+    color: var(--primary-text);\n+  }\n+\n+  .ChatsNavbar-rest {\n+    flex: 1;\n+    justify-content: flex-end;\n+  }\n+\n+  .ChatsNavbar-options-item svg {\n+    margin-right: 10px;\n+  }\n+`\n+\n+interface ChatsNavbarProps {\n+  history: History\n+}\n+\n+export default ({ history }: ChatsNavbarProps) => {\n+  const [popped, setPopped] = useState(false)\n+\n+  const navToSettings = () => {\n+    setPopped(false)\n+    history.push('/settings')\n+  }\n+\n+  const handleSignOut = () => {\n+    setPopped(false)\n+    signOut()\n+\n+    history.push('/sign-in')\n+  }\n+\n+  return (\n+    <Style className=\"ChatsNavbar\">\n+      <span className=\"ChatsNavbar-title\">WhatsApp Clone</span>\n+      <div className=\"ChatsNavbar-rest\">\n+        <Button className=\"ChatsNavbar-options-btn\" onClick={setPopped.bind(null, true)}>\n+          <MoreIcon />\n+        </Button>\n+      </div>\n+      <Popover\n+        open={popped}\n+        onClose={setPopped.bind(null, false)}\n+        anchorOrigin={{\n+          vertical: 'top',\n+          horizontal: 'right',\n+        }}\n+        transformOrigin={{\n+          vertical: 'top',\n+          horizontal: 'right',\n+        }}\n+      >\n+        <Style>\n+          <List>\n+            <ListItem className=\"ChatsNavbar-options-item\" button onClick={navToSettings}>\n+              <SettingsIcon />\n+              Settings\n+            </ListItem>\n+            <ListItem className=\"ChatsNavbar-options-item\" button onClick={handleSignOut}>\n+              <SignOutIcon />\n+              Sign Out\n+            </ListItem>\n+          </List>\n+        </Style>\n+      </Popover>\n+    </Style>\n+  )\n+}\ndiff --git a/client/src/components/ChatsListScreen/index.tsx b/client/src/components/ChatsListScreen/index.tsx\nnew file mode 100644\nindex 0000000..bbbd36e\n--- /dev/null\n+++ b/client/src/components/ChatsListScreen/index.tsx\n@@ -0,0 +1,19 @@\n+import * as React from 'react'\n+import { Suspense } from 'react'\n+import { RouteComponentProps } from 'react-router-dom'\n+import Navbar from '../Navbar'\n+import AddChatButton from './AddChatButton'\n+import ChatsList from './ChatsList'\n+import ChatsNavbar from './ChatsNavbar'\n+\n+export default ({ history }: RouteComponentProps) => (\n+  <div className=\"ChatsListScreen Screen\">\n+    <Navbar>\n+      <ChatsNavbar history={history} />\n+    </Navbar>\n+    <Suspense fallback={null}>\n+      <ChatsList history={history} />\n+    </Suspense>\n+    <AddChatButton history={history} />\n+  </div>\n+)\ndiff --git a/client/src/components/GroupDetailsScreen/CompleteGroupButton.tsx b/client/src/components/GroupDetailsScreen/CompleteGroupButton.tsx\nnew file mode 100644\nindex 0000000..604246a\n--- /dev/null\n+++ b/client/src/components/GroupDetailsScreen/CompleteGroupButton.tsx\n@@ -0,0 +1,114 @@\n+import Button from '@material-ui/core/Button'\n+import ArrowRightIcon from '@material-ui/icons/ArrowRightAlt'\n+import { defaultDataIdFromObject } from 'apollo-cache-inmemory'\n+import gql from 'graphql-tag'\n+import { History } from 'history'\n+import * as React from 'react'\n+import { useMutation } from 'react-apollo-hooks'\n+import styled from 'styled-components'\n+import { time as uniqid } from 'uniqid'\n+import * as fragments from '../../graphql/fragments'\n+import * as queries from '../../graphql/queries'\n+import { Chats, User, CompleteGroupButtonMutation } from '../../graphql/types'\n+import { useMe } from '../../services/auth.service'\n+\n+const Style = styled.div`\n+  position: fixed;\n+  right: 10px;\n+  bottom: 10px;\n+\n+  button {\n+    min-width: 50px;\n+    width: 50px;\n+    height: 50px;\n+    border-radius: 999px;\n+    background-color: var(--secondary-bg);\n+    color: white;\n+  }\n+`\n+\n+const mutation = gql`\n+  mutation CompleteGroupButtonMutation(\n+    $userIds: [ID!]!\n+    $groupName: String!\n+    $groupPicture: String\n+  ) {\n+    addGroup(userIds: $userIds, groupName: $groupName, groupPicture: $groupPicture) {\n+      ...Chat\n+    }\n+  }\n+  ${fragments.chat}\n+`\n+\n+interface CompleteGroupButtonProps {\n+  history: History\n+  users: User.Fragment[]\n+  groupName: string\n+  groupPicture: string\n+}\n+\n+export default ({ history, users, groupName, groupPicture }: CompleteGroupButtonProps) => {\n+  const me = useMe()\n+\n+  const addGroup = useMutation<\n+    CompleteGroupButtonMutation.Mutation,\n+    CompleteGroupButtonMutation.Variables\n+  >(mutation, {\n+    optimisticResponse: {\n+      __typename: 'Mutation',\n+      addGroup: {\n+        __typename: 'Chat',\n+        id: uniqid(),\n+        name: groupName,\n+        picture: groupPicture,\n+        allTimeMembers: users,\n+        owner: me,\n+        isGroup: true,\n+        lastMessage: null,\n+      },\n+    },\n+    variables: {\n+      userIds: users.map(user => user.id),\n+      groupName,\n+      groupPicture,\n+    },\n+    update: (client, { data: { addGroup } }) => {\n+      client.writeFragment({\n+        id: defaultDataIdFromObject(addGroup),\n+        fragment: fragments.chat,\n+        fragmentName: 'Chat',\n+        data: addGroup,\n+      })\n+\n+      let chats\n+      try {\n+        chats = client.readQuery<Chats.Query>({\n+          query: queries.chats,\n+        }).chats\n+      } catch (e) {}\n+\n+      if (chats && !chats.some(chat => chat.id === addGroup.id)) {\n+        chats.unshift(addGroup)\n+\n+        client.writeQuery({\n+          query: queries.chats,\n+          data: { chats },\n+        })\n+      }\n+    },\n+  })\n+\n+  const onClick = () => {\n+    addGroup().then(({ data: { addGroup } }) => {\n+      history.push(`/chats/${addGroup.id}`)\n+    })\n+  }\n+\n+  return (\n+    <Style className=\"CompleteGroupButton\">\n+      <Button variant=\"contained\" color=\"secondary\" onClick={onClick}>\n+        <ArrowRightIcon />\n+      </Button>\n+    </Style>\n+  )\n+}\ndiff --git a/client/src/components/GroupDetailsScreen/GroupDetailsNavbar.tsx b/client/src/components/GroupDetailsScreen/GroupDetailsNavbar.tsx\nnew file mode 100644\nindex 0000000..3763fa6\n--- /dev/null\n+++ b/client/src/components/GroupDetailsScreen/GroupDetailsNavbar.tsx\n@@ -0,0 +1,44 @@\n+import Button from '@material-ui/core/Button'\n+import ArrowBackIcon from '@material-ui/icons/ArrowBack'\n+import { History } from 'history'\n+import * as React from 'react'\n+import styled from 'styled-components'\n+\n+const Style = styled.div`\n+  padding: 0;\n+  display: flex;\n+  flex-direction: row;\n+  margin-left: -20px;\n+\n+  .GroupDetailsNavbar-title {\n+    line-height: 56px;\n+  }\n+\n+  .GroupDetailsNavbar-back-button {\n+    color: var(--primary-text);\n+  }\n+`\n+\n+interface GroupDetailsNavbarProps {\n+  history: History\n+  chatId?: string\n+}\n+\n+export default ({ history, chatId }: GroupDetailsNavbarProps) => {\n+  const navToNewGroup = () => {\n+    if (chatId) {\n+      history.push(`/chats/${chatId}`)\n+    } else {\n+      history.push('/new-chat/group')\n+    }\n+  }\n+\n+  return (\n+    <Style className=\"GroupDetailsNavbar\">\n+      <Button className=\"GroupDetailsNavbar-back-button\" onClick={navToNewGroup}>\n+        <ArrowBackIcon />\n+      </Button>\n+      <div className=\"GroupDetailsNavbar-title\">Group Details</div>\n+    </Style>\n+  )\n+}\ndiff --git a/client/src/components/GroupDetailsScreen/index.tsx b/client/src/components/GroupDetailsScreen/index.tsx\nnew file mode 100644\nindex 0000000..eaef618\n--- /dev/null\n+++ b/client/src/components/GroupDetailsScreen/index.tsx\n@@ -0,0 +1,253 @@\n+import TextField from '@material-ui/core/TextField'\n+import { defaultDataIdFromObject } from 'apollo-cache-inmemory'\n+import gql from 'graphql-tag'\n+import * as React from 'react'\n+import { useState, useEffect } from 'react'\n+import { MutationHookOptions } from 'react-apollo-hooks'\n+import { useQuery, useMutation } from 'react-apollo-hooks'\n+import { Redirect } from 'react-router-dom'\n+import { RouteComponentProps } from 'react-router-dom'\n+import styled from 'styled-components'\n+import * as fragments from '../../graphql/fragments'\n+import { GroupDetailsScreenQuery, GroupDetailsScreenMutation, User } from '../../graphql/types'\n+import { useMe } from '../../services/auth.service'\n+import { pickPicture, uploadProfilePicture } from '../../services/picture.service'\n+import Navbar from '../Navbar'\n+import CompleteGroupButton from './CompleteGroupButton'\n+import GroupDetailsNavbar from './GroupDetailsNavbar'\n+\n+const Style = styled.div`\n+  .GroupDetailsScreen-group-name {\n+    width: calc(100% - 30px);\n+    margin: 15px;\n+  }\n+\n+  .GroupDetailsScreen-participants-title {\n+    margin-top: 10px;\n+    margin-left: 15px;\n+  }\n+\n+  .GroupDetailsScreen-participants-list {\n+    display: flex;\n+    overflow: overlay;\n+    padding: 0;\n+  }\n+\n+  .GroupDetailsScreen-participant-item {\n+    padding: 10px;\n+    flex-flow: row wrap;\n+    text-align: center;\n+  }\n+\n+  .GroupDetailsScreen-participant-picture {\n+    flex: 0 1 50px;\n+    height: 50px;\n+    width: 50px;\n+    object-fit: cover;\n+    border-radius: 50%;\n+    display: block;\n+    margin-left: auto;\n+    margin-right: auto;\n+  }\n+\n+  .GroupDetailsScreen-group-info {\n+    display: flex;\n+    flex-direction: row;\n+    align-items: center;\n+  }\n+\n+  .GroupDetailsScreen-participant-name {\n+    line-height: 10px;\n+    font-size: 14px;\n+  }\n+\n+  .GroupDetailsScreen-group-picture {\n+    width: 50px;\n+    flex-basis: 50px;\n+    border-radius: 50%;\n+    margin-left: 15px;\n+    object-fit: cover;\n+    ${props => props.ownedByMe && 'cursor: pointer;'}\n+  }\n+`\n+\n+const query = gql`\n+  query GroupDetailsScreenQuery($chatId: ID!) {\n+    chat(chatId: $chatId) {\n+      ...Chat\n+    }\n+  }\n+  ${fragments.chat}\n+`\n+\n+const mutation = gql`\n+  mutation GroupDetailsScreenMutation($chatId: ID!, $name: String, $picture: String) {\n+    updateChat(chatId: $chatId, name: $name, picture: $picture) {\n+      ...Chat\n+    }\n+  }\n+  ${fragments.chat}\n+`\n+\n+export default ({ location, match, history }: RouteComponentProps) => {\n+  const chatId = match.params.chatId\n+  const me = useMe()\n+\n+  let ownedByMe: boolean\n+  let users: User.Fragment[]\n+  let participants: User.Fragment[]\n+  let updateChat: () => any\n+  let chatNameState\n+  let chatPictureState\n+\n+  // The entire component functionality will be determined by the provided route param\n+  if (chatId) {\n+    const {\n+      data: { chat },\n+    } = useQuery<GroupDetailsScreenQuery.Query, GroupDetailsScreenQuery.Variables>(query, {\n+      variables: { chatId },\n+    })\n+    ownedByMe = chat.owner.id === me.id\n+    users = chat.allTimeMembers\n+    participants = users.slice()\n+\n+    // Read-only if not owned by me\n+    if (ownedByMe) {\n+      chatNameState = useState(chat.name)\n+      chatPictureState = useState(chat.picture)\n+    } else {\n+      chatNameState = [chat.name, () => {}]\n+      chatPictureState = [chat.picture, () => {}]\n+    }\n+\n+    const [chatName] = chatNameState\n+    const [chatPicture] = chatPictureState\n+\n+    updateChat = useMutation<\n+      GroupDetailsScreenMutation.Mutation,\n+      GroupDetailsScreenMutation.Variables\n+    >(mutation, {\n+      variables: {\n+        chatId,\n+        name: chatName,\n+        picture: chatPicture,\n+      },\n+      optimisticResponse: {\n+        __typename: 'Mutation',\n+        updateChat: {\n+          ...chat,\n+          __typename: 'Chat',\n+          picture: chatPicture,\n+          name: chatName,\n+        },\n+      },\n+      update: (client, { data: { updateChat } }) => {\n+        chat.picture = chatPicture\n+        chat.name = chatName\n+\n+        client.writeFragment({\n+          id: defaultDataIdFromObject(chat),\n+          fragment: fragments.chat,\n+          fragmentName: 'Chat',\n+          data: chat,\n+        })\n+      },\n+    })\n+\n+    // Update picture once changed\n+    useEffect(\n+      () => {\n+        if (chatPicture !== chat.picture) {\n+          updateChat()\n+        }\n+      },\n+      [chatPicture],\n+    )\n+  } else {\n+    ownedByMe = true\n+    updateChat = () => {}\n+    chatNameState = useState('')\n+    chatPictureState = useState('')\n+    users = location.state.users\n+    participants = [me].concat(users)\n+  }\n+\n+  // Users are missing from state\n+  if (!(users instanceof Array)) {\n+    return <Redirect to=\"/chats\" />\n+  }\n+\n+  // Put me first\n+  {\n+    const index = participants.findIndex(participant => participant.id === me.id)\n+    participants.splice(index, 1)\n+    participants.unshift(me)\n+  }\n+\n+  const [chatName, setChatName] = chatNameState\n+  const [chatPicture, setChatPicture] = chatPictureState\n+\n+  const updateChatName = ({ target }) => {\n+    setChatName(target.value)\n+  }\n+\n+  const updateChatPicture = async () => {\n+    // You have to be an admin\n+    if (!ownedByMe) return\n+\n+    const file = await pickPicture()\n+\n+    if (!file) return\n+\n+    const { url } = await uploadProfilePicture(file)\n+\n+    setChatPicture(url)\n+  }\n+\n+  return (\n+    <Style className=\"GroupDetailsScreen Screen\" ownedByMe={ownedByMe}>\n+      <Navbar>\n+        <GroupDetailsNavbar chatId={chatId} history={history} />\n+      </Navbar>\n+      <div className=\"GroupDetailsScreen-group-info\">\n+        <img\n+          className=\"GroupDetailsScreen-group-picture\"\n+          src={chatPicture || '/assets/default-group-pic.jpg'}\n+          onClick={updateChatPicture}\n+        />\n+        <TextField\n+          label=\"Group name\"\n+          placeholder=\"Enter group name\"\n+          className=\"GroupDetailsScreen-group-name\"\n+          value={chatName}\n+          onChange={updateChatName}\n+          onBlur={updateChat}\n+          disabled={!ownedByMe}\n+          autoFocus={true}\n+        />\n+      </div>\n+      <div className=\"GroupDetailsScreen-participants-title\">\n+        Participants: {participants.length}\n+      </div>\n+      <ul className=\"GroupDetailsScreen-participants-list\">\n+        {participants.map(participant => (\n+          <div key={participant.id} className=\"GroupDetailsScreen-participant-item\">\n+            <img\n+              src={participant.picture || '/assets/default-profile-pic.jpg'}\n+              className=\"GroupDetailsScreen-participant-picture\"\n+            />\n+            <span className=\"GroupDetailsScreen-participant-name\">{participant.name}</span>\n+          </div>\n+        ))}\n+      </ul>\n+      {!chatId && chatName && (\n+        <CompleteGroupButton\n+          history={history}\n+          groupName={chatName}\n+          groupPicture={chatPicture}\n+          users={users}\n+        />\n+      )}\n+    </Style>\n+  )\n+}\ndiff --git a/client/src/components/Navbar.tsx b/client/src/components/Navbar.tsx\nnew file mode 100644\nindex 0000000..fd52289\n--- /dev/null\n+++ b/client/src/components/Navbar.tsx\n@@ -0,0 +1,24 @@\n+import Toolbar from '@material-ui/core/Toolbar'\n+import * as React from 'react'\n+import styled from 'styled-components'\n+\n+const Style = styled(Toolbar)`\n+  background-color: var(--primary-bg);\n+  color: var(--primary-text);\n+  font-size: 20px;\n+  line-height: 40px;\n+\n+  .Navbar-body {\n+    width: 100%;\n+  }\n+`\n+\n+interface NavbarProps {\n+  children: any\n+}\n+\n+export default ({ children }: NavbarProps) => (\n+  <Style className=\"Navbar\">\n+    <div className=\"Navbar-body\">{children}</div>\n+  </Style>\n+)\ndiff --git a/client/src/components/NewChatScreen/NewChatNavbar.tsx b/client/src/components/NewChatScreen/NewChatNavbar.tsx\nnew file mode 100644\nindex 0000000..d0bb3d1\n--- /dev/null\n+++ b/client/src/components/NewChatScreen/NewChatNavbar.tsx\n@@ -0,0 +1,39 @@\n+import Button from '@material-ui/core/Button'\n+import ArrowBackIcon from '@material-ui/icons/ArrowBack'\n+import { History } from 'history'\n+import * as React from 'react'\n+import styled from 'styled-components'\n+\n+const Style = styled.div`\n+  padding: 0;\n+  display: flex;\n+  flex-direction: row;\n+  margin-left: -20px;\n+\n+  .NewChatNavbar-title {\n+    line-height: 56px;\n+  }\n+\n+  .NewChatNavbar-back-button {\n+    color: var(--primary-text);\n+  }\n+`\n+\n+interface NewChatNavbarProps {\n+  history: History\n+}\n+\n+export default ({ history }: NewChatNavbarProps) => {\n+  const navToChats = () => {\n+    history.push('/chats')\n+  }\n+\n+  return (\n+    <Style className=\"NewChatNavbar\">\n+      <Button className=\"NewChatNavbar-back-button\" onClick={navToChats}>\n+        <ArrowBackIcon />\n+      </Button>\n+      <div className=\"NewChatNavbar-title\">New Chat</div>\n+    </Style>\n+  )\n+}\ndiff --git a/client/src/components/NewChatScreen/NewGroupButton.tsx b/client/src/components/NewChatScreen/NewGroupButton.tsx\nnew file mode 100644\nindex 0000000..48bd761\n--- /dev/null\n+++ b/client/src/components/NewChatScreen/NewGroupButton.tsx\n@@ -0,0 +1,59 @@\n+import Button from '@material-ui/core/Button'\n+import GroupAddIcon from '@material-ui/icons/GroupAdd'\n+import { History } from 'history'\n+import * as React from 'react'\n+import styled from 'styled-components'\n+\n+const Style = styled.div`\n+  display: flex;\n+\n+  button {\n+    border-radius: 0;\n+    text-transform: none;\n+    font-size: inherit;\n+    width: 100%;\n+    justify-content: flex-start;\n+    padding-left: 15px;\n+    padding-right: 15px;\n+\n+    svg {\n+      font-size: 30px;\n+      margin-top: 10px;\n+    }\n+  }\n+\n+  .NewGroupButton-icon {\n+    height: 50px;\n+    width: 50px;\n+    object-fit: cover;\n+    border-radius: 50%;\n+    color: white;\n+    background-color: var(--secondary-bg);\n+  }\n+\n+  .NewGroupButton-title {\n+    padding-left: 15px;\n+    font-weight: bold;\n+  }\n+`\n+\n+interface NewGroupButtonProps {\n+  history: History\n+}\n+\n+export default ({ history }: NewGroupButtonProps) => {\n+  const navToGroup = () => {\n+    history.push('/new-chat/group')\n+  }\n+\n+  return (\n+    <Style>\n+      <Button onClick={navToGroup}>\n+        <div className=\"NewGroupButton-icon\">\n+          <GroupAddIcon />\n+        </div>\n+        <div className=\"NewGroupButton-title\">New Group</div>\n+      </Button>\n+    </Style>\n+  )\n+}\ndiff --git a/client/src/components/NewChatScreen/index.tsx b/client/src/components/NewChatScreen/index.tsx\nnew file mode 100644\nindex 0000000..1bac6a4\n--- /dev/null\n+++ b/client/src/components/NewChatScreen/index.tsx\n@@ -0,0 +1,108 @@\n+import { defaultDataIdFromObject } from 'apollo-cache-inmemory'\n+import gql from 'graphql-tag'\n+import * as React from 'react'\n+import { Suspense } from 'react'\n+import { useMutation } from 'react-apollo-hooks'\n+import { RouteComponentProps } from 'react-router-dom'\n+import styled from 'styled-components'\n+import { time as uniqid } from 'uniqid'\n+import * as fragments from '../../graphql/fragments'\n+import * as queries from '../../graphql/queries'\n+import { Chats } from '../../graphql/types'\n+import { NewChatScreenMutation } from '../../graphql/types'\n+import { useMe } from '../../services/auth.service'\n+import Navbar from '../Navbar'\n+import UsersList from '../UsersList'\n+import NewChatNavbar from './NewChatNavbar'\n+import NewGroupButton from './NewGroupButton'\n+\n+const Style = styled.div`\n+  .UsersList {\n+    height: calc(100% - 56px);\n+  }\n+\n+  .NewChatScreen-users-list {\n+    height: calc(100% - 56px);\n+    overflow-y: overlay;\n+  }\n+`\n+\n+const mutation = gql`\n+  mutation NewChatScreenMutation($userId: ID!) {\n+    addChat(userId: $userId) {\n+      ...Chat\n+    }\n+  }\n+  ${fragments.chat}\n+`\n+\n+export default ({ history }: RouteComponentProps) => {\n+  const me = useMe()\n+\n+  const addChat = useMutation<NewChatScreenMutation.Mutation, NewChatScreenMutation.Variables>(\n+    mutation,\n+    {\n+      update: (client, { data: { addChat } }) => {\n+        client.writeFragment({\n+          id: defaultDataIdFromObject(addChat),\n+          fragment: fragments.chat,\n+          fragmentName: 'Chat',\n+          data: addChat,\n+        })\n+\n+        let chats\n+        try {\n+          chats = client.readQuery<Chats.Query>({\n+            query: queries.chats,\n+          }).chats\n+        } catch (e) {}\n+\n+        if (chats && !chats.some(chat => chat.id === addChat.id)) {\n+          chats.unshift(addChat)\n+\n+          client.writeQuery({\n+            query: queries.chats,\n+            data: { chats },\n+          })\n+        }\n+      },\n+    },\n+  )\n+\n+  const onUserPick = user => {\n+    addChat({\n+      optimisticResponse: {\n+        __typename: 'Mutation',\n+        addChat: {\n+          __typename: 'Chat',\n+          id: uniqid(),\n+          name: user.name,\n+          picture: user.picture,\n+          allTimeMembers: [],\n+          owner: me,\n+          isGroup: false,\n+          lastMessage: null,\n+        },\n+      },\n+      variables: {\n+        userId: user.id,\n+      },\n+    }).then(({ data: { addChat } }) => {\n+      history.push(`/chats/${addChat.id}`)\n+    })\n+  }\n+\n+  return (\n+    <Style className=\"NewChatScreen Screen\">\n+      <Navbar>\n+        <NewChatNavbar history={history} />\n+      </Navbar>\n+      <div className=\"NewChatScreen-users-list\">\n+        <NewGroupButton history={history} />\n+        <Suspense fallback={null}>\n+          <UsersList onUserPick={onUserPick} />\n+        </Suspense>\n+      </div>\n+    </Style>\n+  )\n+}\ndiff --git a/client/src/components/NewGroupScreen/CreateGroupButton.tsx b/client/src/components/NewGroupScreen/CreateGroupButton.tsx\nnew file mode 100644\nindex 0000000..587bbb1\n--- /dev/null\n+++ b/client/src/components/NewGroupScreen/CreateGroupButton.tsx\n@@ -0,0 +1,42 @@\n+import Button from '@material-ui/core/Button'\n+import AddIcon from '@material-ui/icons/Add'\n+import { History } from 'history'\n+import * as React from 'react'\n+import styled from 'styled-components'\n+import { User } from '../../graphql/types'\n+\n+const Style = styled.div`\n+  position: fixed;\n+  right: 10px;\n+  bottom: 10px;\n+\n+  button {\n+    min-width: 50px;\n+    width: 50px;\n+    height: 50px;\n+    border-radius: 999px;\n+    background-color: var(--secondary-bg);\n+    color: white;\n+  }\n+`\n+\n+interface CreateGroupButtonProps {\n+  history: History\n+  users: User.Fragment[]\n+}\n+\n+export default ({ history, users }: CreateGroupButtonProps) => {\n+  const onClick = () => {\n+    history.push('/new-chat/group/details', {\n+      users,\n+    })\n+  }\n+\n+  return (\n+    <Style className=\"CreateGroupButton\">\n+      <Button variant=\"contained\" color=\"secondary\" onClick={onClick}>\n+        <AddIcon />\n+      </Button>\n+    </Style>\n+  )\n+}\ndiff --git a/client/src/components/NewGroupScreen/NewGroupNavbar.tsx b/client/src/components/NewGroupScreen/NewGroupNavbar.tsx\nnew file mode 100644\nindex 0000000..49c6e24\n--- /dev/null\n+++ b/client/src/components/NewGroupScreen/NewGroupNavbar.tsx\n@@ -0,0 +1,39 @@\n+import Button from '@material-ui/core/Button'\n+import ArrowBackIcon from '@material-ui/icons/ArrowBack'\n+import { History } from 'history'\n+import * as React from 'react'\n+import styled from 'styled-components'\n+\n+const Style = styled.div`\n+  padding: 0;\n+  display: flex;\n+  flex-direction: row;\n+  margin-left: -20px;\n+\n+  .NewGroupNavbar-title {\n+    line-height: 56px;\n+  }\n+\n+  .NewGroupNavbar-back-button {\n+    color: var(--primary-text);\n+  }\n+`\n+\n+interface NewGroupNavbarProps {\n+  history: History\n+}\n+\n+export default ({ history }: NewGroupNavbarProps) => {\n+  const navToChats = () => {\n+    history.push('/new-chat')\n+  }\n+\n+  return (\n+    <Style className=\"NewGroupNavbar\">\n+      <Button className=\"NewGroupNavbar-back-button\" onClick={navToChats}>\n+        <ArrowBackIcon />\n+      </Button>\n+      <div className=\"NewGroupNavbar-title\">New Chat Group</div>\n+    </Style>\n+  )\n+}\ndiff --git a/client/src/components/NewGroupScreen/index.tsx b/client/src/components/NewGroupScreen/index.tsx\nnew file mode 100644\nindex 0000000..a9ca6f3\n--- /dev/null\n+++ b/client/src/components/NewGroupScreen/index.tsx\n@@ -0,0 +1,32 @@\n+import * as React from 'react'\n+import { useState, Suspense } from 'react'\n+import { RouteComponentProps } from 'react-router-dom'\n+import styled from 'styled-components'\n+import Navbar from '../Navbar'\n+import UsersList from '../UsersList'\n+import CreateGroupButton from './CreateGroupButton'\n+import NewGroupNavbar from './NewGroupNavbar'\n+\n+const Style = styled.div`\n+  .UsersList {\n+    height: calc(100% - 56px);\n+    overflow-y: overlay;\n+  }\n+`\n+\n+export default ({ history }: RouteComponentProps) => {\n+  const [selectedUsers, setSelectedUsers] = useState([])\n+\n+  return (\n+    <Style className=\"NewGroupScreen Screen\">\n+      <Navbar>\n+        <NewGroupNavbar history={history} />\n+      </Navbar>\n+      <Suspense fallback={null}>\n+        <UsersList selectable onSelectionChange={setSelectedUsers} />\n+      </Suspense>\n+\n+      {!!selectedUsers.length && <CreateGroupButton history={history} users={selectedUsers} />}\n+    </Style>\n+  )\n+}\ndiff --git a/client/src/components/SettingsScreen/SettingsForm.tsx b/client/src/components/SettingsScreen/SettingsForm.tsx\nnew file mode 100644\nindex 0000000..acb1531\n--- /dev/null\n+++ b/client/src/components/SettingsScreen/SettingsForm.tsx\n@@ -0,0 +1,134 @@\n+import TextField from '@material-ui/core/TextField'\n+import EditIcon from '@material-ui/icons/Edit'\n+import { defaultDataIdFromObject } from 'apollo-cache-inmemory'\n+import gql from 'graphql-tag'\n+import * as React from 'react'\n+import { useEffect, useState } from 'react'\n+import { useQuery, useMutation } from 'react-apollo-hooks'\n+import { RouteComponentProps } from 'react-router-dom'\n+import styled from 'styled-components'\n+import * as fragments from '../../graphql/fragments'\n+import { SettingsFormMutation } from '../../graphql/types'\n+import { useMe } from '../../services/auth.service'\n+import { pickPicture, uploadProfilePicture } from '../../services/picture.service'\n+import Navbar from '../Navbar'\n+import SettingsNavbar from './SettingsNavbar'\n+\n+const Style = styled.div`\n+  .SettingsForm-picture {\n+    max-width: 300px;\n+    display: block;\n+    margin: auto;\n+    margin-top: 50px;\n+\n+    img {\n+      object-fit: cover;\n+      border-radius: 50%;\n+      margin-bottom: -34px;\n+      width: 300px;\n+      height: 300px;\n+    }\n+\n+    svg {\n+      float: right;\n+      font-size: 30px;\n+      opacity: 0.5;\n+      border-left: black solid 1px;\n+      padding-left: 5px;\n+      cursor: pointer;\n+    }\n+  }\n+\n+  .SettingsForm-name-input {\n+    display: block;\n+    margin: auto;\n+    width: calc(100% - 50px);\n+    margin-top: 50px;\n+\n+    > div {\n+      width: 100%;\n+    }\n+  }\n+`\n+\n+const mutation = gql`\n+  mutation SettingsFormMutation($name: String, $picture: String) {\n+    updateUser(name: $name, picture: $picture) {\n+      ...User\n+    }\n+  }\n+  ${fragments.user}\n+`\n+\n+export default ({ history }: RouteComponentProps) => {\n+  const me = useMe()\n+  const [myName, setMyName] = useState(me.name)\n+  const [myPicture, setMyPicture] = useState(me.picture)\n+\n+  const updateUser = useMutation<SettingsFormMutation.Mutation, SettingsFormMutation.Variables>(\n+    mutation,\n+    {\n+      variables: { name: myName, picture: myPicture },\n+      optimisticResponse: {\n+        __typename: 'Mutation',\n+        updateUser: {\n+          __typename: 'User',\n+          id: me.id,\n+          picture: myPicture,\n+          name: myName,\n+        },\n+      },\n+      update: (client, { data: { updateUser } }) => {\n+        me.picture = myPicture\n+        me.name = myPicture\n+\n+        client.writeFragment({\n+          id: defaultDataIdFromObject(me),\n+          fragment: fragments.user,\n+          data: me,\n+        })\n+      },\n+    },\n+  )\n+\n+  useEffect(\n+    () => {\n+      if (myPicture !== me.picture) {\n+        updateUser()\n+      }\n+    },\n+    [myPicture],\n+  )\n+\n+  const updateName = ({ target }) => {\n+    setMyName(target.value)\n+  }\n+\n+  const updatePicture = async () => {\n+    const file = await pickPicture()\n+\n+    if (!file) return\n+\n+    const { url } = await uploadProfilePicture(file)\n+\n+    setMyPicture(url)\n+  }\n+\n+  return (\n+    <Style className={name}>\n+      <div className=\"SettingsForm-picture\">\n+        <img src={myPicture || '/assets/default-profile-pic.jpg'} />\n+        <EditIcon onClick={updatePicture} />\n+      </div>\n+      <TextField\n+        className=\"SettingsForm-name-input\"\n+        label=\"Name\"\n+        value={myName}\n+        onChange={updateName}\n+        onBlur={updateUser}\n+        margin=\"normal\"\n+        placeholder=\"Enter your name\"\n+      />\n+    </Style>\n+  )\n+}\ndiff --git a/client/src/components/SettingsScreen/SettingsNavbar.tsx b/client/src/components/SettingsScreen/SettingsNavbar.tsx\nnew file mode 100644\nindex 0000000..bad30c8\n--- /dev/null\n+++ b/client/src/components/SettingsScreen/SettingsNavbar.tsx\n@@ -0,0 +1,49 @@\n+import Button from '@material-ui/core/Button'\n+import ArrowBackIcon from '@material-ui/icons/ArrowBack'\n+import { History } from 'history'\n+import * as React from 'react'\n+import styled from 'styled-components'\n+\n+const Style = styled.div`\n+  padding: 0;\n+  display: flex;\n+  flex-direction: row;\n+  margin-left: -20px;\n+\n+  .SettingsNavbar-title {\n+    line-height: 56px;\n+  }\n+\n+  .SettingsNavbar-back-button {\n+    color: var(--primary-text);\n+  }\n+\n+  .SettingsNavbar-picture {\n+    height: 40px;\n+    width: 40px;\n+    margin-top: 3px;\n+    margin-left: -22px;\n+    object-fit: cover;\n+    padding: 5px;\n+    border-radius: 50%;\n+  }\n+`\n+\n+interface SettingsNavbarProps {\n+  history: History\n+}\n+\n+export default ({ history }: SettingsNavbarProps) => {\n+  const navToChats = () => {\n+    history.push('/chats')\n+  }\n+\n+  return (\n+    <Style className={name}>\n+      <Button className=\"SettingsNavbar-back-button\" onClick={navToChats}>\n+        <ArrowBackIcon />\n+      </Button>\n+      <div className=\"SettingsNavbar-title\">Settings</div>\n+    </Style>\n+  )\n+}\ndiff --git a/client/src/components/SettingsScreen/index.tsx b/client/src/components/SettingsScreen/index.tsx\nnew file mode 100644\nindex 0000000..c5bbbe5\n--- /dev/null\n+++ b/client/src/components/SettingsScreen/index.tsx\n@@ -0,0 +1,17 @@\n+import * as React from 'react'\n+import { Suspense } from 'react'\n+import { RouteComponentProps } from 'react-router-dom'\n+import Navbar from '../Navbar'\n+import SettingsForm from './SettingsForm'\n+import SettingsNavbar from './SettingsNavbar'\n+\n+export default ({ history }: RouteComponentProps) => (\n+  <div className=\"SettingsScreen Screen\">\n+    <Navbar>\n+      <SettingsNavbar history={history} />\n+    </Navbar>\n+    <Suspense fallback={null}>\n+      <SettingsForm />\n+    </Suspense>\n+  </div>\n+)\ndiff --git a/client/src/components/UsersList.tsx b/client/src/components/UsersList.tsx\nnew file mode 100644\nindex 0000000..0b35db1\n--- /dev/null\n+++ b/client/src/components/UsersList.tsx\n@@ -0,0 +1,112 @@\n+import List from '@material-ui/core/List'\n+import ListItem from '@material-ui/core/ListItem'\n+import CheckCircle from '@material-ui/icons/CheckCircle'\n+import gql from 'graphql-tag'\n+import * as React from 'react'\n+import { useState } from 'react'\n+import { useQuery } from 'react-apollo-hooks'\n+import styled from 'styled-components'\n+import * as fragments from '../graphql/fragments'\n+import { UsersListQuery, User } from '../graphql/types'\n+\n+const Style = styled.div`\n+  .UsersList-users-list {\n+    padding: 0;\n+  }\n+\n+  .UsersList-user-item {\n+    position: relative;\n+    padding: 7.5px 15px;\n+    display: flex;\n+    ${props => props.selectable && 'cursor: pointer;'}\n+  }\n+\n+  .UsersList-profile-pic {\n+    height: 50px;\n+    width: 50px;\n+    object-fit: cover;\n+    border-radius: 50%;\n+  }\n+\n+  .UsersList-name {\n+    padding-left: 15px;\n+    font-weight: bold;\n+  }\n+\n+  .UsersList-checkmark {\n+    position: absolute;\n+    left: 50px;\n+    top: 35px;\n+    color: var(--secondary-bg);\n+    background-color: white;\n+    border-radius: 50%;\n+  }\n+`\n+\n+const query = gql`\n+  query UsersListQuery {\n+    users {\n+      ...User\n+    }\n+  }\n+  ${fragments.user}\n+`\n+\n+interface UsersListProps {\n+  selectable?: boolean\n+  onSelectionChange?: (users: User.Fragment[]) => void\n+  onUserPick?: (user: User.Fragment) => void\n+}\n+\n+export default (props: UsersListProps) => {\n+  const { selectable, onSelectionChange, onUserPick } = {\n+    selectable: false,\n+    onSelectionChange: () => {},\n+    onUserPick: () => {},\n+    ...props,\n+  }\n+\n+  const [selectedUsers, setSelectedUsers] = useState([])\n+  const {\n+    data: { users },\n+  } = useQuery<UsersListQuery.Query>(query)\n+\n+  const onListItemClick = user => {\n+    if (!selectable) {\n+      return onUserPick(user)\n+    }\n+\n+    if (selectedUsers.includes(user)) {\n+      const index = selectedUsers.indexOf(user)\n+      selectedUsers.splice(index, 1)\n+    } else {\n+      selectedUsers.push(user)\n+    }\n+\n+    setSelectedUsers(selectedUsers)\n+    onSelectionChange(selectedUsers)\n+  }\n+\n+  return (\n+    <Style className=\"UsersList\" selectable={selectable}>\n+      <List className=\"UsersList-users-list\">\n+        {users.map(user => (\n+          <ListItem\n+            className=\"UsersList-user-item\"\n+            key={user.id}\n+            button\n+            onClick={onListItemClick.bind(null, user)}\n+          >\n+            <img\n+              className=\"UsersList-profile-pic\"\n+              src={user.picture || '/assets/default-profile-pic.jpg'}\n+            />\n+            <div className=\"UsersList-name\">{user.name}</div>\n+\n+            {selectedUsers.includes(user) && <CheckCircle className=\"UsersList-checkmark\" />}\n+          </ListItem>\n+        ))}\n+      </List>\n+    </Style>\n+  )\n+}\ndiff --git a/client/src/graphql/.gitignore b/client/src/graphql/.gitignore\nnew file mode 100644\nindex 0000000..92fa9bc\n--- /dev/null\n+++ b/client/src/graphql/.gitignore\n@@ -0,0 +1,2 @@\n+introspection.json\n+types.ts\ndiff --git a/client/src/graphql/fragments/chat.fragment.ts b/client/src/graphql/fragments/chat.fragment.ts\nnew file mode 100644\nindex 0000000..b72541d\n--- /dev/null\n+++ b/client/src/graphql/fragments/chat.fragment.ts\n@@ -0,0 +1,23 @@\n+import gql from 'graphql-tag'\n+import message from './message.fragment'\n+\n+export default gql `\n+  fragment Chat on Chat {\n+    id\n+    name\n+    picture\n+    allTimeMembers {\n+      id\n+      name\n+      picture\n+    }\n+    owner {\n+      id\n+    }\n+    lastMessage {\n+      ...Message\n+    }\n+    isGroup\n+  }\n+  ${message}\n+`\ndiff --git a/client/src/graphql/fragments/fullChat.fragment.ts b/client/src/graphql/fragments/fullChat.fragment.ts\nnew file mode 100644\nindex 0000000..631a41d\n--- /dev/null\n+++ b/client/src/graphql/fragments/fullChat.fragment.ts\n@@ -0,0 +1,14 @@\n+import gql from 'graphql-tag'\n+import chat from './chat.fragment'\n+import message from './message.fragment'\n+\n+export default gql `\n+  fragment FullChat on Chat {\n+    ...Chat\n+    messages {\n+      ...Message\n+    }\n+  }\n+  ${chat}\n+  ${message}\n+`\ndiff --git a/client/src/graphql/fragments/index.ts b/client/src/graphql/fragments/index.ts\nnew file mode 100644\nindex 0000000..7b6c3c0\n--- /dev/null\n+++ b/client/src/graphql/fragments/index.ts\n@@ -0,0 +1,4 @@\n+export { default as chat } from './chat.fragment'\n+export { default as fullChat } from './fullChat.fragment'\n+export { default as message } from './message.fragment'\n+export { default as user } from './user.fragment'\ndiff --git a/client/src/graphql/fragments/message.fragment.ts b/client/src/graphql/fragments/message.fragment.ts\nnew file mode 100644\nindex 0000000..77ab13d\n--- /dev/null\n+++ b/client/src/graphql/fragments/message.fragment.ts\n@@ -0,0 +1,33 @@\n+import gql from 'graphql-tag'\n+\n+export default gql`\n+  fragment Message on Message {\n+    id\n+    chat {\n+      id\n+    }\n+    sender {\n+      id\n+      name\n+    }\n+    content\n+    createdAt\n+    recipients {\n+      user {\n+        id\n+      }\n+      message {\n+        id\n+        chat {\n+          id\n+        }\n+      }\n+      chat {\n+        id\n+      }\n+      receivedAt\n+      readAt\n+    }\n+    ownership\n+  }\n+`\ndiff --git a/client/src/graphql/fragments/user.fragment.ts b/client/src/graphql/fragments/user.fragment.ts\nnew file mode 100644\nindex 0000000..c87010b\n--- /dev/null\n+++ b/client/src/graphql/fragments/user.fragment.ts\n@@ -0,0 +1,9 @@\n+import gql from 'graphql-tag'\n+\n+export default gql`\n+  fragment User on User {\n+    id\n+    name\n+    picture\n+  }\n+`\ndiff --git a/client/src/graphql/queries/chats.query.ts b/client/src/graphql/queries/chats.query.ts\nnew file mode 100644\nindex 0000000..40016ed\n--- /dev/null\n+++ b/client/src/graphql/queries/chats.query.ts\n@@ -0,0 +1,11 @@\n+import gql from 'graphql-tag'\n+import * as fragments from '../fragments'\n+\n+export default gql `\n+  query Chats {\n+    chats {\n+      ...Chat\n+    }\n+  }\n+  ${fragments.chat}\n+`\ndiff --git a/client/src/graphql/queries/index.ts b/client/src/graphql/queries/index.ts\nnew file mode 100644\nindex 0000000..a54febb\n--- /dev/null\n+++ b/client/src/graphql/queries/index.ts\n@@ -0,0 +1,3 @@\n+export { default as chats } from './chats.query'\n+export { default as users } from './users.query'\n+export { default as me } from './me.query'\ndiff --git a/client/src/graphql/queries/me.query.ts b/client/src/graphql/queries/me.query.ts\nnew file mode 100644\nindex 0000000..d48ee66\n--- /dev/null\n+++ b/client/src/graphql/queries/me.query.ts\n@@ -0,0 +1,11 @@\n+import gql from 'graphql-tag'\n+import * as fragments from '../fragments'\n+\n+export default gql `\n+  query Me {\n+    me {\n+      ...User\n+    }\n+  }\n+  ${fragments.user}\n+`\ndiff --git a/client/src/graphql/queries/users.query.ts b/client/src/graphql/queries/users.query.ts\nnew file mode 100644\nindex 0000000..6b8c8cc\n--- /dev/null\n+++ b/client/src/graphql/queries/users.query.ts\n@@ -0,0 +1,11 @@\n+import gql from 'graphql-tag'\n+import * as fragments from '../fragments'\n+\n+export default gql `\n+  query Users {\n+    users {\n+      ...User\n+    }\n+  }\n+  ${fragments.user}\n+`\ndiff --git a/client/src/graphql/subscriptions/chatAdded.subscription.ts b/client/src/graphql/subscriptions/chatAdded.subscription.ts\nnew file mode 100644\nindex 0000000..747116c\n--- /dev/null\n+++ b/client/src/graphql/subscriptions/chatAdded.subscription.ts\n@@ -0,0 +1,11 @@\n+import gql from 'graphql-tag'\n+import * as fragments from '../fragments'\n+\n+export default gql `\n+  subscription ChatAdded {\n+    chatAdded {\n+      ...Chat\n+    }\n+  }\n+  ${fragments.chat}\n+`\ndiff --git a/client/src/graphql/subscriptions/chatUpdated.subscription.ts b/client/src/graphql/subscriptions/chatUpdated.subscription.ts\nnew file mode 100644\nindex 0000000..1cca07e\n--- /dev/null\n+++ b/client/src/graphql/subscriptions/chatUpdated.subscription.ts\n@@ -0,0 +1,11 @@\n+import gql from 'graphql-tag'\n+import * as fragments from '../fragments'\n+\n+export default gql `\n+  subscription ChatUpdated {\n+    chatUpdated {\n+      ...Chat\n+    }\n+  }\n+  ${fragments.chat}\n+`\ndiff --git a/client/src/graphql/subscriptions/index.ts b/client/src/graphql/subscriptions/index.ts\nnew file mode 100644\nindex 0000000..45ad20d\n--- /dev/null\n+++ b/client/src/graphql/subscriptions/index.ts\n@@ -0,0 +1,5 @@\n+export { default as chatUpdated } from './chatUpdated.subscription'\n+export { default as messageAdded } from './messageAdded.subscription'\n+export { default as chatAdded } from './chatAdded.subscription'\n+export { default as userAdded } from './userAdded.subscription'\n+export { default as userUpdated } from './userUpdated.subscription'\ndiff --git a/client/src/graphql/subscriptions/messageAdded.subscription.ts b/client/src/graphql/subscriptions/messageAdded.subscription.ts\nnew file mode 100644\nindex 0000000..b16392b\n--- /dev/null\n+++ b/client/src/graphql/subscriptions/messageAdded.subscription.ts\n@@ -0,0 +1,11 @@\n+import gql from 'graphql-tag'\n+import * as fragments from '../fragments'\n+\n+export default gql `\n+  subscription MessageAdded {\n+    messageAdded {\n+      ...Message\n+    }\n+  }\n+  ${fragments.message}\n+`\ndiff --git a/client/src/graphql/subscriptions/userAdded.subscription.ts b/client/src/graphql/subscriptions/userAdded.subscription.ts\nnew file mode 100644\nindex 0000000..e5bfaba\n--- /dev/null\n+++ b/client/src/graphql/subscriptions/userAdded.subscription.ts\n@@ -0,0 +1,11 @@\n+import gql from 'graphql-tag'\n+import * as fragments from '../fragments'\n+\n+export default gql `\n+  subscription UserAdded {\n+    userAdded {\n+      ...User\n+    }\n+  }\n+  ${fragments.user}\n+`\ndiff --git a/client/src/graphql/subscriptions/userUpdated.subscription.ts b/client/src/graphql/subscriptions/userUpdated.subscription.ts\nnew file mode 100644\nindex 0000000..e467b69\n--- /dev/null\n+++ b/client/src/graphql/subscriptions/userUpdated.subscription.ts\n@@ -0,0 +1,11 @@\n+import gql from 'graphql-tag'\n+import * as fragments from '../fragments'\n+\n+export default gql `\n+  subscription UserUpdated {\n+    userUpdated {\n+      ...User\n+    }\n+  }\n+  ${fragments.user}\n+`\ndiff --git a/client/src/index.css b/client/src/index.css\nnew file mode 100755\nindex 0000000..0f4d0fe\n--- /dev/null\n+++ b/client/src/index.css\n@@ -0,0 +1,26 @@\n+:root {\n+  --primary-bg: #2c6157;\n+  --secondary-bg: #6fd056;\n+  --primary-text: white;\n+  --secondary-text: white;\n+}\n+\n+html {\n+  height: 100%;\n+}\n+\n+body {\n+  height: 100%;\n+  margin: 0;\n+  padding: 0;\n+  font-family: Roboto, \"Helvetica Neue\", sans-serif;\n+}\n+\n+#root {\n+  height: 100%;\n+}\n+\n+.Screen {\n+  position: relative;\n+  height: 100%;\n+}\ndiff --git a/client/src/index.tsx b/client/src/index.tsx\nnew file mode 100755\nindex 0000000..092f7f7\n--- /dev/null\n+++ b/client/src/index.tsx\n@@ -0,0 +1,34 @@\n+import { MuiThemeProvider, createMuiTheme } from '@material-ui/core/styles'\n+import React from 'react';\n+import { Suspense } from 'react'\n+import ReactDOM from 'react-dom';\n+import { ApolloProvider } from 'react-apollo-hooks';\n+import './index.css';\n+import App from './App';\n+import apolloClient from './apollo-client'\n+import * as serviceWorker from './serviceWorker';\n+\n+const theme = createMuiTheme({\n+  palette: {\n+    primary: { main: '#2c6157' },\n+    secondary: { main: '#6fd056' },\n+  },\n+  typography: {\n+    useNextVariants: true,\n+  },\n+})\n+\n+ReactDOM.render(\n+  <MuiThemeProvider theme={theme}>\n+    <ApolloProvider client={apolloClient}>\n+      <Suspense fallback={null}>\n+        <App />\n+      </Suspense>\n+    </ApolloProvider>\n+  </MuiThemeProvider>\n+, document.getElementById('root'));\n+\n+// If you want your app to work offline and load faster, you can change\n+// unregister() to register() below. Note this comes with some pitfalls.\n+// Learn more about service workers: http://bit.ly/CRA-PWA\n+serviceWorker.unregister();\ndiff --git a/client/src/logo.svg b/client/src/logo.svg\nnew file mode 100755\nindex 0000000..6b60c10\n--- /dev/null\n+++ b/client/src/logo.svg\n@@ -0,0 +1,7 @@\n+<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 841.9 595.3\">\n+    <g fill=\"#61DAFB\">\n+        <path d=\"M666.3 296.5c0-32.5-40.7-63.3-103.1-82.4 14.4-63.6 8-114.2-20.2-130.4-6.5-3.8-14.1-5.6-22.4-5.6v22.3c4.6 0 8.3.9 11.4 2.6 13.6 7.8 19.5 37.5 14.9 75.7-1.1 9.4-2.9 19.3-5.1 29.4-19.6-4.8-41-8.5-63.5-10.9-13.5-18.5-27.5-35.3-41.6-50 32.6-30.3 63.2-46.9 84-46.9V78c-27.5 0-63.5 19.6-99.9 53.6-36.4-33.8-72.4-53.2-99.9-53.2v22.3c20.7 0 51.4 16.5 84 46.6-14 14.7-28 31.4-41.3 49.9-22.6 2.4-44 6.1-63.6 11-2.3-10-4-19.7-5.2-29-4.7-38.2 1.1-67.9 14.6-75.8 3-1.8 6.9-2.6 11.5-2.6V78.5c-8.4 0-16 1.8-22.6 5.6-28.1 16.2-34.4 66.7-19.9 130.1-62.2 19.2-102.7 49.9-102.7 82.3 0 32.5 40.7 63.3 103.1 82.4-14.4 63.6-8 114.2 20.2 130.4 6.5 3.8 14.1 5.6 22.5 5.6 27.5 0 63.5-19.6 99.9-53.6 36.4 33.8 72.4 53.2 99.9 53.2 8.4 0 16-1.8 22.6-5.6 28.1-16.2 34.4-66.7 19.9-130.1 62-19.1 102.5-49.9 102.5-82.3zm-130.2-66.7c-3.7 12.9-8.3 26.2-13.5 39.5-4.1-8-8.4-16-13.1-24-4.6-8-9.5-15.8-14.4-23.4 14.2 2.1 27.9 4.7 41 7.9zm-45.8 106.5c-7.8 13.5-15.8 26.3-24.1 38.2-14.9 1.3-30 2-45.2 2-15.1 0-30.2-.7-45-1.9-8.3-11.9-16.4-24.6-24.2-38-7.6-13.1-14.5-26.4-20.8-39.8 6.2-13.4 13.2-26.8 20.7-39.9 7.8-13.5 15.8-26.3 24.1-38.2 14.9-1.3 30-2 45.2-2 15.1 0 30.2.7 45 1.9 8.3 11.9 16.4 24.6 24.2 38 7.6 13.1 14.5 26.4 20.8 39.8-6.3 13.4-13.2 26.8-20.7 39.9zm32.3-13c5.4 13.4 10 26.8 13.8 39.8-13.1 3.2-26.9 5.9-41.2 8 4.9-7.7 9.8-15.6 14.4-23.7 4.6-8 8.9-16.1 13-24.1zM421.2 430c-9.3-9.6-18.6-20.3-27.8-32 9 .4 18.2.7 27.5.7 9.4 0 18.7-.2 27.8-.7-9 11.7-18.3 22.4-27.5 32zm-74.4-58.9c-14.2-2.1-27.9-4.7-41-7.9 3.7-12.9 8.3-26.2 13.5-39.5 4.1 8 8.4 16 13.1 24 4.7 8 9.5 15.8 14.4 23.4zM420.7 163c9.3 9.6 18.6 20.3 27.8 32-9-.4-18.2-.7-27.5-.7-9.4 0-18.7.2-27.8.7 9-11.7 18.3-22.4 27.5-32zm-74 58.9c-4.9 7.7-9.8 15.6-14.4 23.7-4.6 8-8.9 16-13 24-5.4-13.4-10-26.8-13.8-39.8 13.1-3.1 26.9-5.8 41.2-7.9zm-90.5 125.2c-35.4-15.1-58.3-34.9-58.3-50.6 0-15.7 22.9-35.6 58.3-50.6 8.6-3.7 18-7 27.7-10.1 5.7 19.6 13.2 40 22.5 60.9-9.2 20.8-16.6 41.1-22.2 60.6-9.9-3.1-19.3-6.5-28-10.2zM310 490c-13.6-7.8-19.5-37.5-14.9-75.7 1.1-9.4 2.9-19.3 5.1-29.4 19.6 4.8 41 8.5 63.5 10.9 13.5 18.5 27.5 35.3 41.6 50-32.6 30.3-63.2 46.9-84 46.9-4.5-.1-8.3-1-11.3-2.7zm237.2-76.2c4.7 38.2-1.1 67.9-14.6 75.8-3 1.8-6.9 2.6-11.5 2.6-20.7 0-51.4-16.5-84-46.6 14-14.7 28-31.4 41.3-49.9 22.6-2.4 44-6.1 63.6-11 2.3 10.1 4.1 19.8 5.2 29.1zm38.5-66.7c-8.6 3.7-18 7-27.7 10.1-5.7-19.6-13.2-40-22.5-60.9 9.2-20.8 16.6-41.1 22.2-60.6 9.9 3.1 19.3 6.5 28.1 10.2 35.4 15.1 58.3 34.9 58.3 50.6-.1 15.7-23 35.6-58.4 50.6zM320.8 78.4z\"/>\n+        <circle cx=\"420.9\" cy=\"296.5\" r=\"45.7\"/>\n+        <path d=\"M520.5 78.1z\"/>\n+    </g>\n+</svg>\ndiff --git a/client/src/polyfills/react-apollo-hooks.ts b/client/src/polyfills/react-apollo-hooks.ts\nnew file mode 100644\nindex 0000000..92c1d12\n--- /dev/null\n+++ b/client/src/polyfills/react-apollo-hooks.ts\n@@ -0,0 +1,72 @@\n+import { DataProxy } from 'apollo-cache'\n+import { OperationVariables, FetchPolicy } from 'apollo-client'\n+import { DocumentNode, GraphQLError } from 'graphql'\n+import { useEffect, useMemo, useRef, useState } from 'react'\n+import { useApolloClient } from 'react-apollo-hooks'\n+import * as isEqual from 'react-fast-compare'\n+\n+export type SubscriptionOptions<T, TVariables> = {\n+  variables?: TVariables\n+  fetchPolicy?: FetchPolicy\n+  onSubscriptionData?: (options?: { client?: DataProxy; subscriptionData?: T }) => any\n+}\n+\n+export const useSubscription = <T, TVariables = OperationVariables>(\n+  query: DocumentNode,\n+  options: SubscriptionOptions<T, TVariables> = {},\n+): {\n+  data: T | { [key: string]: void }\n+  error?: GraphQLError\n+  loading: boolean\n+} => {\n+  const onSubscriptionData = options.onSubscriptionData\n+  const prevOptions = useRef<typeof options | null>(null)\n+  const client = useApolloClient()\n+  const [data, setData] = useState<T | {}>({})\n+  const [error, setError] = useState<GraphQLError | null>(null)\n+  const [loading, setLoading] = useState<boolean>(true)\n+\n+  const subscriptionOptions = {\n+    query,\n+    variables: options.variables,\n+    fetchPolicy: options.fetchPolicy,\n+  }\n+\n+  useEffect(\n+    () => {\n+      prevOptions.current = subscriptionOptions\n+      const subscription = client\n+        .subscribe<{ data: T }, TVariables>(subscriptionOptions)\n+        .subscribe({\n+          next: ({ data }) => {\n+            setData(data)\n+\n+            if (onSubscriptionData) {\n+              onSubscriptionData({ client, subscriptionData: data })\n+            }\n+          },\n+          error: err => {\n+            setError(err)\n+            setLoading(false)\n+          },\n+          complete: () => {\n+            setLoading(false)\n+          },\n+        })\n+\n+      return () => {\n+        subscription.unsubscribe()\n+      }\n+    },\n+    [isEqual(prevOptions.current, subscriptionOptions) ? prevOptions.current : subscriptionOptions],\n+  )\n+\n+  return useMemo(\n+    () => ({\n+      data,\n+      error,\n+      loading,\n+    }),\n+    [data, error, loading],\n+  )\n+}\ndiff --git a/client/src/react-app-env.d.ts b/client/src/react-app-env.d.ts\nnew file mode 100644\nindex 0000000..6431bc5\n--- /dev/null\n+++ b/client/src/react-app-env.d.ts\n@@ -0,0 +1 @@\n+/// <reference types=\"react-scripts\" />\ndiff --git a/client/src/serviceWorker.js b/client/src/serviceWorker.js\nnew file mode 100755\nindex 0000000..2283ff9\n--- /dev/null\n+++ b/client/src/serviceWorker.js\n@@ -0,0 +1,135 @@\n+// This optional code is used to register a service worker.\n+// register() is not called by default.\n+\n+// This lets the app load faster on subsequent visits in production, and gives\n+// it offline capabilities. However, it also means that developers (and users)\n+// will only see deployed updates on subsequent visits to a page, after all the\n+// existing tabs open on the page have been closed, since previously cached\n+// resources are updated in the background.\n+\n+// To learn more about the benefits of this model and instructions on how to\n+// opt-in, read http://bit.ly/CRA-PWA\n+\n+const isLocalhost = Boolean(\n+  window.location.hostname === 'localhost' ||\n+    // [::1] is the IPv6 localhost address.\n+    window.location.hostname === '[::1]' ||\n+    // 127.0.0.1/8 is considered localhost for IPv4.\n+    window.location.hostname.match(\n+      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n+    )\n+);\n+\n+export function register(config) {\n+  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n+    // The URL constructor is available in all browsers that support SW.\n+    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n+    if (publicUrl.origin !== window.location.origin) {\n+      // Our service worker won't work if PUBLIC_URL is on a different origin\n+      // from what our page is served on. This might happen if a CDN is used to\n+      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n+      return;\n+    }\n+\n+    window.addEventListener('load', () => {\n+      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n+\n+      if (isLocalhost) {\n+        // This is running on localhost. Let's check if a service worker still exists or not.\n+        checkValidServiceWorker(swUrl, config);\n+\n+        // Add some additional logging to localhost, pointing developers to the\n+        // service worker/PWA documentation.\n+        navigator.serviceWorker.ready.then(() => {\n+          console.log(\n+            'This web app is being served cache-first by a service ' +\n+              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n+          );\n+        });\n+      } else {\n+        // Is not localhost. Just register service worker\n+        registerValidSW(swUrl, config);\n+      }\n+    });\n+  }\n+}\n+\n+function registerValidSW(swUrl, config) {\n+  navigator.serviceWorker\n+    .register(swUrl)\n+    .then(registration => {\n+      registration.onupdatefound = () => {\n+        const installingWorker = registration.installing;\n+        if (installingWorker == null) {\n+          return;\n+        }\n+        installingWorker.onstatechange = () => {\n+          if (installingWorker.state === 'installed') {\n+            if (navigator.serviceWorker.controller) {\n+              // At this point, the updated precached content has been fetched,\n+              // but the previous service worker will still serve the older\n+              // content until all client tabs are closed.\n+              console.log(\n+                'New content is available and will be used when all ' +\n+                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n+              );\n+\n+              // Execute callback\n+              if (config && config.onUpdate) {\n+                config.onUpdate(registration);\n+              }\n+            } else {\n+              // At this point, everything has been precached.\n+              // It's the perfect time to display a\n+              // \"Content is cached for offline use.\" message.\n+              console.log('Content is cached for offline use.');\n+\n+              // Execute callback\n+              if (config && config.onSuccess) {\n+                config.onSuccess(registration);\n+              }\n+            }\n+          }\n+        };\n+      };\n+    })\n+    .catch(error => {\n+      console.error('Error during service worker registration:', error);\n+    });\n+}\n+\n+function checkValidServiceWorker(swUrl, config) {\n+  // Check if the service worker can be found. If it can't reload the page.\n+  fetch(swUrl)\n+    .then(response => {\n+      // Ensure service worker exists, and that we really are getting a JS file.\n+      const contentType = response.headers.get('content-type');\n+      if (\n+        response.status === 404 ||\n+        (contentType != null && contentType.indexOf('javascript') === -1)\n+      ) {\n+        // No service worker found. Probably a different app. Reload the page.\n+        navigator.serviceWorker.ready.then(registration => {\n+          registration.unregister().then(() => {\n+            window.location.reload();\n+          });\n+        });\n+      } else {\n+        // Service worker found. Proceed as normal.\n+        registerValidSW(swUrl, config);\n+      }\n+    })\n+    .catch(() => {\n+      console.log(\n+        'No internet connection found. App is running in offline mode.'\n+      );\n+    });\n+}\n+\n+export function unregister() {\n+  if ('serviceWorker' in navigator) {\n+    navigator.serviceWorker.ready.then(registration => {\n+      registration.unregister();\n+    });\n+  }\n+}\ndiff --git a/client/src/services/auth.service.tsx b/client/src/services/auth.service.tsx\nnew file mode 100644\nindex 0000000..7f5cc7b\n--- /dev/null\n+++ b/client/src/services/auth.service.tsx\n@@ -0,0 +1,87 @@\n+import * as React from 'react'\n+import { useContext } from 'react'\n+import { useQuery } from 'react-apollo-hooks'\n+import { Redirect } from 'react-router-dom'\n+import store from '../apollo-client'\n+import * as queries from '../graphql/queries'\n+import { Me, User } from '../graphql/types'\n+import { useSubscriptions } from './cache.service'\n+\n+const MyContext = React.createContext<User.Fragment>(null)\n+\n+export const useMe = () => {\n+  return useContext(MyContext)\n+}\n+\n+export const withAuth = (Component: React.ComponentType) => {\n+  return props => {\n+    if (!getAuthHeader()) return <Redirect to=\"/sign-in\" />\n+\n+    // Validating against server\n+    const myResult = useQuery<Me.Query>(queries.me)\n+\n+    // Override TypeScript definition issue with the current version\n+    if (myResult.error) return <Redirect to=\"/sign-in\" />\n+\n+    useSubscriptions()\n+\n+    return (\n+      <MyContext.Provider value={myResult.data.me}>\n+        <Component {...props} />\n+      </MyContext.Provider>\n+    )\n+  }\n+}\n+\n+export const storeAuthHeader = (auth: string) => {\n+  localStorage.setItem('Authorization', auth)\n+}\n+\n+export const getAuthHeader = (): string | null => {\n+  return localStorage.getItem('Authorization') || null\n+}\n+\n+export const signIn = ({ username, password }) => {\n+  const auth = `Basic ${btoa(`${username}:${password}`)}`\n+\n+  return fetch(`${process.env.REACT_APP_SERVER_URL}/signin`, {\n+    method: 'POST',\n+    headers: {\n+      Authorization: auth,\n+    },\n+  }).then(res => {\n+    if (res.status < 400) {\n+      storeAuthHeader(auth)\n+    } else {\n+      return Promise.reject(res.statusText)\n+    }\n+  })\n+}\n+\n+export const signUp = ({ username, password, name }) => {\n+  return fetch(`${process.env.REACT_APP_SERVER_URL}/signup`, {\n+    method: 'POST',\n+    body: JSON.stringify({ name }),\n+    headers: {\n+      Accept: 'application/json',\n+      'Content-Type': 'application/json',\n+      Authorization: `Basic ${btoa(`${username}:${password}`)}`,\n+    },\n+  })\n+}\n+\n+export const signOut = () => {\n+  localStorage.removeItem('Authorization')\n+\n+  return store.clearStore()\n+}\n+\n+export default {\n+  useMe,\n+  withAuth,\n+  storeAuthHeader,\n+  getAuthHeader,\n+  signIn,\n+  signUp,\n+  signOut,\n+}\ndiff --git a/client/src/services/cache.service.tsx b/client/src/services/cache.service.tsx\nnew file mode 100644\nindex 0000000..b24653e\n--- /dev/null\n+++ b/client/src/services/cache.service.tsx\n@@ -0,0 +1,143 @@\n+import { defaultDataIdFromObject } from 'apollo-cache-inmemory'\n+import * as fragments from '../graphql/fragments'\n+import * as subscriptions from '../graphql/subscriptions'\n+import * as queries from '../graphql/queries'\n+import {\n+  ChatUpdated,\n+  MessageAdded,\n+  Message,\n+  Chats,\n+  FullChat,\n+  User,\n+  Users,\n+  UserAdded,\n+  UserUpdated,\n+  ChatAdded,\n+} from '../graphql/types'\n+import { useSubscription } from '../polyfills/react-apollo-hooks'\n+\n+export const useSubscriptions = () => {\n+  useSubscription<ChatAdded.Subscription>(subscriptions.chatAdded, {\n+    onSubscriptionData: ({ client, subscriptionData: { chatAdded } }) => {\n+      client.writeFragment({\n+        id: defaultDataIdFromObject(chatAdded),\n+        fragment: fragments.chat,\n+        fragmentName: 'Chat',\n+        data: chatAdded,\n+      })\n+\n+      let chats\n+      try {\n+        chats = client.readQuery<Chats.Query>({\n+          query: queries.chats,\n+        }).chats\n+      } catch (e) {}\n+\n+      if (chats && !chats.some(chat => chat.id === chatAdded.id)) {\n+        chats.unshift(chatAdded)\n+\n+        client.writeQuery({\n+          query: queries.chats,\n+          data: { chats },\n+        })\n+      }\n+    },\n+  })\n+\n+  useSubscription<ChatUpdated.Subscription>(subscriptions.chatUpdated, {\n+    onSubscriptionData: ({ client, subscriptionData: { chatUpdated } }) => {\n+      client.writeFragment({\n+        id: defaultDataIdFromObject(chatUpdated),\n+        fragment: fragments.chat,\n+        fragmentName: 'Chat',\n+        data: chatUpdated,\n+      })\n+    },\n+  })\n+\n+  useSubscription<MessageAdded.Subscription>(subscriptions.messageAdded, {\n+    onSubscriptionData: ({ client, subscriptionData: { messageAdded } }) => {\n+      client.writeFragment<Message.Fragment>({\n+        id: defaultDataIdFromObject(messageAdded),\n+        fragment: fragments.message,\n+        data: messageAdded,\n+      })\n+\n+      let fullChat\n+      try {\n+        fullChat = client.readFragment<FullChat.Fragment>({\n+          id: defaultDataIdFromObject(messageAdded.chat),\n+          fragment: fragments.fullChat,\n+          fragmentName: 'FullChat',\n+        })\n+      } catch (e) {}\n+\n+      if (fullChat && !fullChat.messages.some(message => message.id === messageAdded.id)) {\n+        fullChat.messages.push(messageAdded)\n+        fullChat.lastMessage = messageAdded\n+\n+        client.writeFragment({\n+          id: defaultDataIdFromObject(fullChat),\n+          fragment: fragments.fullChat,\n+          fragmentName: 'FullChat',\n+          data: fullChat,\n+        })\n+      }\n+\n+      let chats\n+      try {\n+        chats = client.readQuery<Chats.Query>({\n+          query: queries.chats,\n+        }).chats\n+      } catch (e) {}\n+\n+      if (chats) {\n+        const index = chats.findIndex(chat => chat.id === messageAdded.chat.id)\n+        const chat = chats[index]\n+        chats.splice(index, 1)\n+        chats.unshift(chat)\n+\n+        client.writeQuery({\n+          query: queries.chats,\n+          data: { chats },\n+        })\n+      }\n+    },\n+  })\n+\n+  useSubscription<UserAdded.Subscription>(subscriptions.userAdded, {\n+    onSubscriptionData: ({ client, subscriptionData: { userAdded } }) => {\n+      client.writeFragment({\n+        id: defaultDataIdFromObject(userAdded),\n+        fragment: fragments.user,\n+        data: userAdded,\n+      })\n+\n+      let users\n+      try {\n+        users = client.readQuery<Users.Query>({\n+          query: queries.users,\n+        }).users\n+      } catch (e) {}\n+\n+      if (users && !users.some(user => user.id === userAdded.id)) {\n+        users.push(userAdded)\n+\n+        client.writeQuery({\n+          query: queries.users,\n+          data: { users },\n+        })\n+      }\n+    },\n+  })\n+\n+  useSubscription<UserUpdated.Subscription>(subscriptions.userUpdated, {\n+    onSubscriptionData: ({ client, subscriptionData: { userUpdated } }) => {\n+      client.writeFragment({\n+        id: defaultDataIdFromObject(userUpdated),\n+        fragment: fragments.user,\n+        data: userUpdated,\n+      })\n+    },\n+  })\n+}\ndiff --git a/client/src/services/picture.service.tsx b/client/src/services/picture.service.tsx\nnew file mode 100644\nindex 0000000..0bfad30\n--- /dev/null\n+++ b/client/src/services/picture.service.tsx\n@@ -0,0 +1,31 @@\n+import { getAuthHeader } from './auth.service'\n+\n+export const pickPicture = () => {\n+  return new Promise((resolve, reject) => {\n+    const input = document.createElement('input')\n+    input.type = 'file'\n+    input.accept = 'image/*'\n+    input.onchange = e => {\n+      const target = e.target as HTMLInputElement\n+      resolve(target.files[0])\n+    }\n+    input.onerror = reject\n+    input.click()\n+  })\n+}\n+\n+export const uploadProfilePicture = file => {\n+  const formData = new FormData()\n+  formData.append('file', file)\n+  formData.append('upload_preset', 'profile-pic')\n+\n+  return fetch(`${process.env.REACT_APP_SERVER_URL}/upload-profile-pic`, {\n+    method: 'POST',\n+    body: formData,\n+    headers: {\n+      Authorization: getAuthHeader(),\n+    }\n+  }).then(res => {\n+    return res.json()\n+  })\n+}\ndiff --git a/client/tsconfig.json b/client/tsconfig.json\nnew file mode 100644\nindex 0000000..ad80f6a\n--- /dev/null\n+++ b/client/tsconfig.json\n@@ -0,0 +1,35 @@\n+{\n+  \"compilerOptions\": {\n+    \"outDir\": \"build/dist\",\n+    \"sourceMap\": true,\n+    \"declaration\": false,\n+    \"moduleResolution\": \"node\",\n+    \"emitDecoratorMetadata\": true,\n+    \"experimentalDecorators\": true,\n+    \"downlevelIteration\": true,\n+    \"resolveJsonModule\": true,\n+    \"target\": \"es5\",\n+    \"jsx\": \"preserve\",\n+    \"typeRoots\": [\n+      \"node_modules/@types\"\n+    ],\n+    \"lib\": [\n+      \"es2017\",\n+      \"dom\",\n+      \"esnext.asynciterable\"\n+    ],\n+    \"allowJs\": true,\n+    \"skipLibCheck\": true,\n+    \"esModuleInterop\": false,\n+    \"allowSyntheticDefaultImports\": true,\n+    \"forceConsistentCasingInFileNames\": true,\n+    \"isolatedModules\": true,\n+    \"noEmit\": true,\n+    \"noImplicitAny\": false,\n+    \"strict\": false,\n+    \"module\": \"esnext\"\n+  },\n+  \"include\": [\n+    \"src\"\n+  ]\n+}\ndiff --git a/client/tslint.json b/client/tslint.json\nnew file mode 100644\nindex 0000000..446ec3d\n--- /dev/null\n+++ b/client/tslint.json\n@@ -0,0 +1,29 @@\n+{\n+  \"extends\": [\"tslint:recommended\", \"tslint-react\", \"tslint-config-prettier\"],\n+  \"rules\": {\n+    \"ordered-imports\": false,\n+    \"object-literal-sort-keys\": false,\n+    \"jsx-boolean-value\": false,\n+    \"interface-name\" : false,\n+    \"variable-name\": false,\n+    \"no-string-literal\": false,\n+    \"no-namespace\": false,\n+    \"interface-over-type-literal\": false,\n+    \"no-shadowed-variable\": false,\n+    \"curly\": false,\n+    \"no-label\": false,\n+    \"no-empty\": false,\n+    \"no-debugger\": false,\n+    \"no-console\": false,\n+    \"array-type\": false\n+  },\n+  \"linterOptions\": {\n+    \"exclude\": [\n+      \"config/**/*.js\",\n+      \"node_modules/**/*.ts\",\n+      \"coverage/lcov-report/*.js\",\n+      \"*.json\",\n+      \"**/*.json\"\n+    ]\n+  }\n+}\ndiff --git a/package.json b/package.json\nnew file mode 100644\nindex 0000000..3dbe77d\n--- /dev/null\n+++ b/package.json\n@@ -0,0 +1,9 @@\n+{\n+  \"name\": \"whatsApp-clone-tutorial\",\n+  \"description\": \"Fully functional WhatsApp Clone using React (Hooks+Suspense), GraphQL, Apollo, TypeScript and PostgreSQL\",\n+  \"private\": true,\n+  \"repository\": {\n+    \"type\": \"git\",\n+    \"url\": \"https://Urigo@github.com/Urigo/WhatsApp-Clone-Tutorial.git\"\n+  }\n+}\ndiff --git a/server/.env b/server/.env\nnew file mode 100644\nindex 0000000..38922bf\n--- /dev/null\n+++ b/server/.env\n@@ -0,0 +1,2 @@\n+# NEVER DEFINE HERE ONLY ON CLOUD\n+CLOUDINARY_URL=cloudinary://756494366771661:OttZILiLRKaB5tKR8F3vQhMrNRg@whatsapp-clone\ndiff --git a/server/.gitignore b/server/.gitignore\nnew file mode 100644\nindex 0000000..fe3a2f3\n--- /dev/null\n+++ b/server/.gitignore\n@@ -0,0 +1,3 @@\n+node_modules\n+npm-debug.log\n+types.d.ts\ndiff --git a/server/LICENSE b/server/LICENSE\nnew file mode 100644\nindex 0000000..ca7f5e8\n--- /dev/null\n+++ b/server/LICENSE\n@@ -0,0 +1,21 @@\n+The MIT License (MIT)\n+\n+Copyright (c) 2019 Uri Goldshtein\n+\n+Permission is hereby granted, free of charge, to any person obtaining a copy\n+of this software and associated documentation files (the \"Software\"), to deal\n+in the Software without restriction, including without limitation the rights\n+to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+copies of the Software, and to permit persons to whom the Software is\n+furnished to do so, subject to the following conditions:\n+\n+The above copyright notice and this permission notice shall be included in all\n+copies or substantial portions of the Software.\n+\n+THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+SOFTWARE.\ndiff --git a/server/cloudinary.d.ts b/server/cloudinary.d.ts\nnew file mode 100644\nindex 0000000..3217c87\n--- /dev/null\n+++ b/server/cloudinary.d.ts\n@@ -0,0 +1,10 @@\n+declare module 'cloudinary' {\n+  export function config(config: { cloud_name: string; api_key: string; api_secret: string }): void\n+\n+  export var v2: {\n+    uploader: {\n+      upload_stream: (callback?: (error: Error, result: any) => any) => NodeJS.WritableStream\n+      upload: (path: string, callback?: (error: Error, result: any) => any) => any\n+    }\n+  }\n+}\ndiff --git a/server/codegen.yml b/server/codegen.yml\nnew file mode 100644\nindex 0000000..da8fb61\n--- /dev/null\n+++ b/server/codegen.yml\n@@ -0,0 +1,18 @@\n+overwrite: true\n+schema: ./schema/typeDefs.ts\n+require: ts-node/register/transpile-only\n+generates:\n+  ./types.d.ts:\n+    plugins:\n+      - typescript-common\n+      - typescript-resolvers\n+    config:\n+      optionalType: undefined | null\n+      contextType: ./context#Context\n+      mappers:\n+        Chat: ./entity/chat#Chat\n+        Message: ./entity/message#Message\n+        Recipient: ./entity/recipient#Recipient\n+        User: ./entity/user#User\n+      scalars:\n+        Date: Date\ndiff --git a/server/context.ts b/server/context.ts\nnew file mode 100644\nindex 0000000..fc62ac6\n--- /dev/null\n+++ b/server/context.ts\n@@ -0,0 +1,7 @@\n+import { Connection } from 'typeorm'\n+import User from './entity/user'\n+\n+export interface Context {\n+  connection: Connection\n+  user: User\n+}\ndiff --git a/server/db.ts b/server/db.ts\nnew file mode 100644\nindex 0000000..c70cb27\n--- /dev/null\n+++ b/server/db.ts\n@@ -0,0 +1,254 @@\n+import 'reflect-metadata'\n+import moment from 'moment'\n+import { Connection } from 'typeorm'\n+import { Chat } from './entity/chat'\n+import { Message } from './entity/message'\n+import { User } from './entity/user'\n+\n+export enum MessageType {\n+  PICTURE,\n+  TEXT,\n+  LOCATION,\n+}\n+\n+export async function addSampleData(connection: Connection) {\n+  const user1 = new User({\n+    username: 'ethan',\n+    password: '$2a$08$NO9tkFLCoSqX1c5wk3s7z.JfxaVMKA.m7zUDdDwEquo4rvzimQeJm', // 111\n+    name: 'Ethan Gonzalez',\n+    picture: 'https://randomuser.me/api/portraits/thumb/men/1.jpg',\n+  })\n+  await connection.manager.save(user1)\n+\n+  const user2 = new User({\n+    username: 'bryan',\n+    password: '$2a$08$xE4FuCi/ifxjL2S8CzKAmuKLwv18ktksSN.F3XYEnpmcKtpbpeZgO', // 222\n+    name: 'Bryan Wallace',\n+    picture: 'https://randomuser.me/api/portraits/thumb/men/2.jpg',\n+  })\n+  await connection.manager.save(user2)\n+\n+  const user3 = new User({\n+    username: 'avery',\n+    password: '$2a$08$UHgH7J8G6z1mGQn2qx2kdeWv0jvgHItyAsL9hpEUI3KJmhVW5Q1d.', // 333\n+    name: 'Avery Stewart',\n+    picture: 'https://randomuser.me/api/portraits/thumb/women/1.jpg',\n+  })\n+  await connection.manager.save(user3)\n+\n+  const user4 = new User({\n+    username: 'katie',\n+    password: '$2a$08$wR1k5Q3T9FC7fUgB7Gdb9Os/GV7dGBBf4PLlWT7HERMFhmFDt47xi', // 444\n+    name: 'Katie Peterson',\n+    picture: 'https://randomuser.me/api/portraits/thumb/women/2.jpg',\n+  })\n+  await connection.manager.save(user4)\n+\n+  const user5 = new User({\n+    username: 'ray',\n+    password: '$2a$08$6.mbXqsDX82ZZ7q5d8Osb..JrGSsNp4R3IKj7mxgF6YGT0OmMw242', // 555\n+    name: 'Ray Edwards',\n+    picture: 'https://randomuser.me/api/portraits/thumb/men/3.jpg',\n+  })\n+  await connection.manager.save(user5)\n+\n+  const user6 = new User({\n+    username: 'niko',\n+    password: '$2a$08$fL5lZR.Rwf9FWWe8XwwlceiPBBim8n9aFtaem.INQhiKT4.Ux3Uq.', // 666\n+    name: 'Niccolò Belli',\n+    picture: 'https://randomuser.me/api/portraits/thumb/men/4.jpg',\n+  })\n+  await connection.manager.save(user6)\n+\n+  const user7 = new User({\n+    username: 'mario',\n+    password: '$2a$08$nDHDmWcVxDnH5DDT3HMMC.psqcnu6wBiOgkmJUy9IH..qxa3R6YrO', // 777\n+    name: 'Mario Rossi',\n+    picture: 'https://randomuser.me/api/portraits/thumb/men/5.jpg',\n+  })\n+  await connection.manager.save(user7)\n+\n+  await connection.manager.save(\n+    new Chat({\n+      allTimeMembers: [user1, user3],\n+      listingMembers: [user1, user3],\n+      messages: [\n+        new Message({\n+          sender: user1,\n+          content: 'You on your way?',\n+          createdAt: moment()\n+            .subtract(1, 'hours')\n+            .toDate(),\n+          type: MessageType.TEXT,\n+          holders: [user1, user3],\n+        }),\n+        new Message({\n+          sender: user3,\n+          content: 'Yep!',\n+          createdAt: moment()\n+            .subtract(1, 'hours')\n+            .add(5, 'minutes')\n+            .toDate(),\n+          type: MessageType.TEXT,\n+          holders: [user1, user3],\n+        }),\n+      ],\n+    })\n+  )\n+\n+  await connection.manager.save(\n+    new Chat({\n+      allTimeMembers: [user1, user4],\n+      listingMembers: [user1, user4],\n+      messages: [\n+        new Message({\n+          sender: user1,\n+          content: \"Hey, it's me\",\n+          createdAt: moment()\n+            .subtract(2, 'hours')\n+            .toDate(),\n+          type: MessageType.TEXT,\n+          holders: [user1, user4],\n+        }),\n+      ],\n+    })\n+  )\n+\n+  await connection.manager.save(\n+    new Chat({\n+      allTimeMembers: [user1, user5],\n+      listingMembers: [user1, user5],\n+      messages: [\n+        new Message({\n+          sender: user1,\n+          content: 'I should buy a boat',\n+          createdAt: moment()\n+            .subtract(1, 'days')\n+            .toDate(),\n+          type: MessageType.TEXT,\n+          holders: [user1, user5],\n+        }),\n+        new Message({\n+          sender: user1,\n+          content: 'You still there?',\n+          createdAt: moment()\n+            .subtract(1, 'days')\n+            .add(16, 'hours')\n+            .toDate(),\n+          type: MessageType.TEXT,\n+          holders: [user1, user5],\n+        }),\n+      ],\n+    })\n+  )\n+\n+  await connection.manager.save(\n+    new Chat({\n+      allTimeMembers: [user3, user4],\n+      listingMembers: [user3, user4],\n+      messages: [\n+        new Message({\n+          sender: user3,\n+          content: 'Look at my mukluks!',\n+          createdAt: moment()\n+            .subtract(4, 'days')\n+            .toDate(),\n+          type: MessageType.TEXT,\n+          holders: [user3, user4],\n+        }),\n+      ],\n+    })\n+  )\n+\n+  await connection.manager.save(\n+    new Chat({\n+      allTimeMembers: [user2, user5],\n+      listingMembers: [user2, user5],\n+      messages: [\n+        new Message({\n+          sender: user2,\n+          content: 'This is wicked good ice cream.',\n+          createdAt: moment()\n+            .subtract(2, 'weeks')\n+            .toDate(),\n+          type: MessageType.TEXT,\n+          holders: [user2, user5],\n+        }),\n+        new Message({\n+          sender: user5,\n+          content: 'Love it!',\n+          createdAt: moment()\n+            .subtract(2, 'weeks')\n+            .add(10, 'minutes')\n+            .toDate(),\n+          type: MessageType.TEXT,\n+          holders: [user2, user5],\n+        }),\n+      ],\n+    })\n+  )\n+\n+  await connection.manager.save(\n+    new Chat({\n+      allTimeMembers: [user1, user6],\n+      listingMembers: [user1],\n+    })\n+  )\n+\n+  await connection.manager.save(\n+    new Chat({\n+      allTimeMembers: [user2, user1],\n+      listingMembers: [user2],\n+    })\n+  )\n+\n+  await connection.manager.save(\n+    new Chat({\n+      name: \"Ethan's group\",\n+      picture: 'https://randomuser.me/api/portraits/thumb/lego/1.jpg',\n+      allTimeMembers: [user1, user3, user4, user6],\n+      listingMembers: [user1, user3, user4, user6],\n+      owner: user1,\n+      messages: [\n+        new Message({\n+          sender: user1,\n+          content: 'I made a group',\n+          createdAt: moment()\n+            .subtract(2, 'weeks')\n+            .toDate(),\n+          type: MessageType.TEXT,\n+          holders: [user1, user3, user4, user6],\n+        }),\n+        new Message({\n+          sender: user1,\n+          content: 'Ops, Avery was not supposed to be here',\n+          createdAt: moment()\n+            .subtract(2, 'weeks')\n+            .add(2, 'minutes')\n+            .toDate(),\n+          type: MessageType.TEXT,\n+          holders: [user1, user4, user6],\n+        }),\n+        new Message({\n+          sender: user4,\n+          content: 'Awesome!',\n+          createdAt: moment()\n+            .subtract(2, 'weeks')\n+            .add(10, 'minutes')\n+            .toDate(),\n+          type: MessageType.TEXT,\n+          holders: [user1, user4, user6],\n+        }),\n+      ],\n+    })\n+  )\n+\n+  await connection.manager.save(\n+    new Chat({\n+      name: \"Ray's group\",\n+      allTimeMembers: [user3, user6],\n+      listingMembers: [user3, user6],\n+      owner: user6,\n+    })\n+  )\n+}\ndiff --git a/server/entity/chat.ts b/server/entity/chat.ts\nnew file mode 100644\nindex 0000000..797b830\n--- /dev/null\n+++ b/server/entity/chat.ts\n@@ -0,0 +1,107 @@\n+import {\n+  Entity,\n+  Column,\n+  PrimaryGeneratedColumn,\n+  OneToMany,\n+  JoinTable,\n+  ManyToMany,\n+  ManyToOne,\n+  CreateDateColumn,\n+} from 'typeorm'\n+import Message from './message'\n+import User from './user'\n+\n+interface ChatConstructor {\n+  name?: string\n+  picture?: string\n+  allTimeMembers?: User[]\n+  listingMembers?: User[]\n+  actualGroupMembers?: User[]\n+  admins?: User[]\n+  owner?: User\n+  messages?: Message[]\n+}\n+\n+@Entity()\n+export class Chat {\n+  @PrimaryGeneratedColumn()\n+  id: string\n+\n+  @CreateDateColumn({ nullable: true })\n+  createdAt: Date\n+\n+  @Column({ nullable: true })\n+  name: string\n+\n+  @Column({ nullable: true })\n+  picture: string\n+\n+  @ManyToMany(type => User, user => user.allTimeMemberChats, {\n+    cascade: ['insert', 'update'],\n+    eager: false,\n+  })\n+  @JoinTable()\n+  allTimeMembers: User[]\n+\n+  @ManyToMany(type => User, user => user.listingMemberChats, {\n+    cascade: ['insert', 'update'],\n+    eager: false,\n+  })\n+  @JoinTable()\n+  listingMembers: User[]\n+\n+  @ManyToMany(type => User, user => user.actualGroupMemberChats, { cascade: [\"insert\", \"update\"], eager: false })\n+  @JoinTable()\n+  actualGroupMembers?: User[]\n+\n+  @ManyToMany(type => User, user => user.adminChats, { cascade: [\"insert\", \"update\"], eager: false })\n+  @JoinTable()\n+  admins?: User[]\n+\n+  @ManyToOne(type => User, user => user.ownerChats, { cascade: ['insert', 'update'], eager: false })\n+  owner?: User | null\n+\n+  @OneToMany(type => Message, message => message.chat, {\n+    cascade: ['insert', 'update'],\n+    eager: true,\n+  })\n+  messages: Message[]\n+\n+  constructor({\n+    name,\n+    picture,\n+    allTimeMembers,\n+    listingMembers,\n+    actualGroupMembers,\n+    admins,\n+    owner,\n+    messages,\n+  }: ChatConstructor = {}) {\n+    if (name) {\n+      this.name = name\n+    }\n+    if (picture) {\n+      this.picture = picture\n+    }\n+    if (allTimeMembers) {\n+      this.allTimeMembers = allTimeMembers\n+    }\n+    if (actualGroupMembers) {\n+      this.actualGroupMembers = actualGroupMembers\n+    }\n+    if (admins) {\n+      this.admins = admins\n+    }\n+    if (listingMembers) {\n+      this.listingMembers = listingMembers\n+    }\n+    if (owner) {\n+      this.owner = owner\n+    }\n+    if (messages) {\n+      this.messages = messages\n+    }\n+  }\n+}\n+\n+export default Chat\ndiff --git a/server/entity/message.ts b/server/entity/message.ts\nnew file mode 100644\nindex 0000000..3479c00\n--- /dev/null\n+++ b/server/entity/message.ts\n@@ -0,0 +1,90 @@\n+import {\n+  Entity,\n+  Column,\n+  PrimaryGeneratedColumn,\n+  OneToMany,\n+  ManyToOne,\n+  ManyToMany,\n+  JoinTable,\n+  CreateDateColumn,\n+} from 'typeorm'\n+import Chat from './chat'\n+import Recipient from './recipient'\n+import User from './user'\n+import { MessageType } from '../db'\n+\n+interface MessageConstructor {\n+  sender?: User\n+  content?: string\n+  createdAt?: Date\n+  type?: MessageType\n+  recipients?: Recipient[]\n+  holders?: User[]\n+  chat?: Chat\n+}\n+\n+@Entity()\n+export class Message {\n+  @PrimaryGeneratedColumn()\n+  id: string\n+\n+  @ManyToOne(type => User, user => user.senderMessages, { eager: true })\n+  sender: User\n+\n+  @Column()\n+  content: string\n+\n+  @CreateDateColumn({ nullable: true })\n+  createdAt: Date\n+\n+  @Column()\n+  type: number\n+\n+  @OneToMany(type => Recipient, recipient => recipient.message, { cascade: ['insert', 'update'], eager: true })\n+  recipients: Recipient[]\n+\n+  @ManyToMany(type => User, user => user.holderMessages, {\n+    cascade: ['insert', 'update'],\n+    eager: true,\n+  })\n+  @JoinTable()\n+  holders: User[]\n+\n+  @ManyToOne(type => Chat, chat => chat.messages)\n+  chat: Chat\n+\n+  constructor({\n+    sender,\n+    content,\n+    createdAt,\n+    type,\n+    recipients,\n+    holders,\n+    chat,\n+  }: MessageConstructor = {}) {\n+    if (sender) {\n+      this.sender = sender\n+    }\n+    if (content) {\n+      this.content = content\n+    }\n+    if (createdAt) {\n+      this.createdAt = createdAt\n+    }\n+    if (type) {\n+      this.type = type\n+    }\n+    if (recipients) {\n+      recipients.forEach(recipient => recipient.message = this)\n+      this.recipients = recipients\n+    }\n+    if (holders) {\n+      this.holders = holders\n+    }\n+    if (chat) {\n+      this.chat = chat\n+    }\n+  }\n+}\n+\n+export default Message\ndiff --git a/server/entity/recipient.ts b/server/entity/recipient.ts\nnew file mode 100644\nindex 0000000..0165bdf\n--- /dev/null\n+++ b/server/entity/recipient.ts\n@@ -0,0 +1,42 @@\n+import { Entity, ManyToOne, Column } from 'typeorm'\n+import { Message } from './message'\n+import { User } from './user'\n+\n+interface RecipientConstructor {\n+  user?: User\n+  message?: Message\n+  receivedAt?: Date\n+  readAt?: Date\n+}\n+\n+@Entity()\n+export class Recipient {\n+  @ManyToOne(type => User, user => user.recipients, { primary: true })\n+  user: User\n+\n+  @ManyToOne(type => Message, message => message.recipients, { primary: true })\n+  message: Message\n+\n+  @Column({ nullable: true })\n+  receivedAt: Date\n+\n+  @Column({ nullable: true })\n+  readAt: Date\n+\n+  constructor({ user, message, receivedAt, readAt }: RecipientConstructor = {}) {\n+    if (user) {\n+      this.user = user\n+    }\n+    if (message) {\n+      this.message = message\n+    }\n+    if (receivedAt) {\n+      this.receivedAt = receivedAt\n+    }\n+    if (readAt) {\n+      this.readAt = readAt\n+    }\n+  }\n+}\n+\n+export default Recipient\ndiff --git a/server/entity/user.ts b/server/entity/user.ts\nnew file mode 100644\nindex 0000000..a9fb1a6\n--- /dev/null\n+++ b/server/entity/user.ts\n@@ -0,0 +1,70 @@\n+import { Entity, Column, PrimaryGeneratedColumn, ManyToMany, OneToMany } from 'typeorm'\n+import Chat from './chat'\n+import Message from './message'\n+import Recipient from './recipient'\n+\n+interface UserConstructor {\n+  username?: string\n+  password?: string\n+  name?: string\n+  picture?: string\n+}\n+\n+@Entity('app_user')\n+export class User {\n+  @PrimaryGeneratedColumn()\n+  id: string\n+\n+  @Column()\n+  username: string\n+\n+  @Column()\n+  password: string\n+\n+  @Column()\n+  name: string\n+\n+  @Column({ nullable: true })\n+  picture: string\n+\n+  @ManyToMany(type => Chat, chat => chat.allTimeMembers)\n+  allTimeMemberChats: Chat[]\n+\n+  @ManyToMany(type => Chat, chat => chat.listingMembers)\n+  listingMemberChats: Chat[]\n+\n+  @ManyToMany(type => Chat, chat => chat.actualGroupMembers)\n+  actualGroupMemberChats: Chat[]\n+\n+  @ManyToMany(type => Chat, chat => chat.admins)\n+  adminChats: Chat[]\n+\n+  @ManyToMany(type => Message, message => message.holders)\n+  holderMessages: Message[]\n+\n+  @OneToMany(type => Chat, chat => chat.owner)\n+  ownerChats: Chat[]\n+\n+  @OneToMany(type => Message, message => message.sender)\n+  senderMessages: Message[]\n+\n+  @OneToMany(type => Recipient, recipient => recipient.user)\n+  recipients: Recipient[]\n+\n+  constructor({ username, password, name, picture }: UserConstructor = {}) {\n+    if (username) {\n+      this.username = username\n+    }\n+    if (password) {\n+      this.password = password\n+    }\n+    if (name) {\n+      this.name = name\n+    }\n+    if (picture) {\n+      this.picture = picture\n+    }\n+  }\n+}\n+\n+export default User\ndiff --git a/server/index.ts b/server/index.ts\nnew file mode 100644\nindex 0000000..edef669\n--- /dev/null\n+++ b/server/index.ts\n@@ -0,0 +1,47 @@\n+require('dotenv').config()\n+\n+import 'reflect-metadata'\n+import { ApolloServer } from 'apollo-server-express'\n+import bodyParser from 'body-parser'\n+import cors from 'cors'\n+import express from 'express'\n+import gql from 'graphql-tag'\n+import { createServer } from 'http'\n+import { createConnection } from 'typeorm'\n+import { addSampleData } from './db'\n+import { AppModule } from './modules/app.module'\n+\n+const PORT = 4000\n+\n+createConnection().then((connection) => {\n+  if (process.argv.includes('--add-sample-data')) {\n+    addSampleData(connection)\n+  }\n+\n+  const app = express()\n+\n+  app.use(cors())\n+  app.use(bodyParser.json())\n+\n+  const { schema, context, subscriptions } = AppModule.forRoot({ app, connection })\n+\n+  const apollo = new ApolloServer({\n+    schema,\n+    context,\n+    subscriptions,\n+  })\n+\n+  apollo.applyMiddleware({\n+    app,\n+    path: '/graphql',\n+  })\n+\n+  // Wrap the Express server\n+  const ws = createServer(app)\n+\n+  apollo.installSubscriptionHandlers(ws)\n+\n+  ws.listen(PORT, () => {\n+    console.log(`Apollo Server is now running on http://localhost:${PORT}`)\n+  })\n+})\ndiff --git a/server/modules/app.module.ts b/server/modules/app.module.ts\nnew file mode 100644\nindex 0000000..4cc95f6\n--- /dev/null\n+++ b/server/modules/app.module.ts\n@@ -0,0 +1,28 @@\n+import { GraphQLModule } from '@graphql-modules/core'\n+import { Connection } from 'typeorm'\n+import { Express } from 'express'\n+import { AuthModule } from './auth'\n+import { UserModule } from './user'\n+import { ChatModule } from './chat'\n+import { RecipientModule } from './recipient'\n+import { MessageModule } from './message'\n+\n+export interface IAppModuleConfig {\n+  connection: Connection\n+  app: Express\n+}\n+\n+export const AppModule = new GraphQLModule<IAppModuleConfig>({\n+  name: 'App',\n+  imports: ({ config: { app, connection } }) => [\n+    AuthModule.forRoot({\n+      app,\n+      connection,\n+    }),\n+    UserModule,\n+    ChatModule,\n+    MessageModule,\n+    RecipientModule,\n+  ],\n+  configRequired: true,\n+})\ndiff --git a/server/modules/app.symbols.ts b/server/modules/app.symbols.ts\nnew file mode 100644\nindex 0000000..8c01bd3\n--- /dev/null\n+++ b/server/modules/app.symbols.ts\n@@ -0,0 +1 @@\n+export const APP = Symbol.for('APP')\ndiff --git a/server/modules/auth/index.ts b/server/modules/auth/index.ts\nnew file mode 100644\nindex 0000000..dd4993a\n--- /dev/null\n+++ b/server/modules/auth/index.ts\n@@ -0,0 +1,61 @@\n+import { GraphQLModule } from '@graphql-modules/core'\n+import { loadResolversFiles, loadSchemaFiles } from '@graphql-modules/sonar'\n+import { Express } from 'express'\n+import { Connection } from 'typeorm'\n+import { AuthProvider } from './providers/auth.provider'\n+import { APP } from '../app.symbols'\n+import { PubSub } from 'apollo-server-express'\n+import passport from 'passport'\n+import basicStrategy from 'passport-http'\n+import { InjectFunction } from '@graphql-modules/di'\n+\n+export interface IAppModuleConfig {\n+  connection: Connection\n+  app: Express\n+}\n+\n+export const AuthModule = new GraphQLModule<IAppModuleConfig>({\n+  name: 'Auth',\n+  providers: ({ config: { connection, app } }) => [\n+    { provide: Connection, useValue: connection },\n+    { provide: APP, useValue: app },\n+    PubSub,\n+    AuthProvider,\n+  ],\n+  typeDefs: loadSchemaFiles(__dirname + '/schema/'),\n+  resolvers: loadResolversFiles(__dirname + '/resolvers/'),\n+  configRequired: true,\n+  middleware: InjectFunction(AuthProvider, APP)((authProvider, app: Express) => {\n+    passport.use(\n+      'basic-signin',\n+      new basicStrategy.BasicStrategy(async (username: string, password: string, done: any) => {\n+        done(null, await authProvider.signIn(username, password))\n+      })\n+    )\n+\n+    passport.use(\n+      'basic-signup',\n+      new basicStrategy.BasicStrategy(\n+        { passReqToCallback: true },\n+        async (\n+          req: Express.Request & { body: { name?: string } },\n+          username: string,\n+          password: string,\n+          done: any\n+        ) => {\n+          const name = req.body.name\n+          return done(null, !!name && (await authProvider.signUp(username, password, name)))\n+        }\n+      )\n+    )\n+\n+    app.post('/signup', passport.authenticate('basic-signup', { session: false }), (req, res) =>\n+      res.json(req.user)\n+    )\n+\n+    app.use(passport.authenticate('basic-signin', { session: false }))\n+\n+    app.post('/signin', (req, res) => res.json(req.user))\n+    return {}\n+  }),\n+})\ndiff --git a/server/modules/auth/providers/auth.provider.ts b/server/modules/auth/providers/auth.provider.ts\nnew file mode 100644\nindex 0000000..795f424\n--- /dev/null\n+++ b/server/modules/auth/providers/auth.provider.ts\n@@ -0,0 +1,75 @@\n+import { Injectable, ProviderScope } from '@graphql-modules/di'\n+import { ModuleSessionInfo, OnRequest, OnConnect } from '@graphql-modules/core'\n+import { Connection } from 'typeorm'\n+import { User } from '../../../entity/user'\n+import bcrypt from 'bcrypt-nodejs'\n+\n+@Injectable({\n+  scope: ProviderScope.Session,\n+})\n+export class AuthProvider implements OnRequest, OnConnect {\n+  currentUser: User\n+\n+  constructor(private connection: Connection) {}\n+\n+  onRequest({ session }: ModuleSessionInfo) {\n+    if ('req' in session) {\n+      this.currentUser = session.req.user\n+    }\n+  }\n+\n+  async onConnect(connectionParams: { authToken?: string }) {\n+    if (connectionParams.authToken) {\n+      // Create a buffer and tell it the data coming in is base64\n+      const buf = Buffer.from(connectionParams.authToken.split(' ')[1], 'base64')\n+      // Read it back out as a string\n+      const [username, password]: string[] = buf.toString().split(':')\n+      const user = await this.signIn(username, password)\n+      if (user) {\n+        // Set context for the WebSocket\n+        this.currentUser = user\n+      } else {\n+        throw new Error('Wrong credentials!')\n+      }\n+    } else {\n+      throw new Error('Missing auth token!')\n+    }\n+  }\n+\n+  getUserByUsername(username: string) {\n+    return this.connection.getRepository(User).findOne({ where: { username } })\n+  }\n+\n+  async signIn(username: string, password: string): Promise<User | false> {\n+    const user = await this.getUserByUsername(username)\n+    if (user && this.validPassword(password, user.password)) {\n+      return user\n+    } else {\n+      return false\n+    }\n+  }\n+\n+  async signUp(username: string, password: string, name: string): Promise<User | false> {\n+    const userExists = !!(await this.getUserByUsername(username))\n+    if (!userExists) {\n+      const user = this.connection.manager.save(\n+        new User({\n+          username,\n+          password: this.generateHash(password),\n+          name,\n+        })\n+      )\n+      return user\n+    } else {\n+      return false\n+    }\n+  }\n+\n+  generateHash(password: string) {\n+    return bcrypt.hashSync(password, bcrypt.genSaltSync(8))\n+  }\n+\n+  validPassword(password: string, localPassword: string) {\n+    return bcrypt.compareSync(password, localPassword)\n+  }\n+}\ndiff --git a/server/modules/chat/index.ts b/server/modules/chat/index.ts\nnew file mode 100644\nindex 0000000..bb66825\n--- /dev/null\n+++ b/server/modules/chat/index.ts\n@@ -0,0 +1,16 @@\n+import { GraphQLModule } from '@graphql-modules/core'\n+import { ProviderScope } from '@graphql-modules/di'\n+import { loadResolversFiles, loadSchemaFiles } from '@graphql-modules/sonar'\n+import { AuthModule } from '../auth'\n+import { UserModule } from '../user'\n+import { UtilsModule } from '../utils.module'\n+import { ChatProvider } from './providers/chat.provider'\n+\n+export const ChatModule = new GraphQLModule({\n+  name: 'Chat',\n+  imports: [AuthModule, UtilsModule, UserModule],\n+  providers: [ChatProvider],\n+  defaultProviderScope: ProviderScope.Session,\n+  typeDefs: loadSchemaFiles(__dirname + '/schema/'),\n+  resolvers: loadResolversFiles(__dirname + '/resolvers/'),\n+})\ndiff --git a/server/modules/chat/providers/chat.provider.ts b/server/modules/chat/providers/chat.provider.ts\nnew file mode 100644\nindex 0000000..3ca7107\n--- /dev/null\n+++ b/server/modules/chat/providers/chat.provider.ts\n@@ -0,0 +1,384 @@\n+import { Injectable } from '@graphql-modules/di'\n+import { PubSub } from 'apollo-server-express'\n+import { Connection } from 'typeorm'\n+import { Chat } from '../../../entity/chat'\n+import { User } from '../../../entity/user'\n+import { AuthProvider } from '../../auth/providers/auth.provider'\n+import { UserProvider } from '../../user/providers/user.provider'\n+\n+@Injectable()\n+export class ChatProvider {\n+  constructor(\n+    private pubsub: PubSub,\n+    private connection: Connection,\n+    private userProvider: UserProvider,\n+    private authProvider: AuthProvider\n+  ) {}\n+\n+  repository = this.connection.getRepository(Chat)\n+  currentUser = this.authProvider.currentUser\n+\n+  createQueryBuilder() {\n+    return this.connection.createQueryBuilder(Chat, 'chat')\n+  }\n+\n+  async getChats() {\n+    return this.createQueryBuilder()\n+      .leftJoin('chat.listingMembers', 'listingMembers')\n+      .where('listingMembers.id = :id', { id: this.currentUser.id })\n+      .orderBy('chat.createdAt', 'DESC')\n+      .getMany()\n+  }\n+\n+  async getChat(chatId: string) {\n+    const chat = await this.createQueryBuilder()\n+      .whereInIds(chatId)\n+      .getOne()\n+\n+    return chat || null\n+  }\n+\n+  async addChat(userId: string) {\n+    const user = await this.userProvider\n+      .createQueryBuilder()\n+      .whereInIds(userId)\n+      .getOne();\n+\n+    if (!user) {\n+      throw new Error(`User ${userId} doesn't exist.`);\n+    }\n+\n+    let chat = await this\n+      .createQueryBuilder()\n+      .where('chat.name IS NULL')\n+      .innerJoin('chat.allTimeMembers', 'allTimeMembers1', 'allTimeMembers1.id = :currentUserId', {\n+        currentUserId: this.currentUser.id,\n+      })\n+      .innerJoin('chat.allTimeMembers', 'allTimeMembers2', 'allTimeMembers2.id = :userId', {\n+        userId: userId,\n+      })\n+      .innerJoinAndSelect('chat.listingMembers', 'listingMembers')\n+      .getOne();\n+\n+    if (chat) {\n+      // Chat already exists. Both users are already in the userIds array\n+      const listingMembers = await this.userProvider\n+        .createQueryBuilder()\n+        .innerJoin(\n+          'user.listingMemberChats',\n+          'listingMemberChats',\n+          'listingMemberChats.id = :chatId',\n+          { chatId: chat.id },\n+        )\n+        .getMany();\n+\n+      if (!listingMembers.find(user => user.id === this.currentUser.id)) {\n+        // The chat isn't listed for the current user. Add him to the memberIds\n+        chat.listingMembers.push(this.currentUser);\n+        chat = await this.repository.save(chat);\n+\n+        return chat || null;\n+      } else {\n+        return chat;\n+      }\n+    } else {\n+      // Create the chat\n+      chat = await this.repository.save(\n+        new Chat({\n+          allTimeMembers: [this.currentUser, user],\n+          // Chat will not be listed to the other user until the first message gets written\n+          listingMembers: [this.currentUser],\n+        }),\n+      );\n+\n+      return chat || null;\n+    }\n+  }\n+\n+  async getChatName(chat: Chat) {\n+    if (chat.name) {\n+      return chat.name\n+    }\n+\n+    const user = await this.userProvider\n+      .createQueryBuilder()\n+      .where('user.id != :userId', { userId: this.currentUser.id })\n+      .innerJoin(\n+        'user.allTimeMemberChats',\n+        'allTimeMemberChats',\n+        'allTimeMemberChats.id = :chatId',\n+        { chatId: chat.id }\n+      )\n+      .getOne()\n+\n+    return (user && user.name) || null\n+  }\n+\n+  async getChatPicture(chat: Chat) {\n+    if (chat.name) {\n+      return chat.picture\n+    }\n+\n+    const user = await this.userProvider\n+      .createQueryBuilder()\n+      .where('user.id != :userId', { userId: this.currentUser.id })\n+      .innerJoin(\n+        'user.allTimeMemberChats',\n+        'allTimeMemberChats',\n+        'allTimeMemberChats.id = :chatId',\n+        { chatId: chat.id }\n+      )\n+      .getOne()\n+\n+    return user ? user.picture : null\n+  }\n+\n+  getChatAllTimeMembers(chat: Chat) {\n+    return this.userProvider\n+      .createQueryBuilder()\n+      .innerJoin(\n+        'user.listingMemberChats',\n+        'listingMemberChats',\n+        'listingMemberChats.id = :chatId',\n+        { chatId: chat.id }\n+      )\n+      .getMany()\n+  }\n+\n+  getChatListingMembers(chat: Chat) {\n+    return this.userProvider\n+      .createQueryBuilder()\n+      .innerJoin(\n+        'user.listingMemberChats',\n+        'listingMemberChats',\n+        'listingMemberChats.id = :chatId',\n+        { chatId: chat.id }\n+      )\n+      .getMany()\n+  }\n+\n+  getChatActualGroupMembers(chat: Chat) {\n+    return this.userProvider\n+      .createQueryBuilder()\n+      .innerJoin(\n+        'user.actualGroupMemberChats',\n+        'actualGroupMemberChats',\n+        'actualGroupMemberChats.id = :chatId',\n+        { chatId: chat.id },\n+      )\n+      .getMany();\n+  }\n+\n+  getChatAdmins(chat: Chat) {\n+    return this.userProvider\n+      .createQueryBuilder()\n+      .innerJoin('user.adminChats', 'adminChats', 'adminChats.id = :chatId', {\n+        chatId: chat.id,\n+      })\n+      .getMany();\n+  }\n+\n+  async getChatOwner(chat: Chat) {\n+    const owner = await this.userProvider\n+      .createQueryBuilder()\n+      .innerJoin('user.ownerChats', 'ownerChats', 'ownerChats.id = :chatId', {\n+        chatId: chat.id,\n+      })\n+      .getOne()\n+\n+    return owner || null\n+  }\n+\n+  async isChatGroup(chat: Chat) {\n+    return !!chat.name;\n+  }\n+\n+  async filterChatAddedOrUpdated(chatAddedOrUpdated: Chat, creatorOrUpdaterId: string) {\n+    return (\n+      creatorOrUpdaterId !== this.currentUser.id &&\n+      chatAddedOrUpdated.listingMembers.some((user: User) => user.id === this.currentUser.id)\n+    )\n+  }\n+\n+  async updateUser({\n+    name,\n+    picture,\n+  }: {\n+    name?: string\n+    picture?: string\n+  } = {}) {\n+    await this.userProvider.updateUser({ name, picture })\n+\n+    const data = await this.connection\n+      .createQueryBuilder(User, 'user')\n+      .where('user.id = :id', { id: this.currentUser.id })\n+      // Get a list of the chats who have/had currentUser involved\n+      .innerJoinAndSelect(\n+        'user.allTimeMemberChats',\n+        'allTimeMemberChats',\n+        // Groups are unaffected\n+        'allTimeMemberChats.name IS NULL'\n+      )\n+      // We need to notify only those who get the chat listed (except currentUser of course)\n+      .innerJoin(\n+        'allTimeMemberChats.listingMembers',\n+        'listingMembers',\n+        'listingMembers.id != :currentUserId',\n+        {\n+          currentUserId: this.currentUser.id,\n+        }\n+      )\n+      .getOne()\n+\n+    const chatsAffected = (data && data.allTimeMemberChats) || []\n+\n+    chatsAffected.forEach(chat => {\n+      this.pubsub.publish('chatUpdated', {\n+        updaterId: this.currentUser.id,\n+        chatUpdated: chat,\n+      })\n+    })\n+\n+    return this.currentUser\n+  }\n+\n+  async removeChat(chatId: string) {\n+    const chat = await this.createQueryBuilder()\n+      .whereInIds(Number(chatId))\n+      .innerJoinAndSelect('chat.listingMembers', 'listingMembers')\n+      .leftJoinAndSelect('chat.actualGroupMembers', 'actualGroupMembers')\n+      .leftJoinAndSelect('chat.admins', 'admins')\n+      .leftJoinAndSelect('chat.owner', 'owner')\n+      .getOne();\n+\n+    if (!chat) {\n+      throw new Error(`The chat ${chatId} doesn't exist.`)\n+    }\n+\n+    if (!chat.name) {\n+      // Chat\n+      if (!chat.listingMembers.find(user => user.id === this.currentUser.id)) {\n+        throw new Error(`The user is not a listing member of the chat ${chatId}.`)\n+      }\n+\n+      // Remove the current user from who gets the chat listed. The chat will no longer appear in his list\n+      chat.listingMembers = chat.listingMembers.filter(user => user.id !== this.currentUser.id);\n+\n+      // Check how many members are left\n+      if (chat.listingMembers.length === 0) {\n+        // Delete the chat\n+        await this.repository.remove(chat);\n+      } else {\n+        // Update the group\n+\n+        // Remove the current user from the chat members. He is no longer a member of the group\n+        chat.actualGroupMembers = chat.actualGroupMembers && chat.actualGroupMembers.filter(user =>\n+          user.id !== this.currentUser.id\n+        );\n+        // Remove the current user from the chat admins\n+        chat.admins = chat.admins && chat.admins.filter(user => user.id !== this.currentUser.id);\n+        // If there are no more admins left the group goes read only\n+        // A null owner means the group is read-only\n+        chat.owner = chat.admins && chat.admins[0] || null;\n+\n+        await this.repository.save(chat);\n+      }\n+\n+      return chatId;\n+    } else {\n+      // Group\n+\n+      // Remove the current user from who gets the group listed. The group will no longer appear in his list\n+      chat.listingMembers = chat.listingMembers.filter(user => user.id !== this.currentUser.id);\n+\n+      // Check how many members (including previous ones who can still access old messages) are left\n+      if (chat.listingMembers.length === 0) {\n+        // Remove the group\n+        await this.repository.remove(chat);\n+      } else {\n+        // TODO: Implement for group\n+        chat.owner = chat.listingMembers[0]\n+\n+        await this.repository.save(chat);\n+      }\n+\n+      return chatId;\n+    }\n+  }\n+\n+  async addGroup(\n+    userIds: string[],\n+    {\n+      groupName,\n+      groupPicture,\n+    }: {\n+      groupName?: string\n+      groupPicture?: string\n+    } = {},\n+  ) {\n+    let users: User[] = [];\n+    for (let userId of userIds) {\n+      const user = await this.userProvider\n+        .createQueryBuilder()\n+        .whereInIds(userId)\n+        .getOne();\n+\n+      if (!user) {\n+        throw new Error(`User ${userId} doesn't exist.`);\n+      }\n+\n+      users.push(user);\n+    }\n+\n+    const chat = await this.repository.save(\n+      new Chat({\n+        name: groupName,\n+        admins: [this.currentUser],\n+        picture: groupPicture || undefined,\n+        owner: this.currentUser,\n+        allTimeMembers: [...users, this.currentUser],\n+        listingMembers: [...users, this.currentUser],\n+        actualGroupMembers: [...users, this.currentUser],\n+      }),\n+    );\n+\n+    this.pubsub.publish('chatAdded', {\n+      creatorId: this.currentUser.id,\n+      chatAdded: chat,\n+    });\n+\n+    return chat || null;\n+  }\n+\n+  async updateChat(\n+    chatId: string,\n+    {\n+      name,\n+      picture,\n+    }: {\n+      name?: string\n+      picture?: string\n+    } = {},\n+  ) {\n+    const chat = await this.createQueryBuilder()\n+      .whereInIds(chatId)\n+      .getOne();\n+\n+    if (!chat) return null;\n+    if (!chat.name) return chat;\n+\n+    name = name || chat.name;\n+    picture = picture || chat.picture;\n+    Object.assign(chat, { name, picture });\n+\n+    // Update the chat\n+    await this.repository.save(chat);\n+\n+    this.pubsub.publish('chatUpdated', {\n+      updaterId: this.currentUser.id,\n+      chatUpdated: chat,\n+    });\n+\n+    return chat || null;\n+  }\n+}\ndiff --git a/server/modules/chat/resolvers/resolvers.ts b/server/modules/chat/resolvers/resolvers.ts\nnew file mode 100644\nindex 0000000..2a84d57\n--- /dev/null\n+++ b/server/modules/chat/resolvers/resolvers.ts\n@@ -0,0 +1,55 @@\n+import { PubSub, withFilter } from 'apollo-server-express'\n+import { ModuleContext } from '@graphql-modules/core'\n+import { IResolvers } from '../../../types'\n+import { ChatProvider } from '../providers/chat.provider'\n+import { Chat } from '../../../entity/chat'\n+\n+export default {\n+  Query: {\n+    chats: (obj, args, { injector }) => injector.get(ChatProvider).getChats(),\n+    chat: (obj, { chatId }, { injector }) => injector.get(ChatProvider).getChat(chatId),\n+  },\n+  Mutation: {\n+    updateUser: (obj, { name, picture }, { injector }) => injector.get(ChatProvider).updateUser({\n+      name: name || '',\n+      picture: picture || '',\n+    }),\n+    addChat: (obj, { userId }, { injector }) => injector.get(ChatProvider).addChat(userId),\n+    removeChat: (obj, { chatId }, { injector }) => injector.get(ChatProvider).removeChat(chatId),\n+    addGroup: (obj, { userIds, groupName, groupPicture }, { injector }) =>\n+      injector.get(ChatProvider).addGroup(userIds, {\n+        groupName: groupName || '',\n+        groupPicture: groupPicture || '',\n+      }),\n+    updateChat: (obj, { chatId, name, picture }, { injector }) => injector.get(ChatProvider).updateChat(chatId, {\n+      name: name || '',\n+      picture: picture || '',\n+    }),\n+  },\n+  Subscription: {\n+    chatAdded: {\n+      subscribe: withFilter((root, args, { injector }: ModuleContext) => injector.get(PubSub).asyncIterator('chatAdded'),\n+        (data: { chatAdded: Chat, creatorId: string }, variables, { injector }: ModuleContext) =>\n+          data && injector.get(ChatProvider).filterChatAddedOrUpdated(data.chatAdded, data.creatorId)\n+      ),\n+    },\n+    chatUpdated: {\n+      subscribe: withFilter((root, args, { injector }: ModuleContext) => injector.get(PubSub).asyncIterator('chatUpdated'),\n+        (data: { chatUpdated: Chat, updaterId: string }, variables, { injector }: ModuleContext) =>\n+          data && injector.get(ChatProvider).filterChatAddedOrUpdated(data.chatUpdated, data.updaterId)\n+      ),\n+    },\n+  },\n+  Chat: {\n+    name: (chat, args, { injector }) => injector.get(ChatProvider).getChatName(chat),\n+    picture: (chat, args, { injector }) => injector.get(ChatProvider).getChatPicture(chat),\n+    allTimeMembers: (chat, args, { injector }) =>\n+      injector.get(ChatProvider).getChatAllTimeMembers(chat),\n+    listingMembers: (chat, args, { injector }) =>\n+      injector.get(ChatProvider).getChatListingMembers(chat),\n+    actualGroupMembers: (chat, args, { injector }) => injector.get(ChatProvider).getChatActualGroupMembers(chat),\n+    admins: (chat, args, { injector }) => injector.get(ChatProvider).getChatAdmins(chat),\n+    owner: (chat, args, { injector }) => injector.get(ChatProvider).getChatOwner(chat),\n+    isGroup: (chat, args, { injector }) => injector.get(ChatProvider).isChatGroup(chat),\n+  },\n+} as IResolvers\ndiff --git a/server/modules/chat/schema/typeDefs.graphql b/server/modules/chat/schema/typeDefs.graphql\nnew file mode 100644\nindex 0000000..a7f2fe4\n--- /dev/null\n+++ b/server/modules/chat/schema/typeDefs.graphql\n@@ -0,0 +1,41 @@\n+type Query {\n+  chats: [Chat!]!\n+  chat(chatId: ID!): Chat\n+}\n+\n+type Subscription {\n+  chatAdded: Chat\n+  chatUpdated: Chat\n+}\n+\n+type Chat {\n+  #May be a chat or a group\n+  id: ID!\n+  #Computed for chats\n+  name: String\n+  #Computed for chats\n+  picture: String\n+  #All members, current and past ones.\n+  allTimeMembers: [User!]!\n+  #Whoever gets the chat listed. For groups includes past members who still didn't delete the group.\n+  listingMembers: [User!]!\n+  #Actual members of the group. Null for chats. For groups they are the only ones who can send messages. They aren't the only ones who get the group listed.\n+  actualGroupMembers: [User!]\n+  #Null for chats\n+  admins: [User!]\n+  #If null the group is read-only. Null for chats.\n+  owner: User\n+  #Computed property\n+  isGroup: Boolean!\n+}\n+\n+type Mutation {\n+  addChat(userId: ID!): Chat\n+  removeChat(chatId: ID!): ID\n+  addAdmins(groupId: ID!, userIds: [ID!]!): [ID]!\n+  removeAdmins(groupId: ID!, userIds: [ID!]!): [ID]!\n+  addMembers(groupId: ID!, userIds: [ID!]!): [ID]!\n+  removeMembers(groupId: ID!, userIds: [ID!]!): [ID]!\n+  addGroup(userIds: [ID!]!, groupName: String!, groupPicture: String): Chat\n+  updateChat(chatId: ID!, name: String, picture: String): Chat\n+}\ndiff --git a/server/modules/message/index.ts b/server/modules/message/index.ts\nnew file mode 100644\nindex 0000000..e97283f\n--- /dev/null\n+++ b/server/modules/message/index.ts\n@@ -0,0 +1,24 @@\n+import { GraphQLModule } from '@graphql-modules/core'\n+import { ProviderScope } from '@graphql-modules/di'\n+import { loadResolversFiles, loadSchemaFiles } from '@graphql-modules/sonar'\n+import { AuthModule } from '../auth'\n+import { ChatModule } from '../chat'\n+import { UserModule } from '../user'\n+import { UtilsModule } from '../utils.module'\n+import { MessageProvider } from './providers/message.provider'\n+\n+export const MessageModule = new GraphQLModule({\n+  name: 'Message',\n+  imports: [\n+    AuthModule,\n+    UtilsModule,\n+    UserModule,\n+    ChatModule,\n+  ],\n+  providers: [\n+    MessageProvider,\n+  ],\n+  defaultProviderScope: ProviderScope.Session,\n+  typeDefs: loadSchemaFiles(__dirname + '/schema/'),\n+  resolvers: loadResolversFiles(__dirname + '/resolvers/'),\n+})\ndiff --git a/server/modules/message/providers/message.provider.ts b/server/modules/message/providers/message.provider.ts\nnew file mode 100644\nindex 0000000..737e769\n--- /dev/null\n+++ b/server/modules/message/providers/message.provider.ts\n@@ -0,0 +1,360 @@\n+import { Injectable } from '@graphql-modules/di'\n+import { PubSub } from 'apollo-server-express'\n+import { Connection } from 'typeorm'\n+import { MessageType } from '../../../db'\n+import { Chat } from '../../../entity/chat'\n+import { Message } from '../../../entity/message'\n+import { User } from '../../../entity/user'\n+import { AuthProvider } from '../../auth/providers/auth.provider'\n+import { ChatProvider } from '../../chat/providers/chat.provider'\n+import { UserProvider } from '../../user/providers/user.provider'\n+\n+@Injectable()\n+export class MessageProvider {\n+  constructor(\n+    private pubsub: PubSub,\n+    private connection: Connection,\n+    private chatProvider: ChatProvider,\n+    private authProvider: AuthProvider,\n+    private userProvider: UserProvider\n+  ) {}\n+\n+  repository = this.connection.getRepository(Message)\n+  currentUser = this.authProvider.currentUser\n+\n+  createQueryBuilder() {\n+    return this.connection.createQueryBuilder(Message, 'message')\n+  }\n+\n+  async addMessage(chatId: string, content: string) {\n+    if (content === null || content === '') {\n+      throw new Error(`Cannot add empty or null messages.`);\n+    }\n+\n+    let chat = await this.chatProvider\n+      .createQueryBuilder()\n+      .whereInIds(chatId)\n+      .innerJoinAndSelect('chat.allTimeMembers', 'allTimeMembers')\n+      .innerJoinAndSelect('chat.listingMembers', 'listingMembers')\n+      .leftJoinAndSelect('chat.actualGroupMembers', 'actualGroupMembers')\n+      .getOne();\n+\n+    if (!chat) {\n+      throw new Error(`Cannot find chat ${chatId}.`);\n+    }\n+\n+    let holders: User[];\n+\n+    if (!chat.name) {\n+      // Chat\n+      if (!chat.listingMembers.map(user => user.id).includes(this.currentUser.id)) {\n+        throw new Error(`The chat ${chatId} must be listed for the current user in order to add a message.`);\n+      }\n+\n+      // Receiver's user\n+      const user = chat.allTimeMembers.find(user => user.id !== this.currentUser.id);\n+\n+      if (!user) {\n+        throw new Error(`Cannot find receiver's user.`);\n+      }\n+\n+      if (!chat.listingMembers.find(listingMember => listingMember.id === user.id)) {\n+        // Chat is not listed for the receiver user. Add him to the listingIds\n+        chat.listingMembers.push(user);\n+\n+        await this.chatProvider.repository.save(chat);\n+\n+        this.pubsub.publish('chatAdded', {\n+          creatorId: this.currentUser.id,\n+          chatAdded: chat,\n+        });\n+      }\n+\n+      holders = chat.listingMembers;\n+    } else {\n+      // Group\n+      if (!chat.actualGroupMembers || !chat.actualGroupMembers.find(user => user.id === this.currentUser.id)) {\n+        throw new Error(`The user is not a member of the group ${chatId}. Cannot add message.`);\n+      }\n+\n+      holders = chat.actualGroupMembers;\n+    }\n+\n+    const message = await this.repository.save(new Message({\n+      chat,\n+      sender: this.currentUser,\n+      content,\n+      type: MessageType.TEXT,\n+      holders,\n+    }));\n+\n+    this.pubsub.publish('messageAdded', {\n+      messageAdded: message,\n+    });\n+\n+    return message || null;\n+  }\n+\n+  async _removeMessages(\n+\n+    chatId: string,\n+    {\n+      messageIds,\n+      all,\n+    }: {\n+      messageIds?: string[]\n+      all?: boolean\n+    } = {},\n+  ) {\n+    const chat = await this.chatProvider\n+      .createQueryBuilder()\n+      .whereInIds(chatId)\n+      .innerJoinAndSelect('chat.listingMembers', 'listingMembers')\n+      .innerJoinAndSelect('chat.messages', 'messages')\n+      .innerJoinAndSelect('messages.holders', 'holders')\n+      .getOne();\n+\n+    if (!chat) {\n+      throw new Error(`Cannot find chat ${chatId}.`);\n+    }\n+\n+    if (!chat.listingMembers.find(user => user.id === this.currentUser.id)) {\n+      throw new Error(`The chat/group ${chatId} is not listed for the current user so there is nothing to delete.`);\n+    }\n+\n+    if (all && messageIds) {\n+      throw new Error(`Cannot specify both 'all' and 'messageIds'.`)\n+    }\n+\n+    if (!all && !(messageIds && messageIds.length)) {\n+      throw new Error(`'all' and 'messageIds' cannot be both null`)\n+    }\n+\n+    let deletedIds: string[] = [];\n+    let removedMessages: Message[] = [];\n+    // Instead of chaining map and filter we can loop once using reduce\n+    chat.messages = await chat.messages.reduce<Promise<Message[]>>(async (filtered$, message) => {\n+      const filtered = await filtered$;\n+\n+      if (all || messageIds!.includes(message.id)) {\n+        deletedIds.push(message.id);\n+        // Remove the current user from the message holders\n+        message.holders = message.holders.filter(user => user.id !== this.currentUser.id);\n+\n+      }\n+\n+      if (message.holders.length !== 0) {\n+        // Remove the current user from the message holders\n+        await this.repository.save(message);\n+        filtered.push(message);\n+      } else {\n+        // Message is flagged for removal\n+        removedMessages.push(message);\n+      }\n+\n+      return filtered;\n+    }, Promise.resolve([]));\n+\n+    return { deletedIds, removedMessages };\n+  }\n+\n+  async removeMessages(\n+\n+    chatId: string,\n+    {\n+      messageIds,\n+      all,\n+    }: {\n+      messageIds?: string[]\n+      all?: boolean\n+    } = {},\n+  ) {\n+    const { deletedIds, removedMessages } = await this._removeMessages(chatId, { messageIds, all });\n+\n+    for (let message of removedMessages) {\n+      await this.repository.remove(message);\n+    }\n+\n+    return deletedIds;\n+  }\n+\n+  async _removeChatGetMessages(chatId: string) {\n+    let messages = await this.createQueryBuilder()\n+      .innerJoin('message.chat', 'chat', 'chat.id = :chatId', { chatId })\n+      .leftJoinAndSelect('message.holders', 'holders')\n+      .getMany();\n+\n+    messages = messages.map(message => ({\n+      ...message,\n+      holders: message.holders.filter(user => user.id !== this.currentUser.id),\n+    }));\n+\n+    return messages;\n+  }\n+\n+  async removeChat(chatId: string, messages?: Message[]) {\n+    if (!messages) {\n+      messages = await this._removeChatGetMessages(chatId);\n+    }\n+\n+    for (let message of messages) {\n+      message.holders = message.holders.filter(user => user.id !== this.currentUser.id);\n+\n+      if (message.holders.length !== 0) {\n+        // Remove the current user from the message holders\n+        await this.repository.save(message);\n+      } else {\n+        // Simply remove the message\n+        await this.repository.remove(message);\n+      }\n+    }\n+\n+    return await this.chatProvider.removeChat(chatId);\n+  }\n+\n+  async getMessageSender(message: Message) {\n+    const sender = await this.userProvider\n+      .createQueryBuilder()\n+      .innerJoin('user.senderMessages', 'senderMessages', 'senderMessages.id = :messageId', {\n+        messageId: message.id,\n+      })\n+      .getOne()\n+\n+    if (!sender) {\n+      throw new Error(`Message must have a sender.`)\n+    }\n+\n+    return sender\n+  }\n+\n+  async getMessageOwnership(message: Message) {\n+    return !!(await this.userProvider\n+      .createQueryBuilder()\n+      .whereInIds(this.currentUser.id)\n+      .innerJoin('user.senderMessages', 'senderMessages', 'senderMessages.id = :messageId', {\n+        messageId: message.id,\n+      })\n+      .getCount())\n+  }\n+\n+  async getMessageHolders(message: Message) {\n+    return await this.userProvider\n+      .createQueryBuilder()\n+      .innerJoin('user.holderMessages', 'holderMessages', 'holderMessages.id = :messageId', {\n+        messageId: message.id,\n+      })\n+      .getMany()\n+  }\n+\n+  async getMessageChat(message: Message) {\n+    const chat = await this.chatProvider\n+      .createQueryBuilder()\n+      .innerJoin('chat.messages', 'messages', 'messages.id = :messageId', {\n+        messageId: message.id,\n+      })\n+      .getOne()\n+\n+    if (!chat) {\n+      throw new Error(`Message must have a chat.`)\n+    }\n+\n+    return chat\n+  }\n+\n+  async getChats() {\n+    const chats = await this.chatProvider\n+      .createQueryBuilder()\n+      .leftJoin('chat.listingMembers', 'listingMembers')\n+      .where('listingMembers.id = :id', { id: this.currentUser.id })\n+      .getMany()\n+\n+    for (let chat of chats) {\n+      chat.messages = await this.getChatMessages(chat)\n+    }\n+\n+    return chats.sort((chatA, chatB) => {\n+      const dateA = chatA.messages.length\n+        ? chatA.messages[chatA.messages.length - 1].createdAt\n+        : chatA.createdAt\n+      const dateB = chatB.messages.length\n+        ? chatB.messages[chatB.messages.length - 1].createdAt\n+        : chatB.createdAt\n+      return dateB.valueOf() - dateA.valueOf()\n+    })\n+  }\n+\n+  async getChatMessages(chat: Chat, amount?: number) {\n+    if (chat.messages) {\n+      return amount ? chat.messages.slice(-amount) : chat.messages\n+    }\n+\n+    let query = this.createQueryBuilder()\n+      .innerJoin('message.chat', 'chat', 'chat.id = :chatId', { chatId: chat.id })\n+      .innerJoin('message.holders', 'holders', 'holders.id = :userId', {\n+        userId: this.currentUser.id,\n+      })\n+      .orderBy({ 'message.createdAt': { order: 'DESC', nulls: 'NULLS LAST' } })\n+\n+    if (amount) {\n+      query = query.take(amount)\n+    }\n+\n+    return (await query.getMany()).reverse()\n+  }\n+\n+  async getChatLastMessage(chat: Chat) {\n+    if (chat.messages) {\n+      return chat.messages.length ? chat.messages[chat.messages.length - 1] : null\n+    }\n+\n+    const messages = await this.getChatMessages(chat, 1)\n+\n+    return messages && messages.length ? messages[0] : null\n+  }\n+\n+  async getChatUpdatedAt(chat: Chat) {\n+    if (chat.messages) {\n+      return chat.messages.length ? chat.messages[0].createdAt : null\n+    }\n+\n+    const latestMessage = await this.createQueryBuilder()\n+      .innerJoin('message.chat', 'chat', 'chat.id = :chatId', { chatId: chat.id })\n+      .innerJoin('message.holders', 'holders', 'holders.id = :userId', {\n+        userId: this.currentUser.id,\n+      })\n+      .orderBy({ 'message.createdAt': 'DESC' })\n+      .getOne()\n+\n+    return latestMessage ? latestMessage.createdAt : null\n+  }\n+\n+  async filterMessageAdded(messageAdded: Message) {\n+    let relevantUsers: User[]\n+\n+    if (!messageAdded.chat.name) {\n+      // Chat\n+      relevantUsers = (await this.userProvider\n+        .createQueryBuilder()\n+        .innerJoin(\n+          'user.listingMemberChats',\n+          'listingMemberChats',\n+          'listingMemberChats.id = :chatId',\n+          { chatId: messageAdded.chat.id }\n+        )\n+        .getMany()).filter(user => user.id != messageAdded.sender.id)\n+    } else {\n+      // Group\n+      relevantUsers = (await this.userProvider\n+        .createQueryBuilder()\n+        .innerJoin(\n+          'user.actualGroupMemberChats',\n+          'actualGroupMemberChats',\n+          'actualGroupMemberChats.id = :chatId',\n+          { chatId: messageAdded.chat.id }\n+        )\n+        .getMany()).filter(user => user.id != messageAdded.sender.id)\n+    }\n+\n+    return relevantUsers.some(user => user.id === this.currentUser.id)\n+  }\n+}\ndiff --git a/server/modules/message/resolvers/resolvers.ts b/server/modules/message/resolvers/resolvers.ts\nnew file mode 100644\nindex 0000000..7c1db53\n--- /dev/null\n+++ b/server/modules/message/resolvers/resolvers.ts\n@@ -0,0 +1,48 @@\n+import { ModuleContext } from '@graphql-modules/core'\n+import { PubSub, withFilter } from 'apollo-server-express'\n+import { Message } from '../../../entity/message'\n+import { IResolvers } from '../../../types'\n+import { MessageProvider } from '../providers/message.provider'\n+\n+export default {\n+  Query: {\n+    // The ordering depends on the messages\n+    chats: (obj, args, { injector }) => injector.get(MessageProvider).getChats(),\n+  },\n+  Mutation: {\n+    addMessage: async (obj, { chatId, content }, { injector }) =>\n+      injector.get(MessageProvider).addMessage(chatId, content),\n+    removeMessages: async (obj, { chatId, messageIds, all }, { injector }) =>\n+      injector.get(MessageProvider).removeMessages(chatId, {\n+        messageIds: messageIds || undefined,\n+        all: all || false,\n+      }),\n+    // We may need to also remove the messages\n+    removeChat: async (obj, { chatId }, { injector }) => injector.get(MessageProvider).removeChat(chatId),\n+  },\n+  Subscription: {\n+    messageAdded: {\n+      subscribe: withFilter((root, args, { injector }: ModuleContext) => injector.get(PubSub).asyncIterator('messageAdded'),\n+        (data: { messageAdded: Message }, variables, { injector }: ModuleContext) => data && injector.get(MessageProvider).filterMessageAdded(data.messageAdded)\n+      ),\n+    },\n+  },\n+  Chat: {\n+    messages: async (chat, { amount }, { injector }) =>\n+      injector.get(MessageProvider).getChatMessages(chat, amount || 0),\n+    lastMessage: async (chat, args, { injector }) =>\n+      injector.get(MessageProvider).getChatLastMessage(chat),\n+    updatedAt: async (chat, args, { injector }) =>\n+      injector.get(MessageProvider).getChatUpdatedAt(chat),\n+  },\n+  Message: {\n+    sender: async (message, args, { injector }) =>\n+      injector.get(MessageProvider).getMessageSender(message),\n+    ownership: async (message, args, { injector }) =>\n+      injector.get(MessageProvider).getMessageOwnership(message),\n+    holders: async (message, args, { injector }) =>\n+      injector.get(MessageProvider).getMessageHolders(message),\n+    chat: async (message, args, { injector }) =>\n+      injector.get(MessageProvider).getMessageChat(message),\n+  },\n+} as IResolvers\ndiff --git a/server/modules/message/schema/typeDefs.graphql b/server/modules/message/schema/typeDefs.graphql\nnew file mode 100644\nindex 0000000..a92d52d\n--- /dev/null\n+++ b/server/modules/message/schema/typeDefs.graphql\n@@ -0,0 +1,34 @@\n+type Subscription {\n+  messageAdded: Message\n+}\n+\n+enum MessageType {\n+  LOCATION\n+  TEXT\n+  PICTURE\n+}\n+\n+extend type Chat {\n+  messages(amount: Int): [Message]!\n+  lastMessage: Message\n+  updatedAt: Date!\n+}\n+\n+type Message {\n+  id: ID!\n+  sender: User!\n+  chat: Chat!\n+  content: String!\n+  createdAt: Date!\n+  #FIXME: should return MessageType\n+  type: Int!\n+  #Whoever still holds a copy of the message. Cannot be null because the message gets deleted otherwise\n+  holders: [User!]!\n+  #Computed property\n+  ownership: Boolean!\n+}\n+\n+type Mutation {\n+  addMessage(chatId: ID!, content: String!): Message\n+  removeMessages(chatId: ID!, messageIds: [ID!], all: Boolean): [ID]!\n+}\ndiff --git a/server/modules/recipient/index.ts b/server/modules/recipient/index.ts\nnew file mode 100644\nindex 0000000..7a562f8\n--- /dev/null\n+++ b/server/modules/recipient/index.ts\n@@ -0,0 +1,22 @@\n+import { GraphQLModule } from '@graphql-modules/core';\n+import { loadResolversFiles, loadSchemaFiles } from '@graphql-modules/sonar';\n+import { UserModule } from '../user';\n+import { MessageModule } from '../message';\n+import { ChatModule } from '../chat';\n+import { RecipientProvider } from './providers/recipient.provider';\n+import { AuthModule } from '../auth';\n+\n+export const RecipientModule = new GraphQLModule({\n+  name: 'Recipient',\n+  imports: [\n+    AuthModule,\n+    UserModule,\n+    ChatModule,\n+    MessageModule,\n+  ],\n+  providers: [\n+    RecipientProvider,\n+  ],\n+  typeDefs: loadSchemaFiles(__dirname + '/schema/'),\n+  resolvers: loadResolversFiles(__dirname + '/resolvers/'),\n+});\ndiff --git a/server/modules/recipient/providers/recipient.provider.ts b/server/modules/recipient/providers/recipient.provider.ts\nnew file mode 100644\nindex 0000000..9b13e20\n--- /dev/null\n+++ b/server/modules/recipient/providers/recipient.provider.ts\n@@ -0,0 +1,123 @@\n+import { Injectable, ProviderScope } from '@graphql-modules/di'\n+import { Connection } from 'typeorm'\n+import { MessageProvider } from '../../message/providers/message.provider'\n+import { Chat } from '../../../entity/chat'\n+import { Message } from '../../../entity/message'\n+import { Recipient } from '../../../entity/recipient'\n+import { AuthProvider } from '../../auth/providers/auth.provider'\n+\n+@Injectable({\n+  scope: ProviderScope.Session,\n+})\n+export class RecipientProvider {\n+  constructor(\n+    private authProvider: AuthProvider,\n+    private connection: Connection,\n+    private messageProvider: MessageProvider\n+  ) {}\n+\n+  public repository = this.connection.getRepository(Recipient)\n+  public currentUser = this.authProvider.currentUser\n+\n+  createQueryBuilder() {\n+    return this.connection.createQueryBuilder(Recipient, 'recipient')\n+  }\n+\n+  getChatUnreadMessagesCount(chat: Chat) {\n+    return this.messageProvider\n+      .createQueryBuilder()\n+      .innerJoin('message.chat', 'chat', 'chat.id = :chatId', { chatId: chat.id })\n+      .innerJoin(\n+        'message.recipients',\n+        'recipients',\n+        'recipients.user.id = :userId AND recipients.readAt IS NULL',\n+        {\n+          userId: this.currentUser.id,\n+        }\n+      )\n+      .getCount()\n+  }\n+\n+  getMessageRecipients(message: Message) {\n+    return this.createQueryBuilder()\n+      .innerJoinAndSelect('recipient.message', 'message', 'message.id = :messageId', {\n+        messageId: message.id,\n+      })\n+      .innerJoinAndSelect('recipient.user', 'user')\n+      .getMany()\n+  }\n+\n+  async getRecipientChat(recipient: Recipient) {\n+    if (recipient.message.chat) {\n+      return recipient.message.chat\n+    }\n+\n+    return this.messageProvider.getMessageChat(recipient.message)\n+  }\n+\n+  async removeChat(chatId: string) {\n+    const messages = await this.messageProvider._removeChatGetMessages(chatId)\n+\n+    for (let message of messages) {\n+      if (message.holders.length === 0) {\n+        const recipients = await this.createQueryBuilder()\n+          .innerJoinAndSelect('recipient.message', 'message', 'message.id = :messageId', {\n+            messageId: message.id,\n+          })\n+          .innerJoinAndSelect('recipient.user', 'user')\n+          .getMany()\n+\n+        for (let recipient of recipients) {\n+          await this.repository.remove(recipient)\n+        }\n+      }\n+    }\n+\n+    return await this.messageProvider.removeChat(chatId, messages)\n+  }\n+\n+  async addMessage(chatId: string, content: string) {\n+    const message = await this.messageProvider.addMessage(chatId, content)\n+\n+    for (let user of message.holders) {\n+      if (user.id !== this.currentUser.id) {\n+        await this.repository.save(new Recipient({ user, message }))\n+      }\n+    }\n+\n+    return message\n+  }\n+\n+  async removeMessages(\n+    chatId: string,\n+    {\n+      messageIds,\n+      all,\n+    }: {\n+      messageIds?: string[]\n+      all?: boolean\n+    } = {}\n+  ) {\n+    const { deletedIds, removedMessages } = await this.messageProvider._removeMessages(chatId, {\n+      messageIds,\n+      all,\n+    })\n+\n+    for (let message of removedMessages) {\n+      const recipients = await this.createQueryBuilder()\n+        .innerJoinAndSelect('recipient.message', 'message', 'message.id = :messageId', {\n+          messageId: message.id,\n+        })\n+        .innerJoinAndSelect('recipient.user', 'user')\n+        .getMany()\n+\n+      for (let recipient of recipients) {\n+        await this.repository.remove(recipient)\n+      }\n+\n+      await this.messageProvider.repository.remove(message)\n+    }\n+\n+    return deletedIds\n+  }\n+}\ndiff --git a/server/modules/recipient/resolvers/resolvers.ts b/server/modules/recipient/resolvers/resolvers.ts\nnew file mode 100644\nindex 0000000..adfc187\n--- /dev/null\n+++ b/server/modules/recipient/resolvers/resolvers.ts\n@@ -0,0 +1,35 @@\n+import { IResolvers } from '../../../types'\n+import { RecipientProvider } from '../providers/recipient.provider'\n+\n+export default {\n+  Mutation: {\n+    // TODO: implement me\n+    markAsReceived: async (obj, { chatId }) => false,\n+    // TODO: implement me\n+    markAsRead: async (obj, { chatId }) => false,\n+    // We may also need to remove the recipients\n+    removeChat: async (obj, { chatId }, { injector }) =>\n+      injector.get(RecipientProvider).removeChat(chatId),\n+    // We also need to create the recipients\n+    addMessage: async (obj, { chatId, content }, { injector }) =>\n+      injector.get(RecipientProvider).addMessage(chatId, content),\n+    // We may also need to remove the recipients\n+    removeMessages: async (obj, { chatId, messageIds, all }, { injector }) =>\n+      injector.get(RecipientProvider).removeMessages(chatId, {\n+        messageIds: messageIds || undefined,\n+        all: all || false,\n+      }),\n+  },\n+  Chat: {\n+    unreadMessages: async (chat, args, { injector }) =>\n+      injector.get(RecipientProvider).getChatUnreadMessagesCount(chat),\n+  },\n+  Message: {\n+    recipients: async (message, args, { injector }) =>\n+      injector.get(RecipientProvider).getMessageRecipients(message),\n+  },\n+  Recipient: {\n+    chat: async (recipient, args, { injector }) =>\n+      injector.get(RecipientProvider).getRecipientChat(recipient),\n+  },\n+} as IResolvers\ndiff --git a/server/modules/recipient/schema/typeDefs.graphql b/server/modules/recipient/schema/typeDefs.graphql\nnew file mode 100644\nindex 0000000..ef4638d\n--- /dev/null\n+++ b/server/modules/recipient/schema/typeDefs.graphql\n@@ -0,0 +1,22 @@\n+extend type Chat {\n+  #Computed property\n+  unreadMessages: Int!\n+}\n+\n+extend type Message {\n+  #Whoever received the message\n+  recipients: [Recipient!]!\n+}\n+\n+type Recipient {\n+  user: User!\n+  message: Message!\n+  chat: Chat!\n+  receivedAt: Date\n+  readAt: Date\n+}\n+\n+type Mutation {\n+  markAsReceived(chatId: ID!): Boolean\n+  markAsRead(chatId: ID!): Boolean\n+}\ndiff --git a/server/modules/user/index.ts b/server/modules/user/index.ts\nnew file mode 100644\nindex 0000000..fece9e2\n--- /dev/null\n+++ b/server/modules/user/index.ts\n@@ -0,0 +1,43 @@\n+/// <reference path=\"../../cloudinary.d.ts\" />\n+import { GraphQLModule } from '@graphql-modules/core'\n+import { InjectFunction, ProviderScope } from '@graphql-modules/di'\n+import { loadResolversFiles, loadSchemaFiles } from '@graphql-modules/sonar'\n+import { Express } from 'express'\n+import multer from 'multer'\n+import tmp from 'tmp'\n+import cloudinary from 'cloudinary'\n+import { APP } from '../app.symbols'\n+import { AuthModule } from '../auth'\n+import { UserProvider } from './providers/user.provider'\n+\n+const CLOUDINARY_URL = process.env.CLOUDINARY_URL || ''\n+\n+export const UserModule = new GraphQLModule({\n+  name: 'User',\n+  imports: [AuthModule],\n+  providers: [UserProvider],\n+  typeDefs: loadSchemaFiles(__dirname + '/schema/'),\n+  resolvers: loadResolversFiles(__dirname + '/resolvers/'),\n+  defaultProviderScope: ProviderScope.Session,\n+  middleware: InjectFunction(UserProvider, APP)((userProvider, app: Express) => {\n+    const match = CLOUDINARY_URL.match(/cloudinary:\\/\\/(\\d+):(\\w+)@(\\.+)/)\n+\n+    if (match) {\n+      const [api_key, api_secret, cloud_name] = match.slice(1)\n+      cloudinary.config({ api_key, api_secret, cloud_name })\n+    }\n+\n+    const upload = multer({\n+      dest: tmp.dirSync({ unsafeCleanup: true }).name,\n+    })\n+\n+    app.post('/upload-profile-pic', upload.single('file'), async (req: any, res, done) => {\n+      try {\n+        res.json(await userProvider.uploadProfilePic(req.file.path))\n+      } catch (e) {\n+        done(e)\n+      }\n+    })\n+    return {}\n+  }),\n+})\ndiff --git a/server/modules/user/providers/user.provider.ts b/server/modules/user/providers/user.provider.ts\nnew file mode 100644\nindex 0000000..bdda1ed\n--- /dev/null\n+++ b/server/modules/user/providers/user.provider.ts\n@@ -0,0 +1,71 @@\n+import { Injectable, ProviderScope } from '@graphql-modules/di'\n+import { PubSub } from 'apollo-server-express'\n+import cloudinary from 'cloudinary'\n+import { Connection } from 'typeorm'\n+import { User } from '../../../entity/user'\n+import { AuthProvider } from '../../auth/providers/auth.provider'\n+\n+@Injectable()\n+export class UserProvider {\n+  constructor(\n+    private pubsub: PubSub,\n+    private connection: Connection,\n+    private authProvider: AuthProvider,\n+  ) {}\n+\n+  public repository = this.connection.getRepository(User)\n+  private currentUser = this.authProvider.currentUser\n+\n+  createQueryBuilder() {\n+    return this.connection.createQueryBuilder(User, 'user')\n+  }\n+\n+  getMe() {\n+    return this.currentUser\n+  }\n+\n+  getUsers() {\n+    return this.createQueryBuilder()\n+      .where('user.id != :id', { id: this.currentUser.id })\n+      .getMany()\n+  }\n+\n+  async updateUser({\n+    name,\n+    picture,\n+  }: {\n+    name?: string,\n+    picture?: string,\n+  } = {}) {\n+    if (name === this.currentUser.name && picture === this.currentUser.picture) {\n+      return this.currentUser;\n+    }\n+\n+    this.currentUser.name = name || this.currentUser.name;\n+    this.currentUser.picture = picture || this.currentUser.picture;\n+\n+    await this.repository.save(this.currentUser);\n+\n+    this.pubsub.publish('userUpdated', {\n+      userUpdated: this.currentUser,\n+    });\n+\n+    return this.currentUser;\n+  }\n+\n+  filterUserAddedOrUpdated(userAddedOrUpdated: User) {\n+    return userAddedOrUpdated.id !== this.currentUser.id;\n+  }\n+\n+  uploadProfilePic(filePath: string) {\n+    return new Promise((resolve, reject) => {\n+      cloudinary.v2.uploader.upload(filePath, (error, result) => {\n+        if (error) {\n+          reject(error)\n+        } else {\n+          resolve(result)\n+        }\n+      })\n+    })\n+  }\n+}\ndiff --git a/server/modules/user/resolvers/resolvers.ts b/server/modules/user/resolvers/resolvers.ts\nnew file mode 100644\nindex 0000000..871a641\n--- /dev/null\n+++ b/server/modules/user/resolvers/resolvers.ts\n@@ -0,0 +1,32 @@\n+import { ModuleContext } from '@graphql-modules/core'\n+import { PubSub, withFilter } from 'apollo-server-express'\n+import { User } from '../../../entity/User'\n+import { IResolvers } from '../../../types'\n+import { UserProvider } from '../providers/user.provider'\n+\n+export default {\n+  Query: {\n+    me: (obj, args, { injector }) => injector.get(UserProvider).getMe(),\n+    users: (obj, args, { injector }) => injector.get(UserProvider).getUsers(),\n+  },\n+  Mutation: {\n+    updateUser: (obj, { name, picture }, { injector }) => injector.get(UserProvider).updateUser({\n+      name: name || '',\n+      picture: picture || '',\n+    }),\n+  },\n+  Subscription: {\n+    userAdded: {\n+      subscribe: withFilter(\n+        (root, args, { injector }: ModuleContext) => injector.get(PubSub).asyncIterator('userAdded'),\n+        (data: { userAdded: User }, variables, { injector }: ModuleContext) => data && injector.get(UserProvider).filterUserAddedOrUpdated(data.userAdded),\n+      ),\n+    },\n+    userUpdated: {\n+      subscribe: withFilter(\n+        (root, args, { injector }: ModuleContext) => injector.get(PubSub).asyncIterator('userAdded'),\n+        (data: { userUpdated: User }, variables, { injector }: ModuleContext) => data && injector.get(UserProvider).filterUserAddedOrUpdated(data.userUpdated)\n+      ),\n+    },\n+  },\n+} as IResolvers\ndiff --git a/server/modules/user/schema/typeDefs.graphql b/server/modules/user/schema/typeDefs.graphql\nnew file mode 100644\nindex 0000000..d9abfa5\n--- /dev/null\n+++ b/server/modules/user/schema/typeDefs.graphql\n@@ -0,0 +1,20 @@\n+type Query {\n+  me: User\n+  users: [User!]\n+}\n+\n+type Mutation {\n+  updateUser(name: String, picture: String): User!\n+}\n+\n+type Subscription {\n+  userAdded: User\n+  userUpdated: User\n+}\n+\n+type User {\n+  id: ID!\n+  name: String\n+  picture: String\n+  phone: String\n+}\ndiff --git a/server/modules/utils.module.ts b/server/modules/utils.module.ts\nnew file mode 100644\nindex 0000000..9243d15\n--- /dev/null\n+++ b/server/modules/utils.module.ts\n@@ -0,0 +1,12 @@\n+import { GraphQLModule } from '@graphql-modules/core'\n+import { GraphQLDateTime } from 'graphql-iso-date'\n+\n+export const UtilsModule = new GraphQLModule({\n+  name: 'Utils',\n+  typeDefs: `\n+    scalar Date\n+  `,\n+  resolvers: {\n+    Date: GraphQLDateTime,\n+  },\n+})\ndiff --git a/server/ormconfig.json b/server/ormconfig.json\nnew file mode 100644\nindex 0000000..276a346\n--- /dev/null\n+++ b/server/ormconfig.json\n@@ -0,0 +1,24 @@\n+{\n+   \"type\": \"postgres\",\n+   \"host\": \"localhost\",\n+   \"port\": 5432,\n+   \"username\": \"test\",\n+   \"password\": \"test\",\n+   \"database\": \"whatsapp\",\n+   \"synchronize\": true,\n+   \"logging\": false,\n+   \"entities\": [\n+      \"entity/**/*.ts\"\n+   ],\n+   \"migrations\": [\n+      \"migration/**/*.ts\"\n+   ],\n+   \"subscribers\": [\n+      \"subscriber/**/*.ts\"\n+   ],\n+   \"cli\": {\n+      \"entitiesDir\": \"entity\",\n+      \"migrationsDir\": \"migration\",\n+      \"subscribersDir\": \"subscriber\"\n+   }\n+}\ndiff --git a/server/package.json b/server/package.json\nnew file mode 100644\nindex 0000000..2347066\n--- /dev/null\n+++ b/server/package.json\n@@ -0,0 +1,60 @@\n+{\n+  \"name\": \"whatsapp-clone-server\",\n+  \"private\": true,\n+  \"repository\": {\n+    \"type\": \"git\",\n+    \"url\": \"https://Urigo@github.com/Urigo/WhatsApp-Clone-Server.git\"\n+  },\n+  \"scripts\": {\n+    \"generate\": \"gql-gen\",\n+    \"generate:watch\": \"nodemon --exec yarn generate -e graphql\",\n+    \"start:server\": \"ts-node index.ts\",\n+    \"start:server:watch\": \"nodemon --exec yarn start:server -e ts\",\n+    \"dev\": \"concurrently \\\"yarn generate:watch\\\" \\\"yarn start:server:watch\\\"\",\n+    \"start\": \"yarn generate && yarn start:server\"\n+  },\n+  \"devDependencies\": {\n+    \"@types/bcrypt-nodejs\": \"0.0.30\",\n+    \"@types/body-parser\": \"1.17.0\",\n+    \"@types/cors\": \"2.8.4\",\n+    \"@types/express\": \"4.16.0\",\n+    \"@types/graphql\": \"14.0.4\",\n+    \"@types/graphql-iso-date\": \"3.3.1\",\n+    \"@types/multer\": \"1.3.7\",\n+    \"@types/node\": \"10.12.18\",\n+    \"@types/passport\": \"1.0.0\",\n+    \"@types/passport-http\": \"0.3.7\",\n+    \"@types/pg\": \"^7.4.11\",\n+    \"@types/tmp\": \"0.0.33\",\n+    \"concurrently\": \"4.1.0\",\n+    \"graphql-code-generator\": \"0.16.0\",\n+    \"graphql-codegen-typescript-common\": \"0.16.0\",\n+    \"graphql-codegen-typescript-resolvers\": \"^0.16.1\",\n+    \"nodemon\": \"1.18.9\",\n+    \"ts-node\": \"8.0.1\",\n+    \"typescript\": \"3.2.4\"\n+  },\n+  \"dependencies\": {\n+    \"@graphql-modules/core\": \"0.4.2\",\n+    \"@graphql-modules/di\": \"0.4.0\",\n+    \"@graphql-modules/sonar\": \"0.4.0\",\n+    \"apollo-server-express\": \"2.3.1\",\n+    \"bcrypt-nodejs\": \"0.0.3\",\n+    \"body-parser\": \"1.18.3\",\n+    \"cloudinary\": \"1.13.2\",\n+    \"core-js\": \"3.0.0-beta.3\",\n+    \"cors\": \"2.8.5\",\n+    \"dotenv\": \"^6.2.0\",\n+    \"express\": \"4.16.4\",\n+    \"graphql\": \"14.0.2\",\n+    \"graphql-iso-date\": \"3.6.1\",\n+    \"moment\": \"^2.24.0\",\n+    \"multer\": \"1.4.1\",\n+    \"passport\": \"0.4.0\",\n+    \"passport-http\": \"0.3.0\",\n+    \"pg\": \"7.8.0\",\n+    \"reflect-metadata\": \"0.1.12\",\n+    \"tmp\": \"0.0.33\",\n+    \"typeorm\": \"0.2.11\"\n+  }\n+}\ndiff --git a/server/schema/index.ts b/server/schema/index.ts\nnew file mode 100644\nindex 0000000..6d9cc0e\n--- /dev/null\n+++ b/server/schema/index.ts\n@@ -0,0 +1,4 @@\n+import 'reflect-metadata'\n+import { AppModule } from '../modules/app.module'\n+\n+export default AppModule.forRoot({} as any).schema\ndiff --git a/server/schema/resolvers.ts b/server/schema/resolvers.ts\nnew file mode 100644\nindex 0000000..6131a29\n--- /dev/null\n+++ b/server/schema/resolvers.ts\n@@ -0,0 +1,4 @@\n+import 'reflect-metadata'\n+import { AppModule } from '../modules/app.module'\n+\n+export default AppModule.forRoot({} as any).resolvers\ndiff --git a/server/schema/typeDefs.ts b/server/schema/typeDefs.ts\nnew file mode 100644\nindex 0000000..08b45c9\n--- /dev/null\n+++ b/server/schema/typeDefs.ts\n@@ -0,0 +1,4 @@\n+import 'reflect-metadata'\n+import { AppModule } from '../modules/app.module'\n+\n+export default AppModule.forRoot({} as any).typeDefs\ndiff --git a/server/tsconfig.json b/server/tsconfig.json\nnew file mode 100644\nindex 0000000..0a6e32f\n--- /dev/null\n+++ b/server/tsconfig.json\n@@ -0,0 +1,64 @@\n+{\n+  \"compilerOptions\": {\n+    /* Basic Options */\n+    \"target\": \"es2018\",                       /* Specify ECMAScript target version: 'ES3' (default), 'ES5', 'ES2015', 'ES2016', 'ES2017','ES2018' or 'ESNEXT'. */\n+    \"module\": \"commonjs\",                     /* Specify module code generation: 'none', 'commonjs', 'amd', 'system', 'umd', 'es2015', or 'ESNext'. */\n+    \"lib\": [                                  /* Specify library files to be included in the compilation. */\n+      \"es2018\",\n+      \"esnext.asynciterable\"\n+    ],\n+    // \"allowJs\": true,                       /* Allow javascript files to be compiled. */\n+    // \"checkJs\": true,                       /* Report errors in .js files. */\n+    // \"jsx\": \"preserve\",                     /* Specify JSX code generation: 'preserve', 'react-native', or 'react'. */\n+    // \"declaration\": true,                   /* Generates corresponding '.d.ts' file. */\n+    // \"declarationMap\": true,                /* Generates a sourcemap for each corresponding '.d.ts' file. */\n+    // \"sourceMap\": true,                     /* Generates corresponding '.map' file. */\n+    // \"outFile\": \"./\",                       /* Concatenate and emit output to single file. */\n+    // \"outDir\": \"./\",                        /* Redirect output structure to the directory. */\n+    // \"rootDir\": \"./\",                       /* Specify the root directory of input files. Use to control the output directory structure with --outDir. */\n+    // \"composite\": true,                     /* Enable project compilation */\n+    // \"removeComments\": true,                /* Do not emit comments to output. */\n+    // \"noEmit\": true,                        /* Do not emit outputs. */\n+    // \"importHelpers\": true,                 /* Import emit helpers from 'tslib'. */\n+    // \"downlevelIteration\": true,            /* Provide full support for iterables in 'for-of', spread, and destructuring when targeting 'ES5' or 'ES3'. */\n+    // \"isolatedModules\": true,               /* Transpile each file as a separate module (similar to 'ts.transpileModule'). */\n+\n+    /* Strict Type-Checking Options */\n+    \"strict\": true,                           /* Enable all strict type-checking options. */\n+    // \"noImplicitAny\": true,                 /* Raise error on expressions and declarations with an implied 'any' type. */\n+    // \"strictNullChecks\": true,              /* Enable strict null checks. */\n+    // See https://github.com/DefinitelyTyped/DefinitelyTyped/issues/21359\n+    \"strictFunctionTypes\": false,             /* Enable strict checking of function types. */\n+    // \"strictBindCallApply\": true,           /* Enable strict 'bind', 'call', and 'apply' methods on functions. */\n+    \"strictPropertyInitialization\": false,    /* Enable strict checking of property initialization in classes. */\n+    // \"noImplicitThis\": true,                /* Raise error on 'this' expressions with an implied 'any' type. */\n+    // \"alwaysStrict\": true,                  /* Parse in strict mode and emit \"use strict\" for each source file. */\n+\n+    /* Additional Checks */\n+    // \"noUnusedLocals\": true,                /* Report errors on unused locals. */\n+    // \"noUnusedParameters\": true,            /* Report errors on unused parameters. */\n+    // \"noImplicitReturns\": true,             /* Report error when not all code paths in function return a value. */\n+    // \"noFallthroughCasesInSwitch\": true,    /* Report errors for fallthrough cases in switch statement. */\n+\n+    /* Module Resolution Options */\n+    // \"moduleResolution\": \"node\",            /* Specify module resolution strategy: 'node' (Node.js) or 'classic' (TypeScript pre-1.6). */\n+    // \"baseUrl\": \"./\",                       /* Base directory to resolve non-absolute module names. */\n+    // \"paths\": {},                           /* A series of entries which re-map imports to lookup locations relative to the 'baseUrl'. */\n+    // \"rootDirs\": [],                        /* List of root folders whose combined content represents the structure of the project at runtime. */\n+    // \"typeRoots\": [],                       /* List of folders to include type definitions from. */\n+    // \"types\": [],                           /* Type declaration files to be included in compilation. */\n+    // \"allowSyntheticDefaultImports\": true,  /* Allow default imports from modules with no default export. This does not affect code emit, just typechecking. */\n+    \"esModuleInterop\": true,                  /* Enables emit interoperability between CommonJS and ES Modules via creation of namespace objects for all imports. Implies 'allowSyntheticDefaultImports'. */\n+    // \"preserveSymlinks\": true,              /* Do not resolve the real path of symlinks. */\n+\n+    /* Source Map Options */\n+    // \"sourceRoot\": \"\",                      /* Specify the location where debugger should locate TypeScript files instead of source locations. */\n+    // \"mapRoot\": \"\",                         /* Specify the location where debugger should locate map files instead of generated locations. */\n+    // \"inlineSourceMap\": true,               /* Emit a single file with source maps instead of having a separate file. */\n+    // \"inlineSources\": true,                 /* Emit the source alongside the sourcemaps within a single file; requires '--inlineSourceMap' or '--sourceMap' to be set. */\n+\n+    /* Experimental Options */\n+    \"experimentalDecorators\": true,           /* Enables experimental support for ES7 decorators. */\n+    \"emitDecoratorMetadata\": true             /* Enables experimental support for emitting type metadata for decorators. */\n+  }\n+}\n",
        "manuals": [
          {
            "manualTitle": "WhatsApp Clone Tutorial",
            "stepRevision": "316fe805bcd9aff77d07f03583a3fdeda05ad8b7",
            "manualView": "<p align=\"center\"><img src=\"https://cdn-images-1.medium.com/max/1600/1*cSBu9zeo8fSnf1Cc-UeR_g.jpeg\" width=\"640\"></p>\n\nYou might have seen it around already - an open-source WhatsApp Clone tutorial; a project which was originally started in 2015 by [Uri Goldshtein](https://github.com/urigo) based on Angular-Meteor and Ionic, and have been throughout different incarnations ever since.\n\nThis time around, I'm happy to announce that a new version of the WhatsApp Clone is coming, and it's based on React 16.7 (Hooks & Suspense), Styled-Components, Material-UI, TypeScript, GraphQL-Subscriptions/Codegen/Modules, PostgreSQL and TypeORM.\n\nThe step-by-step implementations of the server and client can be found here:\n\n- Server - [urigo/whatsapp-clone-server](https://github.com/urigo/whatsapp-clone-server)\n\n- Client - [urigo/whatsapp-clone-client](https://github.com/urigo/whatsapp-clone-client-react)\n\n<p align=\"center\"><img src=\"https://cdn-images-1.medium.com/max/1040/1*fFUJd7moWtjvMZ5dE-A80g.gif\" alt=\"whatsapp\" width=\"240\"></p>\n\n### Why is it so good?\n\nThis app was built with all the latest and hottest technologies out there. The purpose is simple - it should be a guideline for building a proper app, thus we thought very carefully regards the design patterns and architecture used in it, plus, we made sure to cover all communication methods with the GraphQL-back-end in different variations (query, mutation, subscription). This way whenever you're looking to start a new app, maintain an existing one or upgrade your dev-stack, the WhatsApp-clone can be a great source to start with! It's full stack and has a complete flow.\n\n### Why did we choose this dev-stack?\n\nReact, GraphQL, PostgreSQL and TypeScript for obvious reasons - they are backed by a strong ecosystem. These technologies can be used in endless variations, and there's no one way which is the most right of doing so, but we chose a way that makes the most sense for us and that we truly believe in when it comes to building apps. We've connected all 4 with TypeORM, GraphQL-Codegen, GraphQL-Modules for the following reasons:\n\n- The GraphQL back-end was implemented with GraphQL-Modules where logic was splitted into modules based on entity types. GraphQL-Modules is an amazing library which provides you with the ability to manage and maintain your GraphQL schema correctly. Not once nor twice I have seen people who struggle with that and get tangled upon their own creation, and with GraphQL-Modules where you have a very defined structure, this problem can be easily solved.\n\n- Every GraphQL/TypeScript definition were automatically generated with GraphQL-Codegen using a single command call. There's no need to maintain the same thing twice if it already exists in one way or another. This way you don't have to write TypeScript type definitions for your GraphQL documents (queries, mutations and subscriptions), GraphQL resolvers and GraphQL types.\n\n- The new version of React 16.7 was used with Hooks and Suspense and 100% of the project is made out of function components. The front-end communicates with the back-end using only hooks and there was no use in GraphQL-React components, which makes async tasks look a lot more readable with no extra indentations.\n\n- We used TypeORM to correctly split the logic of the entities in the database and define the relationships between them. Without a tool such as TypeORM, communication against the DB tends to get messy and confusion since there's no single module per entity which holds all its related logic.\n\n### What to expect?\n\n- Basic authentication.\n\n- Image uploading with [Cloudinary](https://cloudinary.com/).\n\n- Live updates with GraphQL subscriptions.\n\n- 100% function components with React Hooks.\n\n- GraphQL communication with [react-apollo-hooks](https://github.com/trojanowski/react-apollo-hooks).\n\nThis app be extremely useful for those who have little to no background in one of the technologies in our dev-stack."
          },
          {
            "manualTitle": "Step 1: Creating a React App with Apollo Server",
            "stepRevision": "b83bdc3a39a3fe5b39a5b10a056b60b764fc8b63",
            "manualView": "To create a new React app we're simply gonna use [`create-react-app`](https://github.com/facebook/create-react-app). It comes with a built-in TypeScript support which is exactly what we need. First, install the CLI if you haven't already:\n\n    $ yarn global add create-react-app\n\nAnd then create the app itself:\n\n    $ create-react-app whatsapp-clone-client\n\nBy default, `create-react-app` will create a JavaScript project. In order to use TypeScript, we will rename our app files to have the right extension `.tsx` (TypeScript + JSX):\n\n    src$ mv App.js App.tsx\n    src$ mv index.js index.tsx\n\nAnd then we will add a couple of configuration files that will basically set the building and linting rules for the TypeScript compiler:\n\n[{]: <helper> (diffStep 1.1 files=\"tsconfig.json, tslint.json\" module=\"client\")\n\n#### [Step 1.1: Setup TypeScript](https://github.com/Urigo/WhatsApp-Clone-Client-React/commit/0a994b3)\n\n##### Added tsconfig.json\n```diff\n@@ -0,0 +1,35 @@\n+┊  ┊ 1┊{\n+┊  ┊ 2┊  \"compilerOptions\": {\n+┊  ┊ 3┊    \"outDir\": \"build/dist\",\n+┊  ┊ 4┊    \"sourceMap\": true,\n+┊  ┊ 5┊    \"declaration\": false,\n+┊  ┊ 6┊    \"moduleResolution\": \"node\",\n+┊  ┊ 7┊    \"emitDecoratorMetadata\": true,\n+┊  ┊ 8┊    \"experimentalDecorators\": true,\n+┊  ┊ 9┊    \"downlevelIteration\": true,\n+┊  ┊10┊    \"resolveJsonModule\": true,\n+┊  ┊11┊    \"target\": \"es5\",\n+┊  ┊12┊    \"jsx\": \"preserve\",\n+┊  ┊13┊    \"typeRoots\": [\n+┊  ┊14┊      \"node_modules/@types\"\n+┊  ┊15┊    ],\n+┊  ┊16┊    \"lib\": [\n+┊  ┊17┊      \"es2017\",\n+┊  ┊18┊      \"dom\",\n+┊  ┊19┊      \"esnext.asynciterable\"\n+┊  ┊20┊    ],\n+┊  ┊21┊    \"allowJs\": true,\n+┊  ┊22┊    \"skipLibCheck\": true,\n+┊  ┊23┊    \"esModuleInterop\": false,\n+┊  ┊24┊    \"allowSyntheticDefaultImports\": true,\n+┊  ┊25┊    \"forceConsistentCasingInFileNames\": true,\n+┊  ┊26┊    \"isolatedModules\": true,\n+┊  ┊27┊    \"noEmit\": true,\n+┊  ┊28┊    \"noImplicitAny\": false,\n+┊  ┊29┊    \"strict\": false,\n+┊  ┊30┊    \"module\": \"esnext\"\n+┊  ┊31┊  },\n+┊  ┊32┊  \"include\": [\n+┊  ┊33┊    \"src\"\n+┊  ┊34┊  ]\n+┊  ┊35┊}\n```\n\n##### Added tslint.json\n```diff\n@@ -0,0 +1,29 @@\n+┊  ┊ 1┊{\n+┊  ┊ 2┊  \"extends\": [\"tslint:recommended\", \"tslint-react\", \"tslint-config-prettier\"],\n+┊  ┊ 3┊  \"rules\": {\n+┊  ┊ 4┊    \"ordered-imports\": false,\n+┊  ┊ 5┊    \"object-literal-sort-keys\": false,\n+┊  ┊ 6┊    \"jsx-boolean-value\": false,\n+┊  ┊ 7┊    \"interface-name\" : false,\n+┊  ┊ 8┊    \"variable-name\": false,\n+┊  ┊ 9┊    \"no-string-literal\": false,\n+┊  ┊10┊    \"no-namespace\": false,\n+┊  ┊11┊    \"interface-over-type-literal\": false,\n+┊  ┊12┊    \"no-shadowed-variable\": false,\n+┊  ┊13┊    \"curly\": false,\n+┊  ┊14┊    \"no-label\": false,\n+┊  ┊15┊    \"no-empty\": false,\n+┊  ┊16┊    \"no-debugger\": false,\n+┊  ┊17┊    \"no-console\": false,\n+┊  ┊18┊    \"array-type\": false\n+┊  ┊19┊  },\n+┊  ┊20┊  \"linterOptions\": {\n+┊  ┊21┊    \"exclude\": [\n+┊  ┊22┊      \"config/**/*.js\",\n+┊  ┊23┊      \"node_modules/**/*.ts\",\n+┊  ┊24┊      \"coverage/lcov-report/*.js\",\n+┊  ┊25┊      \"*.json\",\n+┊  ┊26┊      \"**/*.json\"\n+┊  ┊27┊    ]\n+┊  ┊28┊  }\n+┊  ┊29┊}\n```\n\n[}]: #\n\nOnce we will run the app for the first time, `react-scripts` (`create-react-app` utility scripts package) should automatically initialize some additional TypeScript related files.\n\n    $ yarn start\n\nSince in our app we'll be using the new React [hooks](https://reactjs.org/docs/hooks-intro.html) and [Suspense](https://reactjs.org/docs/react-api.html#reactsuspense) mechanisms, we will upgrade React's version to version `16.8`:\n\n    $ yarn upgrade react@16.8.1 react-dom@16.8.1\n\nThe plan is to make our app talk with a [GraphQL](https://graphql.org/) back-end, so we'll be using [Apollo](https://www.apollographql.com/) to setup a client which is actually capable of such.\n\nFirst we will install all the necessary packages:\n\n    $ yarn add apollo-cache-inmemory@1.4.2 apollo-client@2.4.12 apollo-link@1.2.8 apollo-link-http@1.5.11 apollo-link-ws@1.0.14 apollo-utilities@1.1.2 graphql@14.1.1 react-apollo-hooks@0.3.1 subscriptions-transport-ws@0.9.15\n    $ yarn add -D @types/graphql@14.0.5 @types/node@10.12.23\n\nThen we will set the server's connection URL under the `.env` file which is basically used to define constants for our application. The constants can be addressed using `process.env[CONSTANT_NAME]`. The identifier should be replaced automatically by `react-scripts` with the stored value, just like macros:\n\n[{]: <helper> (diffStep 1.3 files=\".env\" module=\"client\")\n\n#### [Step 1.3: Setup Apollo-client](https://github.com/Urigo/WhatsApp-Clone-Client-React/commit/438f0ac)\n\n##### Added .env\n```diff\n@@ -0,0 +1 @@\n+┊ ┊1┊REACT_APP_SERVER_URL=http://localhost:4000\n```\n\n[}]: #\n\nAnd finally we can write our Apollo-GraphQL client module and connect it to our application:\n\n[{]: <helper> (diffStep 1.3 files=\"src/apollo-client.ts, src/index.tsx\" module=\"client\")\n\n#### [Step 1.3: Setup Apollo-client](https://github.com/Urigo/WhatsApp-Clone-Client-React/commit/438f0ac)\n\n##### Added src&#x2F;apollo-client.ts\n```diff\n@@ -0,0 +1,38 @@\n+┊  ┊ 1┊import { InMemoryCache } from 'apollo-cache-inmemory'\n+┊  ┊ 2┊import { ApolloClient } from 'apollo-client'\n+┊  ┊ 3┊import { ApolloLink, split } from 'apollo-link'\n+┊  ┊ 4┊import { HttpLink } from 'apollo-link-http'\n+┊  ┊ 5┊import { WebSocketLink } from 'apollo-link-ws'\n+┊  ┊ 6┊import { getMainDefinition } from 'apollo-utilities'\n+┊  ┊ 7┊import { OperationDefinitionNode } from 'graphql'\n+┊  ┊ 8┊\n+┊  ┊ 9┊const httpUri = process.env.REACT_APP_SERVER_URL + '/graphql'\n+┊  ┊10┊const wsUri = httpUri.replace(/^https?/, 'ws')\n+┊  ┊11┊\n+┊  ┊12┊const httpLink = new HttpLink({\n+┊  ┊13┊  uri: httpUri,\n+┊  ┊14┊})\n+┊  ┊15┊\n+┊  ┊16┊const wsLink = new WebSocketLink({\n+┊  ┊17┊  uri: wsUri,\n+┊  ┊18┊  options: {\n+┊  ┊19┊    reconnect: true,\n+┊  ┊20┊  },\n+┊  ┊21┊})\n+┊  ┊22┊\n+┊  ┊23┊const terminatingLink = split(\n+┊  ┊24┊  ({ query }) => {\n+┊  ┊25┊    const { kind, operation } = getMainDefinition(query) as OperationDefinitionNode\n+┊  ┊26┊    return kind === 'OperationDefinition' && operation === 'subscription'\n+┊  ┊27┊  },\n+┊  ┊28┊  wsLink,\n+┊  ┊29┊  httpLink,\n+┊  ┊30┊)\n+┊  ┊31┊\n+┊  ┊32┊const link = ApolloLink.from([terminatingLink])\n+┊  ┊33┊const cache = new InMemoryCache()\n+┊  ┊34┊\n+┊  ┊35┊export default new ApolloClient({\n+┊  ┊36┊  link,\n+┊  ┊37┊  cache,\n+┊  ┊38┊})\n```\n\n##### Changed src&#x2F;index.tsx\n```diff\n@@ -1,10 +1,16 @@\n ┊ 1┊ 1┊import React from 'react';\n ┊ 2┊ 2┊import ReactDOM from 'react-dom';\n+┊  ┊ 3┊import { ApolloProvider } from 'react-apollo-hooks';\n ┊ 3┊ 4┊import './index.css';\n ┊ 4┊ 5┊import App from './App';\n+┊  ┊ 6┊import apolloClient from './apollo-client'\n ┊ 5┊ 7┊import * as serviceWorker from './serviceWorker';\n ┊ 6┊ 8┊\n-┊ 7┊  ┊ReactDOM.render(<App />, document.getElementById('root'));\n+┊  ┊ 9┊ReactDOM.render(\n+┊  ┊10┊  <ApolloProvider client={apolloClient}>\n+┊  ┊11┊    <App />\n+┊  ┊12┊  </ApolloProvider>\n+┊  ┊13┊, document.getElementById('root'));\n ┊ 8┊14┊\n ┊ 9┊15┊// If you want your app to work offline and load faster, you can change\n ┊10┊16┊// unregister() to register() below. Note this comes with some pitfalls.\n```\n\n[}]: #\n\n> Note that this configuration assumes that the sever runs at `localhost:4000` and that it serves a GraphQL REST endpoint at `/graphql`. Feel free to make the right adjustments according to your needs.\n\nNeedless to say that we need a back-end for our application to function properly, and so this is what we're gonna focus on. We will initialize a second project for the server in a separate directory called `whatsapp-clone-server`:\n\n    $ mkdir whatsapp-clone-server\n    $ cd whatsapp-clone-server\n\nAnd then we will initialize a new Node.JS project using NPM:\n\n    $ npm init --yes\n\nThere's nothing special about this command, it only creates a basic `package.json` which we can add things on top (see [reference](https://docs.npmjs.com/cli/init)). We will be using TypeScript in our project, so let's set it up by installing the necessary packages:\n\n    $ yarn add -D typescript@3.2.4 ts-node@8.0.1 @types/node@10.12.23\n\nAnd creating a `tsconfig.json` file:\n\n[{]: <helper> (diffStep 1.1 files=\"tsconfig.json\" module=\"server\")\n\n#### [Step 1.1: Setup TypeScript](https://github.com/Urigo/WhatsApp-Clone-Server/commit/9302e04)\n\n##### Added tsconfig.json\n```diff\n@@ -0,0 +1,64 @@\n+┊  ┊ 1┊{\n+┊  ┊ 2┊  \"compilerOptions\": {\n+┊  ┊ 3┊    /* Basic Options */\n+┊  ┊ 4┊    \"target\": \"es2018\",                       /* Specify ECMAScript target version: 'ES3' (default), 'ES5', 'ES2015', 'ES2016', 'ES2017','ES2018' or 'ESNEXT'. */\n+┊  ┊ 5┊    \"module\": \"commonjs\",                     /* Specify module code generation: 'none', 'commonjs', 'amd', 'system', 'umd', 'es2015', or 'ESNext'. */\n+┊  ┊ 6┊    \"lib\": [                                  /* Specify library files to be included in the compilation. */\n+┊  ┊ 7┊      \"es2018\",\n+┊  ┊ 8┊      \"esnext.asynciterable\"\n+┊  ┊ 9┊    ],\n+┊  ┊10┊    // \"allowJs\": true,                       /* Allow javascript files to be compiled. */\n+┊  ┊11┊    // \"checkJs\": true,                       /* Report errors in .js files. */\n+┊  ┊12┊    // \"jsx\": \"preserve\",                     /* Specify JSX code generation: 'preserve', 'react-native', or 'react'. */\n+┊  ┊13┊    // \"declaration\": true,                   /* Generates corresponding '.d.ts' file. */\n+┊  ┊14┊    // \"declarationMap\": true,                /* Generates a sourcemap for each corresponding '.d.ts' file. */\n+┊  ┊15┊    // \"sourceMap\": true,                     /* Generates corresponding '.map' file. */\n+┊  ┊16┊    // \"outFile\": \"./\",                       /* Concatenate and emit output to single file. */\n+┊  ┊17┊    // \"outDir\": \"./\",                        /* Redirect output structure to the directory. */\n+┊  ┊18┊    // \"rootDir\": \"./\",                       /* Specify the root directory of input files. Use to control the output directory structure with --outDir. */\n+┊  ┊19┊    // \"composite\": true,                     /* Enable project compilation */\n+┊  ┊20┊    // \"removeComments\": true,                /* Do not emit comments to output. */\n+┊  ┊21┊    // \"noEmit\": true,                        /* Do not emit outputs. */\n+┊  ┊22┊    // \"importHelpers\": true,                 /* Import emit helpers from 'tslib'. */\n+┊  ┊23┊    // \"downlevelIteration\": true,            /* Provide full support for iterables in 'for-of', spread, and destructuring when targeting 'ES5' or 'ES3'. */\n+┊  ┊24┊    // \"isolatedModules\": true,               /* Transpile each file as a separate module (similar to 'ts.transpileModule'). */\n+┊  ┊25┊\n+┊  ┊26┊    /* Strict Type-Checking Options */\n+┊  ┊27┊    \"strict\": true,                           /* Enable all strict type-checking options. */\n+┊  ┊28┊    // \"noImplicitAny\": true,                 /* Raise error on expressions and declarations with an implied 'any' type. */\n+┊  ┊29┊    // \"strictNullChecks\": true,              /* Enable strict null checks. */\n+┊  ┊30┊    // See https://github.com/DefinitelyTyped/DefinitelyTyped/issues/21359\n+┊  ┊31┊    \"strictFunctionTypes\": false,             /* Enable strict checking of function types. */\n+┊  ┊32┊    // \"strictBindCallApply\": true,           /* Enable strict 'bind', 'call', and 'apply' methods on functions. */\n+┊  ┊33┊    \"strictPropertyInitialization\": false,    /* Enable strict checking of property initialization in classes. */\n+┊  ┊34┊    // \"noImplicitThis\": true,                /* Raise error on 'this' expressions with an implied 'any' type. */\n+┊  ┊35┊    // \"alwaysStrict\": true,                  /* Parse in strict mode and emit \"use strict\" for each source file. */\n+┊  ┊36┊\n+┊  ┊37┊    /* Additional Checks */\n+┊  ┊38┊    // \"noUnusedLocals\": true,                /* Report errors on unused locals. */\n+┊  ┊39┊    // \"noUnusedParameters\": true,            /* Report errors on unused parameters. */\n+┊  ┊40┊    // \"noImplicitReturns\": true,             /* Report error when not all code paths in function return a value. */\n+┊  ┊41┊    // \"noFallthroughCasesInSwitch\": true,    /* Report errors for fallthrough cases in switch statement. */\n+┊  ┊42┊\n+┊  ┊43┊    /* Module Resolution Options */\n+┊  ┊44┊    // \"moduleResolution\": \"node\",            /* Specify module resolution strategy: 'node' (Node.js) or 'classic' (TypeScript pre-1.6). */\n+┊  ┊45┊    // \"baseUrl\": \"./\",                       /* Base directory to resolve non-absolute module names. */\n+┊  ┊46┊    // \"paths\": {},                           /* A series of entries which re-map imports to lookup locations relative to the 'baseUrl'. */\n+┊  ┊47┊    // \"rootDirs\": [],                        /* List of root folders whose combined content represents the structure of the project at runtime. */\n+┊  ┊48┊    // \"typeRoots\": [],                       /* List of folders to include type definitions from. */\n+┊  ┊49┊    // \"types\": [],                           /* Type declaration files to be included in compilation. */\n+┊  ┊50┊    // \"allowSyntheticDefaultImports\": true,  /* Allow default imports from modules with no default export. This does not affect code emit, just typechecking. */\n+┊  ┊51┊    \"esModuleInterop\": true,                  /* Enables emit interoperability between CommonJS and ES Modules via creation of namespace objects for all imports. Implies 'allowSyntheticDefaultImports'. */\n+┊  ┊52┊    // \"preserveSymlinks\": true,              /* Do not resolve the real path of symlinks. */\n+┊  ┊53┊\n+┊  ┊54┊    /* Source Map Options */\n+┊  ┊55┊    // \"sourceRoot\": \"\",                      /* Specify the location where debugger should locate TypeScript files instead of source locations. */\n+┊  ┊56┊    // \"mapRoot\": \"\",                         /* Specify the location where debugger should locate map files instead of generated locations. */\n+┊  ┊57┊    // \"inlineSourceMap\": true,               /* Emit a single file with source maps instead of having a separate file. */\n+┊  ┊58┊    // \"inlineSources\": true,                 /* Emit the source alongside the sourcemaps within a single file; requires '--inlineSourceMap' or '--sourceMap' to be set. */\n+┊  ┊59┊\n+┊  ┊60┊    /* Experimental Options */\n+┊  ┊61┊    \"experimentalDecorators\": true,           /* Enables experimental support for ES7 decorators. */\n+┊  ┊62┊    \"emitDecoratorMetadata\": true             /* Enables experimental support for emitting type metadata for decorators. */\n+┊  ┊63┊  }\n+┊  ┊64┊}\n```\n\n[}]: #\n\nWe will also set a script that will startup the server with `ts-node`, a TypeScript interpreter for Node.JS:\n\n```json\n{\n  \"start\": \"ts-node index.ts\"\n}\n```\n\nOur `pacakge.json` file should look like so by now:\n\n[{]: <helper> (diffStep 1.1 files=\"package.json\" module=\"server\")\n\n#### [Step 1.1: Setup TypeScript](https://github.com/Urigo/WhatsApp-Clone-Server/commit/9302e04)\n\n##### Changed package.json\n```diff\n@@ -4,5 +4,13 @@\n ┊ 4┊ 4┊  \"repository\": {\n ┊ 5┊ 5┊    \"type\": \"git\",\n ┊ 6┊ 6┊    \"url\": \"https://Urigo@github.com/Urigo/WhatsApp-Clone-Server.git\"\n+┊  ┊ 7┊  },\n+┊  ┊ 8┊  \"scripts\": {\n+┊  ┊ 9┊    \"start\": \"ts-node index.ts\"\n+┊  ┊10┊  },\n+┊  ┊11┊  \"devDependencies\": {\n+┊  ┊12┊    \"@types/node\": \"10.12.18\",\n+┊  ┊13┊    \"ts-node\": \"8.0.1\",\n+┊  ┊14┊    \"typescript\": \"3.2.4\"\n ┊ 7┊15┊  }\n ┊ 8┊16┊}\n```\n\n[}]: #\n\nIn our server we will be using [Express](https://expressjs.com/) to serve our GraphQL REST endpoint which will be handled by Apollo. Accordingly, let's install the necessary dependencies:\n\n    $ yarn add -D @types/body-parser@1.18.3 @types/cors@2.8.5 @types/express@4.16.4 @types/graphql@14.0.4\n    $ yarn add apollo-server-express@2.3.1 body-parser@1.18.3 cors@2.8.5 express@4.16.4 graphql@14.0.2\n\nAnd setup a basic express server with a `/graphql` REST endpoint:\n\n[{]: <helper> (diffStep 1.2 files=\"index.ts, schema\" module=\"server\")\n\n#### [Step 1.2: Setup a basic Express server with a GraphQL REST endpoint](https://github.com/Urigo/WhatsApp-Clone-Server/commit/6f524af)\n\n##### Added index.ts\n```diff\n@@ -0,0 +1,30 @@\n+┊  ┊ 1┊import { ApolloServer } from 'apollo-server-express'\n+┊  ┊ 2┊import bodyParser from 'body-parser'\n+┊  ┊ 3┊import cors from 'cors'\n+┊  ┊ 4┊import express from 'express'\n+┊  ┊ 5┊import gql from 'graphql-tag'\n+┊  ┊ 6┊import { createServer } from 'http'\n+┊  ┊ 7┊import schema from './schema'\n+┊  ┊ 8┊\n+┊  ┊ 9┊const PORT = 4000\n+┊  ┊10┊\n+┊  ┊11┊const app = express()\n+┊  ┊12┊\n+┊  ┊13┊app.use(cors())\n+┊  ┊14┊app.use(bodyParser.json())\n+┊  ┊15┊\n+┊  ┊16┊const apollo = new ApolloServer({ schema })\n+┊  ┊17┊\n+┊  ┊18┊apollo.applyMiddleware({\n+┊  ┊19┊  app,\n+┊  ┊20┊  path: '/graphql',\n+┊  ┊21┊})\n+┊  ┊22┊\n+┊  ┊23┊// Wrap the Express server\n+┊  ┊24┊const ws = createServer(app)\n+┊  ┊25┊\n+┊  ┊26┊apollo.installSubscriptionHandlers(ws)\n+┊  ┊27┊\n+┊  ┊28┊ws.listen(PORT, () => {\n+┊  ┊29┊  console.log(`Apollo Server is now running on http://localhost:${PORT}`)\n+┊  ┊30┊})\n```\n\n##### Added schema&#x2F;index.ts\n```diff\n@@ -0,0 +1,8 @@\n+┊ ┊1┊import { makeExecutableSchema } from 'apollo-server-express'\n+┊ ┊2┊import resolvers from './resolvers'\n+┊ ┊3┊import typeDefs from './typeDefs'\n+┊ ┊4┊\n+┊ ┊5┊export default makeExecutableSchema({\n+┊ ┊6┊  typeDefs,\n+┊ ┊7┊  resolvers,\n+┊ ┊8┊})\n```\n\n##### Added schema&#x2F;resolvers.ts\n```diff\n@@ -0,0 +1,5 @@\n+┊ ┊1┊export default {\n+┊ ┊2┊  Query: {\n+┊ ┊3┊    chats: () => [],\n+┊ ┊4┊  },\n+┊ ┊5┊}\n```\n\n##### Added schema&#x2F;typeDefs.ts\n```diff\n@@ -0,0 +1,9 @@\n+┊ ┊1┊export default `\n+┊ ┊2┊  type Chat {\n+┊ ┊3┊    id: ID!\n+┊ ┊4┊  }\n+┊ ┊5┊\n+┊ ┊6┊  type Query {\n+┊ ┊7┊    chats: [Chat!]!\n+┊ ┊8┊  }\n+┊ ┊9┊`\n```\n\n[}]: #\n\nBefore we proceed any further there's an issue that needs to be clear. Since we're using TypeScript together with GraphQL, by default we will have to maintain 2 schemas: one for TypeScript and the other for GraphQL. Both schemas represent the same thing this way or another, which means that we will have to maintain the same thing twice. Instead of doing so, we will be using a tool called [GraphQL Code Generator](https://graphql-code-generator.com/) (Codegen, in short) to generate TypeScript definitions from our GraphQL schema.\n\nCodegen will change its behavior and generate code based on a set of templates and a configuration file that we will provide. We highly recommend you to go through the [docs page](https://graphql-code-generator.com/docs/getting-started/) of Codegen to get a better understanding of what it is and how it works. Let's install Codegen then, along with the templates that we're gonna use:\n\n    $ yarn -D add graphql-code-generator@0.16.0 graphql-codegen-typescript-common@0.16.0 graphql-codegen-typescript-resolvers@0.16.0\n\nAnd write its config under `codegen.yml` file:\n\n[{]: <helper> (diffStep 1.3 files=\"codegen.yml\" module=\"server\")\n\n#### [Step 1.3: Setup codegen](https://github.com/Urigo/WhatsApp-Clone-Server/commit/535995c)\n\n##### Added codegen.yml\n```diff\n@@ -0,0 +1,8 @@\n+┊ ┊1┊overwrite: true\n+┊ ┊2┊schema: ./schema/typeDefs.ts\n+┊ ┊3┊require: ts-node/register/transpile-only\n+┊ ┊4┊generates:\n+┊ ┊5┊  ./types.d.ts:\n+┊ ┊6┊    plugins:\n+┊ ┊7┊      - typescript-common\n+┊ ┊8┊      - typescript-resolvers\n```\n\n[}]: #\n\nWe will also update the `.gitignore` file to exclude the generated typings file:\n\n[{]: <helper> (diffStep 1.3 files=\".gitignore\" module=\"server\")\n\n#### [Step 1.3: Setup codegen](https://github.com/Urigo/WhatsApp-Clone-Server/commit/535995c)\n\n##### Changed .gitignore\n```diff\n@@ -1,2 +1,3 @@\n ┊1┊1┊node_modules\n-┊2┊ ┊npm-debug.log🚫↵\n+┊ ┊2┊npm-debug.log\n+┊ ┊3┊types.d.ts\n```\n\n[}]: #\n\nTo make things easy, we will add a code generation command in our `package.json` so we can have it available to us whenever we need it. First we will add few utility packages that are necessary for the task:\n\n    $ yarn -D add nodemon@1.18.9 concurrently@4.1.0\n\nAnd we will update the scripts section in the `package.json` file to look like so:\n\n```json\n{\n  \"generate\": \"gql-gen\",\n  \"generate:watch\": \"nodemon --exec yarn generate -e graphql\",\n  \"start:server\": \"ts-node index.ts\",\n  \"start:server:watch\": \"nodemon --exec yarn start:server -e ts\",\n  \"dev\": \"concurrently \\\"yarn generate:watch\\\" \\\"yarn start:server:watch\\\"\",\n  \"start\": \"yarn generate && yarn start:server\"\n}\n```\n\nThe `package.json` file should look like so by now:\n\n[{]: <helper> (diffStep 1.3 files=\"package.json\" module=\"server\")\n\n#### [Step 1.3: Setup codegen](https://github.com/Urigo/WhatsApp-Clone-Server/commit/535995c)\n\n##### Changed package.json\n```diff\n@@ -6,7 +6,12 @@\n ┊ 6┊ 6┊    \"url\": \"https://Urigo@github.com/Urigo/WhatsApp-Clone-Server.git\"\n ┊ 7┊ 7┊  },\n ┊ 8┊ 8┊  \"scripts\": {\n-┊ 9┊  ┊    \"start\": \"ts-node index.ts\"\n+┊  ┊ 9┊    \"generate\": \"gql-gen\",\n+┊  ┊10┊    \"generate:watch\": \"nodemon --exec yarn generate -e graphql\",\n+┊  ┊11┊    \"start:server\": \"ts-node index.ts\",\n+┊  ┊12┊    \"start:server:watch\": \"nodemon --exec yarn start:server -e ts\",\n+┊  ┊13┊    \"dev\": \"concurrently \\\"yarn generate:watch\\\" \\\"yarn start:server:watch\\\"\",\n+┊  ┊14┊    \"start\": \"yarn generate && yarn start:server\"\n ┊10┊15┊  },\n ┊11┊16┊  \"devDependencies\": {\n ┊12┊17┊    \"@types/body-parser\": \"1.17.0\",\n```\n```diff\n@@ -14,6 +19,11 @@\n ┊14┊19┊    \"@types/express\": \"4.16.0\",\n ┊15┊20┊    \"@types/graphql\": \"14.0.4\",\n ┊16┊21┊    \"@types/node\": \"10.12.18\",\n+┊  ┊22┊    \"concurrently\": \"4.1.0\",\n+┊  ┊23┊    \"graphql-code-generator\": \"0.16.0\",\n+┊  ┊24┊    \"graphql-codegen-typescript-common\": \"0.16.0\",\n+┊  ┊25┊    \"graphql-codegen-typescript-resolvers\": \"^0.16.1\",\n+┊  ┊26┊    \"nodemon\": \"1.18.9\",\n ┊17┊27┊    \"ts-node\": \"8.0.1\",\n ┊18┊28┊    \"typescript\": \"3.2.4\"\n ┊19┊29┊  },\n```\n\n[}]: #\n\nTo generate some TypeScript definitions all we have to do is run:\n\n    $ yarn generate\n\nAnd then we can safely run the server with:\n\n    $ yarn start\n\nAlternatively, you can run the server and watch for changes with the following command:\n\n    $ yarn start:server:watch\n\nFor practice purpose only, we're gonna serve some dummy data from our GraphQL API so we can have something to work with in our client. Later on we will connect everything to a real database. This would give us an easy start. Our dummy db will consist of a set of chats, each of them has a last message, a picture and a name:\n\n[{]: <helper> (diffStep 1.4 files=\"index.ts, db.ts, entity, schema, codegen.yml\" module=\"server\")\n\n#### [Step 1.4: Add fake DB](https://github.com/Urigo/WhatsApp-Clone-Server/commit/3223310)\n\n##### Changed codegen.yml\n```diff\n@@ -6,3 +6,9 @@\n ┊ 6┊ 6┊    plugins:\n ┊ 7┊ 7┊      - typescript-common\n ┊ 8┊ 8┊      - typescript-resolvers\n+┊  ┊ 9┊    config:\n+┊  ┊10┊      optionalType: undefined | null\n+┊  ┊11┊      mappers:\n+┊  ┊12┊        Chat: ./entity/chat#Chat\n+┊  ┊13┊        Message: ./entity/message#Message\n+┊  ┊14┊        User: ./entity/user#User\n```\n\n##### Added db.ts\n```diff\n@@ -0,0 +1,274 @@\n+┊   ┊  1┊import moment from 'moment'\n+┊   ┊  2┊import Chat from './entity/chat'\n+┊   ┊  3┊import Message, { MessageType } from './entity/message'\n+┊   ┊  4┊import User from './entity/user'\n+┊   ┊  5┊\n+┊   ┊  6┊const users: User[] = [\n+┊   ┊  7┊  {\n+┊   ┊  8┊    id: '1',\n+┊   ┊  9┊    username: 'ethan',\n+┊   ┊ 10┊    password: '$2a$08$NO9tkFLCoSqX1c5wk3s7z.JfxaVMKA.m7zUDdDwEquo4rvzimQeJm', // 111\n+┊   ┊ 11┊    name: 'Ethan Gonzalez',\n+┊   ┊ 12┊    picture: 'https://randomuser.me/api/portraits/thumb/men/1.jpg',\n+┊   ┊ 13┊  },\n+┊   ┊ 14┊  {\n+┊   ┊ 15┊    id: '2',\n+┊   ┊ 16┊    username: 'bryan',\n+┊   ┊ 17┊    password: '$2a$08$xE4FuCi/ifxjL2S8CzKAmuKLwv18ktksSN.F3XYEnpmcKtpbpeZgO', // 222\n+┊   ┊ 18┊    name: 'Bryan Wallace',\n+┊   ┊ 19┊    picture: 'https://randomuser.me/api/portraits/thumb/men/2.jpg',\n+┊   ┊ 20┊  },\n+┊   ┊ 21┊  {\n+┊   ┊ 22┊    id: '3',\n+┊   ┊ 23┊    username: 'avery',\n+┊   ┊ 24┊    password: '$2a$08$UHgH7J8G6z1mGQn2qx2kdeWv0jvgHItyAsL9hpEUI3KJmhVW5Q1d.', // 333\n+┊   ┊ 25┊    name: 'Avery Stewart',\n+┊   ┊ 26┊    picture: 'https://randomuser.me/api/portraits/thumb/women/1.jpg',\n+┊   ┊ 27┊  },\n+┊   ┊ 28┊  {\n+┊   ┊ 29┊    id: '4',\n+┊   ┊ 30┊    username: 'katie',\n+┊   ┊ 31┊    password: '$2a$08$wR1k5Q3T9FC7fUgB7Gdb9Os/GV7dGBBf4PLlWT7HERMFhmFDt47xi', // 444\n+┊   ┊ 32┊    name: 'Katie Peterson',\n+┊   ┊ 33┊    picture: 'https://randomuser.me/api/portraits/thumb/women/2.jpg',\n+┊   ┊ 34┊  },\n+┊   ┊ 35┊  {\n+┊   ┊ 36┊    id: '5',\n+┊   ┊ 37┊    username: 'ray',\n+┊   ┊ 38┊    password: '$2a$08$6.mbXqsDX82ZZ7q5d8Osb..JrGSsNp4R3IKj7mxgF6YGT0OmMw242', // 555\n+┊   ┊ 39┊    name: 'Ray Edwards',\n+┊   ┊ 40┊    picture: 'https://randomuser.me/api/portraits/thumb/men/3.jpg',\n+┊   ┊ 41┊  },\n+┊   ┊ 42┊  {\n+┊   ┊ 43┊    id: '6',\n+┊   ┊ 44┊    username: 'niko',\n+┊   ┊ 45┊    password: '$2a$08$fL5lZR.Rwf9FWWe8XwwlceiPBBim8n9aFtaem.INQhiKT4.Ux3Uq.', // 666\n+┊   ┊ 46┊    name: 'Niccolò Belli',\n+┊   ┊ 47┊    picture: 'https://randomuser.me/api/portraits/thumb/men/4.jpg',\n+┊   ┊ 48┊  },\n+┊   ┊ 49┊  {\n+┊   ┊ 50┊    id: '7',\n+┊   ┊ 51┊    username: 'mario',\n+┊   ┊ 52┊    password: '$2a$08$nDHDmWcVxDnH5DDT3HMMC.psqcnu6wBiOgkmJUy9IH..qxa3R6YrO', // 777\n+┊   ┊ 53┊    name: 'Mario Rossi',\n+┊   ┊ 54┊    picture: 'https://randomuser.me/api/portraits/thumb/men/5.jpg',\n+┊   ┊ 55┊  },\n+┊   ┊ 56┊]\n+┊   ┊ 57┊\n+┊   ┊ 58┊const chats: Chat[] = [\n+┊   ┊ 59┊  {\n+┊   ┊ 60┊    id: '1',\n+┊   ┊ 61┊    name: null,\n+┊   ┊ 62┊    picture: null,\n+┊   ┊ 63┊    allTimeMemberIds: ['1', '3'],\n+┊   ┊ 64┊    listingMemberIds: ['1', '3'],\n+┊   ┊ 65┊    ownerId: null,\n+┊   ┊ 66┊    messages: [\n+┊   ┊ 67┊      {\n+┊   ┊ 68┊        id: '1',\n+┊   ┊ 69┊        chatId: '1',\n+┊   ┊ 70┊        senderId: '1',\n+┊   ┊ 71┊        content: 'You on your way?',\n+┊   ┊ 72┊        createdAt: moment()\n+┊   ┊ 73┊          .subtract(1, 'hours')\n+┊   ┊ 74┊          .unix(),\n+┊   ┊ 75┊        type: MessageType.TEXT,\n+┊   ┊ 76┊        holderIds: ['1', '3'],\n+┊   ┊ 77┊      },\n+┊   ┊ 78┊      {\n+┊   ┊ 79┊        id: '2',\n+┊   ┊ 80┊        chatId: '1',\n+┊   ┊ 81┊        senderId: '3',\n+┊   ┊ 82┊        content: 'Yep!',\n+┊   ┊ 83┊        createdAt: moment()\n+┊   ┊ 84┊          .subtract(1, 'hours')\n+┊   ┊ 85┊          .add(5, 'minutes')\n+┊   ┊ 86┊          .unix(),\n+┊   ┊ 87┊        type: MessageType.TEXT,\n+┊   ┊ 88┊        holderIds: ['3', '1'],\n+┊   ┊ 89┊      },\n+┊   ┊ 90┊    ],\n+┊   ┊ 91┊  },\n+┊   ┊ 92┊  {\n+┊   ┊ 93┊    id: '2',\n+┊   ┊ 94┊    name: null,\n+┊   ┊ 95┊    picture: null,\n+┊   ┊ 96┊    allTimeMemberIds: ['1', '4'],\n+┊   ┊ 97┊    listingMemberIds: ['1', '4'],\n+┊   ┊ 98┊    ownerId: null,\n+┊   ┊ 99┊    messages: [\n+┊   ┊100┊      {\n+┊   ┊101┊        id: '1',\n+┊   ┊102┊        chatId: '2',\n+┊   ┊103┊        senderId: '1',\n+┊   ┊104┊        content: \"Hey, it's me\",\n+┊   ┊105┊        createdAt: moment()\n+┊   ┊106┊          .subtract(2, 'hours')\n+┊   ┊107┊          .unix(),\n+┊   ┊108┊        type: MessageType.TEXT,\n+┊   ┊109┊        holderIds: ['1', '4'],\n+┊   ┊110┊      },\n+┊   ┊111┊    ],\n+┊   ┊112┊  },\n+┊   ┊113┊  {\n+┊   ┊114┊    id: '3',\n+┊   ┊115┊    name: null,\n+┊   ┊116┊    picture: null,\n+┊   ┊117┊    allTimeMemberIds: ['1', '5'],\n+┊   ┊118┊    listingMemberIds: ['1', '5'],\n+┊   ┊119┊    ownerId: null,\n+┊   ┊120┊    messages: [\n+┊   ┊121┊      {\n+┊   ┊122┊        id: '1',\n+┊   ┊123┊        chatId: '3',\n+┊   ┊124┊        senderId: '1',\n+┊   ┊125┊        content: 'I should buy a boat',\n+┊   ┊126┊        createdAt: moment()\n+┊   ┊127┊          .subtract(1, 'days')\n+┊   ┊128┊          .unix(),\n+┊   ┊129┊        type: MessageType.TEXT,\n+┊   ┊130┊        holderIds: ['1', '5'],\n+┊   ┊131┊      },\n+┊   ┊132┊      {\n+┊   ┊133┊        id: '2',\n+┊   ┊134┊        chatId: '3',\n+┊   ┊135┊        senderId: '1',\n+┊   ┊136┊        content: 'You still there?',\n+┊   ┊137┊        createdAt: moment()\n+┊   ┊138┊          .subtract(1, 'days')\n+┊   ┊139┊          .add(16, 'hours')\n+┊   ┊140┊          .unix(),\n+┊   ┊141┊        type: MessageType.TEXT,\n+┊   ┊142┊        holderIds: ['1', '5'],\n+┊   ┊143┊      },\n+┊   ┊144┊    ],\n+┊   ┊145┊  },\n+┊   ┊146┊  {\n+┊   ┊147┊    id: '4',\n+┊   ┊148┊    name: null,\n+┊   ┊149┊    picture: null,\n+┊   ┊150┊    allTimeMemberIds: ['3', '4'],\n+┊   ┊151┊    listingMemberIds: ['3', '4'],\n+┊   ┊152┊    ownerId: null,\n+┊   ┊153┊    messages: [\n+┊   ┊154┊      {\n+┊   ┊155┊        id: '1',\n+┊   ┊156┊        chatId: '4',\n+┊   ┊157┊        senderId: '3',\n+┊   ┊158┊        content: 'Look at my mukluks!',\n+┊   ┊159┊        createdAt: moment()\n+┊   ┊160┊          .subtract(4, 'days')\n+┊   ┊161┊          .unix(),\n+┊   ┊162┊        type: MessageType.TEXT,\n+┊   ┊163┊        holderIds: ['3', '4'],\n+┊   ┊164┊      },\n+┊   ┊165┊    ],\n+┊   ┊166┊  },\n+┊   ┊167┊  {\n+┊   ┊168┊    id: '5',\n+┊   ┊169┊    name: null,\n+┊   ┊170┊    picture: null,\n+┊   ┊171┊    allTimeMemberIds: ['2', '5'],\n+┊   ┊172┊    listingMemberIds: ['2', '5'],\n+┊   ┊173┊    ownerId: null,\n+┊   ┊174┊    messages: [\n+┊   ┊175┊      {\n+┊   ┊176┊        id: '1',\n+┊   ┊177┊        chatId: '5',\n+┊   ┊178┊        senderId: '2',\n+┊   ┊179┊        content: 'This is wicked good ice cream.',\n+┊   ┊180┊        createdAt: moment()\n+┊   ┊181┊          .subtract(2, 'weeks')\n+┊   ┊182┊          .unix(),\n+┊   ┊183┊        type: MessageType.TEXT,\n+┊   ┊184┊        holderIds: ['2', '5'],\n+┊   ┊185┊      },\n+┊   ┊186┊      {\n+┊   ┊187┊        id: '2',\n+┊   ┊188┊        chatId: '6',\n+┊   ┊189┊        senderId: '5',\n+┊   ┊190┊        content: 'Love it!',\n+┊   ┊191┊        createdAt: moment()\n+┊   ┊192┊          .subtract(2, 'weeks')\n+┊   ┊193┊          .add(10, 'minutes')\n+┊   ┊194┊          .unix(),\n+┊   ┊195┊        type: MessageType.TEXT,\n+┊   ┊196┊        holderIds: ['5', '2'],\n+┊   ┊197┊      },\n+┊   ┊198┊    ],\n+┊   ┊199┊  },\n+┊   ┊200┊  {\n+┊   ┊201┊    id: '6',\n+┊   ┊202┊    name: null,\n+┊   ┊203┊    picture: null,\n+┊   ┊204┊    allTimeMemberIds: ['1', '6'],\n+┊   ┊205┊    listingMemberIds: ['1'],\n+┊   ┊206┊    ownerId: null,\n+┊   ┊207┊    messages: [],\n+┊   ┊208┊  },\n+┊   ┊209┊  {\n+┊   ┊210┊    id: '7',\n+┊   ┊211┊    name: null,\n+┊   ┊212┊    picture: null,\n+┊   ┊213┊    allTimeMemberIds: ['2', '1'],\n+┊   ┊214┊    listingMemberIds: ['2'],\n+┊   ┊215┊    ownerId: null,\n+┊   ┊216┊    messages: [],\n+┊   ┊217┊  },\n+┊   ┊218┊  {\n+┊   ┊219┊    id: '8',\n+┊   ┊220┊    name: 'A user 0 group',\n+┊   ┊221┊    picture: 'https://randomuser.me/api/portraits/thumb/lego/1.jpg',\n+┊   ┊222┊    allTimeMemberIds: ['1', '3', '4', '6'],\n+┊   ┊223┊    listingMemberIds: ['1', '3', '4', '6'],\n+┊   ┊224┊    ownerId: '1',\n+┊   ┊225┊    messages: [\n+┊   ┊226┊      {\n+┊   ┊227┊        id: '1',\n+┊   ┊228┊        chatId: '8',\n+┊   ┊229┊        senderId: '1',\n+┊   ┊230┊        content: 'I made a group',\n+┊   ┊231┊        createdAt: moment()\n+┊   ┊232┊          .subtract(2, 'weeks')\n+┊   ┊233┊          .unix(),\n+┊   ┊234┊        type: MessageType.TEXT,\n+┊   ┊235┊        holderIds: ['1', '3', '4', '6'],\n+┊   ┊236┊      },\n+┊   ┊237┊      {\n+┊   ┊238┊        id: '2',\n+┊   ┊239┊        chatId: '8',\n+┊   ┊240┊        senderId: '1',\n+┊   ┊241┊        content: 'Ops, user 3 was not supposed to be here',\n+┊   ┊242┊        createdAt: moment()\n+┊   ┊243┊          .subtract(2, 'weeks')\n+┊   ┊244┊          .add(2, 'minutes')\n+┊   ┊245┊          .unix(),\n+┊   ┊246┊        type: MessageType.TEXT,\n+┊   ┊247┊        holderIds: ['1', '4', '6'],\n+┊   ┊248┊      },\n+┊   ┊249┊      {\n+┊   ┊250┊        id: '3',\n+┊   ┊251┊        chatId: '8',\n+┊   ┊252┊        senderId: '4',\n+┊   ┊253┊        content: 'Awesome!',\n+┊   ┊254┊        createdAt: moment()\n+┊   ┊255┊          .subtract(2, 'weeks')\n+┊   ┊256┊          .add(10, 'minutes')\n+┊   ┊257┊          .unix(),\n+┊   ┊258┊        type: MessageType.TEXT,\n+┊   ┊259┊        holderIds: ['1', '4', '6'],\n+┊   ┊260┊      },\n+┊   ┊261┊    ],\n+┊   ┊262┊  },\n+┊   ┊263┊  {\n+┊   ┊264┊    id: '9',\n+┊   ┊265┊    name: 'A user 5 group',\n+┊   ┊266┊    picture: null,\n+┊   ┊267┊    allTimeMemberIds: ['6', '3'],\n+┊   ┊268┊    listingMemberIds: ['6', '3'],\n+┊   ┊269┊    ownerId: '6',\n+┊   ┊270┊    messages: [],\n+┊   ┊271┊  },\n+┊   ┊272┊]\n+┊   ┊273┊\n+┊   ┊274┊export default { users, chats }\n```\n\n##### Added entity&#x2F;chat.ts\n```diff\n@@ -0,0 +1,18 @@\n+┊  ┊ 1┊import Message from './message'\n+┊  ┊ 2┊\n+┊  ┊ 3┊export interface Chat {\n+┊  ┊ 4┊  id: string\n+┊  ┊ 5┊  name?: string | null\n+┊  ┊ 6┊  picture?: string | null\n+┊  ┊ 7┊  // All members, current and past ones.\n+┊  ┊ 8┊  allTimeMemberIds: string[]\n+┊  ┊ 9┊  // Whoever gets the chat listed. For groups includes past members who still didn't delete the group.\n+┊  ┊10┊  listingMemberIds: string[]\n+┊  ┊11┊  // Actual members of the group (they are not the only ones who get the group listed). Null for chats.\n+┊  ┊12┊  actualGroupMemberIds?: string[] | null\n+┊  ┊13┊  adminIds?: string[] | null\n+┊  ┊14┊  ownerId?: string | null\n+┊  ┊15┊  messages: Message[]\n+┊  ┊16┊}\n+┊  ┊17┊\n+┊  ┊18┊export default Chat\n```\n\n##### Added entity&#x2F;message.ts\n```diff\n@@ -0,0 +1,20 @@\n+┊  ┊ 1┊import Recipient from './recipient'\n+┊  ┊ 2┊\n+┊  ┊ 3┊export enum MessageType {\n+┊  ┊ 4┊  PICTURE,\n+┊  ┊ 5┊  TEXT,\n+┊  ┊ 6┊  LOCATION,\n+┊  ┊ 7┊}\n+┊  ┊ 8┊\n+┊  ┊ 9┊export interface Message {\n+┊  ┊10┊  id: string\n+┊  ┊11┊  chatId: string\n+┊  ┊12┊  senderId: string\n+┊  ┊13┊  content: string\n+┊  ┊14┊  createdAt: number\n+┊  ┊15┊  type: MessageType\n+┊  ┊16┊  recipients: Recipient[]\n+┊  ┊17┊  holderIds: string[]\n+┊  ┊18┊}\n+┊  ┊19┊\n+┊  ┊20┊export default Message\n```\n\n##### Added entity&#x2F;user.ts\n```diff\n@@ -0,0 +1,10 @@\n+┊  ┊ 1┊export interface User {\n+┊  ┊ 2┊  id: string\n+┊  ┊ 3┊  username: string\n+┊  ┊ 4┊  password: string\n+┊  ┊ 5┊  name: string\n+┊  ┊ 6┊  picture?: string | null\n+┊  ┊ 7┊  phone?: string | null\n+┊  ┊ 8┊}\n+┊  ┊ 9┊\n+┊  ┊10┊export default User\n```\n\n##### Changed schema&#x2F;resolvers.ts\n```diff\n@@ -1,5 +1,83 @@\n+┊  ┊ 1┊import { IResolvers as IApolloResolvers } from 'apollo-server-express'\n+┊  ┊ 2┊import { GraphQLDateTime } from 'graphql-iso-date'\n+┊  ┊ 3┊import db from '../db'\n+┊  ┊ 4┊import Chat from '../entity/chat'\n+┊  ┊ 5┊import Message from '../entity/message'\n+┊  ┊ 6┊import Recipient from '../entity/recipient'\n+┊  ┊ 7┊import User from '../entity/user'\n+┊  ┊ 8┊import { IResolvers } from '../types'\n+┊  ┊ 9┊\n+┊  ┊10┊let users = db.users\n+┊  ┊11┊let chats = db.chats\n+┊  ┊12┊const currentUser: string = '1'\n+┊  ┊13┊\n ┊ 1┊14┊export default {\n+┊  ┊15┊  Date: GraphQLDateTime,\n ┊ 2┊16┊  Query: {\n-┊ 3┊  ┊    chats: () => [],\n+┊  ┊17┊    // Show all users for the moment.\n+┊  ┊18┊    users: () => users.filter(user => user.id !== currentUser),\n+┊  ┊19┊    chats: () => chats.filter(chat => chat.listingMemberIds.includes(currentUser)),\n+┊  ┊20┊    chat: (obj, { chatId }) => chats.find(chat => chat.id === chatId) || null,\n ┊ 4┊21┊  },\n-┊ 5┊  ┊}\n+┊  ┊22┊  Chat: {\n+┊  ┊23┊    name: (chat) =>\n+┊  ┊24┊      chat.name\n+┊  ┊25┊        ? chat.name\n+┊  ┊26┊        : users.find(\n+┊  ┊27┊            user => user.id === chat.allTimeMemberIds.find((userId: string) => userId !== currentUser)\n+┊  ┊28┊          )!.name,\n+┊  ┊29┊    picture: (chat) =>\n+┊  ┊30┊      chat.name\n+┊  ┊31┊        ? chat.picture\n+┊  ┊32┊        : users.find(\n+┊  ┊33┊            user => user.id === chat.allTimeMemberIds.find((userId: string) => userId !== currentUser)\n+┊  ┊34┊          )!.picture,\n+┊  ┊35┊    allTimeMembers: (chat) =>\n+┊  ┊36┊      users.filter(user => chat.allTimeMemberIds.includes(user.id)),\n+┊  ┊37┊    listingMembers: (chat) =>\n+┊  ┊38┊      users.filter(user => chat.listingMemberIds.includes(user.id)),\n+┊  ┊39┊    actualGroupMembers: (chat) =>\n+┊  ┊40┊      users.filter(\n+┊  ┊41┊        user => chat.actualGroupMemberIds && chat.actualGroupMemberIds.includes(user.id)\n+┊  ┊42┊      ),\n+┊  ┊43┊    admins: (chat) =>\n+┊  ┊44┊      users.filter(user => chat.adminIds && chat.adminIds.includes(user.id)),\n+┊  ┊45┊    owner: (chat) => users.find(user => chat.ownerId === user.id) || null,\n+┊  ┊46┊    messages: (chat, { amount = 0 }) => {\n+┊  ┊47┊      const messages =\n+┊  ┊48┊        chat.messages\n+┊  ┊49┊          .filter((message: Message) => message.holderIds.includes(currentUser))\n+┊  ┊50┊          .sort((a: Message, b: Message) => b.createdAt - a.createdAt) || []\n+┊  ┊51┊      return (amount ? messages.slice(0, amount) : messages).reverse()\n+┊  ┊52┊    },\n+┊  ┊53┊    unreadMessages: (chat) =>\n+┊  ┊54┊      chat.messages.filter(\n+┊  ┊55┊        (message: Message) =>\n+┊  ┊56┊          message.holderIds.includes(currentUser) &&\n+┊  ┊57┊          message.recipients.find(\n+┊  ┊58┊            (recipient: Recipient) => recipient.userId === currentUser && !recipient.readAt\n+┊  ┊59┊          )\n+┊  ┊60┊      ).length,\n+┊  ┊61┊    lastMessage: (chat) => chat.messages[chat.messages.length - 1],\n+┊  ┊62┊    isGroup: (chat) => !!chat.name,\n+┊  ┊63┊  },\n+┊  ┊64┊  Message: {\n+┊  ┊65┊    chat: (message) =>\n+┊  ┊66┊      chats.find(chat => message.chatId === chat.id) || null,\n+┊  ┊67┊    sender: (message) =>\n+┊  ┊68┊      users.find(user => user.id === message.senderId) || null,\n+┊  ┊69┊    holders: (message) =>\n+┊  ┊70┊      users.filter(user => message.holderIds.includes(user.id)),\n+┊  ┊71┊    ownership: (message) => message.senderId === currentUser,\n+┊  ┊72┊  },\n+┊  ┊73┊  Recipient: {\n+┊  ┊74┊    user: (recipient) =>\n+┊  ┊75┊      users.find(user => recipient.userId === user.id) || null,\n+┊  ┊76┊    message: (recipient) => {\n+┊  ┊77┊      const chat = chats.find(chat => recipient.chatId === chat.id)\n+┊  ┊78┊      return chat ? chat.messages.find(message => recipient.messageId === message.id) || null : null\n+┊  ┊79┊    },\n+┊  ┊80┊    chat: (recipient) =>\n+┊  ┊81┊      chats.find(chat => recipient.chatId === chat.id) || null,\n+┊  ┊82┊  },\n+┊  ┊83┊} as IResolvers as IApolloResolvers\n```\n\n##### Changed schema&#x2F;typeDefs.ts\n```diff\n@@ -1,9 +1,54 @@\n ┊ 1┊ 1┊export default `\n+┊  ┊ 2┊  scalar Date\n+┊  ┊ 3┊\n+┊  ┊ 4┊  type Query {\n+┊  ┊ 5┊    users: [User!]\n+┊  ┊ 6┊    chats: [Chat!]\n+┊  ┊ 7┊    chat(chatId: ID!): Chat\n+┊  ┊ 8┊  }\n+┊  ┊ 9┊\n+┊  ┊10┊  enum MessageType {\n+┊  ┊11┊    LOCATION\n+┊  ┊12┊    TEXT\n+┊  ┊13┊    PICTURE\n+┊  ┊14┊  }\n+┊  ┊15┊\n ┊ 2┊16┊  type Chat {\n+┊  ┊17┊    #May be a chat or a group\n ┊ 3┊18┊    id: ID!\n+┊  ┊19┊    #Computed for chats\n+┊  ┊20┊    name: String\n+┊  ┊21┊    updatedAt: Date\n+┊  ┊22┊    #Computed for chats\n+┊  ┊23┊    picture: String\n+┊  ┊24┊    #All members, current and past ones.\n+┊  ┊25┊    allTimeMembers: [User!]!\n+┊  ┊26┊    #Whoever gets the chat listed. For groups includes past members who still didn't delete the group.\n+┊  ┊27┊    listingMembers: [User!]!\n+┊  ┊28┊    #If null the group is read-only. Null for chats.\n+┊  ┊29┊    owner: User\n+┊  ┊30┊    messages(amount: Int): [Message]!\n+┊  ┊31┊    lastMessage: Message\n ┊ 4┊32┊  }\n ┊ 5┊33┊\n-┊ 6┊  ┊  type Query {\n-┊ 7┊  ┊    chats: [Chat!]!\n+┊  ┊34┊  type Message {\n+┊  ┊35┊    id: ID!\n+┊  ┊36┊    sender: User!\n+┊  ┊37┊    chat: Chat!\n+┊  ┊38┊    content: String!\n+┊  ┊39┊    createdAt: Date!\n+┊  ┊40┊    #FIXME: should return MessageType\n+┊  ┊41┊    type: Int!\n+┊  ┊42┊    #Whoever still holds a copy of the message. Cannot be null because the message gets deleted otherwise\n+┊  ┊43┊    holders: [User!]!\n+┊  ┊44┊    #Computed property\n+┊  ┊45┊    ownership: Boolean!\n+┊  ┊46┊  }\n+┊  ┊47┊\n+┊  ┊48┊  type User {\n+┊  ┊49┊    id: ID!\n+┊  ┊50┊    name: String\n+┊  ┊51┊    picture: String\n+┊  ┊52┊    phone: String\n ┊ 8┊53┊  }\n ┊ 9┊54┊`\n```\n\n[}]: #\n\nAs you can see, we've added an `entity` folder which treats each entity independently. This will server us greatly is the new future when we will connect each entity to a database. The GraphQL resolvers are the \"projectors\" of the data stored in the fake DB, and they will serve it based on their implementation and provided parameters.\n\nNow, let's make the necessary modifications to our client so it can work alongside the server and show the data that it contains. Similarly to the server, we don't wanna maintain a TypeScript code base for our GraphQL documents, therefore we will install Codegen for the client as well. Let's install the necessary NPM packages:\n\n    $ yarn add -D graphql-code-generator@0.16.0 graphql-codegen-typescript-client@0.16.0 graphql-codegen-typescript-common@0.16.0\n\nWrite a Codegen config:\n\n[{]: <helper> (diffStep 1.4 files=\"codegen.yml, codegen-interpreter.ts\" module=\"client\")\n\n#### [Step 1.4: Setup codegen](https://github.com/Urigo/WhatsApp-Clone-Client-React/commit/08dcb57)\n\n##### Added codegen-interpreter.ts\n```diff\n@@ -0,0 +1,6 @@\n+┊ ┊1┊require('ts-node').register({\n+┊ ┊2┊  transpileOnly: true,\n+┊ ┊3┊  compilerOptions: {\n+┊ ┊4┊    module: 'commonjs'\n+┊ ┊5┊  }\n+┊ ┊6┊})\n```\n\n##### Added codegen.yml\n```diff\n@@ -0,0 +1,12 @@\n+┊  ┊ 1┊schema: ../WhatsApp-Clone-Server/schema/typeDefs.ts\n+┊  ┊ 2┊documents:\n+┊  ┊ 3┊  - ./src/**/*.tsx\n+┊  ┊ 4┊  - ./src/**/*.ts\n+┊  ┊ 5┊overwrite: true\n+┊  ┊ 6┊require:\n+┊  ┊ 7┊  - ts-node/../../codegen-interpreter.ts\n+┊  ┊ 8┊generates:\n+┊  ┊ 9┊  ./src/graphql/types.ts:\n+┊  ┊10┊    plugins:\n+┊  ┊11┊      - typescript-common\n+┊  ┊12┊      - typescript-client\n```\n\n[}]: #\n\nAnd define `.gitignore` rules that will not include generated files in our git project:\n\n[{]: <helper> (diffStep 1.4 files=\"src/graphql/.gitignore\" module=\"client\")\n\n#### [Step 1.4: Setup codegen](https://github.com/Urigo/WhatsApp-Clone-Client-React/commit/08dcb57)\n\n##### Added src&#x2F;graphql&#x2F;.gitignore\n```diff\n@@ -0,0 +1,2 @@\n+┊ ┊1┊introspection.json\n+┊ ┊2┊types.ts\n```\n\n[}]: #\n\nFew things you should note:\n\n- Our `codegen.yml` config references directly to the schema file in our server, which means that the server should be cloned alongside the client. Codegen also supports providing a REST endpoint, but if possible it's better to avoid it because this way you don't need to provide credentials. Indeed, the plan is to have an authentication mechanism to guard our GraphQL REST endpoint.\n- The `codegen-interpreter.ts` file is necessary because it extends the `tsconfig.json` file without us actually changing it. If you'll try to edit the `tsconfig.json` file directly, then `react-scripts` will change it back to its original form.\n\nWe will also add the necessary scripts to our `pacakge.json` so we can run `code-gen`:\n\n```json\n{\n  \"start\": \"concurrently \\\"yarn generate:watch\\\" \\\"react-scripts start\\\"\",\n  \"generate\": \"gql-gen\",\n  \"generate:watch\": \"nodemon --exec yarn generate -e graphql\"\n}\n```\n\nBe sure to install `concurrently` and `nodemon` so the scripts can work as intended:\n\n    $ yarn add -D nodemon@1.18.9 ts-node@7.0.1 concurrently@4.1.0\n\nAt this point our `package.json` file should look like this:\n\n[{]: <helper> (diffStep 1.4 files=\"package.json\" module=\"client\")\n\n#### [Step 1.4: Setup codegen](https://github.com/Urigo/WhatsApp-Clone-Client-React/commit/08dcb57)\n\n##### Changed package.json\n```diff\n@@ -22,13 +22,21 @@\n ┊22┊22┊  },\n ┊23┊23┊  \"devDependencies\": {\n ┊24┊24┊    \"@types/graphql\": \"14.0.5\",\n-┊25┊  ┊    \"@types/node\": \"10.12.18\"\n+┊  ┊25┊    \"@types/node\": \"10.12.18\",\n+┊  ┊26┊    \"concurrently\": \"4.1.0\",\n+┊  ┊27┊    \"graphql-code-generator\": \"0.16.0\",\n+┊  ┊28┊    \"graphql-codegen-typescript-client\": \"0.16.0\",\n+┊  ┊29┊    \"graphql-codegen-typescript-common\": \"0.16.0\",\n+┊  ┊30┊    \"nodemon\": \"1.18.9\",\n+┊  ┊31┊    \"ts-node\": \"7.0.1\"\n ┊26┊32┊  },\n ┊27┊33┊  \"scripts\": {\n-┊28┊  ┊    \"start\": \"react-scripts start\",\n+┊  ┊34┊    \"start\": \"concurrently \\\"yarn generate:watch\\\" \\\"react-scripts start\\\"\",\n ┊29┊35┊    \"build\": \"react-scripts build\",\n ┊30┊36┊    \"test\": \"react-scripts test\",\n-┊31┊  ┊    \"eject\": \"react-scripts eject\"\n+┊  ┊37┊    \"eject\": \"react-scripts eject\",\n+┊  ┊38┊    \"generate\": \"gql-gen\",\n+┊  ┊39┊    \"generate:watch\": \"nodemon --exec yarn generate -e graphql\"\n ┊32┊40┊  },\n ┊33┊41┊  \"eslintConfig\": {\n ┊34┊42┊    \"extends\": \"react-app\"\n```\n\n[}]: #\n\nNow whenever we would like to generate some TypeScript definitions we can simply run:\n\n    $ yarn generate\n\nAlternatively we can just start the app on watch mode with `$ yarn start` and the Codegen should be listening for changes as well.\n\n    $ yarn start\n\nNow let's build a dashboard that will show all the chats in the server. Rather than implementing all the components and stylesheets from scratch, we will be using [`material-ui`](https://material-ui.com/) (aka Material). Material comes with pre-made components which are highly functional and work smooth with animations. To set it up we will first install it:\n\n    $ yarn add @material-ui/core@3.9.2 @material-ui/icons@3.0.2\n\nAnd then we will initialize it with the right theme values:\n\n[{]: <helper> (diffStep 1.5 files=\"src/index.tsx\" module=\"client\")\n\n#### [Step 1.5: Setup theme](https://github.com/Urigo/WhatsApp-Clone-Client-React/commit/056fc51)\n\n##### Changed src&#x2F;index.tsx\n```diff\n@@ -1,3 +1,4 @@\n+┊ ┊1┊import { MuiThemeProvider, createMuiTheme } from '@material-ui/core/styles'\n ┊1┊2┊import React from 'react';\n ┊2┊3┊import ReactDOM from 'react-dom';\n ┊3┊4┊import { ApolloProvider } from 'react-apollo-hooks';\n```\n```diff\n@@ -6,10 +7,22 @@\n ┊ 6┊ 7┊import apolloClient from './apollo-client'\n ┊ 7┊ 8┊import * as serviceWorker from './serviceWorker';\n ┊ 8┊ 9┊\n+┊  ┊10┊const theme = createMuiTheme({\n+┊  ┊11┊  palette: {\n+┊  ┊12┊    primary: { main: '#2c6157' },\n+┊  ┊13┊    secondary: { main: '#6fd056' },\n+┊  ┊14┊  },\n+┊  ┊15┊  typography: {\n+┊  ┊16┊    useNextVariants: true,\n+┊  ┊17┊  },\n+┊  ┊18┊})\n+┊  ┊19┊\n ┊ 9┊20┊ReactDOM.render(\n-┊10┊  ┊  <ApolloProvider client={apolloClient}>\n-┊11┊  ┊    <App />\n-┊12┊  ┊  </ApolloProvider>\n+┊  ┊21┊  <MuiThemeProvider theme={theme}>\n+┊  ┊22┊    <ApolloProvider client={apolloClient}>\n+┊  ┊23┊      <App />\n+┊  ┊24┊    </ApolloProvider>\n+┊  ┊25┊  </MuiThemeProvider>\n ┊13┊26┊, document.getElementById('root'));\n ┊14┊27┊\n ┊15┊28┊// If you want your app to work offline and load faster, you can change\n```\n\n[}]: #\n\nThe theme values represent the main colors in our app. If you're familiar with WhatsApp, you know that its main colors consist mostly of Green and White. The theme values will automatically give Material components the desired style.\n\nWe will also make sure that the same values are available in our CSS stylesheet so we can use it outside Material's scope:\n\n[{]: <helper> (diffStep 1.5 files=\"src/index.css\" module=\"client\")\n\n#### [Step 1.5: Setup theme](https://github.com/Urigo/WhatsApp-Clone-Client-React/commit/056fc51)\n\n##### Changed src&#x2F;index.css\n```diff\n@@ -1,3 +1,10 @@\n+┊  ┊ 1┊:root {\n+┊  ┊ 2┊  --primary-bg: #2c6157;\n+┊  ┊ 3┊  --secondary-bg: #6fd056;\n+┊  ┊ 4┊  --primary-text: white;\n+┊  ┊ 5┊  --secondary-text: white;\n+┊  ┊ 6┊}\n+┊  ┊ 7┊\n ┊ 1┊ 8┊body {\n ┊ 2┊ 9┊  margin: 0;\n ┊ 3┊10┊  padding: 0;\n```\n\n[}]: #\n\nNow we're ready to start implementing the view itself. The logic is very simple, we will use a query to fetch the chats from our back-end. Accordingly we will need to define the right [GraphQL fragments](https://www.apollographql.com/docs/react/advanced/fragments.html) so we can use them to build the query. In short, a fragment is used to represent an entity in our app. **It doesn't necessarily has to represent a type**, but indeed it's the most common use case:\n\n[{]: <helper> (diffStep 1.6 files=\"src/graphql/fragments\" module=\"client\")\n\n#### [Step 1.6: Add ChatsListScreen](https://github.com/Urigo/WhatsApp-Clone-Client-React/commit/f825cc5)\n\n##### Added src&#x2F;graphql&#x2F;fragments&#x2F;chat.fragment.ts\n```diff\n@@ -0,0 +1,22 @@\n+┊  ┊ 1┊import gql from 'graphql-tag'\n+┊  ┊ 2┊import message from './message.fragment'\n+┊  ┊ 3┊\n+┊  ┊ 4┊export default gql `\n+┊  ┊ 5┊  fragment Chat on Chat {\n+┊  ┊ 6┊    id\n+┊  ┊ 7┊    name\n+┊  ┊ 8┊    picture\n+┊  ┊ 9┊    allTimeMembers {\n+┊  ┊10┊      id\n+┊  ┊11┊      name\n+┊  ┊12┊      picture\n+┊  ┊13┊    }\n+┊  ┊14┊    owner {\n+┊  ┊15┊      id\n+┊  ┊16┊    }\n+┊  ┊17┊    lastMessage {\n+┊  ┊18┊      ...Message\n+┊  ┊19┊    }\n+┊  ┊20┊  }\n+┊  ┊21┊  ${message}\n+┊  ┊22┊`\n```\n\n##### Added src&#x2F;graphql&#x2F;fragments&#x2F;index.ts\n```diff\n@@ -0,0 +1,2 @@\n+┊ ┊1┊export { default as chat } from './chat.fragment'\n+┊ ┊2┊export { default as message } from './message.fragment'\n```\n\n##### Added src&#x2F;graphql&#x2F;fragments&#x2F;message.fragment.ts\n```diff\n@@ -0,0 +1,33 @@\n+┊  ┊ 1┊import gql from 'graphql-tag'\n+┊  ┊ 2┊\n+┊  ┊ 3┊export default gql`\n+┊  ┊ 4┊  fragment Message on Message {\n+┊  ┊ 5┊    id\n+┊  ┊ 6┊    chat {\n+┊  ┊ 7┊      id\n+┊  ┊ 8┊    }\n+┊  ┊ 9┊    sender {\n+┊  ┊10┊      id\n+┊  ┊11┊      name\n+┊  ┊12┊    }\n+┊  ┊13┊    content\n+┊  ┊14┊    createdAt\n+┊  ┊15┊    recipients {\n+┊  ┊16┊      user {\n+┊  ┊17┊        id\n+┊  ┊18┊      }\n+┊  ┊19┊      message {\n+┊  ┊20┊        id\n+┊  ┊21┊        chat {\n+┊  ┊22┊          id\n+┊  ┊23┊        }\n+┊  ┊24┊      }\n+┊  ┊25┊      chat {\n+┊  ┊26┊        id\n+┊  ┊27┊      }\n+┊  ┊28┊      receivedAt\n+┊  ┊29┊      readAt\n+┊  ┊30┊    }\n+┊  ┊31┊    ownership\n+┊  ┊32┊  }\n+┊  ┊33┊`\n```\n\n[}]: #\n\nLet's move on to implementing the components. The layout is simple and consists of a navigation bar and a chats list. There are few important details you should note about the components:\n\n- They use [Material's](https://material-ui.com) pre-made components and icons, which are styled and highly functional right out of the box.\n- Instead of using CSS to style our components we use [`styled-components`](https://www.styled-components.com/). This way we can encapsulate the style and it will live right next to the component.\n- We will use [`react-apollo-hooks`](https://github.com/trojanowski/react-apollo-hooks) to connect our Apollo client with our React components. **This library is experimental and shouldn't be used in production yet**.\n\n[{]: <helper> (diffStep 1.6 files=\"src/components\" module=\"client\")\n\n#### [Step 1.6: Add ChatsListScreen](https://github.com/Urigo/WhatsApp-Clone-Client-React/commit/f825cc5)\n\n##### Added src&#x2F;components&#x2F;ChatsListScreen&#x2F;ChatsList.tsx\n```diff\n@@ -0,0 +1,108 @@\n+┊   ┊  1┊import List from '@material-ui/core/List'\n+┊   ┊  2┊import ListItem from '@material-ui/core/ListItem'\n+┊   ┊  3┊import gql from 'graphql-tag'\n+┊   ┊  4┊import * as moment from 'moment'\n+┊   ┊  5┊import * as React from 'react'\n+┊   ┊  6┊import { useQuery } from 'react-apollo-hooks'\n+┊   ┊  7┊import * as ReactDOM from 'react-dom'\n+┊   ┊  8┊import styled from 'styled-components'\n+┊   ┊  9┊import * as fragments from '../../graphql/fragments'\n+┊   ┊ 10┊import { ChatsListQuery } from '../../graphql/types'\n+┊   ┊ 11┊\n+┊   ┊ 12┊const Style = styled.div`\n+┊   ┊ 13┊  height: calc(100% - 56px);\n+┊   ┊ 14┊  overflow-y: overlay;\n+┊   ┊ 15┊\n+┊   ┊ 16┊  .ChatsList-chats-list {\n+┊   ┊ 17┊    padding: 0;\n+┊   ┊ 18┊  }\n+┊   ┊ 19┊\n+┊   ┊ 20┊  .ChatsList-chat-item {\n+┊   ┊ 21┊    height: 76px;\n+┊   ┊ 22┊    padding: 0 15px;\n+┊   ┊ 23┊    display: flex;\n+┊   ┊ 24┊  }\n+┊   ┊ 25┊\n+┊   ┊ 26┊  .ChatsList-profile-pic {\n+┊   ┊ 27┊    height: 50px;\n+┊   ┊ 28┊    width: 50px;\n+┊   ┊ 29┊    object-fit: cover;\n+┊   ┊ 30┊    border-radius: 50%;\n+┊   ┊ 31┊  }\n+┊   ┊ 32┊\n+┊   ┊ 33┊  .ChatsList-info {\n+┊   ┊ 34┊    width: calc(100% - 60px);\n+┊   ┊ 35┊    height: calc(100% - 30px);\n+┊   ┊ 36┊    padding: 15px 0;\n+┊   ┊ 37┊    margin-left: 10px;\n+┊   ┊ 38┊    border-bottom: 0.5px solid silver;\n+┊   ┊ 39┊    position: relative;\n+┊   ┊ 40┊  }\n+┊   ┊ 41┊\n+┊   ┊ 42┊  .ChatsList-name {\n+┊   ┊ 43┊    margin-top: 5px;\n+┊   ┊ 44┊  }\n+┊   ┊ 45┊\n+┊   ┊ 46┊  .ChatsList-last-message {\n+┊   ┊ 47┊    color: gray;\n+┊   ┊ 48┊    font-size: 15px;\n+┊   ┊ 49┊    margin-top: 5px;\n+┊   ┊ 50┊    text-overflow: ellipsis;\n+┊   ┊ 51┊    overflow: hidden;\n+┊   ┊ 52┊    white-space: nowrap;\n+┊   ┊ 53┊  }\n+┊   ┊ 54┊\n+┊   ┊ 55┊  .ChatsList-timestamp {\n+┊   ┊ 56┊    position: absolute;\n+┊   ┊ 57┊    color: gray;\n+┊   ┊ 58┊    top: 20px;\n+┊   ┊ 59┊    right: 0;\n+┊   ┊ 60┊    font-size: 13px;\n+┊   ┊ 61┊  }\n+┊   ┊ 62┊`\n+┊   ┊ 63┊\n+┊   ┊ 64┊const query = gql`\n+┊   ┊ 65┊  query ChatsListQuery {\n+┊   ┊ 66┊    chats {\n+┊   ┊ 67┊      ...Chat\n+┊   ┊ 68┊    }\n+┊   ┊ 69┊  }\n+┊   ┊ 70┊\n+┊   ┊ 71┊  ${fragments.chat}\n+┊   ┊ 72┊`\n+┊   ┊ 73┊\n+┊   ┊ 74┊export default () => {\n+┊   ┊ 75┊  const {\n+┊   ┊ 76┊    data: { chats },\n+┊   ┊ 77┊  } = useQuery<ChatsListQuery.Query>(query)\n+┊   ┊ 78┊\n+┊   ┊ 79┊  return (\n+┊   ┊ 80┊    <Style className=\"ChatsList\">\n+┊   ┊ 81┊      <List className=\"ChatsList-chats-list\">\n+┊   ┊ 82┊        {chats.map(chat => (\n+┊   ┊ 83┊          <ListItem\n+┊   ┊ 84┊            key={chat.id}\n+┊   ┊ 85┊            className=\"ChatsList-chat-item\"\n+┊   ┊ 86┊            button\n+┊   ┊ 87┊          >\n+┊   ┊ 88┊            <img\n+┊   ┊ 89┊              className=\"ChatsList-profile-pic\"\n+┊   ┊ 90┊              src={chat.picture || '/assets/default-profile-pic.jpg'}\n+┊   ┊ 91┊            />\n+┊   ┊ 92┊            <div className=\"ChatsList-info\">\n+┊   ┊ 93┊              <div className=\"ChatsList-name\">{chat.name}</div>\n+┊   ┊ 94┊              {chat.lastMessage && (\n+┊   ┊ 95┊                <React.Fragment>\n+┊   ┊ 96┊                  <div className=\"ChatsList-last-message\">{chat.lastMessage.content}</div>\n+┊   ┊ 97┊                  <div className=\"ChatsList-timestamp\">\n+┊   ┊ 98┊                    {moment(chat.lastMessage.createdAt).format('HH:mm')}\n+┊   ┊ 99┊                  </div>\n+┊   ┊100┊                </React.Fragment>\n+┊   ┊101┊              )}\n+┊   ┊102┊            </div>\n+┊   ┊103┊          </ListItem>\n+┊   ┊104┊        ))}\n+┊   ┊105┊      </List>\n+┊   ┊106┊    </Style>\n+┊   ┊107┊  )\n+┊   ┊108┊}\n```\n\n##### Added src&#x2F;components&#x2F;ChatsListScreen&#x2F;ChatsNavbar.tsx\n```diff\n@@ -0,0 +1,14 @@\n+┊  ┊ 1┊import * as React from 'react'\n+┊  ┊ 2┊import styled from 'styled-components'\n+┊  ┊ 3┊\n+┊  ┊ 4┊const Style = styled.div`\n+┊  ┊ 5┊  .ChatsNavbar-title {\n+┊  ┊ 6┊    float: left;\n+┊  ┊ 7┊  }\n+┊  ┊ 8┊`\n+┊  ┊ 9┊\n+┊  ┊10┊export default () => (\n+┊  ┊11┊  <Style className=\"ChatsNavbar\">\n+┊  ┊12┊    <span className=\"ChatsNavbar-title\">WhatsApp Clone</span>\n+┊  ┊13┊  </Style>\n+┊  ┊14┊)\n```\n\n##### Added src&#x2F;components&#x2F;ChatsListScreen&#x2F;index.tsx\n```diff\n@@ -0,0 +1,16 @@\n+┊  ┊ 1┊import * as React from 'react'\n+┊  ┊ 2┊import { Suspense } from 'react'\n+┊  ┊ 3┊import Navbar from '../Navbar'\n+┊  ┊ 4┊import ChatsList from './ChatsList'\n+┊  ┊ 5┊import ChatsNavbar from './ChatsNavbar'\n+┊  ┊ 6┊\n+┊  ┊ 7┊export default () => (\n+┊  ┊ 8┊  <div className=\"ChatsListScreen Screen\">\n+┊  ┊ 9┊    <Navbar>\n+┊  ┊10┊      <ChatsNavbar />\n+┊  ┊11┊    </Navbar>\n+┊  ┊12┊    <Suspense fallback={null}>\n+┊  ┊13┊      <ChatsList />\n+┊  ┊14┊    </Suspense>\n+┊  ┊15┊  </div>\n+┊  ┊16┊)\n```\n\n##### Added src&#x2F;components&#x2F;Navbar.tsx\n```diff\n@@ -0,0 +1,24 @@\n+┊  ┊ 1┊import Toolbar from '@material-ui/core/Toolbar'\n+┊  ┊ 2┊import * as React from 'react'\n+┊  ┊ 3┊import styled from 'styled-components'\n+┊  ┊ 4┊\n+┊  ┊ 5┊const Style = styled(Toolbar)`\n+┊  ┊ 6┊  background-color: var(--primary-bg);\n+┊  ┊ 7┊  color: var(--primary-text);\n+┊  ┊ 8┊  font-size: 20px;\n+┊  ┊ 9┊  line-height: 40px;\n+┊  ┊10┊\n+┊  ┊11┊  .Navbar-body {\n+┊  ┊12┊    width: 100%;\n+┊  ┊13┊  }\n+┊  ┊14┊`\n+┊  ┊15┊\n+┊  ┊16┊interface NavbarProps {\n+┊  ┊17┊  children: any\n+┊  ┊18┊}\n+┊  ┊19┊\n+┊  ┊20┊export default ({ children }: NavbarProps) => (\n+┊  ┊21┊  <Style className=\"Navbar\">\n+┊  ┊22┊    <div className=\"Navbar-body\">{children}</div>\n+┊  ┊23┊  </Style>\n+┊  ┊24┊)\n```\n\n[}]: #\n\nLet's install the missing dependencies:\n\n    $ yarn add -D @types/moment@2.13.0\n    $ yarn add graphql-tag@2.10.1 moment@2.24.0 subscriptions-transport-ws@0.9.15 styled-components@4.1.3\n\nAnd add a default profile picture to our assets directory under `public/assets/default-profile-pic.jpg`:\n\n![default-profile-pic.jpg](https://user-images.githubusercontent.com/7648874/51983273-38229280-24d3-11e9-98bd-363764dc6d97.jpg)\n\nThe chats which are currently served by the server already have a picture, but it's not uncommon to have a chat without any picture in our app.\n\nLastly, in order to make the list that we've just created visible, we will mount it at the main app component:\n\n[{]: <helper> (diffStep 1.6 files=\"src/App.tsx\" module=\"client\")\n\n#### [Step 1.6: Add ChatsListScreen](https://github.com/Urigo/WhatsApp-Clone-Client-React/commit/f825cc5)\n\n##### Changed src&#x2F;App.tsx\n```diff\n@@ -1,25 +1,11 @@\n ┊ 1┊ 1┊import React, { Component } from 'react';\n-┊ 2┊  ┊import logo from './logo.svg';\n-┊ 3┊  ┊import './App.css';\n+┊  ┊ 2┊import ChatsListScreen from './components/ChatsListScreen'\n ┊ 4┊ 3┊\n ┊ 5┊ 4┊class App extends Component {\n ┊ 6┊ 5┊  render() {\n ┊ 7┊ 6┊    return (\n ┊ 8┊ 7┊      <div className=\"App\">\n-┊ 9┊  ┊        <header className=\"App-header\">\n-┊10┊  ┊          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n-┊11┊  ┊          <p>\n-┊12┊  ┊            Edit <code>src/App.js</code> and save to reload.\n-┊13┊  ┊          </p>\n-┊14┊  ┊          <a\n-┊15┊  ┊            className=\"App-link\"\n-┊16┊  ┊            href=\"https://reactjs.org\"\n-┊17┊  ┊            target=\"_blank\"\n-┊18┊  ┊            rel=\"noopener noreferrer\"\n-┊19┊  ┊          >\n-┊20┊  ┊            Learn React\n-┊21┊  ┊          </a>\n-┊22┊  ┊        </header>\n+┊  ┊ 8┊        <ChatsListScreen />\n ┊23┊ 9┊      </div>\n ┊24┊10┊    );\n ┊25┊11┊  }\n```\n\n[}]: #\n\nNow we should be able to see the chats in the React app! We can test it out by running\n\n    # terminal 1\n    server$ yarn generate\n    server$ yarn start\n    # terminal 2\n    client$ yarn generate\n    client$ yarn start\n\nEverything works, but it's not over yet. Our application can't be based on a served hard-coded JSON. A real app has a database. There are many advantages for using a database over an in-memory or FS stored data:\n\n- It is VERY fast, and can deal with large amounts of data.\n- Data fetching can be optimized by defining indexes.\n- You need the right read/write permissions which makes it very secure.\n- Data will persist even if the server crashes or the machine is randomly closed.\n- A lot more...\n\nWe will be using [PostgreSQL](https://www.postgresql.org/) (Postgres, in short) as our database with [TypeORM](https://github.com/typeorm/typeorm) as an ORM around Postgres. First make sure that you install Postgres on your machine by following the [official installation instructions](https://www.labkey.org/Documentation/wiki-page.view?name=commonInstall).\n\nTo make sure the whole shebang works with Node.JS, we will install few packages:\n\n    $ yarn add pg@7.8.0 typeorm@0.2.12 reflect-metadata@0.1.13\n    $ yarn add -D @types/pg@7.4.11\n\n> The [`reflect-metadata`](https://www.npmjs.com/package/reflect-metadata) package will emit metadata for JavaScript [decorators](https://github.com/tc39/proposal-decorators). This will be used internally by TypeORM to determine column types based on their corresponding TypeScript type.\n\nThis would require us to set some configuration so TypeORM would know where and how to connect the DB. We will use the `whatsapp` DB with the `test` username:\n\n[{]: <helper> (diffStep 1.5 files=\"ormconfig.json, index.ts\" module=\"server\")\n\n#### [Step 1.5: Setup TypeORM](https://github.com/Urigo/WhatsApp-Clone-Server/commit/d89b9b3)\n\n##### Changed index.ts\n```diff\n@@ -4,27 +4,33 @@\n ┊ 4┊ 4┊import express from 'express'\n ┊ 5┊ 5┊import gql from 'graphql-tag'\n ┊ 6┊ 6┊import { createServer } from 'http'\n+┊  ┊ 7┊import { createConnection } from 'typeorm'\n ┊ 7┊ 8┊import schema from './schema'\n ┊ 8┊ 9┊\n ┊ 9┊10┊const PORT = 4000\n ┊10┊11┊\n-┊11┊  ┊const app = express()\n+┊  ┊12┊createConnection().then((connection) => {\n+┊  ┊13┊  const app = express()\n ┊12┊14┊\n-┊13┊  ┊app.use(cors())\n-┊14┊  ┊app.use(bodyParser.json())\n+┊  ┊15┊  app.use(cors())\n+┊  ┊16┊  app.use(bodyParser.json())\n ┊15┊17┊\n-┊16┊  ┊const apollo = new ApolloServer({ schema })\n+┊  ┊18┊  const apollo = new ApolloServer({\n+┊  ┊19┊    schema,\n+┊  ┊20┊    context: () => ({ connection }),\n+┊  ┊21┊  })\n ┊17┊22┊\n-┊18┊  ┊apollo.applyMiddleware({\n-┊19┊  ┊  app,\n-┊20┊  ┊  path: '/graphql',\n-┊21┊  ┊})\n+┊  ┊23┊  apollo.applyMiddleware({\n+┊  ┊24┊    app,\n+┊  ┊25┊    path: '/graphql',\n+┊  ┊26┊  })\n ┊22┊27┊\n-┊23┊  ┊// Wrap the Express server\n-┊24┊  ┊const ws = createServer(app)\n+┊  ┊28┊  // Wrap the Express server\n+┊  ┊29┊  const ws = createServer(app)\n ┊25┊30┊\n-┊26┊  ┊apollo.installSubscriptionHandlers(ws)\n+┊  ┊31┊  apollo.installSubscriptionHandlers(ws)\n ┊27┊32┊\n-┊28┊  ┊ws.listen(PORT, () => {\n-┊29┊  ┊  console.log(`Apollo Server is now running on http://localhost:${PORT}`)\n+┊  ┊33┊  ws.listen(PORT, () => {\n+┊  ┊34┊    console.log(`Apollo Server is now running on http://localhost:${PORT}`)\n+┊  ┊35┊  })\n ┊30┊36┊})\n```\n\n##### Added ormconfig.json\n```diff\n@@ -0,0 +1,24 @@\n+┊  ┊ 1┊{\n+┊  ┊ 2┊   \"type\": \"postgres\",\n+┊  ┊ 3┊   \"host\": \"localhost\",\n+┊  ┊ 4┊   \"port\": 5432,\n+┊  ┊ 5┊   \"username\": \"test\",\n+┊  ┊ 6┊   \"password\": \"test\",\n+┊  ┊ 7┊   \"database\": \"whatsapp\",\n+┊  ┊ 8┊   \"synchronize\": true,\n+┊  ┊ 9┊   \"logging\": false,\n+┊  ┊10┊   \"entities\": [\n+┊  ┊11┊      \"entity/**/*.ts\"\n+┊  ┊12┊   ],\n+┊  ┊13┊   \"migrations\": [\n+┊  ┊14┊      \"migration/**/*.ts\"\n+┊  ┊15┊   ],\n+┊  ┊16┊   \"subscribers\": [\n+┊  ┊17┊      \"subscriber/**/*.ts\"\n+┊  ┊18┊   ],\n+┊  ┊19┊   \"cli\": {\n+┊  ┊20┊      \"entitiesDir\": \"entity\",\n+┊  ┊21┊      \"migrationsDir\": \"migration\",\n+┊  ┊22┊      \"subscribersDir\": \"subscriber\"\n+┊  ┊23┊   }\n+┊  ┊24┊}\n```\n\n[}]: #\n\nTypeORM wraps the official Postgres driver so you shouldn't worry about interacting with it. Feel free to edit `ormconfig.json` file based on your needs.\n\nWe will also define the type of expected GraphQL context using Codegen. All we have to do is to create a `context.ts` file and specify it in the `codegen.yml` file:\n\n[{]: <helper> (diffStep 1.5 files=\"codegen.yml, context.ts\" module=\"server\")\n\n#### [Step 1.5: Setup TypeORM](https://github.com/Urigo/WhatsApp-Clone-Server/commit/d89b9b3)\n\n##### Changed codegen.yml\n```diff\n@@ -8,6 +8,7 @@\n ┊ 8┊ 8┊      - typescript-resolvers\n ┊ 9┊ 9┊    config:\n ┊10┊10┊      optionalType: undefined | null\n+┊  ┊11┊      contextType: ./context#Context\n ┊11┊12┊      mappers:\n ┊12┊13┊        Chat: ./entity/chat#Chat\n ┊13┊14┊        Message: ./entity/message#Message\n```\n\n##### Added context.ts\n```diff\n@@ -0,0 +1,7 @@\n+┊ ┊1┊import { Connection } from 'typeorm'\n+┊ ┊2┊import User from './entity/user'\n+┊ ┊3┊\n+┊ ┊4┊export interface Context {\n+┊ ┊5┊  connection: Connection\n+┊ ┊6┊  user: User\n+┊ ┊7┊}\n```\n\n[}]: #\n\nTypeORM has a very defined structure for organizing a project. Each table in our database, its columns and its relationships should be defined in an entity file under the `entity` folder. Why `entity` folder? Because the `ormconfig.json` says so. This is why originally we defined a TypeScript definition for each entity under a separate file. As for now, we will have 3 entities:\n\n- A chat entity.\n- A message entity.\n- A user entity.\n\nAs we make progress, we will add more entities and edit the relationships between them:\n\n[{]: <helper> (diffStep 1.6 files=\"entity\" module=\"server\")\n\n#### [Step 1.6: Implement resolvers against TypeORM](https://github.com/Urigo/WhatsApp-Clone-Server/commit/d4230cc)\n\n##### Changed entity&#x2F;chat.ts\n```diff\n@@ -1,18 +1,89 @@\n+┊  ┊ 1┊import {\n+┊  ┊ 2┊  Entity,\n+┊  ┊ 3┊  Column,\n+┊  ┊ 4┊  PrimaryGeneratedColumn,\n+┊  ┊ 5┊  OneToMany,\n+┊  ┊ 6┊  JoinTable,\n+┊  ┊ 7┊  ManyToMany,\n+┊  ┊ 8┊  ManyToOne,\n+┊  ┊ 9┊  CreateDateColumn,\n+┊  ┊10┊} from 'typeorm'\n ┊ 1┊11┊import Message from './message'\n+┊  ┊12┊import User from './user'\n ┊ 2┊13┊\n-┊ 3┊  ┊export interface Chat {\n+┊  ┊14┊interface ChatConstructor {\n+┊  ┊15┊  name?: string\n+┊  ┊16┊  picture?: string\n+┊  ┊17┊  allTimeMembers?: User[]\n+┊  ┊18┊  listingMembers?: User[]\n+┊  ┊19┊  owner?: User\n+┊  ┊20┊  messages?: Message[]\n+┊  ┊21┊}\n+┊  ┊22┊\n+┊  ┊23┊@Entity()\n+┊  ┊24┊export class Chat {\n+┊  ┊25┊  @PrimaryGeneratedColumn()\n ┊ 4┊26┊  id: string\n-┊ 5┊  ┊  name?: string | null\n-┊ 6┊  ┊  picture?: string | null\n-┊ 7┊  ┊  // All members, current and past ones.\n-┊ 8┊  ┊  allTimeMemberIds: string[]\n-┊ 9┊  ┊  // Whoever gets the chat listed. For groups includes past members who still didn't delete the group.\n-┊10┊  ┊  listingMemberIds: string[]\n-┊11┊  ┊  // Actual members of the group (they are not the only ones who get the group listed). Null for chats.\n-┊12┊  ┊  actualGroupMemberIds?: string[] | null\n-┊13┊  ┊  adminIds?: string[] | null\n-┊14┊  ┊  ownerId?: string | null\n+┊  ┊27┊\n+┊  ┊28┊  @CreateDateColumn({ nullable: true })\n+┊  ┊29┊  createdAt: Date\n+┊  ┊30┊\n+┊  ┊31┊  @Column({ nullable: true })\n+┊  ┊32┊  name: string\n+┊  ┊33┊\n+┊  ┊34┊  @Column({ nullable: true })\n+┊  ┊35┊  picture: string\n+┊  ┊36┊\n+┊  ┊37┊  @ManyToMany(type => User, user => user.allTimeMemberChats, {\n+┊  ┊38┊    cascade: ['insert', 'update'],\n+┊  ┊39┊    eager: false,\n+┊  ┊40┊  })\n+┊  ┊41┊  @JoinTable()\n+┊  ┊42┊  allTimeMembers: User[]\n+┊  ┊43┊\n+┊  ┊44┊  @ManyToMany(type => User, user => user.listingMemberChats, {\n+┊  ┊45┊    cascade: ['insert', 'update'],\n+┊  ┊46┊    eager: false,\n+┊  ┊47┊  })\n+┊  ┊48┊  @JoinTable()\n+┊  ┊49┊  listingMembers: User[]\n+┊  ┊50┊\n+┊  ┊51┊  @ManyToOne(type => User, user => user.ownerChats, { cascade: ['insert', 'update'], eager: false })\n+┊  ┊52┊  owner?: User | null\n+┊  ┊53┊\n+┊  ┊54┊  @OneToMany(type => Message, message => message.chat, {\n+┊  ┊55┊    cascade: ['insert', 'update'],\n+┊  ┊56┊    eager: true,\n+┊  ┊57┊  })\n ┊15┊58┊  messages: Message[]\n+┊  ┊59┊\n+┊  ┊60┊  constructor({\n+┊  ┊61┊    name,\n+┊  ┊62┊    picture,\n+┊  ┊63┊    allTimeMembers,\n+┊  ┊64┊    listingMembers,\n+┊  ┊65┊    owner,\n+┊  ┊66┊    messages,\n+┊  ┊67┊  }: ChatConstructor = {}) {\n+┊  ┊68┊    if (name) {\n+┊  ┊69┊      this.name = name\n+┊  ┊70┊    }\n+┊  ┊71┊    if (picture) {\n+┊  ┊72┊      this.picture = picture\n+┊  ┊73┊    }\n+┊  ┊74┊    if (allTimeMembers) {\n+┊  ┊75┊      this.allTimeMembers = allTimeMembers\n+┊  ┊76┊    }\n+┊  ┊77┊    if (listingMembers) {\n+┊  ┊78┊      this.listingMembers = listingMembers\n+┊  ┊79┊    }\n+┊  ┊80┊    if (owner) {\n+┊  ┊81┊      this.owner = owner\n+┊  ┊82┊    }\n+┊  ┊83┊    if (messages) {\n+┊  ┊84┊      this.messages = messages\n+┊  ┊85┊    }\n+┊  ┊86┊  }\n ┊16┊87┊}\n ┊17┊88┊\n ┊18┊89┊export default Chat\n```\n\n##### Changed entity&#x2F;message.ts\n```diff\n@@ -1,20 +1,80 @@\n-┊ 1┊  ┊import Recipient from './recipient'\n+┊  ┊ 1┊import {\n+┊  ┊ 2┊  Entity,\n+┊  ┊ 3┊  Column,\n+┊  ┊ 4┊  PrimaryGeneratedColumn,\n+┊  ┊ 5┊  OneToMany,\n+┊  ┊ 6┊  ManyToOne,\n+┊  ┊ 7┊  ManyToMany,\n+┊  ┊ 8┊  JoinTable,\n+┊  ┊ 9┊  CreateDateColumn,\n+┊  ┊10┊} from 'typeorm'\n+┊  ┊11┊import Chat from './chat'\n+┊  ┊12┊import User from './user'\n+┊  ┊13┊import { MessageType } from '../db'\n ┊ 2┊14┊\n-┊ 3┊  ┊export enum MessageType {\n-┊ 4┊  ┊  PICTURE,\n-┊ 5┊  ┊  TEXT,\n-┊ 6┊  ┊  LOCATION,\n+┊  ┊15┊interface MessageConstructor {\n+┊  ┊16┊  sender?: User\n+┊  ┊17┊  content?: string\n+┊  ┊18┊  createdAt?: Date\n+┊  ┊19┊  type?: MessageType\n+┊  ┊20┊  holders?: User[]\n+┊  ┊21┊  chat?: Chat\n ┊ 7┊22┊}\n ┊ 8┊23┊\n-┊ 9┊  ┊export interface Message {\n+┊  ┊24┊@Entity()\n+┊  ┊25┊export class Message {\n+┊  ┊26┊  @PrimaryGeneratedColumn()\n ┊10┊27┊  id: string\n-┊11┊  ┊  chatId: string\n-┊12┊  ┊  senderId: string\n+┊  ┊28┊\n+┊  ┊29┊  @ManyToOne(type => User, user => user.senderMessages, { eager: true })\n+┊  ┊30┊  sender: User\n+┊  ┊31┊\n+┊  ┊32┊  @Column()\n ┊13┊33┊  content: string\n-┊14┊  ┊  createdAt: number\n-┊15┊  ┊  type: MessageType\n-┊16┊  ┊  recipients: Recipient[]\n-┊17┊  ┊  holderIds: string[]\n+┊  ┊34┊\n+┊  ┊35┊  @CreateDateColumn({ nullable: true })\n+┊  ┊36┊  createdAt: Date\n+┊  ┊37┊\n+┊  ┊38┊  @Column()\n+┊  ┊39┊  type: number\n+┊  ┊40┊\n+┊  ┊41┊  @ManyToMany(type => User, user => user.holderMessages, {\n+┊  ┊42┊    cascade: ['insert', 'update'],\n+┊  ┊43┊    eager: true,\n+┊  ┊44┊  })\n+┊  ┊45┊  @JoinTable()\n+┊  ┊46┊  holders: User[]\n+┊  ┊47┊\n+┊  ┊48┊  @ManyToOne(type => Chat, chat => chat.messages)\n+┊  ┊49┊  chat: Chat\n+┊  ┊50┊\n+┊  ┊51┊  constructor({\n+┊  ┊52┊    sender,\n+┊  ┊53┊    content,\n+┊  ┊54┊    createdAt,\n+┊  ┊55┊    type,\n+┊  ┊56┊    holders,\n+┊  ┊57┊    chat,\n+┊  ┊58┊  }: MessageConstructor = {}) {\n+┊  ┊59┊    if (sender) {\n+┊  ┊60┊      this.sender = sender\n+┊  ┊61┊    }\n+┊  ┊62┊    if (content) {\n+┊  ┊63┊      this.content = content\n+┊  ┊64┊    }\n+┊  ┊65┊    if (createdAt) {\n+┊  ┊66┊      this.createdAt = createdAt\n+┊  ┊67┊    }\n+┊  ┊68┊    if (type) {\n+┊  ┊69┊      this.type = type\n+┊  ┊70┊    }\n+┊  ┊71┊    if (holders) {\n+┊  ┊72┊      this.holders = holders\n+┊  ┊73┊    }\n+┊  ┊74┊    if (chat) {\n+┊  ┊75┊      this.chat = chat\n+┊  ┊76┊    }\n+┊  ┊77┊  }\n ┊18┊78┊}\n ┊19┊79┊\n ┊20┊80┊export default Message\n```\n\n##### Changed entity&#x2F;user.ts\n```diff\n@@ -1,10 +1,60 @@\n-┊ 1┊  ┊export interface User {\n+┊  ┊ 1┊import { Entity, Column, PrimaryGeneratedColumn, ManyToMany, OneToMany } from 'typeorm'\n+┊  ┊ 2┊import Chat from './chat'\n+┊  ┊ 3┊import Message from './message'\n+┊  ┊ 4┊\n+┊  ┊ 5┊interface UserConstructor {\n+┊  ┊ 6┊  username?: string\n+┊  ┊ 7┊  password?: string\n+┊  ┊ 8┊  name?: string\n+┊  ┊ 9┊  picture?: string\n+┊  ┊10┊}\n+┊  ┊11┊\n+┊  ┊12┊@Entity('app_user')\n+┊  ┊13┊export class User {\n+┊  ┊14┊  @PrimaryGeneratedColumn()\n ┊ 2┊15┊  id: string\n+┊  ┊16┊\n+┊  ┊17┊  @Column()\n ┊ 3┊18┊  username: string\n+┊  ┊19┊\n+┊  ┊20┊  @Column()\n ┊ 4┊21┊  password: string\n+┊  ┊22┊\n+┊  ┊23┊  @Column()\n ┊ 5┊24┊  name: string\n-┊ 6┊  ┊  picture?: string | null\n-┊ 7┊  ┊  phone?: string | null\n+┊  ┊25┊\n+┊  ┊26┊  @Column({ nullable: true })\n+┊  ┊27┊  picture: string\n+┊  ┊28┊\n+┊  ┊29┊  @ManyToMany(type => Chat, chat => chat.allTimeMembers)\n+┊  ┊30┊  allTimeMemberChats: Chat[]\n+┊  ┊31┊\n+┊  ┊32┊  @ManyToMany(type => Chat, chat => chat.listingMembers)\n+┊  ┊33┊  listingMemberChats: Chat[]\n+┊  ┊34┊\n+┊  ┊35┊  @ManyToMany(type => Message, message => message.holders)\n+┊  ┊36┊  holderMessages: Message[]\n+┊  ┊37┊\n+┊  ┊38┊  @OneToMany(type => Chat, chat => chat.owner)\n+┊  ┊39┊  ownerChats: Chat[]\n+┊  ┊40┊\n+┊  ┊41┊  @OneToMany(type => Message, message => message.sender)\n+┊  ┊42┊  senderMessages: Message[]\n+┊  ┊43┊\n+┊  ┊44┊  constructor({ username, password, name, picture }: UserConstructor = {}) {\n+┊  ┊45┊    if (username) {\n+┊  ┊46┊      this.username = username\n+┊  ┊47┊    }\n+┊  ┊48┊    if (password) {\n+┊  ┊49┊      this.password = password\n+┊  ┊50┊    }\n+┊  ┊51┊    if (name) {\n+┊  ┊52┊      this.name = name\n+┊  ┊53┊    }\n+┊  ┊54┊    if (picture) {\n+┊  ┊55┊      this.picture = picture\n+┊  ┊56┊    }\n+┊  ┊57┊  }\n ┊ 8┊58┊}\n ┊ 9┊59┊\n ┊10┊60┊export default User\n```\n\n[}]: #\n\nNow that we have the entities set, we can make requests to Postgres. Let's edit our resolvers to use the entities:\n\n[{]: <helper> (diffStep 1.6 files=\"schema\" module=\"server\")\n\n#### [Step 1.6: Implement resolvers against TypeORM](https://github.com/Urigo/WhatsApp-Clone-Server/commit/d4230cc)\n\n##### Changed schema&#x2F;resolvers.ts\n```diff\n@@ -1,83 +1,197 @@\n ┊  1┊  1┊import { IResolvers as IApolloResolvers } from 'apollo-server-express'\n ┊  2┊  2┊import { GraphQLDateTime } from 'graphql-iso-date'\n-┊  3┊   ┊import db from '../db'\n ┊  4┊  3┊import Chat from '../entity/chat'\n ┊  5┊  4┊import Message from '../entity/message'\n-┊  6┊   ┊import Recipient from '../entity/recipient'\n ┊  7┊  5┊import User from '../entity/user'\n ┊  8┊  6┊import { IResolvers } from '../types'\n ┊  9┊  7┊\n-┊ 10┊   ┊let users = db.users\n-┊ 11┊   ┊let chats = db.chats\n-┊ 12┊   ┊const currentUser: string = '1'\n-┊ 13┊   ┊\n ┊ 14┊  8┊export default {\n ┊ 15┊  9┊  Date: GraphQLDateTime,\n ┊ 16┊ 10┊  Query: {\n ┊ 17┊ 11┊    // Show all users for the moment.\n-┊ 18┊   ┊    users: () => users.filter(user => user.id !== currentUser),\n-┊ 19┊   ┊    chats: () => chats.filter(chat => chat.listingMemberIds.includes(currentUser)),\n-┊ 20┊   ┊    chat: (obj, { chatId }) => chats.find(chat => chat.id === chatId) || null,\n+┊   ┊ 12┊    users: (root, args, { connection, currentUser }) => {\n+┊   ┊ 13┊      return connection.createQueryBuilder(User, 'user').where('user.id != :id', {id: currentUser.id}).getMany();\n+┊   ┊ 14┊    },\n+┊   ┊ 15┊\n+┊   ┊ 16┊    chats: (root, args, { connection, currentUser }) => {\n+┊   ┊ 17┊      return connection\n+┊   ┊ 18┊        .createQueryBuilder(Chat, 'chat')\n+┊   ┊ 19┊        .leftJoin('chat.listingMembers', 'listingMembers')\n+┊   ┊ 20┊        .where('listingMembers.id = :id', { id: currentUser.id })\n+┊   ┊ 21┊        .orderBy('chat.createdAt', 'DESC')\n+┊   ┊ 22┊        .getMany();\n+┊   ┊ 23┊    },\n+┊   ┊ 24┊\n+┊   ┊ 25┊    chat: async (root, { chatId }, { connection }) => {\n+┊   ┊ 26┊      const chat = await connection\n+┊   ┊ 27┊        .createQueryBuilder(Chat, 'chat')\n+┊   ┊ 28┊        .whereInIds(chatId)\n+┊   ┊ 29┊        .getOne();\n+┊   ┊ 30┊\n+┊   ┊ 31┊      return chat || null;\n+┊   ┊ 32┊    },\n ┊ 21┊ 33┊  },\n+┊   ┊ 34┊\n ┊ 22┊ 35┊  Chat: {\n-┊ 23┊   ┊    name: (chat) =>\n-┊ 24┊   ┊      chat.name\n-┊ 25┊   ┊        ? chat.name\n-┊ 26┊   ┊        : users.find(\n-┊ 27┊   ┊            user => user.id === chat.allTimeMemberIds.find((userId: string) => userId !== currentUser)\n-┊ 28┊   ┊          )!.name,\n-┊ 29┊   ┊    picture: (chat) =>\n-┊ 30┊   ┊      chat.name\n-┊ 31┊   ┊        ? chat.picture\n-┊ 32┊   ┊        : users.find(\n-┊ 33┊   ┊            user => user.id === chat.allTimeMemberIds.find((userId: string) => userId !== currentUser)\n-┊ 34┊   ┊          )!.picture,\n-┊ 35┊   ┊    allTimeMembers: (chat) =>\n-┊ 36┊   ┊      users.filter(user => chat.allTimeMemberIds.includes(user.id)),\n-┊ 37┊   ┊    listingMembers: (chat) =>\n-┊ 38┊   ┊      users.filter(user => chat.listingMemberIds.includes(user.id)),\n-┊ 39┊   ┊    actualGroupMembers: (chat) =>\n-┊ 40┊   ┊      users.filter(\n-┊ 41┊   ┊        user => chat.actualGroupMemberIds && chat.actualGroupMemberIds.includes(user.id)\n-┊ 42┊   ┊      ),\n-┊ 43┊   ┊    admins: (chat) =>\n-┊ 44┊   ┊      users.filter(user => chat.adminIds && chat.adminIds.includes(user.id)),\n-┊ 45┊   ┊    owner: (chat) => users.find(user => chat.ownerId === user.id) || null,\n-┊ 46┊   ┊    messages: (chat, { amount = 0 }) => {\n-┊ 47┊   ┊      const messages =\n-┊ 48┊   ┊        chat.messages\n-┊ 49┊   ┊          .filter((message: Message) => message.holderIds.includes(currentUser))\n-┊ 50┊   ┊          .sort((a: Message, b: Message) => b.createdAt - a.createdAt) || []\n-┊ 51┊   ┊      return (amount ? messages.slice(0, amount) : messages).reverse()\n+┊   ┊ 36┊    name: async (chat, args, { connection, currentUser }) => {\n+┊   ┊ 37┊      if (chat.name) {\n+┊   ┊ 38┊        return chat.name;\n+┊   ┊ 39┊      }\n+┊   ┊ 40┊\n+┊   ┊ 41┊      const user = await connection\n+┊   ┊ 42┊        .createQueryBuilder(User, 'user')\n+┊   ┊ 43┊        .where('user.id != :userId', { userId: currentUser.id })\n+┊   ┊ 44┊        .innerJoin(\n+┊   ┊ 45┊          'user.allTimeMemberChats',\n+┊   ┊ 46┊          'allTimeMemberChats',\n+┊   ┊ 47┊          'allTimeMemberChats.id = :chatId',\n+┊   ┊ 48┊          { chatId: chat.id },\n+┊   ┊ 49┊        )\n+┊   ┊ 50┊        .getOne();\n+┊   ┊ 51┊\n+┊   ┊ 52┊      return user ? user.name : null\n+┊   ┊ 53┊    },\n+┊   ┊ 54┊\n+┊   ┊ 55┊    picture: async (chat, args, { connection, currentUser }) => {\n+┊   ┊ 56┊      if (chat.picture) {\n+┊   ┊ 57┊        return chat.picture;\n+┊   ┊ 58┊      }\n+┊   ┊ 59┊\n+┊   ┊ 60┊      const user = await connection\n+┊   ┊ 61┊        .createQueryBuilder(User, 'user')\n+┊   ┊ 62┊        .where('user.id != :userId', { userId: currentUser.id })\n+┊   ┊ 63┊        .innerJoin(\n+┊   ┊ 64┊          'user.allTimeMemberChats',\n+┊   ┊ 65┊          'allTimeMemberChats',\n+┊   ┊ 66┊          'allTimeMemberChats.id = :chatId',\n+┊   ┊ 67┊          { chatId: chat.id },\n+┊   ┊ 68┊        )\n+┊   ┊ 69┊        .getOne();\n+┊   ┊ 70┊\n+┊   ┊ 71┊      return user ? user.picture : null\n+┊   ┊ 72┊    },\n+┊   ┊ 73┊\n+┊   ┊ 74┊    allTimeMembers: (chat, args, { connection }) => {\n+┊   ┊ 75┊      return connection\n+┊   ┊ 76┊        .createQueryBuilder(User, 'user')\n+┊   ┊ 77┊        .innerJoin(\n+┊   ┊ 78┊          'user.listingMemberChats',\n+┊   ┊ 79┊          'listingMemberChats',\n+┊   ┊ 80┊          'listingMemberChats.id = :chatId',\n+┊   ┊ 81┊          { chatId: chat.id },\n+┊   ┊ 82┊        )\n+┊   ┊ 83┊        .getMany()\n+┊   ┊ 84┊    },\n+┊   ┊ 85┊\n+┊   ┊ 86┊    listingMembers: (chat, args, { connection }) => {\n+┊   ┊ 87┊      return connection\n+┊   ┊ 88┊        .createQueryBuilder(User, 'user')\n+┊   ┊ 89┊        .innerJoin(\n+┊   ┊ 90┊          'user.listingMemberChats',\n+┊   ┊ 91┊          'listingMemberChats',\n+┊   ┊ 92┊          'listingMemberChats.id = :chatId',\n+┊   ┊ 93┊          { chatId: chat.id },\n+┊   ┊ 94┊        )\n+┊   ┊ 95┊        .getMany();\n+┊   ┊ 96┊    },\n+┊   ┊ 97┊\n+┊   ┊ 98┊    owner: async (chat, args, { connection }) => {\n+┊   ┊ 99┊      const owner = await connection\n+┊   ┊100┊        .createQueryBuilder(User, 'user')\n+┊   ┊101┊        .innerJoin('user.ownerChats', 'ownerChats', 'ownerChats.id = :chatId', {\n+┊   ┊102┊          chatId: chat.id,\n+┊   ┊103┊        })\n+┊   ┊104┊        .getOne();\n+┊   ┊105┊\n+┊   ┊106┊      return owner || null;\n+┊   ┊107┊    },\n+┊   ┊108┊\n+┊   ┊109┊    messages: async (chat, { amount = 0 }, { connection, currentUser }) => {\n+┊   ┊110┊      if (chat.messages) {\n+┊   ┊111┊        return amount ? chat.messages.slice(-amount) : chat.messages;\n+┊   ┊112┊      }\n+┊   ┊113┊\n+┊   ┊114┊      let query = connection\n+┊   ┊115┊        .createQueryBuilder(Message, 'message')\n+┊   ┊116┊        .innerJoin('message.chat', 'chat', 'chat.id = :chatId', { chatId: chat.id })\n+┊   ┊117┊        .innerJoin('message.holders', 'holders', 'holders.id = :userId', {\n+┊   ┊118┊          userId: currentUser.id,\n+┊   ┊119┊        })\n+┊   ┊120┊        .orderBy({ 'message.createdAt': { order: 'DESC', nulls: 'NULLS LAST' } });\n+┊   ┊121┊\n+┊   ┊122┊      if (amount) {\n+┊   ┊123┊        query = query.take(amount);\n+┊   ┊124┊      }\n+┊   ┊125┊\n+┊   ┊126┊      return (await query.getMany()).reverse();\n+┊   ┊127┊    },\n+┊   ┊128┊\n+┊   ┊129┊    lastMessage: async (chat, args, { connection, currentUser }) => {\n+┊   ┊130┊      if (chat.messages) {\n+┊   ┊131┊        return chat.messages.length ? chat.messages[chat.messages.length - 1] : null;\n+┊   ┊132┊      }\n+┊   ┊133┊\n+┊   ┊134┊      const messages = await connection\n+┊   ┊135┊        .createQueryBuilder(Message, 'message')\n+┊   ┊136┊        .innerJoin('message.chat', 'chat', 'chat.id = :chatId', { chatId: chat.id })\n+┊   ┊137┊        .innerJoin('message.holders', 'holders', 'holders.id = :userId', {\n+┊   ┊138┊          userId: currentUser.id,\n+┊   ┊139┊        })\n+┊   ┊140┊        .orderBy({ 'message.createdAt': { order: 'DESC', nulls: 'NULLS LAST' } })\n+┊   ┊141┊        .getMany()\n+┊   ┊142┊\n+┊   ┊143┊      return messages && messages.length ? messages[messages.length - 1] : null;\n ┊ 52┊144┊    },\n-┊ 53┊   ┊    unreadMessages: (chat) =>\n-┊ 54┊   ┊      chat.messages.filter(\n-┊ 55┊   ┊        (message: Message) =>\n-┊ 56┊   ┊          message.holderIds.includes(currentUser) &&\n-┊ 57┊   ┊          message.recipients.find(\n-┊ 58┊   ┊            (recipient: Recipient) => recipient.userId === currentUser && !recipient.readAt\n-┊ 59┊   ┊          )\n-┊ 60┊   ┊      ).length,\n-┊ 61┊   ┊    lastMessage: (chat) => chat.messages[chat.messages.length - 1],\n-┊ 62┊   ┊    isGroup: (chat) => !!chat.name,\n ┊ 63┊145┊  },\n+┊   ┊146┊\n ┊ 64┊147┊  Message: {\n-┊ 65┊   ┊    chat: (message) =>\n-┊ 66┊   ┊      chats.find(chat => message.chatId === chat.id) || null,\n-┊ 67┊   ┊    sender: (message) =>\n-┊ 68┊   ┊      users.find(user => user.id === message.senderId) || null,\n-┊ 69┊   ┊    holders: (message) =>\n-┊ 70┊   ┊      users.filter(user => message.holderIds.includes(user.id)),\n-┊ 71┊   ┊    ownership: (message) => message.senderId === currentUser,\n-┊ 72┊   ┊  },\n-┊ 73┊   ┊  Recipient: {\n-┊ 74┊   ┊    user: (recipient) =>\n-┊ 75┊   ┊      users.find(user => recipient.userId === user.id) || null,\n-┊ 76┊   ┊    message: (recipient) => {\n-┊ 77┊   ┊      const chat = chats.find(chat => recipient.chatId === chat.id)\n-┊ 78┊   ┊      return chat ? chat.messages.find(message => recipient.messageId === message.id) || null : null\n+┊   ┊148┊    chat: async (message, args, { connection }) => {\n+┊   ┊149┊      const chat = await connection\n+┊   ┊150┊        .createQueryBuilder(Chat, 'chat')\n+┊   ┊151┊        .innerJoin('chat.messages', 'messages', 'messages.id = :messageId', {\n+┊   ┊152┊          messageId: message.id\n+┊   ┊153┊        })\n+┊   ┊154┊        .getOne();\n+┊   ┊155┊\n+┊   ┊156┊      if (!chat) {\n+┊   ┊157┊        throw new Error(`Message must have a chat.`);\n+┊   ┊158┊      }\n+┊   ┊159┊\n+┊   ┊160┊      return chat;\n+┊   ┊161┊    },\n+┊   ┊162┊\n+┊   ┊163┊    sender: async (message, args, { connection }) => {\n+┊   ┊164┊      const sender = await connection\n+┊   ┊165┊        .createQueryBuilder(User, 'user')\n+┊   ┊166┊        .innerJoin('user.senderMessages', 'senderMessages', 'senderMessages.id = :messageId', {\n+┊   ┊167┊          messageId: message.id,\n+┊   ┊168┊        })\n+┊   ┊169┊        .getOne();\n+┊   ┊170┊\n+┊   ┊171┊      if (!sender) {\n+┊   ┊172┊        throw new Error(`Message must have a sender.`);\n+┊   ┊173┊      }\n+┊   ┊174┊\n+┊   ┊175┊      return sender;\n ┊ 79┊176┊    },\n-┊ 80┊   ┊    chat: (recipient) =>\n-┊ 81┊   ┊      chats.find(chat => recipient.chatId === chat.id) || null,\n+┊   ┊177┊\n+┊   ┊178┊    holders: async (message, args, { connection }) => {\n+┊   ┊179┊      return connection\n+┊   ┊180┊        .createQueryBuilder(User, 'user')\n+┊   ┊181┊        .innerJoin('user.holderMessages', 'holderMessages', 'holderMessages.id = :messageId', {\n+┊   ┊182┊          messageId: message.id,\n+┊   ┊183┊        })\n+┊   ┊184┊        .getMany();\n+┊   ┊185┊    },\n+┊   ┊186┊\n+┊   ┊187┊    ownership: async (message, args, { connection, currentUser }) => {\n+┊   ┊188┊      return !!(await connection\n+┊   ┊189┊        .createQueryBuilder(User, 'user')\n+┊   ┊190┊        .whereInIds(currentUser.id)\n+┊   ┊191┊        .innerJoin('user.senderMessages', 'senderMessages', 'senderMessages.id = :messageId', {\n+┊   ┊192┊          messageId: message.id,\n+┊   ┊193┊        })\n+┊   ┊194┊        .getCount())\n+┊   ┊195┊    }\n ┊ 82┊196┊  },\n ┊ 83┊197┊} as IResolvers as IApolloResolvers\n```\n\n[}]: #\n\nNotice that we've used a custom scalar type to represent a `Date` object in our GraphQL schema using a package called [`graphql-iso-date`](https://www.npmjs.com/package/graphql-iso-date). Accordingly, let's install this package:\n\n    $ yarn add graphql-iso-date@3.6.1\n    $ yarn add -D @types/graphql-iso-date@3.3.1\n\nAnd update `codegen.yml` to use it in the generated code file:\n\n[{]: <helper> (diffStep 1.6 files=\"codegen\" module=\"server\")\n\n#### [Step 1.6: Implement resolvers against TypeORM](https://github.com/Urigo/WhatsApp-Clone-Server/commit/d4230cc)\n\n##### Changed codegen.yml\n```diff\n@@ -13,3 +13,5 @@\n ┊13┊13┊        Chat: ./entity/chat#Chat\n ┊14┊14┊        Message: ./entity/message#Message\n ┊15┊15┊        User: ./entity/user#User\n+┊  ┊16┊      scalars:\n+┊  ┊17┊        Date: Date\n```\n\n[}]: #\n\nInstead of fabricating a DB into the memory, we will replace the `db.ts` module with a function that will add sample data, using entities of course. This will be very convenient because this way we can test our app:\n\n[{]: <helper> (diffStep 1.6 files=\"db\" module=\"server\")\n\n#### [Step 1.6: Implement resolvers against TypeORM](https://github.com/Urigo/WhatsApp-Clone-Server/commit/d4230cc)\n\n##### Changed db.ts\n```diff\n@@ -1,274 +1,254 @@\n+┊   ┊  1┊import 'reflect-metadata'\n ┊  1┊  2┊import moment from 'moment'\n-┊  2┊   ┊import Chat from './entity/chat'\n-┊  3┊   ┊import Message, { MessageType } from './entity/message'\n-┊  4┊   ┊import User from './entity/user'\n+┊   ┊  3┊import { Connection } from 'typeorm'\n+┊   ┊  4┊import { Chat } from './entity/chat'\n+┊   ┊  5┊import { Message } from './entity/message'\n+┊   ┊  6┊import { User } from './entity/user'\n ┊  5┊  7┊\n-┊  6┊   ┊const users: User[] = [\n-┊  7┊   ┊  {\n-┊  8┊   ┊    id: '1',\n+┊   ┊  8┊export enum MessageType {\n+┊   ┊  9┊  PICTURE,\n+┊   ┊ 10┊  TEXT,\n+┊   ┊ 11┊  LOCATION,\n+┊   ┊ 12┊}\n+┊   ┊ 13┊\n+┊   ┊ 14┊export async function addSampleData(connection: Connection) {\n+┊   ┊ 15┊  const user1 = new User({\n ┊  9┊ 16┊    username: 'ethan',\n ┊ 10┊ 17┊    password: '$2a$08$NO9tkFLCoSqX1c5wk3s7z.JfxaVMKA.m7zUDdDwEquo4rvzimQeJm', // 111\n ┊ 11┊ 18┊    name: 'Ethan Gonzalez',\n ┊ 12┊ 19┊    picture: 'https://randomuser.me/api/portraits/thumb/men/1.jpg',\n-┊ 13┊   ┊  },\n-┊ 14┊   ┊  {\n-┊ 15┊   ┊    id: '2',\n+┊   ┊ 20┊  })\n+┊   ┊ 21┊  await connection.manager.save(user1)\n+┊   ┊ 22┊\n+┊   ┊ 23┊  const user2 = new User({\n ┊ 16┊ 24┊    username: 'bryan',\n ┊ 17┊ 25┊    password: '$2a$08$xE4FuCi/ifxjL2S8CzKAmuKLwv18ktksSN.F3XYEnpmcKtpbpeZgO', // 222\n ┊ 18┊ 26┊    name: 'Bryan Wallace',\n ┊ 19┊ 27┊    picture: 'https://randomuser.me/api/portraits/thumb/men/2.jpg',\n-┊ 20┊   ┊  },\n-┊ 21┊   ┊  {\n-┊ 22┊   ┊    id: '3',\n+┊   ┊ 28┊  })\n+┊   ┊ 29┊  await connection.manager.save(user2)\n+┊   ┊ 30┊\n+┊   ┊ 31┊  const user3 = new User({\n ┊ 23┊ 32┊    username: 'avery',\n ┊ 24┊ 33┊    password: '$2a$08$UHgH7J8G6z1mGQn2qx2kdeWv0jvgHItyAsL9hpEUI3KJmhVW5Q1d.', // 333\n ┊ 25┊ 34┊    name: 'Avery Stewart',\n ┊ 26┊ 35┊    picture: 'https://randomuser.me/api/portraits/thumb/women/1.jpg',\n-┊ 27┊   ┊  },\n-┊ 28┊   ┊  {\n-┊ 29┊   ┊    id: '4',\n+┊   ┊ 36┊  })\n+┊   ┊ 37┊  await connection.manager.save(user3)\n+┊   ┊ 38┊\n+┊   ┊ 39┊  const user4 = new User({\n ┊ 30┊ 40┊    username: 'katie',\n ┊ 31┊ 41┊    password: '$2a$08$wR1k5Q3T9FC7fUgB7Gdb9Os/GV7dGBBf4PLlWT7HERMFhmFDt47xi', // 444\n ┊ 32┊ 42┊    name: 'Katie Peterson',\n ┊ 33┊ 43┊    picture: 'https://randomuser.me/api/portraits/thumb/women/2.jpg',\n-┊ 34┊   ┊  },\n-┊ 35┊   ┊  {\n-┊ 36┊   ┊    id: '5',\n+┊   ┊ 44┊  })\n+┊   ┊ 45┊  await connection.manager.save(user4)\n+┊   ┊ 46┊\n+┊   ┊ 47┊  const user5 = new User({\n ┊ 37┊ 48┊    username: 'ray',\n ┊ 38┊ 49┊    password: '$2a$08$6.mbXqsDX82ZZ7q5d8Osb..JrGSsNp4R3IKj7mxgF6YGT0OmMw242', // 555\n ┊ 39┊ 50┊    name: 'Ray Edwards',\n ┊ 40┊ 51┊    picture: 'https://randomuser.me/api/portraits/thumb/men/3.jpg',\n-┊ 41┊   ┊  },\n-┊ 42┊   ┊  {\n-┊ 43┊   ┊    id: '6',\n+┊   ┊ 52┊  })\n+┊   ┊ 53┊  await connection.manager.save(user5)\n+┊   ┊ 54┊\n+┊   ┊ 55┊  const user6 = new User({\n ┊ 44┊ 56┊    username: 'niko',\n ┊ 45┊ 57┊    password: '$2a$08$fL5lZR.Rwf9FWWe8XwwlceiPBBim8n9aFtaem.INQhiKT4.Ux3Uq.', // 666\n ┊ 46┊ 58┊    name: 'Niccolò Belli',\n ┊ 47┊ 59┊    picture: 'https://randomuser.me/api/portraits/thumb/men/4.jpg',\n-┊ 48┊   ┊  },\n-┊ 49┊   ┊  {\n-┊ 50┊   ┊    id: '7',\n+┊   ┊ 60┊  })\n+┊   ┊ 61┊  await connection.manager.save(user6)\n+┊   ┊ 62┊\n+┊   ┊ 63┊  const user7 = new User({\n ┊ 51┊ 64┊    username: 'mario',\n ┊ 52┊ 65┊    password: '$2a$08$nDHDmWcVxDnH5DDT3HMMC.psqcnu6wBiOgkmJUy9IH..qxa3R6YrO', // 777\n ┊ 53┊ 66┊    name: 'Mario Rossi',\n ┊ 54┊ 67┊    picture: 'https://randomuser.me/api/portraits/thumb/men/5.jpg',\n-┊ 55┊   ┊  },\n-┊ 56┊   ┊]\n+┊   ┊ 68┊  })\n+┊   ┊ 69┊  await connection.manager.save(user7)\n+┊   ┊ 70┊\n+┊   ┊ 71┊  await connection.manager.save(\n+┊   ┊ 72┊    new Chat({\n+┊   ┊ 73┊      allTimeMembers: [user1, user3],\n+┊   ┊ 74┊      listingMembers: [user1, user3],\n+┊   ┊ 75┊      messages: [\n+┊   ┊ 76┊        new Message({\n+┊   ┊ 77┊          sender: user1,\n+┊   ┊ 78┊          content: 'You on your way?',\n+┊   ┊ 79┊          createdAt: moment()\n+┊   ┊ 80┊            .subtract(1, 'hours')\n+┊   ┊ 81┊            .toDate(),\n+┊   ┊ 82┊          type: MessageType.TEXT,\n+┊   ┊ 83┊          holders: [user1, user3],\n+┊   ┊ 84┊        }),\n+┊   ┊ 85┊        new Message({\n+┊   ┊ 86┊          sender: user3,\n+┊   ┊ 87┊          content: 'Yep!',\n+┊   ┊ 88┊          createdAt: moment()\n+┊   ┊ 89┊            .subtract(1, 'hours')\n+┊   ┊ 90┊            .add(5, 'minutes')\n+┊   ┊ 91┊            .toDate(),\n+┊   ┊ 92┊          type: MessageType.TEXT,\n+┊   ┊ 93┊          holders: [user1, user3],\n+┊   ┊ 94┊        }),\n+┊   ┊ 95┊      ],\n+┊   ┊ 96┊    })\n+┊   ┊ 97┊  )\n+┊   ┊ 98┊\n+┊   ┊ 99┊  await connection.manager.save(\n+┊   ┊100┊    new Chat({\n+┊   ┊101┊      allTimeMembers: [user1, user4],\n+┊   ┊102┊      listingMembers: [user1, user4],\n+┊   ┊103┊      messages: [\n+┊   ┊104┊        new Message({\n+┊   ┊105┊          sender: user1,\n+┊   ┊106┊          content: \"Hey, it's me\",\n+┊   ┊107┊          createdAt: moment()\n+┊   ┊108┊            .subtract(2, 'hours')\n+┊   ┊109┊            .toDate(),\n+┊   ┊110┊          type: MessageType.TEXT,\n+┊   ┊111┊          holders: [user1, user4],\n+┊   ┊112┊        }),\n+┊   ┊113┊      ],\n+┊   ┊114┊    })\n+┊   ┊115┊  )\n+┊   ┊116┊\n+┊   ┊117┊  await connection.manager.save(\n+┊   ┊118┊    new Chat({\n+┊   ┊119┊      allTimeMembers: [user1, user5],\n+┊   ┊120┊      listingMembers: [user1, user5],\n+┊   ┊121┊      messages: [\n+┊   ┊122┊        new Message({\n+┊   ┊123┊          sender: user1,\n+┊   ┊124┊          content: 'I should buy a boat',\n+┊   ┊125┊          createdAt: moment()\n+┊   ┊126┊            .subtract(1, 'days')\n+┊   ┊127┊            .toDate(),\n+┊   ┊128┊          type: MessageType.TEXT,\n+┊   ┊129┊          holders: [user1, user5],\n+┊   ┊130┊        }),\n+┊   ┊131┊        new Message({\n+┊   ┊132┊          sender: user1,\n+┊   ┊133┊          content: 'You still there?',\n+┊   ┊134┊          createdAt: moment()\n+┊   ┊135┊            .subtract(1, 'days')\n+┊   ┊136┊            .add(16, 'hours')\n+┊   ┊137┊            .toDate(),\n+┊   ┊138┊          type: MessageType.TEXT,\n+┊   ┊139┊          holders: [user1, user5],\n+┊   ┊140┊        }),\n+┊   ┊141┊      ],\n+┊   ┊142┊    })\n+┊   ┊143┊  )\n+┊   ┊144┊\n+┊   ┊145┊  await connection.manager.save(\n+┊   ┊146┊    new Chat({\n+┊   ┊147┊      allTimeMembers: [user3, user4],\n+┊   ┊148┊      listingMembers: [user3, user4],\n+┊   ┊149┊      messages: [\n+┊   ┊150┊        new Message({\n+┊   ┊151┊          sender: user3,\n+┊   ┊152┊          content: 'Look at my mukluks!',\n+┊   ┊153┊          createdAt: moment()\n+┊   ┊154┊            .subtract(4, 'days')\n+┊   ┊155┊            .toDate(),\n+┊   ┊156┊          type: MessageType.TEXT,\n+┊   ┊157┊          holders: [user3, user4],\n+┊   ┊158┊        }),\n+┊   ┊159┊      ],\n+┊   ┊160┊    })\n+┊   ┊161┊  )\n+┊   ┊162┊\n+┊   ┊163┊  await connection.manager.save(\n+┊   ┊164┊    new Chat({\n+┊   ┊165┊      allTimeMembers: [user2, user5],\n+┊   ┊166┊      listingMembers: [user2, user5],\n+┊   ┊167┊      messages: [\n+┊   ┊168┊        new Message({\n+┊   ┊169┊          sender: user2,\n+┊   ┊170┊          content: 'This is wicked good ice cream.',\n+┊   ┊171┊          createdAt: moment()\n+┊   ┊172┊            .subtract(2, 'weeks')\n+┊   ┊173┊            .toDate(),\n+┊   ┊174┊          type: MessageType.TEXT,\n+┊   ┊175┊          holders: [user2, user5],\n+┊   ┊176┊        }),\n+┊   ┊177┊        new Message({\n+┊   ┊178┊          sender: user5,\n+┊   ┊179┊          content: 'Love it!',\n+┊   ┊180┊          createdAt: moment()\n+┊   ┊181┊            .subtract(2, 'weeks')\n+┊   ┊182┊            .add(10, 'minutes')\n+┊   ┊183┊            .toDate(),\n+┊   ┊184┊          type: MessageType.TEXT,\n+┊   ┊185┊          holders: [user2, user5],\n+┊   ┊186┊        }),\n+┊   ┊187┊      ],\n+┊   ┊188┊    })\n+┊   ┊189┊  )\n+┊   ┊190┊\n+┊   ┊191┊  await connection.manager.save(\n+┊   ┊192┊    new Chat({\n+┊   ┊193┊      allTimeMembers: [user1, user6],\n+┊   ┊194┊      listingMembers: [user1],\n+┊   ┊195┊    })\n+┊   ┊196┊  )\n+┊   ┊197┊\n+┊   ┊198┊  await connection.manager.save(\n+┊   ┊199┊    new Chat({\n+┊   ┊200┊      allTimeMembers: [user2, user1],\n+┊   ┊201┊      listingMembers: [user2],\n+┊   ┊202┊    })\n+┊   ┊203┊  )\n ┊ 57┊204┊\n-┊ 58┊   ┊const chats: Chat[] = [\n-┊ 59┊   ┊  {\n-┊ 60┊   ┊    id: '1',\n-┊ 61┊   ┊    name: null,\n-┊ 62┊   ┊    picture: null,\n-┊ 63┊   ┊    allTimeMemberIds: ['1', '3'],\n-┊ 64┊   ┊    listingMemberIds: ['1', '3'],\n-┊ 65┊   ┊    ownerId: null,\n-┊ 66┊   ┊    messages: [\n-┊ 67┊   ┊      {\n-┊ 68┊   ┊        id: '1',\n-┊ 69┊   ┊        chatId: '1',\n-┊ 70┊   ┊        senderId: '1',\n-┊ 71┊   ┊        content: 'You on your way?',\n-┊ 72┊   ┊        createdAt: moment()\n-┊ 73┊   ┊          .subtract(1, 'hours')\n-┊ 74┊   ┊          .unix(),\n-┊ 75┊   ┊        type: MessageType.TEXT,\n-┊ 76┊   ┊        holderIds: ['1', '3'],\n-┊ 77┊   ┊      },\n-┊ 78┊   ┊      {\n-┊ 79┊   ┊        id: '2',\n-┊ 80┊   ┊        chatId: '1',\n-┊ 81┊   ┊        senderId: '3',\n-┊ 82┊   ┊        content: 'Yep!',\n-┊ 83┊   ┊        createdAt: moment()\n-┊ 84┊   ┊          .subtract(1, 'hours')\n-┊ 85┊   ┊          .add(5, 'minutes')\n-┊ 86┊   ┊          .unix(),\n-┊ 87┊   ┊        type: MessageType.TEXT,\n-┊ 88┊   ┊        holderIds: ['3', '1'],\n-┊ 89┊   ┊      },\n-┊ 90┊   ┊    ],\n-┊ 91┊   ┊  },\n-┊ 92┊   ┊  {\n-┊ 93┊   ┊    id: '2',\n-┊ 94┊   ┊    name: null,\n-┊ 95┊   ┊    picture: null,\n-┊ 96┊   ┊    allTimeMemberIds: ['1', '4'],\n-┊ 97┊   ┊    listingMemberIds: ['1', '4'],\n-┊ 98┊   ┊    ownerId: null,\n-┊ 99┊   ┊    messages: [\n-┊100┊   ┊      {\n-┊101┊   ┊        id: '1',\n-┊102┊   ┊        chatId: '2',\n-┊103┊   ┊        senderId: '1',\n-┊104┊   ┊        content: \"Hey, it's me\",\n-┊105┊   ┊        createdAt: moment()\n-┊106┊   ┊          .subtract(2, 'hours')\n-┊107┊   ┊          .unix(),\n-┊108┊   ┊        type: MessageType.TEXT,\n-┊109┊   ┊        holderIds: ['1', '4'],\n-┊110┊   ┊      },\n-┊111┊   ┊    ],\n-┊112┊   ┊  },\n-┊113┊   ┊  {\n-┊114┊   ┊    id: '3',\n-┊115┊   ┊    name: null,\n-┊116┊   ┊    picture: null,\n-┊117┊   ┊    allTimeMemberIds: ['1', '5'],\n-┊118┊   ┊    listingMemberIds: ['1', '5'],\n-┊119┊   ┊    ownerId: null,\n-┊120┊   ┊    messages: [\n-┊121┊   ┊      {\n-┊122┊   ┊        id: '1',\n-┊123┊   ┊        chatId: '3',\n-┊124┊   ┊        senderId: '1',\n-┊125┊   ┊        content: 'I should buy a boat',\n-┊126┊   ┊        createdAt: moment()\n-┊127┊   ┊          .subtract(1, 'days')\n-┊128┊   ┊          .unix(),\n-┊129┊   ┊        type: MessageType.TEXT,\n-┊130┊   ┊        holderIds: ['1', '5'],\n-┊131┊   ┊      },\n-┊132┊   ┊      {\n-┊133┊   ┊        id: '2',\n-┊134┊   ┊        chatId: '3',\n-┊135┊   ┊        senderId: '1',\n-┊136┊   ┊        content: 'You still there?',\n-┊137┊   ┊        createdAt: moment()\n-┊138┊   ┊          .subtract(1, 'days')\n-┊139┊   ┊          .add(16, 'hours')\n-┊140┊   ┊          .unix(),\n-┊141┊   ┊        type: MessageType.TEXT,\n-┊142┊   ┊        holderIds: ['1', '5'],\n-┊143┊   ┊      },\n-┊144┊   ┊    ],\n-┊145┊   ┊  },\n-┊146┊   ┊  {\n-┊147┊   ┊    id: '4',\n-┊148┊   ┊    name: null,\n-┊149┊   ┊    picture: null,\n-┊150┊   ┊    allTimeMemberIds: ['3', '4'],\n-┊151┊   ┊    listingMemberIds: ['3', '4'],\n-┊152┊   ┊    ownerId: null,\n-┊153┊   ┊    messages: [\n-┊154┊   ┊      {\n-┊155┊   ┊        id: '1',\n-┊156┊   ┊        chatId: '4',\n-┊157┊   ┊        senderId: '3',\n-┊158┊   ┊        content: 'Look at my mukluks!',\n-┊159┊   ┊        createdAt: moment()\n-┊160┊   ┊          .subtract(4, 'days')\n-┊161┊   ┊          .unix(),\n-┊162┊   ┊        type: MessageType.TEXT,\n-┊163┊   ┊        holderIds: ['3', '4'],\n-┊164┊   ┊      },\n-┊165┊   ┊    ],\n-┊166┊   ┊  },\n-┊167┊   ┊  {\n-┊168┊   ┊    id: '5',\n-┊169┊   ┊    name: null,\n-┊170┊   ┊    picture: null,\n-┊171┊   ┊    allTimeMemberIds: ['2', '5'],\n-┊172┊   ┊    listingMemberIds: ['2', '5'],\n-┊173┊   ┊    ownerId: null,\n-┊174┊   ┊    messages: [\n-┊175┊   ┊      {\n-┊176┊   ┊        id: '1',\n-┊177┊   ┊        chatId: '5',\n-┊178┊   ┊        senderId: '2',\n-┊179┊   ┊        content: 'This is wicked good ice cream.',\n-┊180┊   ┊        createdAt: moment()\n-┊181┊   ┊          .subtract(2, 'weeks')\n-┊182┊   ┊          .unix(),\n-┊183┊   ┊        type: MessageType.TEXT,\n-┊184┊   ┊        holderIds: ['2', '5'],\n-┊185┊   ┊      },\n-┊186┊   ┊      {\n-┊187┊   ┊        id: '2',\n-┊188┊   ┊        chatId: '6',\n-┊189┊   ┊        senderId: '5',\n-┊190┊   ┊        content: 'Love it!',\n-┊191┊   ┊        createdAt: moment()\n-┊192┊   ┊          .subtract(2, 'weeks')\n-┊193┊   ┊          .add(10, 'minutes')\n-┊194┊   ┊          .unix(),\n-┊195┊   ┊        type: MessageType.TEXT,\n-┊196┊   ┊        holderIds: ['5', '2'],\n-┊197┊   ┊      },\n-┊198┊   ┊    ],\n-┊199┊   ┊  },\n-┊200┊   ┊  {\n-┊201┊   ┊    id: '6',\n-┊202┊   ┊    name: null,\n-┊203┊   ┊    picture: null,\n-┊204┊   ┊    allTimeMemberIds: ['1', '6'],\n-┊205┊   ┊    listingMemberIds: ['1'],\n-┊206┊   ┊    ownerId: null,\n-┊207┊   ┊    messages: [],\n-┊208┊   ┊  },\n-┊209┊   ┊  {\n-┊210┊   ┊    id: '7',\n-┊211┊   ┊    name: null,\n-┊212┊   ┊    picture: null,\n-┊213┊   ┊    allTimeMemberIds: ['2', '1'],\n-┊214┊   ┊    listingMemberIds: ['2'],\n-┊215┊   ┊    ownerId: null,\n-┊216┊   ┊    messages: [],\n-┊217┊   ┊  },\n-┊218┊   ┊  {\n-┊219┊   ┊    id: '8',\n-┊220┊   ┊    name: 'A user 0 group',\n-┊221┊   ┊    picture: 'https://randomuser.me/api/portraits/thumb/lego/1.jpg',\n-┊222┊   ┊    allTimeMemberIds: ['1', '3', '4', '6'],\n-┊223┊   ┊    listingMemberIds: ['1', '3', '4', '6'],\n-┊224┊   ┊    ownerId: '1',\n-┊225┊   ┊    messages: [\n-┊226┊   ┊      {\n-┊227┊   ┊        id: '1',\n-┊228┊   ┊        chatId: '8',\n-┊229┊   ┊        senderId: '1',\n-┊230┊   ┊        content: 'I made a group',\n-┊231┊   ┊        createdAt: moment()\n-┊232┊   ┊          .subtract(2, 'weeks')\n-┊233┊   ┊          .unix(),\n-┊234┊   ┊        type: MessageType.TEXT,\n-┊235┊   ┊        holderIds: ['1', '3', '4', '6'],\n-┊236┊   ┊      },\n-┊237┊   ┊      {\n-┊238┊   ┊        id: '2',\n-┊239┊   ┊        chatId: '8',\n-┊240┊   ┊        senderId: '1',\n-┊241┊   ┊        content: 'Ops, user 3 was not supposed to be here',\n-┊242┊   ┊        createdAt: moment()\n-┊243┊   ┊          .subtract(2, 'weeks')\n-┊244┊   ┊          .add(2, 'minutes')\n-┊245┊   ┊          .unix(),\n-┊246┊   ┊        type: MessageType.TEXT,\n-┊247┊   ┊        holderIds: ['1', '4', '6'],\n-┊248┊   ┊      },\n-┊249┊   ┊      {\n-┊250┊   ┊        id: '3',\n-┊251┊   ┊        chatId: '8',\n-┊252┊   ┊        senderId: '4',\n-┊253┊   ┊        content: 'Awesome!',\n-┊254┊   ┊        createdAt: moment()\n-┊255┊   ┊          .subtract(2, 'weeks')\n-┊256┊   ┊          .add(10, 'minutes')\n-┊257┊   ┊          .unix(),\n-┊258┊   ┊        type: MessageType.TEXT,\n-┊259┊   ┊        holderIds: ['1', '4', '6'],\n-┊260┊   ┊      },\n-┊261┊   ┊    ],\n-┊262┊   ┊  },\n-┊263┊   ┊  {\n-┊264┊   ┊    id: '9',\n-┊265┊   ┊    name: 'A user 5 group',\n-┊266┊   ┊    picture: null,\n-┊267┊   ┊    allTimeMemberIds: ['6', '3'],\n-┊268┊   ┊    listingMemberIds: ['6', '3'],\n-┊269┊   ┊    ownerId: '6',\n-┊270┊   ┊    messages: [],\n-┊271┊   ┊  },\n-┊272┊   ┊]\n+┊   ┊205┊  await connection.manager.save(\n+┊   ┊206┊    new Chat({\n+┊   ┊207┊      name: \"Ethan's group\",\n+┊   ┊208┊      picture: 'https://randomuser.me/api/portraits/thumb/lego/1.jpg',\n+┊   ┊209┊      allTimeMembers: [user1, user3, user4, user6],\n+┊   ┊210┊      listingMembers: [user1, user3, user4, user6],\n+┊   ┊211┊      owner: user1,\n+┊   ┊212┊      messages: [\n+┊   ┊213┊        new Message({\n+┊   ┊214┊          sender: user1,\n+┊   ┊215┊          content: 'I made a group',\n+┊   ┊216┊          createdAt: moment()\n+┊   ┊217┊            .subtract(2, 'weeks')\n+┊   ┊218┊            .toDate(),\n+┊   ┊219┊          type: MessageType.TEXT,\n+┊   ┊220┊          holders: [user1, user3, user4, user6],\n+┊   ┊221┊        }),\n+┊   ┊222┊        new Message({\n+┊   ┊223┊          sender: user1,\n+┊   ┊224┊          content: 'Ops, Avery was not supposed to be here',\n+┊   ┊225┊          createdAt: moment()\n+┊   ┊226┊            .subtract(2, 'weeks')\n+┊   ┊227┊            .add(2, 'minutes')\n+┊   ┊228┊            .toDate(),\n+┊   ┊229┊          type: MessageType.TEXT,\n+┊   ┊230┊          holders: [user1, user4, user6],\n+┊   ┊231┊        }),\n+┊   ┊232┊        new Message({\n+┊   ┊233┊          sender: user4,\n+┊   ┊234┊          content: 'Awesome!',\n+┊   ┊235┊          createdAt: moment()\n+┊   ┊236┊            .subtract(2, 'weeks')\n+┊   ┊237┊            .add(10, 'minutes')\n+┊   ┊238┊            .toDate(),\n+┊   ┊239┊          type: MessageType.TEXT,\n+┊   ┊240┊          holders: [user1, user4, user6],\n+┊   ┊241┊        }),\n+┊   ┊242┊      ],\n+┊   ┊243┊    })\n+┊   ┊244┊  )\n ┊273┊245┊\n-┊274┊   ┊export default { users, chats }\n+┊   ┊246┊  await connection.manager.save(\n+┊   ┊247┊    new Chat({\n+┊   ┊248┊      name: \"Ray's group\",\n+┊   ┊249┊      allTimeMembers: [user3, user6],\n+┊   ┊250┊      listingMembers: [user3, user6],\n+┊   ┊251┊      owner: user6,\n+┊   ┊252┊    })\n+┊   ┊253┊  )\n+┊   ┊254┊}\n```\n\n[}]: #\n\nInstead of adding the sample data any time we start the server, we will use an `--add-sample-data` flag which will be provided to the server's process:\n\n[{]: <helper> (diffStep 1.6 files=\"index.ts\" module=\"server\")\n\n#### [Step 1.6: Implement resolvers against TypeORM](https://github.com/Urigo/WhatsApp-Clone-Server/commit/d4230cc)\n\n##### Changed index.ts\n```diff\n@@ -1,3 +1,4 @@\n+┊ ┊1┊import 'reflect-metadata'\n ┊1┊2┊import { ApolloServer } from 'apollo-server-express'\n ┊2┊3┊import bodyParser from 'body-parser'\n ┊3┊4┊import cors from 'cors'\n```\n```diff\n@@ -5,11 +6,16 @@\n ┊ 5┊ 6┊import gql from 'graphql-tag'\n ┊ 6┊ 7┊import { createServer } from 'http'\n ┊ 7┊ 8┊import { createConnection } from 'typeorm'\n+┊  ┊ 9┊import { addSampleData } from './db'\n ┊ 8┊10┊import schema from './schema'\n ┊ 9┊11┊\n ┊10┊12┊const PORT = 4000\n ┊11┊13┊\n ┊12┊14┊createConnection().then((connection) => {\n+┊  ┊15┊  if (process.argv.includes('--add-sample-data')) {\n+┊  ┊16┊    addSampleData(connection)\n+┊  ┊17┊  }\n+┊  ┊18┊\n ┊13┊19┊  const app = express()\n ┊14┊20┊\n ┊15┊21┊  app.use(cors())\n```\n```diff\n@@ -17,7 +23,10 @@\n ┊17┊23┊\n ┊18┊24┊  const apollo = new ApolloServer({\n ┊19┊25┊    schema,\n-┊20┊  ┊    context: () => ({ connection }),\n+┊  ┊26┊    context: () => ({\n+┊  ┊27┊      connection,\n+┊  ┊28┊      currentUser: { id: '1' },\n+┊  ┊29┊    }),\n ┊21┊30┊  })\n ┊22┊31┊\n ┊23┊32┊  apollo.applyMiddleware({\n```\n\n[}]: #\n\n> More about processes can be read [here](https://medium.com/the-guild/getting-to-know-nodes-child-process-module-8ed63038f3fa).\n\nMost Apollo-server implementations will assemble the GraphQL schema by importing a bunch of resolvers from different modules, if not having everything in a single place. This often times leads to a lot of problems as maintenance becomes harder the bigger the server gets, especially if we don't have a defined structure. Instead of going with that approach, we will be using [GraphQL-Modules](https://graphql-modules.com) (GQLModules, in short).\n\nThe idea behind GQLModules is to implement the Separation of Concerns design pattern in GraphQL, and to allow you to write simple modules that only do what they need to. This way it's easier to write, maintain and test. You should get a better understanding of GQLModules as we go further with this tutorial.\n\nTo setup GQLModules we will install a couple of packages:\n\n    $ yarn add @graphql-modules/core@0.4.2 @graphql-modules/sonar@0.4.2 @graphql-modules/di@0.4.2\n\n- The `sonar` package will be sued to detect `.graphql` files within our server.\n- The `di` package is responsible for dependencies injection.\n\nNow we're gonna implement a dedicated GraphQL module for each of our entity:\n\n[{]: <helper> (diffStep 1.7 files=\"modules/\\(utils|auth|chat|message|user\\)\" module=\"server\")\n\n#### [Step 1.7: Transition to GraphQL Modules](https://github.com/Urigo/WhatsApp-Clone-Server/commit/b4376a5)\n\n##### Added modules&#x2F;auth&#x2F;index.ts\n```diff\n@@ -0,0 +1,12 @@\n+┊  ┊ 1┊import { GraphQLModule } from '@graphql-modules/core'\n+┊  ┊ 2┊import { Connection } from 'typeorm'\n+┊  ┊ 3┊import { AuthProvider } from './providers/auth.provider'\n+┊  ┊ 4┊\n+┊  ┊ 5┊export const AuthModule = new GraphQLModule({\n+┊  ┊ 6┊  name: 'Auth',\n+┊  ┊ 7┊  providers: ({ config: { connection } }) => [\n+┊  ┊ 8┊    { provide: Connection, useValue: connection },\n+┊  ┊ 9┊    AuthProvider,\n+┊  ┊10┊  ],\n+┊  ┊11┊  configRequired: true,\n+┊  ┊12┊})\n```\n\n##### Added modules&#x2F;auth&#x2F;providers&#x2F;auth.provider.ts\n```diff\n@@ -0,0 +1,27 @@\n+┊  ┊ 1┊import { OnRequest } from '@graphql-modules/core'\n+┊  ┊ 2┊import { Injectable } from '@graphql-modules/di'\n+┊  ┊ 3┊import { Connection } from 'typeorm'\n+┊  ┊ 4┊import { User } from '../../../entity/user'\n+┊  ┊ 5┊\n+┊  ┊ 6┊@Injectable()\n+┊  ┊ 7┊export class AuthProvider implements OnRequest {\n+┊  ┊ 8┊  currentUser: User\n+┊  ┊ 9┊\n+┊  ┊10┊  constructor(\n+┊  ┊11┊    private connection: Connection\n+┊  ┊12┊  ) {}\n+┊  ┊13┊\n+┊  ┊14┊  async onRequest() {\n+┊  ┊15┊    if (this.currentUser) return\n+┊  ┊16┊\n+┊  ┊17┊\n+┊  ┊18┊    const currentUser = await this.connection\n+┊  ┊19┊      .createQueryBuilder(User, 'user')\n+┊  ┊20┊      .getOne()\n+┊  ┊21┊\n+┊  ┊22┊    if (currentUser) {\n+┊  ┊23┊      console.log(currentUser)\n+┊  ┊24┊      this.currentUser = currentUser\n+┊  ┊25┊    }\n+┊  ┊26┊  }\n+┊  ┊27┊}\n```\n\n##### Added modules&#x2F;chat&#x2F;index.ts\n```diff\n@@ -0,0 +1,16 @@\n+┊  ┊ 1┊import { GraphQLModule } from '@graphql-modules/core'\n+┊  ┊ 2┊import { ProviderScope } from '@graphql-modules/di'\n+┊  ┊ 3┊import { loadResolversFiles, loadSchemaFiles } from '@graphql-modules/sonar'\n+┊  ┊ 4┊import { AuthModule } from '../auth'\n+┊  ┊ 5┊import { UserModule } from '../user'\n+┊  ┊ 6┊import { UtilsModule } from '../utils.module'\n+┊  ┊ 7┊import { ChatProvider } from './providers/chat.provider'\n+┊  ┊ 8┊\n+┊  ┊ 9┊export const ChatModule = new GraphQLModule({\n+┊  ┊10┊  name: 'Chat',\n+┊  ┊11┊  imports: [AuthModule, UtilsModule, UserModule],\n+┊  ┊12┊  providers: [ChatProvider],\n+┊  ┊13┊  defaultProviderScope: ProviderScope.Session,\n+┊  ┊14┊  typeDefs: loadSchemaFiles(__dirname + '/schema/'),\n+┊  ┊15┊  resolvers: loadResolversFiles(__dirname + '/resolvers/'),\n+┊  ┊16┊})\n```\n\n##### Added modules&#x2F;chat&#x2F;providers&#x2F;chat.provider.ts\n```diff\n@@ -0,0 +1,111 @@\n+┊   ┊  1┊import { Injectable } from '@graphql-modules/di'\n+┊   ┊  2┊import { Connection } from 'typeorm'\n+┊   ┊  3┊import { Chat } from '../../../entity/chat'\n+┊   ┊  4┊import { User } from '../../../entity/user'\n+┊   ┊  5┊import { AuthProvider } from '../../auth/providers/auth.provider'\n+┊   ┊  6┊import { UserProvider } from '../../user/providers/user.provider'\n+┊   ┊  7┊\n+┊   ┊  8┊@Injectable()\n+┊   ┊  9┊export class ChatProvider {\n+┊   ┊ 10┊  constructor(\n+┊   ┊ 11┊    private connection: Connection,\n+┊   ┊ 12┊    private userProvider: UserProvider,\n+┊   ┊ 13┊    private authProvider: AuthProvider\n+┊   ┊ 14┊  ) {}\n+┊   ┊ 15┊\n+┊   ┊ 16┊  repository = this.connection.getRepository(Chat)\n+┊   ┊ 17┊  currentUser = this.authProvider.currentUser\n+┊   ┊ 18┊\n+┊   ┊ 19┊  createQueryBuilder() {\n+┊   ┊ 20┊    return this.connection.createQueryBuilder(Chat, 'chat')\n+┊   ┊ 21┊  }\n+┊   ┊ 22┊\n+┊   ┊ 23┊  async getChats() {\n+┊   ┊ 24┊    return this.createQueryBuilder()\n+┊   ┊ 25┊      .leftJoin('chat.listingMembers', 'listingMembers')\n+┊   ┊ 26┊      .where('listingMembers.id = :id', { id: this.currentUser.id })\n+┊   ┊ 27┊      .orderBy('chat.createdAt', 'DESC')\n+┊   ┊ 28┊      .getMany()\n+┊   ┊ 29┊  }\n+┊   ┊ 30┊\n+┊   ┊ 31┊  async getChat(chatId: string) {\n+┊   ┊ 32┊    const chat = await this.createQueryBuilder()\n+┊   ┊ 33┊      .whereInIds(chatId)\n+┊   ┊ 34┊      .getOne()\n+┊   ┊ 35┊\n+┊   ┊ 36┊    return chat || null\n+┊   ┊ 37┊  }\n+┊   ┊ 38┊\n+┊   ┊ 39┊  async getChatName(chat: Chat) {\n+┊   ┊ 40┊    if (chat.name) {\n+┊   ┊ 41┊      return chat.name\n+┊   ┊ 42┊    }\n+┊   ┊ 43┊\n+┊   ┊ 44┊    const user = await this.userProvider\n+┊   ┊ 45┊      .createQueryBuilder()\n+┊   ┊ 46┊      .where('user.id != :userId', { userId: this.currentUser.id })\n+┊   ┊ 47┊      .innerJoin(\n+┊   ┊ 48┊        'user.allTimeMemberChats',\n+┊   ┊ 49┊        'allTimeMemberChats',\n+┊   ┊ 50┊        'allTimeMemberChats.id = :chatId',\n+┊   ┊ 51┊        { chatId: chat.id }\n+┊   ┊ 52┊      )\n+┊   ┊ 53┊      .getOne()\n+┊   ┊ 54┊\n+┊   ┊ 55┊    return (user && user.name) || null\n+┊   ┊ 56┊  }\n+┊   ┊ 57┊\n+┊   ┊ 58┊  async getChatPicture(chat: Chat) {\n+┊   ┊ 59┊    if (chat.name) {\n+┊   ┊ 60┊      return chat.picture\n+┊   ┊ 61┊    }\n+┊   ┊ 62┊\n+┊   ┊ 63┊    const user = await this.userProvider\n+┊   ┊ 64┊      .createQueryBuilder()\n+┊   ┊ 65┊      .where('user.id != :userId', { userId: this.currentUser.id })\n+┊   ┊ 66┊      .innerJoin(\n+┊   ┊ 67┊        'user.allTimeMemberChats',\n+┊   ┊ 68┊        'allTimeMemberChats',\n+┊   ┊ 69┊        'allTimeMemberChats.id = :chatId',\n+┊   ┊ 70┊        { chatId: chat.id }\n+┊   ┊ 71┊      )\n+┊   ┊ 72┊      .getOne()\n+┊   ┊ 73┊\n+┊   ┊ 74┊    return user ? user.picture : null\n+┊   ┊ 75┊  }\n+┊   ┊ 76┊\n+┊   ┊ 77┊  getChatAllTimeMembers(chat: Chat) {\n+┊   ┊ 78┊    return this.userProvider\n+┊   ┊ 79┊      .createQueryBuilder()\n+┊   ┊ 80┊      .innerJoin(\n+┊   ┊ 81┊        'user.listingMemberChats',\n+┊   ┊ 82┊        'listingMemberChats',\n+┊   ┊ 83┊        'listingMemberChats.id = :chatId',\n+┊   ┊ 84┊        { chatId: chat.id }\n+┊   ┊ 85┊      )\n+┊   ┊ 86┊      .getMany()\n+┊   ┊ 87┊  }\n+┊   ┊ 88┊\n+┊   ┊ 89┊  getChatListingMembers(chat: Chat) {\n+┊   ┊ 90┊    return this.userProvider\n+┊   ┊ 91┊      .createQueryBuilder()\n+┊   ┊ 92┊      .innerJoin(\n+┊   ┊ 93┊        'user.listingMemberChats',\n+┊   ┊ 94┊        'listingMemberChats',\n+┊   ┊ 95┊        'listingMemberChats.id = :chatId',\n+┊   ┊ 96┊        { chatId: chat.id }\n+┊   ┊ 97┊      )\n+┊   ┊ 98┊      .getMany()\n+┊   ┊ 99┊  }\n+┊   ┊100┊\n+┊   ┊101┊  async getChatOwner(chat: Chat) {\n+┊   ┊102┊    const owner = await this.userProvider\n+┊   ┊103┊      .createQueryBuilder()\n+┊   ┊104┊      .innerJoin('user.ownerChats', 'ownerChats', 'ownerChats.id = :chatId', {\n+┊   ┊105┊        chatId: chat.id,\n+┊   ┊106┊      })\n+┊   ┊107┊      .getOne()\n+┊   ┊108┊\n+┊   ┊109┊    return owner || null\n+┊   ┊110┊  }\n+┊   ┊111┊}\n```\n\n##### Added modules&#x2F;chat&#x2F;resolvers&#x2F;resolvers.ts\n```diff\n@@ -0,0 +1,19 @@\n+┊  ┊ 1┊import { ModuleContext } from '@graphql-modules/core'\n+┊  ┊ 2┊import { IResolvers } from '../../../types'\n+┊  ┊ 3┊import { ChatProvider } from '../providers/chat.provider'\n+┊  ┊ 4┊\n+┊  ┊ 5┊export default {\n+┊  ┊ 6┊  Query: {\n+┊  ┊ 7┊    chats: (obj, args, { injector }) => injector.get(ChatProvider).getChats(),\n+┊  ┊ 8┊    chat: (obj, { chatId }, { injector }) => injector.get(ChatProvider).getChat(chatId),\n+┊  ┊ 9┊  },\n+┊  ┊10┊  Chat: {\n+┊  ┊11┊    name: (chat, args, { injector }) => injector.get(ChatProvider).getChatName(chat),\n+┊  ┊12┊    picture: (chat, args, { injector }) => injector.get(ChatProvider).getChatPicture(chat),\n+┊  ┊13┊    allTimeMembers: (chat, args, { injector }) =>\n+┊  ┊14┊      injector.get(ChatProvider).getChatAllTimeMembers(chat),\n+┊  ┊15┊    listingMembers: (chat, args, { injector }) =>\n+┊  ┊16┊      injector.get(ChatProvider).getChatListingMembers(chat),\n+┊  ┊17┊    owner: (chat, args, { injector }) => injector.get(ChatProvider).getChatOwner(chat),\n+┊  ┊18┊  },\n+┊  ┊19┊} as IResolvers\n```\n\n##### Added modules&#x2F;chat&#x2F;schema&#x2F;typeDefs.graphql\n```diff\n@@ -0,0 +1,19 @@\n+┊  ┊ 1┊type Query {\n+┊  ┊ 2┊  chats: [Chat!]!\n+┊  ┊ 3┊  chat(chatId: ID!): Chat\n+┊  ┊ 4┊}\n+┊  ┊ 5┊\n+┊  ┊ 6┊type Chat {\n+┊  ┊ 7┊  #May be a chat or a group\n+┊  ┊ 8┊  id: ID!\n+┊  ┊ 9┊  #Computed for chats\n+┊  ┊10┊  name: String\n+┊  ┊11┊  #Computed for chats\n+┊  ┊12┊  picture: String\n+┊  ┊13┊  #All members, current and past ones.\n+┊  ┊14┊  allTimeMembers: [User!]!\n+┊  ┊15┊  #Whoever gets the chat listed. For groups includes past members who still didn't delete the group.\n+┊  ┊16┊  listingMembers: [User!]!\n+┊  ┊17┊  #If null the group is read-only. Null for chats.\n+┊  ┊18┊  owner: User\n+┊  ┊19┊}\n```\n\n##### Added modules&#x2F;message&#x2F;index.ts\n```diff\n@@ -0,0 +1,24 @@\n+┊  ┊ 1┊import { GraphQLModule } from '@graphql-modules/core'\n+┊  ┊ 2┊import { ProviderScope } from '@graphql-modules/di'\n+┊  ┊ 3┊import { loadResolversFiles, loadSchemaFiles } from '@graphql-modules/sonar'\n+┊  ┊ 4┊import { AuthModule } from '../auth'\n+┊  ┊ 5┊import { ChatModule } from '../chat'\n+┊  ┊ 6┊import { UserModule } from '../user'\n+┊  ┊ 7┊import { UtilsModule } from '../utils.module'\n+┊  ┊ 8┊import { MessageProvider } from './providers/message.provider'\n+┊  ┊ 9┊\n+┊  ┊10┊export const MessageModule = new GraphQLModule({\n+┊  ┊11┊  name: 'Message',\n+┊  ┊12┊  imports: [\n+┊  ┊13┊    AuthModule,\n+┊  ┊14┊    UtilsModule,\n+┊  ┊15┊    UserModule,\n+┊  ┊16┊    ChatModule,\n+┊  ┊17┊  ],\n+┊  ┊18┊  providers: [\n+┊  ┊19┊    MessageProvider,\n+┊  ┊20┊  ],\n+┊  ┊21┊  defaultProviderScope: ProviderScope.Session,\n+┊  ┊22┊  typeDefs: loadSchemaFiles(__dirname + '/schema/'),\n+┊  ┊23┊  resolvers: loadResolversFiles(__dirname + '/resolvers/'),\n+┊  ┊24┊})\n```\n\n##### Added modules&#x2F;message&#x2F;providers&#x2F;message.provider.ts\n```diff\n@@ -0,0 +1,142 @@\n+┊   ┊  1┊import { Injectable } from '@graphql-modules/di'\n+┊   ┊  2┊import { Connection } from 'typeorm'\n+┊   ┊  3┊import { MessageType } from '../../../db'\n+┊   ┊  4┊import { Chat } from '../../../entity/chat'\n+┊   ┊  5┊import { Message } from '../../../entity/message'\n+┊   ┊  6┊import { User } from '../../../entity/user'\n+┊   ┊  7┊import { AuthProvider } from '../../auth/providers/auth.provider'\n+┊   ┊  8┊import { ChatProvider } from '../../chat/providers/chat.provider'\n+┊   ┊  9┊import { UserProvider } from '../../user/providers/user.provider'\n+┊   ┊ 10┊\n+┊   ┊ 11┊@Injectable()\n+┊   ┊ 12┊export class MessageProvider {\n+┊   ┊ 13┊  constructor(\n+┊   ┊ 14┊    private connection: Connection,\n+┊   ┊ 15┊    private chatProvider: ChatProvider,\n+┊   ┊ 16┊    private authProvider: AuthProvider,\n+┊   ┊ 17┊    private userProvider: UserProvider\n+┊   ┊ 18┊  ) {}\n+┊   ┊ 19┊\n+┊   ┊ 20┊  repository = this.connection.getRepository(Message)\n+┊   ┊ 21┊  currentUser = this.authProvider.currentUser\n+┊   ┊ 22┊\n+┊   ┊ 23┊  createQueryBuilder() {\n+┊   ┊ 24┊    return this.connection.createQueryBuilder(Message, 'message')\n+┊   ┊ 25┊  }\n+┊   ┊ 26┊\n+┊   ┊ 27┊  async getMessageSender(message: Message) {\n+┊   ┊ 28┊    const sender = await this.userProvider\n+┊   ┊ 29┊      .createQueryBuilder()\n+┊   ┊ 30┊      .innerJoin('user.senderMessages', 'senderMessages', 'senderMessages.id = :messageId', {\n+┊   ┊ 31┊        messageId: message.id,\n+┊   ┊ 32┊      })\n+┊   ┊ 33┊      .getOne()\n+┊   ┊ 34┊\n+┊   ┊ 35┊    if (!sender) {\n+┊   ┊ 36┊      throw new Error(`Message must have a sender.`)\n+┊   ┊ 37┊    }\n+┊   ┊ 38┊\n+┊   ┊ 39┊    return sender\n+┊   ┊ 40┊  }\n+┊   ┊ 41┊\n+┊   ┊ 42┊  async getMessageOwnership(message: Message) {\n+┊   ┊ 43┊    return !!(await this.userProvider\n+┊   ┊ 44┊      .createQueryBuilder()\n+┊   ┊ 45┊      .whereInIds(this.currentUser.id)\n+┊   ┊ 46┊      .innerJoin('user.senderMessages', 'senderMessages', 'senderMessages.id = :messageId', {\n+┊   ┊ 47┊        messageId: message.id,\n+┊   ┊ 48┊      })\n+┊   ┊ 49┊      .getCount())\n+┊   ┊ 50┊  }\n+┊   ┊ 51┊\n+┊   ┊ 52┊  async getMessageHolders(message: Message) {\n+┊   ┊ 53┊    return await this.userProvider\n+┊   ┊ 54┊      .createQueryBuilder()\n+┊   ┊ 55┊      .innerJoin('user.holderMessages', 'holderMessages', 'holderMessages.id = :messageId', {\n+┊   ┊ 56┊        messageId: message.id,\n+┊   ┊ 57┊      })\n+┊   ┊ 58┊      .getMany()\n+┊   ┊ 59┊  }\n+┊   ┊ 60┊\n+┊   ┊ 61┊  async getMessageChat(message: Message) {\n+┊   ┊ 62┊    const chat = await this.chatProvider\n+┊   ┊ 63┊      .createQueryBuilder()\n+┊   ┊ 64┊      .innerJoin('chat.messages', 'messages', 'messages.id = :messageId', {\n+┊   ┊ 65┊        messageId: message.id,\n+┊   ┊ 66┊      })\n+┊   ┊ 67┊      .getOne()\n+┊   ┊ 68┊\n+┊   ┊ 69┊    if (!chat) {\n+┊   ┊ 70┊      throw new Error(`Message must have a chat.`)\n+┊   ┊ 71┊    }\n+┊   ┊ 72┊\n+┊   ┊ 73┊    return chat\n+┊   ┊ 74┊  }\n+┊   ┊ 75┊\n+┊   ┊ 76┊  async getChats() {\n+┊   ┊ 77┊    const chats = await this.chatProvider\n+┊   ┊ 78┊      .createQueryBuilder()\n+┊   ┊ 79┊      .leftJoin('chat.listingMembers', 'listingMembers')\n+┊   ┊ 80┊      .where('listingMembers.id = :id', { id: this.currentUser.id })\n+┊   ┊ 81┊      .getMany()\n+┊   ┊ 82┊\n+┊   ┊ 83┊    for (let chat of chats) {\n+┊   ┊ 84┊      chat.messages = await this.getChatMessages(chat)\n+┊   ┊ 85┊    }\n+┊   ┊ 86┊\n+┊   ┊ 87┊    return chats.sort((chatA, chatB) => {\n+┊   ┊ 88┊      const dateA = chatA.messages.length\n+┊   ┊ 89┊        ? chatA.messages[chatA.messages.length - 1].createdAt\n+┊   ┊ 90┊        : chatA.createdAt\n+┊   ┊ 91┊      const dateB = chatB.messages.length\n+┊   ┊ 92┊        ? chatB.messages[chatB.messages.length - 1].createdAt\n+┊   ┊ 93┊        : chatB.createdAt\n+┊   ┊ 94┊      return dateB.valueOf() - dateA.valueOf()\n+┊   ┊ 95┊    })\n+┊   ┊ 96┊  }\n+┊   ┊ 97┊\n+┊   ┊ 98┊  async getChatMessages(chat: Chat, amount?: number) {\n+┊   ┊ 99┊    if (chat.messages) {\n+┊   ┊100┊      return amount ? chat.messages.slice(-amount) : chat.messages\n+┊   ┊101┊    }\n+┊   ┊102┊\n+┊   ┊103┊    let query = this.createQueryBuilder()\n+┊   ┊104┊      .innerJoin('message.chat', 'chat', 'chat.id = :chatId', { chatId: chat.id })\n+┊   ┊105┊      .innerJoin('message.holders', 'holders', 'holders.id = :userId', {\n+┊   ┊106┊        userId: this.currentUser.id,\n+┊   ┊107┊      })\n+┊   ┊108┊      .orderBy({ 'message.createdAt': { order: 'DESC', nulls: 'NULLS LAST' } })\n+┊   ┊109┊\n+┊   ┊110┊    if (amount) {\n+┊   ┊111┊      query = query.take(amount)\n+┊   ┊112┊    }\n+┊   ┊113┊\n+┊   ┊114┊    return (await query.getMany()).reverse()\n+┊   ┊115┊  }\n+┊   ┊116┊\n+┊   ┊117┊  async getChatLastMessage(chat: Chat) {\n+┊   ┊118┊    if (chat.messages) {\n+┊   ┊119┊      return chat.messages.length ? chat.messages[chat.messages.length - 1] : null\n+┊   ┊120┊    }\n+┊   ┊121┊\n+┊   ┊122┊    const messages = await this.getChatMessages(chat, 1)\n+┊   ┊123┊\n+┊   ┊124┊    return messages && messages.length ? messages[0] : null\n+┊   ┊125┊  }\n+┊   ┊126┊\n+┊   ┊127┊  async getChatUpdatedAt(chat: Chat) {\n+┊   ┊128┊    if (chat.messages) {\n+┊   ┊129┊      return chat.messages.length ? chat.messages[0].createdAt : null\n+┊   ┊130┊    }\n+┊   ┊131┊\n+┊   ┊132┊    const latestMessage = await this.createQueryBuilder()\n+┊   ┊133┊      .innerJoin('message.chat', 'chat', 'chat.id = :chatId', { chatId: chat.id })\n+┊   ┊134┊      .innerJoin('message.holders', 'holders', 'holders.id = :userId', {\n+┊   ┊135┊        userId: this.currentUser.id,\n+┊   ┊136┊      })\n+┊   ┊137┊      .orderBy({ 'message.createdAt': 'DESC' })\n+┊   ┊138┊      .getOne()\n+┊   ┊139┊\n+┊   ┊140┊    return latestMessage ? latestMessage.createdAt : null\n+┊   ┊141┊  }\n+┊   ┊142┊}\n```\n\n##### Added modules&#x2F;message&#x2F;resolvers&#x2F;resolvers.ts\n```diff\n@@ -0,0 +1,29 @@\n+┊  ┊ 1┊import { ModuleContext } from '@graphql-modules/core'\n+┊  ┊ 2┊import { Message } from '../../../entity/message'\n+┊  ┊ 3┊import { IResolvers } from '../../../types'\n+┊  ┊ 4┊import { MessageProvider } from '../providers/message.provider'\n+┊  ┊ 5┊\n+┊  ┊ 6┊export default {\n+┊  ┊ 7┊  Query: {\n+┊  ┊ 8┊    // The ordering depends on the messages\n+┊  ┊ 9┊    chats: (obj, args, { injector }) => injector.get(MessageProvider).getChats(),\n+┊  ┊10┊  },\n+┊  ┊11┊  Chat: {\n+┊  ┊12┊    messages: async (chat, { amount }, { injector }) =>\n+┊  ┊13┊      injector.get(MessageProvider).getChatMessages(chat, amount || 0),\n+┊  ┊14┊    lastMessage: async (chat, args, { injector }) =>\n+┊  ┊15┊      injector.get(MessageProvider).getChatLastMessage(chat),\n+┊  ┊16┊    updatedAt: async (chat, args, { injector }) =>\n+┊  ┊17┊      injector.get(MessageProvider).getChatUpdatedAt(chat),\n+┊  ┊18┊  },\n+┊  ┊19┊  Message: {\n+┊  ┊20┊    sender: async (message, args, { injector }) =>\n+┊  ┊21┊      injector.get(MessageProvider).getMessageSender(message),\n+┊  ┊22┊    ownership: async (message, args, { injector }) =>\n+┊  ┊23┊      injector.get(MessageProvider).getMessageOwnership(message),\n+┊  ┊24┊    holders: async (message, args, { injector }) =>\n+┊  ┊25┊      injector.get(MessageProvider).getMessageHolders(message),\n+┊  ┊26┊    chat: async (message, args, { injector }) =>\n+┊  ┊27┊      injector.get(MessageProvider).getMessageChat(message),\n+┊  ┊28┊  },\n+┊  ┊29┊} as IResolvers\n```\n\n##### Added modules&#x2F;message&#x2F;schema&#x2F;typeDefs.graphql\n```diff\n@@ -0,0 +1,25 @@\n+┊  ┊ 1┊enum MessageType {\n+┊  ┊ 2┊  LOCATION\n+┊  ┊ 3┊  TEXT\n+┊  ┊ 4┊  PICTURE\n+┊  ┊ 5┊}\n+┊  ┊ 6┊\n+┊  ┊ 7┊extend type Chat {\n+┊  ┊ 8┊  messages(amount: Int): [Message]!\n+┊  ┊ 9┊  lastMessage: Message\n+┊  ┊10┊  updatedAt: Date!\n+┊  ┊11┊}\n+┊  ┊12┊\n+┊  ┊13┊type Message {\n+┊  ┊14┊  id: ID!\n+┊  ┊15┊  sender: User!\n+┊  ┊16┊  chat: Chat!\n+┊  ┊17┊  content: String!\n+┊  ┊18┊  createdAt: Date!\n+┊  ┊19┊  #FIXME: should return MessageType\n+┊  ┊20┊  type: Int!\n+┊  ┊21┊  #Whoever still holds a copy of the message. Cannot be null because the message gets deleted otherwise\n+┊  ┊22┊  holders: [User!]!\n+┊  ┊23┊  #Computed property\n+┊  ┊24┊  ownership: Boolean!\n+┊  ┊25┊}\n```\n\n##### Added modules&#x2F;user&#x2F;index.ts\n```diff\n@@ -0,0 +1,18 @@\n+┊  ┊ 1┊import { GraphQLModule } from '@graphql-modules/core'\n+┊  ┊ 2┊import { InjectFunction, ProviderScope } from '@graphql-modules/di'\n+┊  ┊ 3┊import { loadResolversFiles, loadSchemaFiles } from '@graphql-modules/sonar'\n+┊  ┊ 4┊import { AuthModule } from '../auth'\n+┊  ┊ 5┊import { UserProvider } from './providers/user.provider'\n+┊  ┊ 6┊\n+┊  ┊ 7┊export const UserModule = new GraphQLModule({\n+┊  ┊ 8┊  name: 'User',\n+┊  ┊ 9┊  imports: [\n+┊  ┊10┊    AuthModule,\n+┊  ┊11┊  ],\n+┊  ┊12┊  providers: [\n+┊  ┊13┊    UserProvider,\n+┊  ┊14┊  ],\n+┊  ┊15┊  typeDefs: loadSchemaFiles(__dirname + '/schema/'),\n+┊  ┊16┊  resolvers: loadResolversFiles(__dirname + '/resolvers/'),\n+┊  ┊17┊  defaultProviderScope: ProviderScope.Session,\n+┊  ┊18┊})\n```\n\n##### Added modules&#x2F;user&#x2F;providers&#x2F;user.provider.ts\n```diff\n@@ -0,0 +1,22 @@\n+┊  ┊ 1┊import { Injectable, ProviderScope } from '@graphql-modules/di'\n+┊  ┊ 2┊import { Connection } from 'typeorm'\n+┊  ┊ 3┊import { User } from '../../../entity/user'\n+┊  ┊ 4┊import { AuthProvider } from '../../auth/providers/auth.provider'\n+┊  ┊ 5┊\n+┊  ┊ 6┊@Injectable()\n+┊  ┊ 7┊export class UserProvider {\n+┊  ┊ 8┊  constructor(private connection: Connection, private authProvider: AuthProvider) {}\n+┊  ┊ 9┊\n+┊  ┊10┊  public repository = this.connection.getRepository(User)\n+┊  ┊11┊  private currentUser = this.authProvider.currentUser\n+┊  ┊12┊\n+┊  ┊13┊  createQueryBuilder() {\n+┊  ┊14┊    return this.connection.createQueryBuilder(User, 'user')\n+┊  ┊15┊  }\n+┊  ┊16┊\n+┊  ┊17┊  getUsers() {\n+┊  ┊18┊    return this.createQueryBuilder()\n+┊  ┊19┊      .where('user.id != :id', { id: this.currentUser.id })\n+┊  ┊20┊      .getMany()\n+┊  ┊21┊  }\n+┊  ┊22┊}\n```\n\n##### Added modules&#x2F;user&#x2F;resolvers&#x2F;resolvers.ts\n```diff\n@@ -0,0 +1,10 @@\n+┊  ┊ 1┊import { ModuleContext } from '@graphql-modules/core'\n+┊  ┊ 2┊import { User } from '../../../entity/User'\n+┊  ┊ 3┊import { IResolvers } from '../../../types'\n+┊  ┊ 4┊import { UserProvider } from '../providers/user.provider'\n+┊  ┊ 5┊\n+┊  ┊ 6┊export default {\n+┊  ┊ 7┊  Query: {\n+┊  ┊ 8┊    users: (obj, args, { injector }) => injector.get(UserProvider).getUsers(),\n+┊  ┊ 9┊  },\n+┊  ┊10┊} as IResolvers\n```\n\n##### Added modules&#x2F;user&#x2F;schema&#x2F;typeDefs.graphql\n```diff\n@@ -0,0 +1,10 @@\n+┊  ┊ 1┊type Query {\n+┊  ┊ 2┊  users: [User!]\n+┊  ┊ 3┊}\n+┊  ┊ 4┊\n+┊  ┊ 5┊type User {\n+┊  ┊ 6┊  id: ID!\n+┊  ┊ 7┊  name: String\n+┊  ┊ 8┊  picture: String\n+┊  ┊ 9┊  phone: String\n+┊  ┊10┊}\n```\n\n##### Added modules&#x2F;utils.module.ts\n```diff\n@@ -0,0 +1,12 @@\n+┊  ┊ 1┊import { GraphQLModule } from '@graphql-modules/core'\n+┊  ┊ 2┊import { GraphQLDateTime } from 'graphql-iso-date'\n+┊  ┊ 3┊\n+┊  ┊ 4┊export const UtilsModule = new GraphQLModule({\n+┊  ┊ 5┊  name: 'Utils',\n+┊  ┊ 6┊  typeDefs: `\n+┊  ┊ 7┊    scalar Date\n+┊  ┊ 8┊  `,\n+┊  ┊ 9┊  resolvers: {\n+┊  ┊10┊    Date: GraphQLDateTime,\n+┊  ┊11┊  },\n+┊  ┊12┊})\n```\n\n[}]: #\n\nThe implementation of the resolvers is NOT implemented in the resolver functions themselves, but rather in a separate provider. With this working model we can import and use the providers in various modules, not necessarily a specific one. In addition, we can mock the provider handlers, which makes it more testable.\n\nWe've also created a module called `auth`, which will be responsible for authentication in the near future. For now we use a constant for `currentUser` so we can implement the handlers as if we already have authentication.\n\nWe will use a main GQLModule called `app` to connect all our components and export a unified schema:\n\n[{]: <helper> (diffStep 1.7 files=\"modules/app\" module=\"server\")\n\n#### [Step 1.7: Transition to GraphQL Modules](https://github.com/Urigo/WhatsApp-Clone-Server/commit/b4376a5)\n\n##### Added modules&#x2F;app.module.ts\n```diff\n@@ -0,0 +1,24 @@\n+┊  ┊ 1┊import { GraphQLModule } from '@graphql-modules/core'\n+┊  ┊ 2┊import { Connection } from 'typeorm'\n+┊  ┊ 3┊import { Express } from 'express'\n+┊  ┊ 4┊import { AuthModule } from './auth'\n+┊  ┊ 5┊import { UserModule } from './user'\n+┊  ┊ 6┊import { ChatModule } from './chat'\n+┊  ┊ 7┊import { MessageModule } from './message'\n+┊  ┊ 8┊\n+┊  ┊ 9┊export interface IAppModuleConfig {\n+┊  ┊10┊  connection: Connection;\n+┊  ┊11┊}\n+┊  ┊12┊\n+┊  ┊13┊export const AppModule = new GraphQLModule<IAppModuleConfig>({\n+┊  ┊14┊  name: 'App',\n+┊  ┊15┊  imports: ({ config: { connection } }) => [\n+┊  ┊16┊    AuthModule.forRoot({\n+┊  ┊17┊      connection,\n+┊  ┊18┊    }),\n+┊  ┊19┊    UserModule,\n+┊  ┊20┊    ChatModule,\n+┊  ┊21┊    MessageModule,\n+┊  ┊22┊  ],\n+┊  ┊23┊  configRequired: true,\n+┊  ┊24┊})\n```\n\n##### Added modules&#x2F;app.symbols.ts\n```diff\n@@ -0,0 +1 @@\n+┊ ┊1┊export const APP = Symbol.for('APP')\n```\n\n[}]: #\n\nAccordingly, we will update the server to use the schema exported by the module we've just created\n\n[{]: <helper> (diffStep 1.7 files=\"index, schema\" module=\"server\")\n\n#### [Step 1.7: Transition to GraphQL Modules](https://github.com/Urigo/WhatsApp-Clone-Server/commit/b4376a5)\n\n##### Changed index.ts\n```diff\n@@ -7,7 +7,7 @@\n ┊ 7┊ 7┊import { createServer } from 'http'\n ┊ 8┊ 8┊import { createConnection } from 'typeorm'\n ┊ 9┊ 9┊import { addSampleData } from './db'\n-┊10┊  ┊import schema from './schema'\n+┊  ┊10┊import { AppModule } from './modules/app.module'\n ┊11┊11┊\n ┊12┊12┊const PORT = 4000\n ┊13┊13┊\n```\n```diff\n@@ -21,12 +21,11 @@\n ┊21┊21┊  app.use(cors())\n ┊22┊22┊  app.use(bodyParser.json())\n ┊23┊23┊\n+┊  ┊24┊  const { schema, context } = AppModule.forRoot({ connection })\n+┊  ┊25┊\n ┊24┊26┊  const apollo = new ApolloServer({\n ┊25┊27┊    schema,\n-┊26┊  ┊    context: () => ({\n-┊27┊  ┊      connection,\n-┊28┊  ┊      currentUser: { id: '1' },\n-┊29┊  ┊    }),\n+┊  ┊28┊    context,\n ┊30┊29┊  })\n ┊31┊30┊\n ┊32┊31┊  apollo.applyMiddleware({\n```\n\n##### Added modules&#x2F;auth&#x2F;index.ts\n```diff\n@@ -0,0 +1,12 @@\n+┊  ┊ 1┊import { GraphQLModule } from '@graphql-modules/core'\n+┊  ┊ 2┊import { Connection } from 'typeorm'\n+┊  ┊ 3┊import { AuthProvider } from './providers/auth.provider'\n+┊  ┊ 4┊\n+┊  ┊ 5┊export const AuthModule = new GraphQLModule({\n+┊  ┊ 6┊  name: 'Auth',\n+┊  ┊ 7┊  providers: ({ config: { connection } }) => [\n+┊  ┊ 8┊    { provide: Connection, useValue: connection },\n+┊  ┊ 9┊    AuthProvider,\n+┊  ┊10┊  ],\n+┊  ┊11┊  configRequired: true,\n+┊  ┊12┊})\n```\n\n##### Added modules&#x2F;chat&#x2F;index.ts\n```diff\n@@ -0,0 +1,16 @@\n+┊  ┊ 1┊import { GraphQLModule } from '@graphql-modules/core'\n+┊  ┊ 2┊import { ProviderScope } from '@graphql-modules/di'\n+┊  ┊ 3┊import { loadResolversFiles, loadSchemaFiles } from '@graphql-modules/sonar'\n+┊  ┊ 4┊import { AuthModule } from '../auth'\n+┊  ┊ 5┊import { UserModule } from '../user'\n+┊  ┊ 6┊import { UtilsModule } from '../utils.module'\n+┊  ┊ 7┊import { ChatProvider } from './providers/chat.provider'\n+┊  ┊ 8┊\n+┊  ┊ 9┊export const ChatModule = new GraphQLModule({\n+┊  ┊10┊  name: 'Chat',\n+┊  ┊11┊  imports: [AuthModule, UtilsModule, UserModule],\n+┊  ┊12┊  providers: [ChatProvider],\n+┊  ┊13┊  defaultProviderScope: ProviderScope.Session,\n+┊  ┊14┊  typeDefs: loadSchemaFiles(__dirname + '/schema/'),\n+┊  ┊15┊  resolvers: loadResolversFiles(__dirname + '/resolvers/'),\n+┊  ┊16┊})\n```\n\n##### Added modules&#x2F;chat&#x2F;schema&#x2F;typeDefs.graphql\n```diff\n@@ -0,0 +1,19 @@\n+┊  ┊ 1┊type Query {\n+┊  ┊ 2┊  chats: [Chat!]!\n+┊  ┊ 3┊  chat(chatId: ID!): Chat\n+┊  ┊ 4┊}\n+┊  ┊ 5┊\n+┊  ┊ 6┊type Chat {\n+┊  ┊ 7┊  #May be a chat or a group\n+┊  ┊ 8┊  id: ID!\n+┊  ┊ 9┊  #Computed for chats\n+┊  ┊10┊  name: String\n+┊  ┊11┊  #Computed for chats\n+┊  ┊12┊  picture: String\n+┊  ┊13┊  #All members, current and past ones.\n+┊  ┊14┊  allTimeMembers: [User!]!\n+┊  ┊15┊  #Whoever gets the chat listed. For groups includes past members who still didn't delete the group.\n+┊  ┊16┊  listingMembers: [User!]!\n+┊  ┊17┊  #If null the group is read-only. Null for chats.\n+┊  ┊18┊  owner: User\n+┊  ┊19┊}\n```\n\n##### Added modules&#x2F;message&#x2F;index.ts\n```diff\n@@ -0,0 +1,24 @@\n+┊  ┊ 1┊import { GraphQLModule } from '@graphql-modules/core'\n+┊  ┊ 2┊import { ProviderScope } from '@graphql-modules/di'\n+┊  ┊ 3┊import { loadResolversFiles, loadSchemaFiles } from '@graphql-modules/sonar'\n+┊  ┊ 4┊import { AuthModule } from '../auth'\n+┊  ┊ 5┊import { ChatModule } from '../chat'\n+┊  ┊ 6┊import { UserModule } from '../user'\n+┊  ┊ 7┊import { UtilsModule } from '../utils.module'\n+┊  ┊ 8┊import { MessageProvider } from './providers/message.provider'\n+┊  ┊ 9┊\n+┊  ┊10┊export const MessageModule = new GraphQLModule({\n+┊  ┊11┊  name: 'Message',\n+┊  ┊12┊  imports: [\n+┊  ┊13┊    AuthModule,\n+┊  ┊14┊    UtilsModule,\n+┊  ┊15┊    UserModule,\n+┊  ┊16┊    ChatModule,\n+┊  ┊17┊  ],\n+┊  ┊18┊  providers: [\n+┊  ┊19┊    MessageProvider,\n+┊  ┊20┊  ],\n+┊  ┊21┊  defaultProviderScope: ProviderScope.Session,\n+┊  ┊22┊  typeDefs: loadSchemaFiles(__dirname + '/schema/'),\n+┊  ┊23┊  resolvers: loadResolversFiles(__dirname + '/resolvers/'),\n+┊  ┊24┊})\n```\n\n##### Added modules&#x2F;message&#x2F;schema&#x2F;typeDefs.graphql\n```diff\n@@ -0,0 +1,25 @@\n+┊  ┊ 1┊enum MessageType {\n+┊  ┊ 2┊  LOCATION\n+┊  ┊ 3┊  TEXT\n+┊  ┊ 4┊  PICTURE\n+┊  ┊ 5┊}\n+┊  ┊ 6┊\n+┊  ┊ 7┊extend type Chat {\n+┊  ┊ 8┊  messages(amount: Int): [Message]!\n+┊  ┊ 9┊  lastMessage: Message\n+┊  ┊10┊  updatedAt: Date!\n+┊  ┊11┊}\n+┊  ┊12┊\n+┊  ┊13┊type Message {\n+┊  ┊14┊  id: ID!\n+┊  ┊15┊  sender: User!\n+┊  ┊16┊  chat: Chat!\n+┊  ┊17┊  content: String!\n+┊  ┊18┊  createdAt: Date!\n+┊  ┊19┊  #FIXME: should return MessageType\n+┊  ┊20┊  type: Int!\n+┊  ┊21┊  #Whoever still holds a copy of the message. Cannot be null because the message gets deleted otherwise\n+┊  ┊22┊  holders: [User!]!\n+┊  ┊23┊  #Computed property\n+┊  ┊24┊  ownership: Boolean!\n+┊  ┊25┊}\n```\n\n##### Added modules&#x2F;user&#x2F;index.ts\n```diff\n@@ -0,0 +1,18 @@\n+┊  ┊ 1┊import { GraphQLModule } from '@graphql-modules/core'\n+┊  ┊ 2┊import { InjectFunction, ProviderScope } from '@graphql-modules/di'\n+┊  ┊ 3┊import { loadResolversFiles, loadSchemaFiles } from '@graphql-modules/sonar'\n+┊  ┊ 4┊import { AuthModule } from '../auth'\n+┊  ┊ 5┊import { UserProvider } from './providers/user.provider'\n+┊  ┊ 6┊\n+┊  ┊ 7┊export const UserModule = new GraphQLModule({\n+┊  ┊ 8┊  name: 'User',\n+┊  ┊ 9┊  imports: [\n+┊  ┊10┊    AuthModule,\n+┊  ┊11┊  ],\n+┊  ┊12┊  providers: [\n+┊  ┊13┊    UserProvider,\n+┊  ┊14┊  ],\n+┊  ┊15┊  typeDefs: loadSchemaFiles(__dirname + '/schema/'),\n+┊  ┊16┊  resolvers: loadResolversFiles(__dirname + '/resolvers/'),\n+┊  ┊17┊  defaultProviderScope: ProviderScope.Session,\n+┊  ┊18┊})\n```\n\n##### Added modules&#x2F;user&#x2F;schema&#x2F;typeDefs.graphql\n```diff\n@@ -0,0 +1,10 @@\n+┊  ┊ 1┊type Query {\n+┊  ┊ 2┊  users: [User!]\n+┊  ┊ 3┊}\n+┊  ┊ 4┊\n+┊  ┊ 5┊type User {\n+┊  ┊ 6┊  id: ID!\n+┊  ┊ 7┊  name: String\n+┊  ┊ 8┊  picture: String\n+┊  ┊ 9┊  phone: String\n+┊  ┊10┊}\n```\n\n##### Changed schema&#x2F;index.ts\n```diff\n@@ -1,8 +1,4 @@\n-┊1┊ ┊import { makeExecutableSchema } from 'apollo-server-express'\n-┊2┊ ┊import resolvers from './resolvers'\n-┊3┊ ┊import typeDefs from './typeDefs'\n+┊ ┊1┊import 'reflect-metadata'\n+┊ ┊2┊import { AppModule } from '../modules/app.module'\n ┊4┊3┊\n-┊5┊ ┊export default makeExecutableSchema({\n-┊6┊ ┊  typeDefs,\n-┊7┊ ┊  resolvers,\n-┊8┊ ┊})\n+┊ ┊4┊export default AppModule.forRoot({} as any).schema\n```\n\n##### Changed schema&#x2F;resolvers.ts\n```diff\n@@ -1,197 +1,4 @@\n-┊  1┊   ┊import { IResolvers as IApolloResolvers } from 'apollo-server-express'\n-┊  2┊   ┊import { GraphQLDateTime } from 'graphql-iso-date'\n-┊  3┊   ┊import Chat from '../entity/chat'\n-┊  4┊   ┊import Message from '../entity/message'\n-┊  5┊   ┊import User from '../entity/user'\n-┊  6┊   ┊import { IResolvers } from '../types'\n+┊   ┊  1┊import 'reflect-metadata'\n+┊   ┊  2┊import { AppModule } from '../modules/app.module'\n ┊  7┊  3┊\n-┊  8┊   ┊export default {\n-┊  9┊   ┊  Date: GraphQLDateTime,\n-┊ 10┊   ┊  Query: {\n-┊ 11┊   ┊    // Show all users for the moment.\n-┊ 12┊   ┊    users: (root, args, { connection, currentUser }) => {\n-┊ 13┊   ┊      return connection.createQueryBuilder(User, 'user').where('user.id != :id', {id: currentUser.id}).getMany();\n-┊ 14┊   ┊    },\n-┊ 15┊   ┊\n-┊ 16┊   ┊    chats: (root, args, { connection, currentUser }) => {\n-┊ 17┊   ┊      return connection\n-┊ 18┊   ┊        .createQueryBuilder(Chat, 'chat')\n-┊ 19┊   ┊        .leftJoin('chat.listingMembers', 'listingMembers')\n-┊ 20┊   ┊        .where('listingMembers.id = :id', { id: currentUser.id })\n-┊ 21┊   ┊        .orderBy('chat.createdAt', 'DESC')\n-┊ 22┊   ┊        .getMany();\n-┊ 23┊   ┊    },\n-┊ 24┊   ┊\n-┊ 25┊   ┊    chat: async (root, { chatId }, { connection }) => {\n-┊ 26┊   ┊      const chat = await connection\n-┊ 27┊   ┊        .createQueryBuilder(Chat, 'chat')\n-┊ 28┊   ┊        .whereInIds(chatId)\n-┊ 29┊   ┊        .getOne();\n-┊ 30┊   ┊\n-┊ 31┊   ┊      return chat || null;\n-┊ 32┊   ┊    },\n-┊ 33┊   ┊  },\n-┊ 34┊   ┊\n-┊ 35┊   ┊  Chat: {\n-┊ 36┊   ┊    name: async (chat, args, { connection, currentUser }) => {\n-┊ 37┊   ┊      if (chat.name) {\n-┊ 38┊   ┊        return chat.name;\n-┊ 39┊   ┊      }\n-┊ 40┊   ┊\n-┊ 41┊   ┊      const user = await connection\n-┊ 42┊   ┊        .createQueryBuilder(User, 'user')\n-┊ 43┊   ┊        .where('user.id != :userId', { userId: currentUser.id })\n-┊ 44┊   ┊        .innerJoin(\n-┊ 45┊   ┊          'user.allTimeMemberChats',\n-┊ 46┊   ┊          'allTimeMemberChats',\n-┊ 47┊   ┊          'allTimeMemberChats.id = :chatId',\n-┊ 48┊   ┊          { chatId: chat.id },\n-┊ 49┊   ┊        )\n-┊ 50┊   ┊        .getOne();\n-┊ 51┊   ┊\n-┊ 52┊   ┊      return user ? user.name : null\n-┊ 53┊   ┊    },\n-┊ 54┊   ┊\n-┊ 55┊   ┊    picture: async (chat, args, { connection, currentUser }) => {\n-┊ 56┊   ┊      if (chat.picture) {\n-┊ 57┊   ┊        return chat.picture;\n-┊ 58┊   ┊      }\n-┊ 59┊   ┊\n-┊ 60┊   ┊      const user = await connection\n-┊ 61┊   ┊        .createQueryBuilder(User, 'user')\n-┊ 62┊   ┊        .where('user.id != :userId', { userId: currentUser.id })\n-┊ 63┊   ┊        .innerJoin(\n-┊ 64┊   ┊          'user.allTimeMemberChats',\n-┊ 65┊   ┊          'allTimeMemberChats',\n-┊ 66┊   ┊          'allTimeMemberChats.id = :chatId',\n-┊ 67┊   ┊          { chatId: chat.id },\n-┊ 68┊   ┊        )\n-┊ 69┊   ┊        .getOne();\n-┊ 70┊   ┊\n-┊ 71┊   ┊      return user ? user.picture : null\n-┊ 72┊   ┊    },\n-┊ 73┊   ┊\n-┊ 74┊   ┊    allTimeMembers: (chat, args, { connection }) => {\n-┊ 75┊   ┊      return connection\n-┊ 76┊   ┊        .createQueryBuilder(User, 'user')\n-┊ 77┊   ┊        .innerJoin(\n-┊ 78┊   ┊          'user.listingMemberChats',\n-┊ 79┊   ┊          'listingMemberChats',\n-┊ 80┊   ┊          'listingMemberChats.id = :chatId',\n-┊ 81┊   ┊          { chatId: chat.id },\n-┊ 82┊   ┊        )\n-┊ 83┊   ┊        .getMany()\n-┊ 84┊   ┊    },\n-┊ 85┊   ┊\n-┊ 86┊   ┊    listingMembers: (chat, args, { connection }) => {\n-┊ 87┊   ┊      return connection\n-┊ 88┊   ┊        .createQueryBuilder(User, 'user')\n-┊ 89┊   ┊        .innerJoin(\n-┊ 90┊   ┊          'user.listingMemberChats',\n-┊ 91┊   ┊          'listingMemberChats',\n-┊ 92┊   ┊          'listingMemberChats.id = :chatId',\n-┊ 93┊   ┊          { chatId: chat.id },\n-┊ 94┊   ┊        )\n-┊ 95┊   ┊        .getMany();\n-┊ 96┊   ┊    },\n-┊ 97┊   ┊\n-┊ 98┊   ┊    owner: async (chat, args, { connection }) => {\n-┊ 99┊   ┊      const owner = await connection\n-┊100┊   ┊        .createQueryBuilder(User, 'user')\n-┊101┊   ┊        .innerJoin('user.ownerChats', 'ownerChats', 'ownerChats.id = :chatId', {\n-┊102┊   ┊          chatId: chat.id,\n-┊103┊   ┊        })\n-┊104┊   ┊        .getOne();\n-┊105┊   ┊\n-┊106┊   ┊      return owner || null;\n-┊107┊   ┊    },\n-┊108┊   ┊\n-┊109┊   ┊    messages: async (chat, { amount = 0 }, { connection, currentUser }) => {\n-┊110┊   ┊      if (chat.messages) {\n-┊111┊   ┊        return amount ? chat.messages.slice(-amount) : chat.messages;\n-┊112┊   ┊      }\n-┊113┊   ┊\n-┊114┊   ┊      let query = connection\n-┊115┊   ┊        .createQueryBuilder(Message, 'message')\n-┊116┊   ┊        .innerJoin('message.chat', 'chat', 'chat.id = :chatId', { chatId: chat.id })\n-┊117┊   ┊        .innerJoin('message.holders', 'holders', 'holders.id = :userId', {\n-┊118┊   ┊          userId: currentUser.id,\n-┊119┊   ┊        })\n-┊120┊   ┊        .orderBy({ 'message.createdAt': { order: 'DESC', nulls: 'NULLS LAST' } });\n-┊121┊   ┊\n-┊122┊   ┊      if (amount) {\n-┊123┊   ┊        query = query.take(amount);\n-┊124┊   ┊      }\n-┊125┊   ┊\n-┊126┊   ┊      return (await query.getMany()).reverse();\n-┊127┊   ┊    },\n-┊128┊   ┊\n-┊129┊   ┊    lastMessage: async (chat, args, { connection, currentUser }) => {\n-┊130┊   ┊      if (chat.messages) {\n-┊131┊   ┊        return chat.messages.length ? chat.messages[chat.messages.length - 1] : null;\n-┊132┊   ┊      }\n-┊133┊   ┊\n-┊134┊   ┊      const messages = await connection\n-┊135┊   ┊        .createQueryBuilder(Message, 'message')\n-┊136┊   ┊        .innerJoin('message.chat', 'chat', 'chat.id = :chatId', { chatId: chat.id })\n-┊137┊   ┊        .innerJoin('message.holders', 'holders', 'holders.id = :userId', {\n-┊138┊   ┊          userId: currentUser.id,\n-┊139┊   ┊        })\n-┊140┊   ┊        .orderBy({ 'message.createdAt': { order: 'DESC', nulls: 'NULLS LAST' } })\n-┊141┊   ┊        .getMany()\n-┊142┊   ┊\n-┊143┊   ┊      return messages && messages.length ? messages[messages.length - 1] : null;\n-┊144┊   ┊    },\n-┊145┊   ┊  },\n-┊146┊   ┊\n-┊147┊   ┊  Message: {\n-┊148┊   ┊    chat: async (message, args, { connection }) => {\n-┊149┊   ┊      const chat = await connection\n-┊150┊   ┊        .createQueryBuilder(Chat, 'chat')\n-┊151┊   ┊        .innerJoin('chat.messages', 'messages', 'messages.id = :messageId', {\n-┊152┊   ┊          messageId: message.id\n-┊153┊   ┊        })\n-┊154┊   ┊        .getOne();\n-┊155┊   ┊\n-┊156┊   ┊      if (!chat) {\n-┊157┊   ┊        throw new Error(`Message must have a chat.`);\n-┊158┊   ┊      }\n-┊159┊   ┊\n-┊160┊   ┊      return chat;\n-┊161┊   ┊    },\n-┊162┊   ┊\n-┊163┊   ┊    sender: async (message, args, { connection }) => {\n-┊164┊   ┊      const sender = await connection\n-┊165┊   ┊        .createQueryBuilder(User, 'user')\n-┊166┊   ┊        .innerJoin('user.senderMessages', 'senderMessages', 'senderMessages.id = :messageId', {\n-┊167┊   ┊          messageId: message.id,\n-┊168┊   ┊        })\n-┊169┊   ┊        .getOne();\n-┊170┊   ┊\n-┊171┊   ┊      if (!sender) {\n-┊172┊   ┊        throw new Error(`Message must have a sender.`);\n-┊173┊   ┊      }\n-┊174┊   ┊\n-┊175┊   ┊      return sender;\n-┊176┊   ┊    },\n-┊177┊   ┊\n-┊178┊   ┊    holders: async (message, args, { connection }) => {\n-┊179┊   ┊      return connection\n-┊180┊   ┊        .createQueryBuilder(User, 'user')\n-┊181┊   ┊        .innerJoin('user.holderMessages', 'holderMessages', 'holderMessages.id = :messageId', {\n-┊182┊   ┊          messageId: message.id,\n-┊183┊   ┊        })\n-┊184┊   ┊        .getMany();\n-┊185┊   ┊    },\n-┊186┊   ┊\n-┊187┊   ┊    ownership: async (message, args, { connection, currentUser }) => {\n-┊188┊   ┊      return !!(await connection\n-┊189┊   ┊        .createQueryBuilder(User, 'user')\n-┊190┊   ┊        .whereInIds(currentUser.id)\n-┊191┊   ┊        .innerJoin('user.senderMessages', 'senderMessages', 'senderMessages.id = :messageId', {\n-┊192┊   ┊          messageId: message.id,\n-┊193┊   ┊        })\n-┊194┊   ┊        .getCount())\n-┊195┊   ┊    }\n-┊196┊   ┊  },\n-┊197┊   ┊} as IResolvers as IApolloResolvers\n+┊   ┊  4┊export default AppModule.forRoot({} as any).resolvers\n```\n\n##### Changed schema&#x2F;typeDefs.ts\n```diff\n@@ -1,54 +1,4 @@\n-┊ 1┊  ┊export default `\n-┊ 2┊  ┊  scalar Date\n+┊  ┊ 1┊import 'reflect-metadata'\n+┊  ┊ 2┊import { AppModule } from '../modules/app.module'\n ┊ 3┊ 3┊\n-┊ 4┊  ┊  type Query {\n-┊ 5┊  ┊    users: [User!]\n-┊ 6┊  ┊    chats: [Chat!]\n-┊ 7┊  ┊    chat(chatId: ID!): Chat\n-┊ 8┊  ┊  }\n-┊ 9┊  ┊\n-┊10┊  ┊  enum MessageType {\n-┊11┊  ┊    LOCATION\n-┊12┊  ┊    TEXT\n-┊13┊  ┊    PICTURE\n-┊14┊  ┊  }\n-┊15┊  ┊\n-┊16┊  ┊  type Chat {\n-┊17┊  ┊    #May be a chat or a group\n-┊18┊  ┊    id: ID!\n-┊19┊  ┊    #Computed for chats\n-┊20┊  ┊    name: String\n-┊21┊  ┊    updatedAt: Date\n-┊22┊  ┊    #Computed for chats\n-┊23┊  ┊    picture: String\n-┊24┊  ┊    #All members, current and past ones.\n-┊25┊  ┊    allTimeMembers: [User!]!\n-┊26┊  ┊    #Whoever gets the chat listed. For groups includes past members who still didn't delete the group.\n-┊27┊  ┊    listingMembers: [User!]!\n-┊28┊  ┊    #If null the group is read-only. Null for chats.\n-┊29┊  ┊    owner: User\n-┊30┊  ┊    messages(amount: Int): [Message]!\n-┊31┊  ┊    lastMessage: Message\n-┊32┊  ┊  }\n-┊33┊  ┊\n-┊34┊  ┊  type Message {\n-┊35┊  ┊    id: ID!\n-┊36┊  ┊    sender: User!\n-┊37┊  ┊    chat: Chat!\n-┊38┊  ┊    content: String!\n-┊39┊  ┊    createdAt: Date!\n-┊40┊  ┊    #FIXME: should return MessageType\n-┊41┊  ┊    type: Int!\n-┊42┊  ┊    #Whoever still holds a copy of the message. Cannot be null because the message gets deleted otherwise\n-┊43┊  ┊    holders: [User!]!\n-┊44┊  ┊    #Computed property\n-┊45┊  ┊    ownership: Boolean!\n-┊46┊  ┊  }\n-┊47┊  ┊\n-┊48┊  ┊  type User {\n-┊49┊  ┊    id: ID!\n-┊50┊  ┊    name: String\n-┊51┊  ┊    picture: String\n-┊52┊  ┊    phone: String\n-┊53┊  ┊  }\n-┊54┊  ┊`\n+┊  ┊ 4┊export default AppModule.forRoot({} as any).typeDefs\n```\n\n[}]: #\n\nNow try to run the app again and see how things work. Of course, there shouldn't be any visual differences, but know that having a DB as an essential step.\n\n    $ yarn start --reset-dummy-data\n\nIn the next step we refactor our back-end so it can be more maintainable, and we will setup a basic authentication mechanism. WhatsApp is not WhatsApp without authentication!"
          },
          {
            "manualTitle": "Step 2: Authentication",
            "stepRevision": "e29dcab15cce4b47c02b197f1bcfa9dbec4f4631",
            "manualView": "![login](https://user-images.githubusercontent.com/7648874/52663083-c9b4ea00-2f40-11e9-9783-bf36fd88e4bb.png)\n\nAs we're probably all familiar with WhatsApp, the app surrounds around authentication. It's a very crucial part because without authentication there would be no way to identify users and who communicates with whom. On top of all we would like to keep things private, because we don't want personal information to leak to other people. Although the original WhatsApp uses phone authentication with an SMS code, in our app we're gonna keep things simple and use a basic authentication.\n\nThe authentication flow in the front-end app is simple and consists of the following:\n\n- Sign-Up\n- Sign-In\n- Settings\n- Sign-Out\n\nThe more complicated part comes when we have to match each data with its owner and check if a user is authorized to perform an operation or not.\n\n### Server authentication\n\nAuthentication is a hot topic in the GraphQL world and there are some projects which aim at authenticating through GraphQL. Since often you will be required to use a specific auth framework (because of a feature you need or because of an existing authorization infrastructure) I will show you how to use a classic REST API framework within your GraphQL application. This approach is completely fine and in line with the official GraphQL best practices. We will use `Passport` for the authentication and `BasicAuth` as the auth mechanism:\n\n    $ yarn add bcrypt-nodejs@0.0.3 passport@0.4.0 passport-http@0.3.0\n    $ yarn add -D @types/bcrypt-nodejs@0.0.30 @types/passport@1.0.0 @types/passport-http@0.3.7\n\n`BasicAuth` is basically responsible for sending a username and password in an Authorization Header together with each request and it's fully supported by any browser (meaning that we will be able to use Graphiql simply by proving username and password in the login window provided by the browser itself). It's the most simple auth mechanism but it's completely fine for our needs. Later we could decide to use something more complicated like JWT, but it's outside of the scope of this tutorial.\n\nWe will connect the auth logic to our Express app within the auth GQLModule. Indeed, GQLModules can also be used to apply logic which is not directly related to GraphQL. This method is excellent because it ensures that our GraphQL resolvers will be set with the right infrastructure right out of the box and we can safely reuse the module:\n\n[{]: <helper> (diffStep 2.1 files=\"app, modules/auth\" module=\"server\")\n\n#### [Step 2.1: Add auth routes](https://github.com/Urigo/WhatsApp-Clone-Server/commit/fd32b7f)\n\n##### Changed modules&#x2F;app.module.ts\n```diff\n@@ -7,13 +7,15 @@\n ┊ 7┊ 7┊import { MessageModule } from './message'\n ┊ 8┊ 8┊\n ┊ 9┊ 9┊export interface IAppModuleConfig {\n-┊10┊  ┊  connection: Connection;\n+┊  ┊10┊  connection: Connection\n+┊  ┊11┊  app: Express\n ┊11┊12┊}\n ┊12┊13┊\n ┊13┊14┊export const AppModule = new GraphQLModule<IAppModuleConfig>({\n ┊14┊15┊  name: 'App',\n-┊15┊  ┊  imports: ({ config: { connection } }) => [\n+┊  ┊16┊  imports: ({ config: { app, connection } }) => [\n ┊16┊17┊    AuthModule.forRoot({\n+┊  ┊18┊      app,\n ┊17┊19┊      connection,\n ┊18┊20┊    }),\n ┊19┊21┊    UserModule,\n```\n\n##### Changed modules&#x2F;auth&#x2F;index.ts\n```diff\n@@ -1,12 +1,61 @@\n ┊ 1┊ 1┊import { GraphQLModule } from '@graphql-modules/core'\n+┊  ┊ 2┊import { loadResolversFiles, loadSchemaFiles } from '@graphql-modules/sonar'\n+┊  ┊ 3┊import { Express } from 'express'\n ┊ 2┊ 4┊import { Connection } from 'typeorm'\n ┊ 3┊ 5┊import { AuthProvider } from './providers/auth.provider'\n+┊  ┊ 6┊import { APP } from '../app.symbols'\n+┊  ┊ 7┊import { PubSub } from 'apollo-server-express'\n+┊  ┊ 8┊import passport from 'passport'\n+┊  ┊ 9┊import basicStrategy from 'passport-http'\n+┊  ┊10┊import { InjectFunction } from '@graphql-modules/di'\n ┊ 4┊11┊\n-┊ 5┊  ┊export const AuthModule = new GraphQLModule({\n+┊  ┊12┊export interface IAppModuleConfig {\n+┊  ┊13┊  connection: Connection\n+┊  ┊14┊  app: Express\n+┊  ┊15┊}\n+┊  ┊16┊\n+┊  ┊17┊export const AuthModule = new GraphQLModule<IAppModuleConfig>({\n ┊ 6┊18┊  name: 'Auth',\n-┊ 7┊  ┊  providers: ({ config: { connection } }) => [\n+┊  ┊19┊  providers: ({ config: { connection, app } }) => [\n ┊ 8┊20┊    { provide: Connection, useValue: connection },\n+┊  ┊21┊    { provide: APP, useValue: app },\n+┊  ┊22┊    PubSub,\n ┊ 9┊23┊    AuthProvider,\n ┊10┊24┊  ],\n+┊  ┊25┊  typeDefs: loadSchemaFiles(__dirname + '/schema/'),\n+┊  ┊26┊  resolvers: loadResolversFiles(__dirname + '/resolvers/'),\n ┊11┊27┊  configRequired: true,\n+┊  ┊28┊  middleware: InjectFunction(AuthProvider, APP)((authProvider, app: Express) => {\n+┊  ┊29┊    passport.use(\n+┊  ┊30┊      'basic-signin',\n+┊  ┊31┊      new basicStrategy.BasicStrategy(async (username: string, password: string, done: any) => {\n+┊  ┊32┊        done(null, await authProvider.signIn(username, password))\n+┊  ┊33┊      })\n+┊  ┊34┊    )\n+┊  ┊35┊\n+┊  ┊36┊    passport.use(\n+┊  ┊37┊      'basic-signup',\n+┊  ┊38┊      new basicStrategy.BasicStrategy(\n+┊  ┊39┊        { passReqToCallback: true },\n+┊  ┊40┊        async (\n+┊  ┊41┊          req: Express.Request & { body: { name?: string } },\n+┊  ┊42┊          username: string,\n+┊  ┊43┊          password: string,\n+┊  ┊44┊          done: any\n+┊  ┊45┊        ) => {\n+┊  ┊46┊          const name = req.body.name\n+┊  ┊47┊          return done(null, !!name && (await authProvider.signUp(username, password, name)))\n+┊  ┊48┊        }\n+┊  ┊49┊      )\n+┊  ┊50┊    )\n+┊  ┊51┊\n+┊  ┊52┊    app.post('/signup', passport.authenticate('basic-signup', { session: false }), (req, res) =>\n+┊  ┊53┊      res.json(req.user)\n+┊  ┊54┊    )\n+┊  ┊55┊\n+┊  ┊56┊    app.use(passport.authenticate('basic-signin', { session: false }))\n+┊  ┊57┊\n+┊  ┊58┊    app.post('/signin', (req, res) => res.json(req.user))\n+┊  ┊59┊    return {}\n+┊  ┊60┊  }),\n ┊12┊61┊})\n```\n\n##### Changed modules&#x2F;auth&#x2F;providers&#x2F;auth.provider.ts\n```diff\n@@ -1,27 +1,75 @@\n-┊ 1┊  ┊import { OnRequest } from '@graphql-modules/core'\n-┊ 2┊  ┊import { Injectable } from '@graphql-modules/di'\n+┊  ┊ 1┊import { Injectable, ProviderScope } from '@graphql-modules/di'\n+┊  ┊ 2┊import { ModuleSessionInfo, OnRequest, OnConnect } from '@graphql-modules/core'\n ┊ 3┊ 3┊import { Connection } from 'typeorm'\n ┊ 4┊ 4┊import { User } from '../../../entity/user'\n+┊  ┊ 5┊import bcrypt from 'bcrypt-nodejs'\n ┊ 5┊ 6┊\n-┊ 6┊  ┊@Injectable()\n-┊ 7┊  ┊export class AuthProvider implements OnRequest {\n+┊  ┊ 7┊@Injectable({\n+┊  ┊ 8┊  scope: ProviderScope.Session,\n+┊  ┊ 9┊})\n+┊  ┊10┊export class AuthProvider implements OnRequest, OnConnect {\n ┊ 8┊11┊  currentUser: User\n ┊ 9┊12┊\n-┊10┊  ┊  constructor(\n-┊11┊  ┊    private connection: Connection\n-┊12┊  ┊  ) {}\n+┊  ┊13┊  constructor(private connection: Connection) {}\n ┊13┊14┊\n-┊14┊  ┊  async onRequest() {\n-┊15┊  ┊    if (this.currentUser) return\n+┊  ┊15┊  onRequest({ session }: ModuleSessionInfo) {\n+┊  ┊16┊    if ('req' in session) {\n+┊  ┊17┊      this.currentUser = session.req.user\n+┊  ┊18┊    }\n+┊  ┊19┊  }\n+┊  ┊20┊\n+┊  ┊21┊  async onConnect(connectionParams: { authToken?: string }) {\n+┊  ┊22┊    if (connectionParams.authToken) {\n+┊  ┊23┊      // Create a buffer and tell it the data coming in is base64\n+┊  ┊24┊      const buf = Buffer.from(connectionParams.authToken.split(' ')[1], 'base64')\n+┊  ┊25┊      // Read it back out as a string\n+┊  ┊26┊      const [username, password]: string[] = buf.toString().split(':')\n+┊  ┊27┊      const user = await this.signIn(username, password)\n+┊  ┊28┊      if (user) {\n+┊  ┊29┊        // Set context for the WebSocket\n+┊  ┊30┊        this.currentUser = user\n+┊  ┊31┊      } else {\n+┊  ┊32┊        throw new Error('Wrong credentials!')\n+┊  ┊33┊      }\n+┊  ┊34┊    } else {\n+┊  ┊35┊      throw new Error('Missing auth token!')\n+┊  ┊36┊    }\n+┊  ┊37┊  }\n ┊16┊38┊\n+┊  ┊39┊  getUserByUsername(username: string) {\n+┊  ┊40┊    return this.connection.getRepository(User).findOne({ where: { username } })\n+┊  ┊41┊  }\n ┊17┊42┊\n-┊18┊  ┊    const currentUser = await this.connection\n-┊19┊  ┊      .createQueryBuilder(User, 'user')\n-┊20┊  ┊      .getOne()\n+┊  ┊43┊  async signIn(username: string, password: string): Promise<User | false> {\n+┊  ┊44┊    const user = await this.getUserByUsername(username)\n+┊  ┊45┊    if (user && this.validPassword(password, user.password)) {\n+┊  ┊46┊      return user\n+┊  ┊47┊    } else {\n+┊  ┊48┊      return false\n+┊  ┊49┊    }\n+┊  ┊50┊  }\n ┊21┊51┊\n-┊22┊  ┊    if (currentUser) {\n-┊23┊  ┊      console.log(currentUser)\n-┊24┊  ┊      this.currentUser = currentUser\n+┊  ┊52┊  async signUp(username: string, password: string, name: string): Promise<User | false> {\n+┊  ┊53┊    const userExists = !!(await this.getUserByUsername(username))\n+┊  ┊54┊    if (!userExists) {\n+┊  ┊55┊      const user = this.connection.manager.save(\n+┊  ┊56┊        new User({\n+┊  ┊57┊          username,\n+┊  ┊58┊          password: this.generateHash(password),\n+┊  ┊59┊          name,\n+┊  ┊60┊        })\n+┊  ┊61┊      )\n+┊  ┊62┊      return user\n+┊  ┊63┊    } else {\n+┊  ┊64┊      return false\n ┊25┊65┊    }\n ┊26┊66┊  }\n+┊  ┊67┊\n+┊  ┊68┊  generateHash(password: string) {\n+┊  ┊69┊    return bcrypt.hashSync(password, bcrypt.genSaltSync(8))\n+┊  ┊70┊  }\n+┊  ┊71┊\n+┊  ┊72┊  validPassword(password: string, localPassword: string) {\n+┊  ┊73┊    return bcrypt.compareSync(password, localPassword)\n+┊  ┊74┊  }\n ┊27┊75┊}\n```\n\n[}]: #\n\nWe are going to store hashes instead of plain passwords, that's why we're using `bcrypt-nodejs`. With `passport.use('basic-signin')` and `passport.use('basic-signup')` we define how the auth framework deals with our database. `app.post('/signup')` is the endpoint for creating new accounts, so we left it out of the authentication middleware (`app.use(passport.authenticate('basic-signin')`).\n\nWe will also add an additional query called `me` which will simply return the user which is currently logged in. This will come in handy in the client:\n\n[{]: <helper> (diffStep 2.1 files=\"modules/user\" module=\"server\")\n\n#### [Step 2.1: Add auth routes](https://github.com/Urigo/WhatsApp-Clone-Server/commit/fd32b7f)\n\n##### Changed modules&#x2F;user&#x2F;providers&#x2F;user.provider.ts\n```diff\n@@ -14,6 +14,10 @@\n ┊14┊14┊    return this.connection.createQueryBuilder(User, 'user')\n ┊15┊15┊  }\n ┊16┊16┊\n+┊  ┊17┊  getMe() {\n+┊  ┊18┊    return this.currentUser\n+┊  ┊19┊  }\n+┊  ┊20┊\n ┊17┊21┊  getUsers() {\n ┊18┊22┊    return this.createQueryBuilder()\n ┊19┊23┊      .where('user.id != :id', { id: this.currentUser.id })\n```\n\n##### Changed modules&#x2F;user&#x2F;resolvers&#x2F;resolvers.ts\n```diff\n@@ -5,6 +5,7 @@\n ┊ 5┊ 5┊\n ┊ 6┊ 6┊export default {\n ┊ 7┊ 7┊  Query: {\n+┊  ┊ 8┊    me: (obj, args, { injector }) => injector.get(UserProvider).getMe(),\n ┊ 8┊ 9┊    users: (obj, args, { injector }) => injector.get(UserProvider).getUsers(),\n ┊ 9┊10┊  },\n ┊10┊11┊} as IResolvers\n```\n\n##### Changed modules&#x2F;user&#x2F;schema&#x2F;typeDefs.graphql\n```diff\n@@ -1,4 +1,5 @@\n ┊1┊1┊type Query {\n+┊ ┊2┊  me: User\n ┊2┊3┊  users: [User!]\n ┊3┊4┊}\n ┊4┊5┊\n```\n\n[}]: #\n\n### Client authentication\n\nTo make things more convenient, we will create a dedicated authentication service under a separate module called `auth.service.tsx`. The auth service will take care of:\n\n- Performing sign-in/sign-up against the server.\n- Storing received auth token in local storage.\n- Providing a wrapper around guarded routes that require authorization.\n\n[{]: <helper> (diffStep 2.1 files=\"src/services, src/graphql\" module=\"client\")\n\n#### [Step 2.1: Add auth service](https://github.com/Urigo/WhatsApp-Clone-Client-React/commit/4d9bb30)\n\n##### Changed src&#x2F;graphql&#x2F;fragments&#x2F;index.ts\n```diff\n@@ -1,2 +1,3 @@\n ┊1┊1┊export { default as chat } from './chat.fragment'\n ┊2┊2┊export { default as message } from './message.fragment'\n+┊ ┊3┊export { default as user } from './user.fragment'\n```\n\n##### Added src&#x2F;graphql&#x2F;fragments&#x2F;user.fragment.ts\n```diff\n@@ -0,0 +1,9 @@\n+┊ ┊1┊import gql from 'graphql-tag'\n+┊ ┊2┊\n+┊ ┊3┊export default gql`\n+┊ ┊4┊  fragment User on User {\n+┊ ┊5┊    id\n+┊ ┊6┊    name\n+┊ ┊7┊    picture\n+┊ ┊8┊  }\n+┊ ┊9┊`\n```\n\n##### Added src&#x2F;graphql&#x2F;queries&#x2F;index.ts\n```diff\n@@ -0,0 +1 @@\n+┊ ┊1┊export { default as me } from './me.query'\n```\n\n##### Added src&#x2F;graphql&#x2F;queries&#x2F;me.query.ts\n```diff\n@@ -0,0 +1,11 @@\n+┊  ┊ 1┊import gql from 'graphql-tag'\n+┊  ┊ 2┊import * as fragments from '../fragments'\n+┊  ┊ 3┊\n+┊  ┊ 4┊export default gql `\n+┊  ┊ 5┊  query Me {\n+┊  ┊ 6┊    me {\n+┊  ┊ 7┊      ...User\n+┊  ┊ 8┊    }\n+┊  ┊ 9┊  }\n+┊  ┊10┊  ${fragments.user}\n+┊  ┊11┊`\n```\n\n##### Added src&#x2F;services&#x2F;auth.service.tsx\n```diff\n@@ -0,0 +1,84 @@\n+┊  ┊ 1┊import * as React from 'react'\n+┊  ┊ 2┊import { useContext } from 'react'\n+┊  ┊ 3┊import { useQuery } from 'react-apollo-hooks'\n+┊  ┊ 4┊import { Redirect } from 'react-router-dom'\n+┊  ┊ 5┊import store from '../apollo-client'\n+┊  ┊ 6┊import * as queries from '../graphql/queries'\n+┊  ┊ 7┊import { Me, User } from '../graphql/types'\n+┊  ┊ 8┊\n+┊  ┊ 9┊const MyContext = React.createContext<User.Fragment>(null)\n+┊  ┊10┊\n+┊  ┊11┊export const useMe = () => {\n+┊  ┊12┊  return useContext(MyContext)\n+┊  ┊13┊}\n+┊  ┊14┊\n+┊  ┊15┊export const withAuth = (Component: React.ComponentType) => {\n+┊  ┊16┊  return props => {\n+┊  ┊17┊    if (!getAuthHeader()) return <Redirect to=\"/sign-in\" />\n+┊  ┊18┊\n+┊  ┊19┊    // Validating against server\n+┊  ┊20┊    const myResult = useQuery<Me.Query>(queries.me)\n+┊  ┊21┊\n+┊  ┊22┊    // Override TypeScript definition issue with the current version\n+┊  ┊23┊    if (myResult.error) return <Redirect to=\"/sign-in\" />\n+┊  ┊24┊\n+┊  ┊25┊    return (\n+┊  ┊26┊      <MyContext.Provider value={myResult.data.me}>\n+┊  ┊27┊        <Component {...props} />\n+┊  ┊28┊      </MyContext.Provider>\n+┊  ┊29┊    )\n+┊  ┊30┊  }\n+┊  ┊31┊}\n+┊  ┊32┊\n+┊  ┊33┊export const storeAuthHeader = (auth: string) => {\n+┊  ┊34┊  localStorage.setItem('Authorization', auth)\n+┊  ┊35┊}\n+┊  ┊36┊\n+┊  ┊37┊export const getAuthHeader = (): string | null => {\n+┊  ┊38┊  return localStorage.getItem('Authorization') || null\n+┊  ┊39┊}\n+┊  ┊40┊\n+┊  ┊41┊export const signIn = ({ username, password }) => {\n+┊  ┊42┊  const auth = `Basic ${btoa(`${username}:${password}`)}`\n+┊  ┊43┊\n+┊  ┊44┊  return fetch(`${process.env.REACT_APP_SERVER_URL}/signin`, {\n+┊  ┊45┊    method: 'POST',\n+┊  ┊46┊    headers: {\n+┊  ┊47┊      Authorization: auth,\n+┊  ┊48┊    },\n+┊  ┊49┊  }).then(res => {\n+┊  ┊50┊    if (res.status < 400) {\n+┊  ┊51┊      storeAuthHeader(auth)\n+┊  ┊52┊    } else {\n+┊  ┊53┊      return Promise.reject(res.statusText)\n+┊  ┊54┊    }\n+┊  ┊55┊  })\n+┊  ┊56┊}\n+┊  ┊57┊\n+┊  ┊58┊export const signUp = ({ username, password, name }) => {\n+┊  ┊59┊  return fetch(`${process.env.REACT_APP_SERVER_URL}/signup`, {\n+┊  ┊60┊    method: 'POST',\n+┊  ┊61┊    body: JSON.stringify({ name }),\n+┊  ┊62┊    headers: {\n+┊  ┊63┊      Accept: 'application/json',\n+┊  ┊64┊      'Content-Type': 'application/json',\n+┊  ┊65┊      Authorization: `Basic ${btoa(`${username}:${password}`)}`,\n+┊  ┊66┊    },\n+┊  ┊67┊  })\n+┊  ┊68┊}\n+┊  ┊69┊\n+┊  ┊70┊export const signOut = () => {\n+┊  ┊71┊  localStorage.removeItem('Authorization')\n+┊  ┊72┊\n+┊  ┊73┊  return store.clearStore()\n+┊  ┊74┊}\n+┊  ┊75┊\n+┊  ┊76┊export default {\n+┊  ┊77┊  useMe,\n+┊  ┊78┊  withAuth,\n+┊  ┊79┊  storeAuthHeader,\n+┊  ┊80┊  getAuthHeader,\n+┊  ┊81┊  signIn,\n+┊  ┊82┊  signUp,\n+┊  ┊83┊  signOut,\n+┊  ┊84┊}\n```\n\n[}]: #\n\nThe service also includes a `useMe()` GraphQL hook that will fetch the current user. Its definition is separate since it's used vastly and shared between many components.\n\nSince we're using token oriented authentication, it means that any time we make a request to our GraphQL back-end we would need to authorize ourselves by sending this token. This can easily be done thanks to Apollo. By setting the client correctly we can automatically set the headers and parameters for each request that is being done.\n\n[{]: <helper> (diffStep 2.1 files=\"src/apollo-client.ts\" module=\"client\")\n\n#### [Step 2.1: Add auth service](https://github.com/Urigo/WhatsApp-Clone-Client-React/commit/4d9bb30)\n\n##### Changed src&#x2F;apollo-client.ts\n```diff\n@@ -1,10 +1,12 @@\n ┊ 1┊ 1┊import { InMemoryCache } from 'apollo-cache-inmemory'\n ┊ 2┊ 2┊import { ApolloClient } from 'apollo-client'\n ┊ 3┊ 3┊import { ApolloLink, split } from 'apollo-link'\n+┊  ┊ 4┊import { setContext } from 'apollo-link-context'\n ┊ 4┊ 5┊import { HttpLink } from 'apollo-link-http'\n ┊ 5┊ 6┊import { WebSocketLink } from 'apollo-link-ws'\n ┊ 6┊ 7┊import { getMainDefinition } from 'apollo-utilities'\n ┊ 7┊ 8┊import { OperationDefinitionNode } from 'graphql'\n+┊  ┊ 9┊import { getAuthHeader } from './services/auth.service'\n ┊ 8┊10┊\n ┊ 9┊11┊const httpUri = process.env.REACT_APP_SERVER_URL + '/graphql'\n ┊10┊12┊const wsUri = httpUri.replace(/^https?/, 'ws')\n```\n```diff\n@@ -17,16 +19,30 @@\n ┊17┊19┊  uri: wsUri,\n ┊18┊20┊  options: {\n ┊19┊21┊    reconnect: true,\n+┊  ┊22┊    connectionParams: () => ({\n+┊  ┊23┊      authToken: getAuthHeader(),\n+┊  ┊24┊    }),\n ┊20┊25┊  },\n ┊21┊26┊})\n ┊22┊27┊\n+┊  ┊28┊const authLink = setContext((_, { headers }) => {\n+┊  ┊29┊  const auth = getAuthHeader()\n+┊  ┊30┊\n+┊  ┊31┊  return {\n+┊  ┊32┊    headers: {\n+┊  ┊33┊      ...headers,\n+┊  ┊34┊      Authorization: auth,\n+┊  ┊35┊    },\n+┊  ┊36┊  }\n+┊  ┊37┊})\n+┊  ┊38┊\n ┊23┊39┊const terminatingLink = split(\n ┊24┊40┊  ({ query }) => {\n ┊25┊41┊    const { kind, operation } = getMainDefinition(query) as OperationDefinitionNode\n ┊26┊42┊    return kind === 'OperationDefinition' && operation === 'subscription'\n ┊27┊43┊  },\n ┊28┊44┊  wsLink,\n-┊29┊  ┊  httpLink,\n+┊  ┊45┊  authLink.concat(httpLink),\n ┊30┊46┊)\n ┊31┊47┊\n ┊32┊48┊const link = ApolloLink.from([terminatingLink])\n```\n\n[}]: #\n\nThis would require us to install a package called `apollo-link-context`:\n\n    $ yarn add apollo-link-context@1.0.12\n\nNow that we have that mechanism implemented we need a way to access it. For that purpose we will be implementing a sign-in form and a sign-up form. Once we create a user and sign-in we will be promoted to the main chats list screen.\n\n[{]: <helper> (diffStep 2.2 files=\"src/components/AuthScreen\" module=\"client\")\n\n#### [Step 2.2: Implement auth components](https://github.com/Urigo/WhatsApp-Clone-Client-React/commit/5b7a700)\n\n##### Added src&#x2F;components&#x2F;AuthScreen&#x2F;SignInForm.tsx\n```diff\n@@ -0,0 +1,84 @@\n+┊  ┊ 1┊import Button from '@material-ui/core/Button'\n+┊  ┊ 2┊import TextField from '@material-ui/core/TextField'\n+┊  ┊ 3┊import { History } from 'history'\n+┊  ┊ 4┊import * as React from 'react'\n+┊  ┊ 5┊import { useState } from 'react'\n+┊  ┊ 6┊import { signIn } from '../../services/auth.service'\n+┊  ┊ 7┊\n+┊  ┊ 8┊interface SignInFormProps {\n+┊  ┊ 9┊  history: History\n+┊  ┊10┊}\n+┊  ┊11┊\n+┊  ┊12┊export default ({ history }: SignInFormProps) => {\n+┊  ┊13┊  const [username, setUsername] = useState('')\n+┊  ┊14┊  const [password, setPassword] = useState('')\n+┊  ┊15┊  const [error, setError] = useState('')\n+┊  ┊16┊\n+┊  ┊17┊  const onUsernameChange = ({ target }) => {\n+┊  ┊18┊    setError('')\n+┊  ┊19┊    setUsername(target.value)\n+┊  ┊20┊  }\n+┊  ┊21┊\n+┊  ┊22┊  const onPasswordChange = ({ target }) => {\n+┊  ┊23┊    setError('')\n+┊  ┊24┊    setPassword(target.value)\n+┊  ┊25┊  }\n+┊  ┊26┊\n+┊  ┊27┊  const maySignIn = () => {\n+┊  ┊28┊    return !!(username && password)\n+┊  ┊29┊  }\n+┊  ┊30┊\n+┊  ┊31┊  const handleSignIn = () => {\n+┊  ┊32┊    signIn({ username, password })\n+┊  ┊33┊      .then(() => {\n+┊  ┊34┊        history.push('/chats')\n+┊  ┊35┊      })\n+┊  ┊36┊      .catch(error => {\n+┊  ┊37┊        setError(error.message || error)\n+┊  ┊38┊      })\n+┊  ┊39┊  }\n+┊  ┊40┊\n+┊  ┊41┊  const handleSignUp = () => {\n+┊  ┊42┊    history.push('/sign-up')\n+┊  ┊43┊  }\n+┊  ┊44┊\n+┊  ┊45┊  return (\n+┊  ┊46┊    <div className=\"SignInForm Screen\">\n+┊  ┊47┊      <form>\n+┊  ┊48┊        <legend>Sign in</legend>\n+┊  ┊49┊        <div style={{ width: '100%' }}>\n+┊  ┊50┊          <TextField\n+┊  ┊51┊            className=\"AuthScreen-text-field\"\n+┊  ┊52┊            label=\"Username\"\n+┊  ┊53┊            value={username}\n+┊  ┊54┊            onChange={onUsernameChange}\n+┊  ┊55┊            margin=\"normal\"\n+┊  ┊56┊            placeholder=\"Enter your username\"\n+┊  ┊57┊          />\n+┊  ┊58┊          <TextField\n+┊  ┊59┊            className=\"AuthScreen-text-field\"\n+┊  ┊60┊            label=\"Password\"\n+┊  ┊61┊            type=\"password\"\n+┊  ┊62┊            value={password}\n+┊  ┊63┊            onChange={onPasswordChange}\n+┊  ┊64┊            margin=\"normal\"\n+┊  ┊65┊            placeholder=\"Enter your password\"\n+┊  ┊66┊          />\n+┊  ┊67┊        </div>\n+┊  ┊68┊        <Button\n+┊  ┊69┊          type=\"button\"\n+┊  ┊70┊          color=\"secondary\"\n+┊  ┊71┊          variant=\"contained\"\n+┊  ┊72┊          disabled={!maySignIn()}\n+┊  ┊73┊          onClick={handleSignIn}\n+┊  ┊74┊        >\n+┊  ┊75┊          Sign in\n+┊  ┊76┊        </Button>\n+┊  ┊77┊        <div className=\"AuthScreen-error\">{error}</div>\n+┊  ┊78┊        <span className=\"AuthScreen-alternative\">\n+┊  ┊79┊          Don't have an account yet? <a onClick={handleSignUp}>Sign up!</a>\n+┊  ┊80┊        </span>\n+┊  ┊81┊      </form>\n+┊  ┊82┊    </div>\n+┊  ┊83┊  )\n+┊  ┊84┊}\n```\n\n##### Added src&#x2F;components&#x2F;AuthScreen&#x2F;SignUpForm.tsx\n```diff\n@@ -0,0 +1,127 @@\n+┊   ┊  1┊import Button from '@material-ui/core/Button'\n+┊   ┊  2┊import TextField from '@material-ui/core/TextField'\n+┊   ┊  3┊import { History } from 'history'\n+┊   ┊  4┊import * as React from 'react'\n+┊   ┊  5┊import { useState } from 'react'\n+┊   ┊  6┊import { signUp } from '../../services/auth.service'\n+┊   ┊  7┊\n+┊   ┊  8┊interface SignUpFormProps {\n+┊   ┊  9┊  history: History\n+┊   ┊ 10┊}\n+┊   ┊ 11┊\n+┊   ┊ 12┊export default ({ history }: SignUpFormProps) => {\n+┊   ┊ 13┊  const [name, setName] = useState('')\n+┊   ┊ 14┊  const [username, setUsername] = useState('')\n+┊   ┊ 15┊  const [oldPassword, setOldPassword] = useState('')\n+┊   ┊ 16┊  const [password, setPassword] = useState('')\n+┊   ┊ 17┊  const [error, setError] = useState('')\n+┊   ┊ 18┊\n+┊   ┊ 19┊  const updateName = ({ target }) => {\n+┊   ┊ 20┊    setError('')\n+┊   ┊ 21┊    setName(target.value)\n+┊   ┊ 22┊  }\n+┊   ┊ 23┊\n+┊   ┊ 24┊  const updateUsername = ({ target }) => {\n+┊   ┊ 25┊    setError('')\n+┊   ┊ 26┊    setUsername(target.value)\n+┊   ┊ 27┊  }\n+┊   ┊ 28┊\n+┊   ┊ 29┊  const updateOldPassword = ({ target }) => {\n+┊   ┊ 30┊    setError('')\n+┊   ┊ 31┊    setOldPassword(target.value)\n+┊   ┊ 32┊  }\n+┊   ┊ 33┊\n+┊   ┊ 34┊  const updateNewPassword = ({ target }) => {\n+┊   ┊ 35┊    setError('')\n+┊   ┊ 36┊    setPassword(target.value)\n+┊   ┊ 37┊  }\n+┊   ┊ 38┊\n+┊   ┊ 39┊  const maySignUp = () => {\n+┊   ┊ 40┊    return !!(name && username && oldPassword && oldPassword === password)\n+┊   ┊ 41┊  }\n+┊   ┊ 42┊\n+┊   ┊ 43┊  const handleSignUp = () => {\n+┊   ┊ 44┊    signUp({ username, password, name })\n+┊   ┊ 45┊      .then(() => {\n+┊   ┊ 46┊        history.push('/sign-in')\n+┊   ┊ 47┊      })\n+┊   ┊ 48┊      .catch(error => {\n+┊   ┊ 49┊        setError(error.message || error)\n+┊   ┊ 50┊      })\n+┊   ┊ 51┊  }\n+┊   ┊ 52┊\n+┊   ┊ 53┊  const handleSignIn = () => {\n+┊   ┊ 54┊    history.push('/sign-in')\n+┊   ┊ 55┊  }\n+┊   ┊ 56┊\n+┊   ┊ 57┊  return (\n+┊   ┊ 58┊    <div className=\"SignUpForm Screen\">\n+┊   ┊ 59┊      <form>\n+┊   ┊ 60┊        <legend>Sign up</legend>\n+┊   ┊ 61┊        <div\n+┊   ┊ 62┊          style={{\n+┊   ┊ 63┊            float: 'left',\n+┊   ┊ 64┊            width: 'calc(50% - 10px)',\n+┊   ┊ 65┊            paddingRight: '10px',\n+┊   ┊ 66┊          }}\n+┊   ┊ 67┊        >\n+┊   ┊ 68┊          <TextField\n+┊   ┊ 69┊            className=\"AuthScreen-text-field\"\n+┊   ┊ 70┊            label=\"Name\"\n+┊   ┊ 71┊            value={name}\n+┊   ┊ 72┊            onChange={updateName}\n+┊   ┊ 73┊            autoComplete=\"off\"\n+┊   ┊ 74┊            margin=\"normal\"\n+┊   ┊ 75┊          />\n+┊   ┊ 76┊          <TextField\n+┊   ┊ 77┊            className=\"AuthScreen-text-field\"\n+┊   ┊ 78┊            label=\"Username\"\n+┊   ┊ 79┊            value={username}\n+┊   ┊ 80┊            onChange={updateUsername}\n+┊   ┊ 81┊            autoComplete=\"off\"\n+┊   ┊ 82┊            margin=\"normal\"\n+┊   ┊ 83┊          />\n+┊   ┊ 84┊        </div>\n+┊   ┊ 85┊        <div\n+┊   ┊ 86┊          style={{\n+┊   ┊ 87┊            float: 'right',\n+┊   ┊ 88┊            width: 'calc(50% - 10px)',\n+┊   ┊ 89┊            paddingLeft: '10px',\n+┊   ┊ 90┊          }}\n+┊   ┊ 91┊        >\n+┊   ┊ 92┊          <TextField\n+┊   ┊ 93┊            className=\"AuthScreen-text-field\"\n+┊   ┊ 94┊            label=\"Old password\"\n+┊   ┊ 95┊            type=\"password\"\n+┊   ┊ 96┊            value={oldPassword}\n+┊   ┊ 97┊            onChange={updateOldPassword}\n+┊   ┊ 98┊            autoComplete=\"off\"\n+┊   ┊ 99┊            margin=\"normal\"\n+┊   ┊100┊          />\n+┊   ┊101┊          <TextField\n+┊   ┊102┊            className=\"AuthScreen-text-field\"\n+┊   ┊103┊            label=\"New password\"\n+┊   ┊104┊            type=\"password\"\n+┊   ┊105┊            value={password}\n+┊   ┊106┊            onChange={updateNewPassword}\n+┊   ┊107┊            autoComplete=\"off\"\n+┊   ┊108┊            margin=\"normal\"\n+┊   ┊109┊          />\n+┊   ┊110┊        </div>\n+┊   ┊111┊        <Button\n+┊   ┊112┊          type=\"button\"\n+┊   ┊113┊          color=\"secondary\"\n+┊   ┊114┊          variant=\"contained\"\n+┊   ┊115┊          disabled={!maySignUp()}\n+┊   ┊116┊          onClick={handleSignUp}\n+┊   ┊117┊        >\n+┊   ┊118┊          Sign up\n+┊   ┊119┊        </Button>\n+┊   ┊120┊        <div className=\"AuthScreen-error\">{error}</div>\n+┊   ┊121┊        <span className=\"AuthScreen-alternative\">\n+┊   ┊122┊          Already have an accout? <a onClick={handleSignIn}>Sign in!</a>\n+┊   ┊123┊        </span>\n+┊   ┊124┊      </form>\n+┊   ┊125┊    </div>\n+┊   ┊126┊  )\n+┊   ┊127┊}\n```\n\n##### Added src&#x2F;components&#x2F;AuthScreen&#x2F;index.tsx\n```diff\n@@ -0,0 +1,118 @@\n+┊   ┊  1┊import * as React from 'react'\n+┊   ┊  2┊import { RouteComponentProps } from 'react-router-dom'\n+┊   ┊  3┊import { Route } from 'react-router-dom'\n+┊   ┊  4┊import styled from 'styled-components'\n+┊   ┊  5┊import AnimatedSwitch from '../AnimatedSwitch'\n+┊   ┊  6┊import SignInForm from './SignInForm'\n+┊   ┊  7┊import SignUpForm from './SignUpForm'\n+┊   ┊  8┊\n+┊   ┊  9┊const Style = styled.div`\n+┊   ┊ 10┊  background: radial-gradient(rgb(34, 65, 67), rgb(17, 48, 50)),\n+┊   ┊ 11┊    url(/assets/chat-background.jpg) no-repeat;\n+┊   ┊ 12┊  background-size: cover;\n+┊   ┊ 13┊  background-blend-mode: multiply;\n+┊   ┊ 14┊  color: white;\n+┊   ┊ 15┊\n+┊   ┊ 16┊  .AuthScreen-intro {\n+┊   ┊ 17┊    height: 265px;\n+┊   ┊ 18┊  }\n+┊   ┊ 19┊\n+┊   ┊ 20┊  .AuthScreen-icon {\n+┊   ┊ 21┊    width: 125px;\n+┊   ┊ 22┊    height: auto;\n+┊   ┊ 23┊    margin-left: auto;\n+┊   ┊ 24┊    margin-right: auto;\n+┊   ┊ 25┊    padding-top: 70px;\n+┊   ┊ 26┊    display: block;\n+┊   ┊ 27┊  }\n+┊   ┊ 28┊\n+┊   ┊ 29┊  .AuthScreen-title {\n+┊   ┊ 30┊    width: 100%;\n+┊   ┊ 31┊    text-align: center;\n+┊   ┊ 32┊    color: white;\n+┊   ┊ 33┊  }\n+┊   ┊ 34┊\n+┊   ┊ 35┊  .AuthScreen-text-field {\n+┊   ┊ 36┊    width: 100%;\n+┊   ┊ 37┊    position: relative;\n+┊   ┊ 38┊  }\n+┊   ┊ 39┊\n+┊   ┊ 40┊  .AuthScreen-text-field > div::before {\n+┊   ┊ 41┊    border-color: white !important;\n+┊   ┊ 42┊  }\n+┊   ┊ 43┊\n+┊   ┊ 44┊  .AuthScreen-error {\n+┊   ┊ 45┊    position: absolute;\n+┊   ┊ 46┊    color: red;\n+┊   ┊ 47┊    font-size: 15px;\n+┊   ┊ 48┊    margin-top: 20px;\n+┊   ┊ 49┊  }\n+┊   ┊ 50┊\n+┊   ┊ 51┊  .AuthScreen-alternative {\n+┊   ┊ 52┊    position: absolute;\n+┊   ┊ 53┊    bottom: 10px;\n+┊   ┊ 54┊    left: 10px;\n+┊   ┊ 55┊\n+┊   ┊ 56┊    a {\n+┊   ┊ 57┊      color: var(--secondary-bg);\n+┊   ┊ 58┊    }\n+┊   ┊ 59┊  }\n+┊   ┊ 60┊\n+┊   ┊ 61┊  .Screen {\n+┊   ┊ 62┊    height: calc(100% - 265px);\n+┊   ┊ 63┊  }\n+┊   ┊ 64┊\n+┊   ┊ 65┊  form {\n+┊   ┊ 66┊    padding: 20px;\n+┊   ┊ 67┊\n+┊   ┊ 68┊    > div {\n+┊   ┊ 69┊      padding-bottom: 35px;\n+┊   ┊ 70┊    }\n+┊   ┊ 71┊  }\n+┊   ┊ 72┊\n+┊   ┊ 73┊  legend {\n+┊   ┊ 74┊    font-weight: bold;\n+┊   ┊ 75┊    color: white;\n+┊   ┊ 76┊  }\n+┊   ┊ 77┊\n+┊   ┊ 78┊  label {\n+┊   ┊ 79┊    color: white !important;\n+┊   ┊ 80┊  }\n+┊   ┊ 81┊\n+┊   ┊ 82┊  input {\n+┊   ┊ 83┊    color: white;\n+┊   ┊ 84┊\n+┊   ┊ 85┊    &::placeholder {\n+┊   ┊ 86┊      color: var(--primary-bg);\n+┊   ┊ 87┊    }\n+┊   ┊ 88┊  }\n+┊   ┊ 89┊\n+┊   ┊ 90┊  button {\n+┊   ┊ 91┊    width: 100px;\n+┊   ┊ 92┊    display: block;\n+┊   ┊ 93┊    margin-left: auto;\n+┊   ┊ 94┊    margin-right: auto;\n+┊   ┊ 95┊    background-color: var(--secondary-bg) !important;\n+┊   ┊ 96┊\n+┊   ┊ 97┊    &[disabled] {\n+┊   ┊ 98┊      color: #38a81c;\n+┊   ┊ 99┊    }\n+┊   ┊100┊\n+┊   ┊101┊    &:not([disabled]) {\n+┊   ┊102┊      color: white;\n+┊   ┊103┊    }\n+┊   ┊104┊  }\n+┊   ┊105┊`\n+┊   ┊106┊\n+┊   ┊107┊export default ({ history, location }: RouteComponentProps) => (\n+┊   ┊108┊  <Style className=\"AuthScreen Screen\">\n+┊   ┊109┊    <div className=\"AuthScreen-intro\">\n+┊   ┊110┊      <img src=\"assets/whatsapp-icon.png\" className=\"AuthScreen-icon\" />\n+┊   ┊111┊      <h2 className=\"AuthScreen-title\">WhatsApp Clone</h2>\n+┊   ┊112┊    </div>\n+┊   ┊113┊    <AnimatedSwitch>\n+┊   ┊114┊      <Route exact path=\"/sign-in\" component={SignInForm} />\n+┊   ┊115┊      <Route exact path=\"/sign-up\" component={SignUpForm} />\n+┊   ┊116┊    </AnimatedSwitch>\n+┊   ┊117┊  </Style>\n+┊   ┊118┊)\n```\n\n[}]: #\n\nIf you'll look at the main AuthScreen component you'll see that we use a router to alternate between the sign-in and the sign-up forms. That's the meaning behind a Switch component. However, you can also notice that we use an AnimatedSwitch. As it sounds, this component will ensure that transition between routes is animated. This upgrade our UX in the app, and it is also designated to be used across other routes. If so, let's implement it. First we will need to install a package called `react-router-transition`:\n\n    $ yarn add react-router-transition@1.2.1\n\nThis will enable the transition between the routes. However, we will need to specify the characteristics of the transition, so, let's implement our own version of AnimatedSwitch:\n\n[{]: <helper> (diffStep 2.2 files=\"src/components/AnimatedSwitch\" module=\"client\")\n\n#### [Step 2.2: Implement auth components](https://github.com/Urigo/WhatsApp-Clone-Client-React/commit/5b7a700)\n\n##### Added src&#x2F;components&#x2F;AnimatedSwitch.tsx\n```diff\n@@ -0,0 +1,30 @@\n+┊  ┊ 1┊import styled from 'styled-components'\n+┊  ┊ 2┊import { AnimatedSwitch, spring } from 'react-router-transition'\n+┊  ┊ 3┊\n+┊  ┊ 4┊const glide = val =>\n+┊  ┊ 5┊  spring(val, {\n+┊  ┊ 6┊    stiffness: 174,\n+┊  ┊ 7┊    damping: 24,\n+┊  ┊ 8┊  })\n+┊  ┊ 9┊\n+┊  ┊10┊const mapStyles = styles => ({\n+┊  ┊11┊  transform: `translateX(${styles.offset}%)`,\n+┊  ┊12┊})\n+┊  ┊13┊\n+┊  ┊14┊export default styled(AnimatedSwitch).attrs(() => ({\n+┊  ┊15┊  atEnter: { offset: 100 },\n+┊  ┊16┊  atLeave: { offset: glide(-100) },\n+┊  ┊17┊  atActive: { offset: glide(0) },\n+┊  ┊18┊  mapStyles,\n+┊  ┊19┊}))`\n+┊  ┊20┊  position: relative;\n+┊  ┊21┊  overflow: hidden;\n+┊  ┊22┊  width: 100%;\n+┊  ┊23┊  height: 100%;\n+┊  ┊24┊  > div {\n+┊  ┊25┊    position: absolute;\n+┊  ┊26┊    overflow: hidden;\n+┊  ┊27┊    width: 100%;\n+┊  ┊28┊    height: 100%;\n+┊  ┊29┊  }\n+┊  ┊30┊`\n```\n\n[}]: #\n\nAs shown in the screenshot at the top of this page, the auth screen includes few assets that we should download: a background picture and a logo. Please download the assets below and save them in the `public/assets` directory as `chat-background.jpg` and `whatsapp-icon.jpg` respectively:\n\n![chat-background.jpg](https://user-images.githubusercontent.com/7648874/51983290-3f49a080-24d3-11e9-9de9-cf57354d1e3a.jpg)\n\n![whatsapp-icon.jpg](https://user-images.githubusercontent.com/7648874/52662552-768e6780-2f3f-11e9-931c-36a5c13ca49b.png)\n\nSo following that, we would need to define a router that will handle changes in routes. We will be using `react-router-dom`:\n\n    $ yarn add react-router-dom@4.3.1\n\nNow that we have it let's define our routes. Note how we take advantage of the `withAuth()` method to guard our routes and make them available only to users who are authorized:\n\n[{]: <helper> (diffStep 2.3 files=\"src/App\" module=\"client\")\n\n#### [Step 2.3: Create router with guarded routes](https://github.com/Urigo/WhatsApp-Clone-Client-React/commit/d96dac1)\n\n##### Changed src&#x2F;App.tsx\n```diff\n@@ -1,14 +1,20 @@\n-┊ 1┊  ┊import React, { Component } from 'react';\n+┊  ┊ 1┊import * as React from 'react'\n+┊  ┊ 2┊import { BrowserRouter, Route, Redirect } from 'react-router-dom'\n+┊  ┊ 3┊import AnimatedSwitch from './components/AnimatedSwitch'\n+┊  ┊ 4┊import AuthScreen from './components/AuthScreen'\n ┊ 2┊ 5┊import ChatsListScreen from './components/ChatsListScreen'\n+┊  ┊ 6┊import { withAuth } from './services/auth.service'\n ┊ 3┊ 7┊\n-┊ 4┊  ┊class App extends Component {\n-┊ 5┊  ┊  render() {\n-┊ 6┊  ┊    return (\n-┊ 7┊  ┊      <div className=\"App\">\n-┊ 8┊  ┊        <ChatsListScreen />\n-┊ 9┊  ┊      </div>\n-┊10┊  ┊    );\n-┊11┊  ┊  }\n-┊12┊  ┊}\n+┊  ┊ 8┊const RedirectToChats = () => (\n+┊  ┊ 9┊  <Redirect to=\"/chats\" />\n+┊  ┊10┊)\n ┊13┊11┊\n-┊14┊  ┊export default App;\n+┊  ┊12┊export default () => (\n+┊  ┊13┊  <BrowserRouter>\n+┊  ┊14┊    <AnimatedSwitch>\n+┊  ┊15┊      <Route exact path=\"/sign-(in|up)\" component={AuthScreen} />\n+┊  ┊16┊      <Route exact path=\"/chats\" component={withAuth(ChatsListScreen)} />\n+┊  ┊17┊      <Route component={RedirectToChats} />\n+┊  ┊18┊    </AnimatedSwitch>\n+┊  ┊19┊  </BrowserRouter>\n+┊  ┊20┊)\n```\n\n[}]: #\n\nSince in our auth service we basically check if the user is logged in by actually querying the server with a React hook, we will need to use a Suspense component that will catch the pending request.\n\n[{]: <helper> (diffStep 2.3 files=\"src/index\" module=\"client\")\n\n#### [Step 2.3: Create router with guarded routes](https://github.com/Urigo/WhatsApp-Clone-Client-React/commit/d96dac1)\n\n##### Changed src&#x2F;index.tsx\n```diff\n@@ -1,5 +1,6 @@\n ┊1┊1┊import { MuiThemeProvider, createMuiTheme } from '@material-ui/core/styles'\n ┊2┊2┊import React from 'react';\n+┊ ┊3┊import { Suspense } from 'react'\n ┊3┊4┊import ReactDOM from 'react-dom';\n ┊4┊5┊import { ApolloProvider } from 'react-apollo-hooks';\n ┊5┊6┊import './index.css';\n```\n```diff\n@@ -20,7 +21,9 @@\n ┊20┊21┊ReactDOM.render(\n ┊21┊22┊  <MuiThemeProvider theme={theme}>\n ┊22┊23┊    <ApolloProvider client={apolloClient}>\n-┊23┊  ┊      <App />\n+┊  ┊24┊      <Suspense fallback={null}>\n+┊  ┊25┊        <App />\n+┊  ┊26┊      </Suspense>\n ┊24┊27┊    </ApolloProvider>\n ┊25┊28┊  </MuiThemeProvider>\n ┊26┊29┊, document.getElementById('root'));\n```\n\n[}]: #\n\n> It's highly recommended to go through the [docs of Suspense](https://reactjs.org/docs/react-api.html#reactsuspense) before you proceed if you're not familiar with it.\n\nPerfect. Now we can sign-in and sign-up, and we can view chats which belong to us. Now we're gonna implement the settings screen, where we will be able to set our profile details, such as name and picture. Let's keep the image uploading thing for a bit later, we will focus on the component itself first. The settings screen layout includes:\n\n- A navbar.\n- A form with inputs.\n\nAccordingly, the implementation of the screen should look like so:\n\n[{]: <helper> (diffStep 2.4 files=\"src/components\" module=\"client\")\n\n#### [Step 2.4: Implement settings screen](https://github.com/Urigo/WhatsApp-Clone-Client-React/commit/ca08f47)\n\n##### Added src&#x2F;components&#x2F;SettingsScreen&#x2F;SettingsForm.tsx\n```diff\n@@ -0,0 +1,127 @@\n+┊   ┊  1┊import TextField from '@material-ui/core/TextField'\n+┊   ┊  2┊import EditIcon from '@material-ui/icons/Edit'\n+┊   ┊  3┊import { defaultDataIdFromObject } from 'apollo-cache-inmemory'\n+┊   ┊  4┊import gql from 'graphql-tag'\n+┊   ┊  5┊import * as React from 'react'\n+┊   ┊  6┊import { useEffect, useState } from 'react'\n+┊   ┊  7┊import { useQuery, useMutation } from 'react-apollo-hooks'\n+┊   ┊  8┊import { RouteComponentProps } from 'react-router-dom'\n+┊   ┊  9┊import styled from 'styled-components'\n+┊   ┊ 10┊import * as fragments from '../../graphql/fragments'\n+┊   ┊ 11┊import { SettingsFormMutation } from '../../graphql/types'\n+┊   ┊ 12┊import { useMe } from '../../services/auth.service'\n+┊   ┊ 13┊import Navbar from '../Navbar'\n+┊   ┊ 14┊import SettingsNavbar from './SettingsNavbar'\n+┊   ┊ 15┊\n+┊   ┊ 16┊const Style = styled.div`\n+┊   ┊ 17┊  .SettingsForm-picture {\n+┊   ┊ 18┊    max-width: 300px;\n+┊   ┊ 19┊    display: block;\n+┊   ┊ 20┊    margin: auto;\n+┊   ┊ 21┊    margin-top: 50px;\n+┊   ┊ 22┊\n+┊   ┊ 23┊    img {\n+┊   ┊ 24┊      object-fit: cover;\n+┊   ┊ 25┊      border-radius: 50%;\n+┊   ┊ 26┊      margin-bottom: -34px;\n+┊   ┊ 27┊      width: 300px;\n+┊   ┊ 28┊      height: 300px;\n+┊   ┊ 29┊    }\n+┊   ┊ 30┊\n+┊   ┊ 31┊    svg {\n+┊   ┊ 32┊      float: right;\n+┊   ┊ 33┊      font-size: 30px;\n+┊   ┊ 34┊      opacity: 0.5;\n+┊   ┊ 35┊      border-left: black solid 1px;\n+┊   ┊ 36┊      padding-left: 5px;\n+┊   ┊ 37┊      cursor: pointer;\n+┊   ┊ 38┊    }\n+┊   ┊ 39┊  }\n+┊   ┊ 40┊\n+┊   ┊ 41┊  .SettingsForm-name-input {\n+┊   ┊ 42┊    display: block;\n+┊   ┊ 43┊    margin: auto;\n+┊   ┊ 44┊    width: calc(100% - 50px);\n+┊   ┊ 45┊    margin-top: 50px;\n+┊   ┊ 46┊\n+┊   ┊ 47┊    > div {\n+┊   ┊ 48┊      width: 100%;\n+┊   ┊ 49┊    }\n+┊   ┊ 50┊  }\n+┊   ┊ 51┊`\n+┊   ┊ 52┊\n+┊   ┊ 53┊const mutation = gql`\n+┊   ┊ 54┊  mutation SettingsFormMutation($name: String, $picture: String) {\n+┊   ┊ 55┊    updateUser(name: $name, picture: $picture) {\n+┊   ┊ 56┊      ...User\n+┊   ┊ 57┊    }\n+┊   ┊ 58┊  }\n+┊   ┊ 59┊  ${fragments.user}\n+┊   ┊ 60┊`\n+┊   ┊ 61┊\n+┊   ┊ 62┊export default ({ history }: RouteComponentProps) => {\n+┊   ┊ 63┊  const me = useMe()\n+┊   ┊ 64┊  const [myName, setMyName] = useState(me.name)\n+┊   ┊ 65┊  const [myPicture, setMyPicture] = useState(me.picture)\n+┊   ┊ 66┊\n+┊   ┊ 67┊  const updateUser = useMutation<SettingsFormMutation.Mutation, SettingsFormMutation.Variables>(\n+┊   ┊ 68┊    mutation,\n+┊   ┊ 69┊    {\n+┊   ┊ 70┊      variables: { name: myName, picture: myPicture },\n+┊   ┊ 71┊      optimisticResponse: {\n+┊   ┊ 72┊        __typename: 'Mutation',\n+┊   ┊ 73┊        updateUser: {\n+┊   ┊ 74┊          __typename: 'User',\n+┊   ┊ 75┊          id: me.id,\n+┊   ┊ 76┊          picture: myPicture,\n+┊   ┊ 77┊          name: myName,\n+┊   ┊ 78┊        },\n+┊   ┊ 79┊      },\n+┊   ┊ 80┊      update: (client, { data: { updateUser } }) => {\n+┊   ┊ 81┊        me.picture = myPicture\n+┊   ┊ 82┊        me.name = myPicture\n+┊   ┊ 83┊\n+┊   ┊ 84┊        client.writeFragment({\n+┊   ┊ 85┊          id: defaultDataIdFromObject(me),\n+┊   ┊ 86┊          fragment: fragments.user,\n+┊   ┊ 87┊          data: me,\n+┊   ┊ 88┊        })\n+┊   ┊ 89┊      },\n+┊   ┊ 90┊    },\n+┊   ┊ 91┊  )\n+┊   ┊ 92┊\n+┊   ┊ 93┊  useEffect(\n+┊   ┊ 94┊    () => {\n+┊   ┊ 95┊      if (myPicture !== me.picture) {\n+┊   ┊ 96┊        updateUser()\n+┊   ┊ 97┊      }\n+┊   ┊ 98┊    },\n+┊   ┊ 99┊    [myPicture],\n+┊   ┊100┊  )\n+┊   ┊101┊\n+┊   ┊102┊  const updateName = ({ target }) => {\n+┊   ┊103┊    setMyName(target.value)\n+┊   ┊104┊  }\n+┊   ┊105┊\n+┊   ┊106┊  const updatePicture = async () => {\n+┊   ┊107┊    // TODO: Implement\n+┊   ┊108┊  }\n+┊   ┊109┊\n+┊   ┊110┊  return (\n+┊   ┊111┊    <Style className={name}>\n+┊   ┊112┊      <div className=\"SettingsForm-picture\">\n+┊   ┊113┊        <img src={myPicture || '/assets/default-profile-pic.jpg'} />\n+┊   ┊114┊        <EditIcon onClick={updatePicture} />\n+┊   ┊115┊      </div>\n+┊   ┊116┊      <TextField\n+┊   ┊117┊        className=\"SettingsForm-name-input\"\n+┊   ┊118┊        label=\"Name\"\n+┊   ┊119┊        value={myName}\n+┊   ┊120┊        onChange={updateName}\n+┊   ┊121┊        onBlur={updateUser}\n+┊   ┊122┊        margin=\"normal\"\n+┊   ┊123┊        placeholder=\"Enter your name\"\n+┊   ┊124┊      />\n+┊   ┊125┊    </Style>\n+┊   ┊126┊  )\n+┊   ┊127┊}\n```\n\n##### Added src&#x2F;components&#x2F;SettingsScreen&#x2F;SettingsNavbar.tsx\n```diff\n@@ -0,0 +1,49 @@\n+┊  ┊ 1┊import Button from '@material-ui/core/Button'\n+┊  ┊ 2┊import ArrowBackIcon from '@material-ui/icons/ArrowBack'\n+┊  ┊ 3┊import { History } from 'history'\n+┊  ┊ 4┊import * as React from 'react'\n+┊  ┊ 5┊import styled from 'styled-components'\n+┊  ┊ 6┊\n+┊  ┊ 7┊const Style = styled.div`\n+┊  ┊ 8┊  padding: 0;\n+┊  ┊ 9┊  display: flex;\n+┊  ┊10┊  flex-direction: row;\n+┊  ┊11┊  margin-left: -20px;\n+┊  ┊12┊\n+┊  ┊13┊  .SettingsNavbar-title {\n+┊  ┊14┊    line-height: 56px;\n+┊  ┊15┊  }\n+┊  ┊16┊\n+┊  ┊17┊  .SettingsNavbar-back-button {\n+┊  ┊18┊    color: var(--primary-text);\n+┊  ┊19┊  }\n+┊  ┊20┊\n+┊  ┊21┊  .SettingsNavbar-picture {\n+┊  ┊22┊    height: 40px;\n+┊  ┊23┊    width: 40px;\n+┊  ┊24┊    margin-top: 3px;\n+┊  ┊25┊    margin-left: -22px;\n+┊  ┊26┊    object-fit: cover;\n+┊  ┊27┊    padding: 5px;\n+┊  ┊28┊    border-radius: 50%;\n+┊  ┊29┊  }\n+┊  ┊30┊`\n+┊  ┊31┊\n+┊  ┊32┊interface SettingsNavbarProps {\n+┊  ┊33┊  history: History\n+┊  ┊34┊}\n+┊  ┊35┊\n+┊  ┊36┊export default ({ history }: SettingsNavbarProps) => {\n+┊  ┊37┊  const navToChats = () => {\n+┊  ┊38┊    history.push('/chats')\n+┊  ┊39┊  }\n+┊  ┊40┊\n+┊  ┊41┊  return (\n+┊  ┊42┊    <Style className={name}>\n+┊  ┊43┊      <Button className=\"SettingsNavbar-back-button\" onClick={navToChats}>\n+┊  ┊44┊        <ArrowBackIcon />\n+┊  ┊45┊      </Button>\n+┊  ┊46┊      <div className=\"SettingsNavbar-title\">Settings</div>\n+┊  ┊47┊    </Style>\n+┊  ┊48┊  )\n+┊  ┊49┊}\n```\n\n##### Added src&#x2F;components&#x2F;SettingsScreen&#x2F;index.tsx\n```diff\n@@ -0,0 +1,17 @@\n+┊  ┊ 1┊import * as React from 'react'\n+┊  ┊ 2┊import { Suspense } from 'react'\n+┊  ┊ 3┊import { RouteComponentProps } from 'react-router-dom'\n+┊  ┊ 4┊import Navbar from '../Navbar'\n+┊  ┊ 5┊import SettingsForm from './SettingsForm'\n+┊  ┊ 6┊import SettingsNavbar from './SettingsNavbar'\n+┊  ┊ 7┊\n+┊  ┊ 8┊export default ({ history }: RouteComponentProps) => (\n+┊  ┊ 9┊  <div className=\"SettingsScreen Screen\">\n+┊  ┊10┊    <Navbar>\n+┊  ┊11┊      <SettingsNavbar history={history} />\n+┊  ┊12┊    </Navbar>\n+┊  ┊13┊    <Suspense fallback={null}>\n+┊  ┊14┊      <SettingsForm />\n+┊  ┊15┊    </Suspense>\n+┊  ┊16┊  </div>\n+┊  ┊17┊)\n```\n\n[}]: #\n\nThe `optimisticResponse` object is used to predict the response so we can have it immediately and the `update` callback is used to update the cache. Anytime we receive a response from our GraphQL back-end we should update the cache, otherwise the data presented in our app will be out-dated.\n\nThe user should be updated on 2 scenarios: Either we loose focus on the name input or we upload a new image. We used the [`useEffect`](https://reactjs.org/docs/hooks-effect.html) to determine changes in the profile picture URL and trigger an update.\n\nWe will need to update our back-end to have an `updateUser` mutation:\n\n[{]: <helper> (diffStep 2.2 files=\"modules/user\" module=\"server\")\n\n#### [Step 2.2: Add updateUser() mutation](https://github.com/Urigo/WhatsApp-Clone-Server/commit/d3aa0fa)\n\n##### Changed modules&#x2F;user&#x2F;providers&#x2F;user.provider.ts\n```diff\n@@ -23,4 +23,23 @@\n ┊23┊23┊      .where('user.id != :id', { id: this.currentUser.id })\n ┊24┊24┊      .getMany()\n ┊25┊25┊  }\n+┊  ┊26┊\n+┊  ┊27┊  async updateUser({\n+┊  ┊28┊    name,\n+┊  ┊29┊    picture,\n+┊  ┊30┊  }: {\n+┊  ┊31┊    name?: string,\n+┊  ┊32┊    picture?: string,\n+┊  ┊33┊  } = {}) {\n+┊  ┊34┊    if (name === this.currentUser.name && picture === this.currentUser.picture) {\n+┊  ┊35┊      return this.currentUser;\n+┊  ┊36┊    }\n+┊  ┊37┊\n+┊  ┊38┊    this.currentUser.name = name || this.currentUser.name;\n+┊  ┊39┊    this.currentUser.picture = picture || this.currentUser.picture;\n+┊  ┊40┊\n+┊  ┊41┊    await this.repository.save(this.currentUser);\n+┊  ┊42┊\n+┊  ┊43┊    return this.currentUser;\n+┊  ┊44┊  }\n ┊26┊45┊}\n```\n\n##### Changed modules&#x2F;user&#x2F;resolvers&#x2F;resolvers.ts\n```diff\n@@ -8,4 +8,10 @@\n ┊ 8┊ 8┊    me: (obj, args, { injector }) => injector.get(UserProvider).getMe(),\n ┊ 9┊ 9┊    users: (obj, args, { injector }) => injector.get(UserProvider).getUsers(),\n ┊10┊10┊  },\n+┊  ┊11┊  Mutation: {\n+┊  ┊12┊    updateUser: (obj, { name, picture }, { injector }) => injector.get(UserProvider).updateUser({\n+┊  ┊13┊      name: name || '',\n+┊  ┊14┊      picture: picture || '',\n+┊  ┊15┊    }),\n+┊  ┊16┊  },\n ┊11┊17┊} as IResolvers\n```\n\n##### Changed modules&#x2F;user&#x2F;schema&#x2F;typeDefs.graphql\n```diff\n@@ -3,6 +3,10 @@\n ┊ 3┊ 3┊  users: [User!]\n ┊ 4┊ 4┊}\n ┊ 5┊ 5┊\n+┊  ┊ 6┊type Mutation {\n+┊  ┊ 7┊  updateUser(name: String, picture: String): User!\n+┊  ┊ 8┊}\n+┊  ┊ 9┊\n ┊ 6┊10┊type User {\n ┊ 7┊11┊  id: ID!\n ┊ 8┊12┊  name: String\n```\n\n[}]: #\n\nRemember that a user could be correlated to a chat, for example, if a user changes its information such as name or picture, the chat informationshould be changed as well. This means that we will need to listen to changes with a [subscription](https://www.apollographql.com/docs/react/advanced/subscriptions.html) and update our cache accordingly.\n\nSince `react-apollo-hooks` doesn't have a built-in `useSubscription()` hook as for version `0.3.1`, we will implement a polyfill that will do exactly that. First we will ad a utility package:\n\n    $ yarn add react-fast-compare@2.0.4\n\nAnd then we will implement the `useSubscription()` hook:\n\n[{]: <helper> (diffStep 2.5 files=\"src/polyfills\" module=\"client\")\n\n#### [Step 2.5: Handle chat update subscription](https://github.com/Urigo/WhatsApp-Clone-Client-React/commit/c15ca3c)\n\n##### Added src&#x2F;polyfills&#x2F;react-apollo-hooks.ts\n```diff\n@@ -0,0 +1,72 @@\n+┊  ┊ 1┊import { DataProxy } from 'apollo-cache'\n+┊  ┊ 2┊import { OperationVariables, FetchPolicy } from 'apollo-client'\n+┊  ┊ 3┊import { DocumentNode, GraphQLError } from 'graphql'\n+┊  ┊ 4┊import { useEffect, useMemo, useRef, useState } from 'react'\n+┊  ┊ 5┊import { useApolloClient } from 'react-apollo-hooks'\n+┊  ┊ 6┊import * as isEqual from 'react-fast-compare'\n+┊  ┊ 7┊\n+┊  ┊ 8┊export type SubscriptionOptions<T, TVariables> = {\n+┊  ┊ 9┊  variables?: TVariables\n+┊  ┊10┊  fetchPolicy?: FetchPolicy\n+┊  ┊11┊  onSubscriptionData?: (options?: { client?: DataProxy; subscriptionData?: T }) => any\n+┊  ┊12┊}\n+┊  ┊13┊\n+┊  ┊14┊export const useSubscription = <T, TVariables = OperationVariables>(\n+┊  ┊15┊  query: DocumentNode,\n+┊  ┊16┊  options: SubscriptionOptions<T, TVariables> = {},\n+┊  ┊17┊): {\n+┊  ┊18┊  data: T | { [key: string]: void }\n+┊  ┊19┊  error?: GraphQLError\n+┊  ┊20┊  loading: boolean\n+┊  ┊21┊} => {\n+┊  ┊22┊  const onSubscriptionData = options.onSubscriptionData\n+┊  ┊23┊  const prevOptions = useRef<typeof options | null>(null)\n+┊  ┊24┊  const client = useApolloClient()\n+┊  ┊25┊  const [data, setData] = useState<T | {}>({})\n+┊  ┊26┊  const [error, setError] = useState<GraphQLError | null>(null)\n+┊  ┊27┊  const [loading, setLoading] = useState<boolean>(true)\n+┊  ┊28┊\n+┊  ┊29┊  const subscriptionOptions = {\n+┊  ┊30┊    query,\n+┊  ┊31┊    variables: options.variables,\n+┊  ┊32┊    fetchPolicy: options.fetchPolicy,\n+┊  ┊33┊  }\n+┊  ┊34┊\n+┊  ┊35┊  useEffect(\n+┊  ┊36┊    () => {\n+┊  ┊37┊      prevOptions.current = subscriptionOptions\n+┊  ┊38┊      const subscription = client\n+┊  ┊39┊        .subscribe<{ data: T }, TVariables>(subscriptionOptions)\n+┊  ┊40┊        .subscribe({\n+┊  ┊41┊          next: ({ data }) => {\n+┊  ┊42┊            setData(data)\n+┊  ┊43┊\n+┊  ┊44┊            if (onSubscriptionData) {\n+┊  ┊45┊              onSubscriptionData({ client, subscriptionData: data })\n+┊  ┊46┊            }\n+┊  ┊47┊          },\n+┊  ┊48┊          error: err => {\n+┊  ┊49┊            setError(err)\n+┊  ┊50┊            setLoading(false)\n+┊  ┊51┊          },\n+┊  ┊52┊          complete: () => {\n+┊  ┊53┊            setLoading(false)\n+┊  ┊54┊          },\n+┊  ┊55┊        })\n+┊  ┊56┊\n+┊  ┊57┊      return () => {\n+┊  ┊58┊        subscription.unsubscribe()\n+┊  ┊59┊      }\n+┊  ┊60┊    },\n+┊  ┊61┊    [isEqual(prevOptions.current, subscriptionOptions) ? prevOptions.current : subscriptionOptions],\n+┊  ┊62┊  )\n+┊  ┊63┊\n+┊  ┊64┊  return useMemo(\n+┊  ┊65┊    () => ({\n+┊  ┊66┊      data,\n+┊  ┊67┊      error,\n+┊  ┊68┊      loading,\n+┊  ┊69┊    }),\n+┊  ┊70┊    [data, error, loading],\n+┊  ┊71┊  )\n+┊  ┊72┊}\n```\n\n[}]: #\n\nThen we will define the subscription document and listen to it in a dedicated service called `cache.service`, which is responsible for updating the cache:\n\n[{]: <helper> (diffStep 2.5 files=\"src/graphql, src/services/cache\" module=\"client\")\n\n#### [Step 2.5: Handle chat update subscription](https://github.com/Urigo/WhatsApp-Clone-Client-React/commit/c15ca3c)\n\n##### Added src&#x2F;graphql&#x2F;subscriptions&#x2F;chatUpdated.subscription.ts\n```diff\n@@ -0,0 +1,11 @@\n+┊  ┊ 1┊import gql from 'graphql-tag'\n+┊  ┊ 2┊import * as fragments from '../fragments'\n+┊  ┊ 3┊\n+┊  ┊ 4┊export default gql `\n+┊  ┊ 5┊  subscription ChatUpdated {\n+┊  ┊ 6┊    chatUpdated {\n+┊  ┊ 7┊      ...Chat\n+┊  ┊ 8┊    }\n+┊  ┊ 9┊  }\n+┊  ┊10┊  ${fragments.chat}\n+┊  ┊11┊`\n```\n\n##### Added src&#x2F;graphql&#x2F;subscriptions&#x2F;index.ts\n```diff\n@@ -0,0 +1 @@\n+┊ ┊1┊export { default as chatUpdated } from './chatUpdated.subscription'\n```\n\n##### Added src&#x2F;services&#x2F;cache.service.tsx\n```diff\n@@ -0,0 +1,18 @@\n+┊  ┊ 1┊import { defaultDataIdFromObject } from 'apollo-cache-inmemory'\n+┊  ┊ 2┊import * as fragments from '../graphql/fragments'\n+┊  ┊ 3┊import * as subscriptions from '../graphql/subscriptions'\n+┊  ┊ 4┊import { ChatUpdated } from '../graphql/types'\n+┊  ┊ 5┊import { useSubscription } from '../polyfills/react-apollo-hooks'\n+┊  ┊ 6┊\n+┊  ┊ 7┊export const useSubscriptions = () => {\n+┊  ┊ 8┊  useSubscription<ChatUpdated.Subscription>(subscriptions.chatUpdated, {\n+┊  ┊ 9┊    onSubscriptionData: ({ client, subscriptionData: { chatUpdated } }) => {\n+┊  ┊10┊      client.writeFragment({\n+┊  ┊11┊        id: defaultDataIdFromObject(chatUpdated),\n+┊  ┊12┊        fragment: fragments.chat,\n+┊  ┊13┊        fragmentName: 'Chat',\n+┊  ┊14┊        data: chatUpdated,\n+┊  ┊15┊      })\n+┊  ┊16┊    },\n+┊  ┊17┊  })\n+┊  ┊18┊}\n```\n\n[}]: #\n\nWe should listen to subscriptions only once we're logged-in, therefore let's use the `useSubscriptions()` hook that we've just created in the `auth.service`:\n\n[{]: <helper> (diffStep 2.5 files=\"src/services/auth\" module=\"client\")\n\n#### [Step 2.5: Handle chat update subscription](https://github.com/Urigo/WhatsApp-Clone-Client-React/commit/c15ca3c)\n\n##### Changed src&#x2F;services&#x2F;auth.service.tsx\n```diff\n@@ -5,6 +5,7 @@\n ┊ 5┊ 5┊import store from '../apollo-client'\n ┊ 6┊ 6┊import * as queries from '../graphql/queries'\n ┊ 7┊ 7┊import { Me, User } from '../graphql/types'\n+┊  ┊ 8┊import { useSubscriptions } from './cache.service'\n ┊ 8┊ 9┊\n ┊ 9┊10┊const MyContext = React.createContext<User.Fragment>(null)\n ┊10┊11┊\n```\n```diff\n@@ -22,6 +23,8 @@\n ┊22┊23┊    // Override TypeScript definition issue with the current version\n ┊23┊24┊    if (myResult.error) return <Redirect to=\"/sign-in\" />\n ┊24┊25┊\n+┊  ┊26┊    useSubscriptions()\n+┊  ┊27┊\n ┊25┊28┊    return (\n ┊26┊29┊      <MyContext.Provider value={myResult.data.me}>\n ┊27┊30┊        <Component {...props} />\n```\n\n[}]: #\n\nNow we will have to implement the subscription in our server. GraphQL subscriptions are a way to push data from the server to the clients that choose to listen to real time messages from the server. To trigger a subscription event we will use a method called `publish` which is used by a class called `PubSub`. Pubsub sits between your application's logic and the GraphQL subscriptions engine - it receives a publish command from your app logic and pushes it to your GraphQL execution engine. This is how it should look like in code, in relation to `chatUpdated` subscription:\n\n[{]: <helper> (diffStep 2.3 module=\"server\")\n\n#### [Step 2.3: Add chatUpdated subscription](https://github.com/Urigo/WhatsApp-Clone-Server/commit/44d94a5)\n\n##### Changed index.ts\n```diff\n@@ -21,11 +21,12 @@\n ┊21┊21┊  app.use(cors())\n ┊22┊22┊  app.use(bodyParser.json())\n ┊23┊23┊\n-┊24┊  ┊  const { schema, context } = AppModule.forRoot({ app, connection })\n+┊  ┊24┊  const { schema, context, subscriptions } = AppModule.forRoot({ app, connection })\n ┊25┊25┊\n ┊26┊26┊  const apollo = new ApolloServer({\n ┊27┊27┊    schema,\n ┊28┊28┊    context,\n+┊  ┊29┊    subscriptions,\n ┊29┊30┊  })\n ┊30┊31┊\n ┊31┊32┊  apollo.applyMiddleware({\n```\n\n##### Changed modules&#x2F;chat&#x2F;providers&#x2F;chat.provider.ts\n```diff\n@@ -1,4 +1,5 @@\n ┊1┊1┊import { Injectable } from '@graphql-modules/di'\n+┊ ┊2┊import { PubSub } from 'apollo-server-express'\n ┊2┊3┊import { Connection } from 'typeorm'\n ┊3┊4┊import { Chat } from '../../../entity/chat'\n ┊4┊5┊import { User } from '../../../entity/user'\n```\n```diff\n@@ -8,6 +9,7 @@\n ┊ 8┊ 9┊@Injectable()\n ┊ 9┊10┊export class ChatProvider {\n ┊10┊11┊  constructor(\n+┊  ┊12┊    private pubsub: PubSub,\n ┊11┊13┊    private connection: Connection,\n ┊12┊14┊    private userProvider: UserProvider,\n ┊13┊15┊    private authProvider: AuthProvider\n```\n```diff\n@@ -108,4 +110,53 @@\n ┊108┊110┊\n ┊109┊111┊    return owner || null\n ┊110┊112┊  }\n+┊   ┊113┊\n+┊   ┊114┊  async filterChatAddedOrUpdated(chatAddedOrUpdated: Chat, creatorOrUpdaterId: string) {\n+┊   ┊115┊    return (\n+┊   ┊116┊      creatorOrUpdaterId !== this.currentUser.id &&\n+┊   ┊117┊      chatAddedOrUpdated.listingMembers.some((user: User) => user.id === this.currentUser.id)\n+┊   ┊118┊    )\n+┊   ┊119┊  }\n+┊   ┊120┊\n+┊   ┊121┊  async updateUser({\n+┊   ┊122┊    name,\n+┊   ┊123┊    picture,\n+┊   ┊124┊  }: {\n+┊   ┊125┊    name?: string\n+┊   ┊126┊    picture?: string\n+┊   ┊127┊  } = {}) {\n+┊   ┊128┊    await this.userProvider.updateUser({ name, picture })\n+┊   ┊129┊\n+┊   ┊130┊    const data = await this.connection\n+┊   ┊131┊      .createQueryBuilder(User, 'user')\n+┊   ┊132┊      .where('user.id = :id', { id: this.currentUser.id })\n+┊   ┊133┊      // Get a list of the chats who have/had currentUser involved\n+┊   ┊134┊      .innerJoinAndSelect(\n+┊   ┊135┊        'user.allTimeMemberChats',\n+┊   ┊136┊        'allTimeMemberChats',\n+┊   ┊137┊        // Groups are unaffected\n+┊   ┊138┊        'allTimeMemberChats.name IS NULL'\n+┊   ┊139┊      )\n+┊   ┊140┊      // We need to notify only those who get the chat listed (except currentUser of course)\n+┊   ┊141┊      .innerJoin(\n+┊   ┊142┊        'allTimeMemberChats.listingMembers',\n+┊   ┊143┊        'listingMembers',\n+┊   ┊144┊        'listingMembers.id != :currentUserId',\n+┊   ┊145┊        {\n+┊   ┊146┊          currentUserId: this.currentUser.id,\n+┊   ┊147┊        }\n+┊   ┊148┊      )\n+┊   ┊149┊      .getOne()\n+┊   ┊150┊\n+┊   ┊151┊    const chatsAffected = (data && data.allTimeMemberChats) || []\n+┊   ┊152┊\n+┊   ┊153┊    chatsAffected.forEach(chat => {\n+┊   ┊154┊      this.pubsub.publish('chatUpdated', {\n+┊   ┊155┊        updaterId: this.currentUser.id,\n+┊   ┊156┊        chatUpdated: chat,\n+┊   ┊157┊      })\n+┊   ┊158┊    })\n+┊   ┊159┊\n+┊   ┊160┊    return this.currentUser\n+┊   ┊161┊  }\n ┊111┊162┊}\n```\n\n##### Changed modules&#x2F;chat&#x2F;resolvers&#x2F;resolvers.ts\n```diff\n@@ -1,12 +1,28 @@\n+┊  ┊ 1┊import { PubSub, withFilter } from 'apollo-server-express'\n ┊ 1┊ 2┊import { ModuleContext } from '@graphql-modules/core'\n ┊ 2┊ 3┊import { IResolvers } from '../../../types'\n ┊ 3┊ 4┊import { ChatProvider } from '../providers/chat.provider'\n+┊  ┊ 5┊import { Chat } from '../../../entity/chat'\n ┊ 4┊ 6┊\n ┊ 5┊ 7┊export default {\n ┊ 6┊ 8┊  Query: {\n ┊ 7┊ 9┊    chats: (obj, args, { injector }) => injector.get(ChatProvider).getChats(),\n ┊ 8┊10┊    chat: (obj, { chatId }, { injector }) => injector.get(ChatProvider).getChat(chatId),\n ┊ 9┊11┊  },\n+┊  ┊12┊  Mutation: {\n+┊  ┊13┊    updateUser: (obj, { name, picture }, { injector }) => injector.get(ChatProvider).updateUser({\n+┊  ┊14┊      name: name || '',\n+┊  ┊15┊      picture: picture || '',\n+┊  ┊16┊    }),\n+┊  ┊17┊  },\n+┊  ┊18┊  Subscription: {\n+┊  ┊19┊    chatUpdated: {\n+┊  ┊20┊      subscribe: withFilter((root, args, { injector }: ModuleContext) => injector.get(PubSub).asyncIterator('chatUpdated'),\n+┊  ┊21┊        (data: { chatUpdated: Chat, updaterId: string }, variables, { injector }: ModuleContext) =>\n+┊  ┊22┊          data && injector.get(ChatProvider).filterChatAddedOrUpdated(data.chatUpdated, data.updaterId)\n+┊  ┊23┊      ),\n+┊  ┊24┊    },\n+┊  ┊25┊  },\n ┊10┊26┊  Chat: {\n ┊11┊27┊    name: (chat, args, { injector }) => injector.get(ChatProvider).getChatName(chat),\n ┊12┊28┊    picture: (chat, args, { injector }) => injector.get(ChatProvider).getChatPicture(chat),\n```\n\n##### Changed modules&#x2F;chat&#x2F;schema&#x2F;typeDefs.graphql\n```diff\n@@ -3,6 +3,10 @@\n ┊ 3┊ 3┊  chat(chatId: ID!): Chat\n ┊ 4┊ 4┊}\n ┊ 5┊ 5┊\n+┊  ┊ 6┊type Subscription {\n+┊  ┊ 7┊  chatUpdated: Chat\n+┊  ┊ 8┊}\n+┊  ┊ 9┊\n ┊ 6┊10┊type Chat {\n ┊ 7┊11┊  #May be a chat or a group\n ┊ 8┊12┊  id: ID!\n```\n\n[}]: #\n\n> See [official Apollo subscription docs page](https://www.apollographql.com/docs/apollo-server/features/subscriptions.html).\n\nNote that we've added a second `updateUser()` resolver in addition to the one which already exists in the `user` module. Reason being is because we want to keep the `user` module independent from the `chat` module, and so we apply logic on top of the existing one. GQLModule's engine will execute the resolvers in the right order based on the injected dependencies tree, so you shouldn't worry much about execution.\n\nI'd like to get back to the image uploading feature. Although it can be implemented manually, we will be using an external service for storing images. This is much more convenient: it will save us a lot of implementation, it's probably more secure, and it has built-in features such as transformation and projection.\n\nWe will be using [Cloudinary](https://cloudinary.com/) as our storage service. A Cloudinary instance should be set for each application separately, but for the sake of demonstration we will use an instance that we set up for the public, but just know **that you should never reveal the credentials of any service that you set up**.\n\nFirst of all be sure to open an account and setup your basic app information in Cloudinary.\n\nThen, add a new preset called `profile-pic` where we will be resettings uploaded images' dimensions to 300px by 300px. More information on how to do that can be found in [here](https://support.cloudinary.com/hc/en-us/articles/360004967272-Upload-Preset-Configuration).\n\n![upload-picture-settings](https://user-images.githubusercontent.com/7648874/51096173-a984f480-17f5-11e9-893f-5227e2c564af.jpg)\n\nUp next, we will implement the appropriate route in our app's server. The reason we don't upload the image directly to the cloud service directly from our application is because **we risk exposing some sensitive data regards the service and some users may abuse it**. We will start by installing the right packages:\n\n    $ yarn add tmp@0.0.33 multer@1.4.1 cloudinary@1.13.2\n    $ yarn add -D @types/tmp@0.0.33 @types/multer1.3.7\n\nWe will also write custom TypeScript definitions for the `cloudinary` package since they don't exist:\n\n[{]: <helper> (diffStep 2.4 files=\"cloudinary.d.ts\" module=\"server\")\n\n#### [Step 2.4: Add /upload-profile-pic REST endpoint](https://github.com/Urigo/WhatsApp-Clone-Server/commit/41c390c)\n\n##### Added cloudinary.d.ts\n```diff\n@@ -0,0 +1,10 @@\n+┊  ┊ 1┊declare module 'cloudinary' {\n+┊  ┊ 2┊  export function config(config: { cloud_name: string; api_key: string; api_secret: string }): void\n+┊  ┊ 3┊\n+┊  ┊ 4┊  export var v2: {\n+┊  ┊ 5┊    uploader: {\n+┊  ┊ 6┊      upload_stream: (callback?: (error: Error, result: any) => any) => NodeJS.WritableStream\n+┊  ┊ 7┊      upload: (path: string, callback?: (error: Error, result: any) => any) => any\n+┊  ┊ 8┊    }\n+┊  ┊ 9┊  }\n+┊  ┊10┊}\n```\n\n[}]: #\n\nThen we will set the right API keys in the `.env` file:\n\n[{]: <helper> (diffStep 2.4 files=\".env\" module=\"server\")\n\n#### [Step 2.4: Add /upload-profile-pic REST endpoint](https://github.com/Urigo/WhatsApp-Clone-Server/commit/41c390c)\n\n##### Added .env\n```diff\n@@ -0,0 +1,2 @@\n+┊ ┊1┊# NEVER DEFINE HERE ONLY ON CLOUD\n+┊ ┊2┊CLOUDINARY_URL=cloudinary://756494366771661:OttZILiLRKaB5tKR8F3vQhMrNRg@whatsapp-clone\n```\n\n[}]: #\n\nThe purpose of the `.env` file is to load environment variables into our app in a more comfortable way. For that to apply we will need to install and require a package which is called [`dotenv`](https://www.npmjs.com/package/dotenv).\n\n    $ yarn add dotenv@6.2.0\n\n[{]: <helper> (diffStep 2.4 files=\"index\" module=\"server\")\n\n#### [Step 2.4: Add /upload-profile-pic REST endpoint](https://github.com/Urigo/WhatsApp-Clone-Server/commit/41c390c)\n\n##### Changed index.ts\n```diff\n@@ -1,3 +1,5 @@\n+┊ ┊1┊require('dotenv').config()\n+┊ ┊2┊\n ┊1┊3┊import 'reflect-metadata'\n ┊2┊4┊import { ApolloServer } from 'apollo-server-express'\n ┊3┊5┊import bodyParser from 'body-parser'\n```\n\n##### Changed modules&#x2F;user&#x2F;index.ts\n```diff\n@@ -1,18 +1,43 @@\n+┊  ┊ 1┊/// <reference path=\"../../cloudinary.d.ts\" />\n ┊ 1┊ 2┊import { GraphQLModule } from '@graphql-modules/core'\n ┊ 2┊ 3┊import { InjectFunction, ProviderScope } from '@graphql-modules/di'\n ┊ 3┊ 4┊import { loadResolversFiles, loadSchemaFiles } from '@graphql-modules/sonar'\n+┊  ┊ 5┊import { Express } from 'express'\n+┊  ┊ 6┊import multer from 'multer'\n+┊  ┊ 7┊import tmp from 'tmp'\n+┊  ┊ 8┊import cloudinary from 'cloudinary'\n+┊  ┊ 9┊import { APP } from '../app.symbols'\n ┊ 4┊10┊import { AuthModule } from '../auth'\n ┊ 5┊11┊import { UserProvider } from './providers/user.provider'\n ┊ 6┊12┊\n+┊  ┊13┊const CLOUDINARY_URL = process.env.CLOUDINARY_URL || ''\n+┊  ┊14┊\n ┊ 7┊15┊export const UserModule = new GraphQLModule({\n ┊ 8┊16┊  name: 'User',\n-┊ 9┊  ┊  imports: [\n-┊10┊  ┊    AuthModule,\n-┊11┊  ┊  ],\n-┊12┊  ┊  providers: [\n-┊13┊  ┊    UserProvider,\n-┊14┊  ┊  ],\n+┊  ┊17┊  imports: [AuthModule],\n+┊  ┊18┊  providers: [UserProvider],\n ┊15┊19┊  typeDefs: loadSchemaFiles(__dirname + '/schema/'),\n ┊16┊20┊  resolvers: loadResolversFiles(__dirname + '/resolvers/'),\n ┊17┊21┊  defaultProviderScope: ProviderScope.Session,\n+┊  ┊22┊  middleware: InjectFunction(UserProvider, APP)((userProvider, app: Express) => {\n+┊  ┊23┊    const match = CLOUDINARY_URL.match(/cloudinary:\\/\\/(\\d+):(\\w+)@(\\.+)/)\n+┊  ┊24┊\n+┊  ┊25┊    if (match) {\n+┊  ┊26┊      const [api_key, api_secret, cloud_name] = match.slice(1)\n+┊  ┊27┊      cloudinary.config({ api_key, api_secret, cloud_name })\n+┊  ┊28┊    }\n+┊  ┊29┊\n+┊  ┊30┊    const upload = multer({\n+┊  ┊31┊      dest: tmp.dirSync({ unsafeCleanup: true }).name,\n+┊  ┊32┊    })\n+┊  ┊33┊\n+┊  ┊34┊    app.post('/upload-profile-pic', upload.single('file'), async (req: any, res, done) => {\n+┊  ┊35┊      try {\n+┊  ┊36┊        res.json(await userProvider.uploadProfilePic(req.file.path))\n+┊  ┊37┊      } catch (e) {\n+┊  ┊38┊        done(e)\n+┊  ┊39┊      }\n+┊  ┊40┊    })\n+┊  ┊41┊    return {}\n+┊  ┊42┊  }),\n ┊18┊43┊})\n```\n\n[}]: #\n\n> See [Cloudinary's NodeJS API](https://cloudinary.com/documentation/node_integration).\n> See [API setup](https://cloudinary.com/documentation/solution_overview#account_and_api_setup).\n\nAnd finally, we will implement a REST endpoint in the `user` module under `/upload-profile-pic`:\n\n[{]: <helper> (diffStep 2.4 files=\"modules/user\" module=\"server\")\n\n#### [Step 2.4: Add /upload-profile-pic REST endpoint](https://github.com/Urigo/WhatsApp-Clone-Server/commit/41c390c)\n\n##### Changed modules&#x2F;user&#x2F;index.ts\n```diff\n@@ -1,18 +1,43 @@\n+┊  ┊ 1┊/// <reference path=\"../../cloudinary.d.ts\" />\n ┊ 1┊ 2┊import { GraphQLModule } from '@graphql-modules/core'\n ┊ 2┊ 3┊import { InjectFunction, ProviderScope } from '@graphql-modules/di'\n ┊ 3┊ 4┊import { loadResolversFiles, loadSchemaFiles } from '@graphql-modules/sonar'\n+┊  ┊ 5┊import { Express } from 'express'\n+┊  ┊ 6┊import multer from 'multer'\n+┊  ┊ 7┊import tmp from 'tmp'\n+┊  ┊ 8┊import cloudinary from 'cloudinary'\n+┊  ┊ 9┊import { APP } from '../app.symbols'\n ┊ 4┊10┊import { AuthModule } from '../auth'\n ┊ 5┊11┊import { UserProvider } from './providers/user.provider'\n ┊ 6┊12┊\n+┊  ┊13┊const CLOUDINARY_URL = process.env.CLOUDINARY_URL || ''\n+┊  ┊14┊\n ┊ 7┊15┊export const UserModule = new GraphQLModule({\n ┊ 8┊16┊  name: 'User',\n-┊ 9┊  ┊  imports: [\n-┊10┊  ┊    AuthModule,\n-┊11┊  ┊  ],\n-┊12┊  ┊  providers: [\n-┊13┊  ┊    UserProvider,\n-┊14┊  ┊  ],\n+┊  ┊17┊  imports: [AuthModule],\n+┊  ┊18┊  providers: [UserProvider],\n ┊15┊19┊  typeDefs: loadSchemaFiles(__dirname + '/schema/'),\n ┊16┊20┊  resolvers: loadResolversFiles(__dirname + '/resolvers/'),\n ┊17┊21┊  defaultProviderScope: ProviderScope.Session,\n+┊  ┊22┊  middleware: InjectFunction(UserProvider, APP)((userProvider, app: Express) => {\n+┊  ┊23┊    const match = CLOUDINARY_URL.match(/cloudinary:\\/\\/(\\d+):(\\w+)@(\\.+)/)\n+┊  ┊24┊\n+┊  ┊25┊    if (match) {\n+┊  ┊26┊      const [api_key, api_secret, cloud_name] = match.slice(1)\n+┊  ┊27┊      cloudinary.config({ api_key, api_secret, cloud_name })\n+┊  ┊28┊    }\n+┊  ┊29┊\n+┊  ┊30┊    const upload = multer({\n+┊  ┊31┊      dest: tmp.dirSync({ unsafeCleanup: true }).name,\n+┊  ┊32┊    })\n+┊  ┊33┊\n+┊  ┊34┊    app.post('/upload-profile-pic', upload.single('file'), async (req: any, res, done) => {\n+┊  ┊35┊      try {\n+┊  ┊36┊        res.json(await userProvider.uploadProfilePic(req.file.path))\n+┊  ┊37┊      } catch (e) {\n+┊  ┊38┊        done(e)\n+┊  ┊39┊      }\n+┊  ┊40┊    })\n+┊  ┊41┊    return {}\n+┊  ┊42┊  }),\n ┊18┊43┊})\n```\n\n##### Changed modules&#x2F;user&#x2F;providers&#x2F;user.provider.ts\n```diff\n@@ -1,4 +1,5 @@\n ┊1┊1┊import { Injectable, ProviderScope } from '@graphql-modules/di'\n+┊ ┊2┊import cloudinary from 'cloudinary'\n ┊2┊3┊import { Connection } from 'typeorm'\n ┊3┊4┊import { User } from '../../../entity/user'\n ┊4┊5┊import { AuthProvider } from '../../auth/providers/auth.provider'\n```\n```diff\n@@ -42,4 +43,16 @@\n ┊42┊43┊\n ┊43┊44┊    return this.currentUser;\n ┊44┊45┊  }\n+┊  ┊46┊\n+┊  ┊47┊  uploadProfilePic(filePath: string) {\n+┊  ┊48┊    return new Promise((resolve, reject) => {\n+┊  ┊49┊      cloudinary.v2.uploader.upload(filePath, (error, result) => {\n+┊  ┊50┊        if (error) {\n+┊  ┊51┊          reject(error)\n+┊  ┊52┊        } else {\n+┊  ┊53┊          resolve(result)\n+┊  ┊54┊        }\n+┊  ┊55┊      })\n+┊  ┊56┊    })\n+┊  ┊57┊  }\n ┊45┊58┊}\n```\n\n[}]: #\n\nNow getting back to the client, we will implement a `picture.service` that will be responsible for uploading images in our application:\n\n[{]: <helper> (diffStep 2.6 files=\"src/services/picture\" module=\"client\")\n\n#### [Step 2.6: Implement image uploading](https://github.com/Urigo/WhatsApp-Clone-Client-React/commit/8e9cadb)\n\n##### Added src&#x2F;services&#x2F;picture.service.tsx\n```diff\n@@ -0,0 +1,31 @@\n+┊  ┊ 1┊import { getAuthHeader } from './auth.service'\n+┊  ┊ 2┊\n+┊  ┊ 3┊export const pickPicture = () => {\n+┊  ┊ 4┊  return new Promise((resolve, reject) => {\n+┊  ┊ 5┊    const input = document.createElement('input')\n+┊  ┊ 6┊    input.type = 'file'\n+┊  ┊ 7┊    input.accept = 'image/*'\n+┊  ┊ 8┊    input.onchange = e => {\n+┊  ┊ 9┊      const target = e.target as HTMLInputElement\n+┊  ┊10┊      resolve(target.files[0])\n+┊  ┊11┊    }\n+┊  ┊12┊    input.onerror = reject\n+┊  ┊13┊    input.click()\n+┊  ┊14┊  })\n+┊  ┊15┊}\n+┊  ┊16┊\n+┊  ┊17┊export const uploadProfilePicture = file => {\n+┊  ┊18┊  const formData = new FormData()\n+┊  ┊19┊  formData.append('file', file)\n+┊  ┊20┊  formData.append('upload_preset', 'profile-pic')\n+┊  ┊21┊\n+┊  ┊22┊  return fetch(`${process.env.REACT_APP_SERVER_URL}/upload-profile-pic`, {\n+┊  ┊23┊    method: 'POST',\n+┊  ┊24┊    body: formData,\n+┊  ┊25┊    headers: {\n+┊  ┊26┊      Authorization: getAuthHeader(),\n+┊  ┊27┊    }\n+┊  ┊28┊  }).then(res => {\n+┊  ┊29┊    return res.json()\n+┊  ┊30┊  })\n+┊  ┊31┊}\n```\n\n[}]: #\n\nAnd we will use it in the settings screen:\n\n[{]: <helper> (diffStep 2.6 files=\"src/components\" module=\"client\")\n\n#### [Step 2.6: Implement image uploading](https://github.com/Urigo/WhatsApp-Clone-Client-React/commit/8e9cadb)\n\n##### Changed src&#x2F;components&#x2F;SettingsScreen&#x2F;SettingsForm.tsx\n```diff\n@@ -10,6 +10,7 @@\n ┊10┊10┊import * as fragments from '../../graphql/fragments'\n ┊11┊11┊import { SettingsFormMutation } from '../../graphql/types'\n ┊12┊12┊import { useMe } from '../../services/auth.service'\n+┊  ┊13┊import { pickPicture, uploadProfilePicture } from '../../services/picture.service'\n ┊13┊14┊import Navbar from '../Navbar'\n ┊14┊15┊import SettingsNavbar from './SettingsNavbar'\n ┊15┊16┊\n```\n```diff\n@@ -104,7 +105,13 @@\n ┊104┊105┊  }\n ┊105┊106┊\n ┊106┊107┊  const updatePicture = async () => {\n-┊107┊   ┊    // TODO: Implement\n+┊   ┊108┊    const file = await pickPicture()\n+┊   ┊109┊\n+┊   ┊110┊    if (!file) return\n+┊   ┊111┊\n+┊   ┊112┊    const { url } = await uploadProfilePicture(file)\n+┊   ┊113┊\n+┊   ┊114┊    setMyPicture(url)\n ┊108┊115┊  }\n ┊109┊116┊\n ┊110┊117┊  return (\n```\n\n[}]: #\n\nThe settings component is complete! We will connect it to the main flow by implementing the pop-over menu at the top right corner of the main screen where we will be able to navigate to the settings screen and sign-out:\n\n[{]: <helper> (diffStep 2.7 module=\"client\")\n\n#### [Step 2.7: Make components navigatable](https://github.com/Urigo/WhatsApp-Clone-Client-React/commit/69b0ca6)\n\n##### Changed src&#x2F;App.tsx\n```diff\n@@ -3,6 +3,7 @@\n ┊3┊3┊import AnimatedSwitch from './components/AnimatedSwitch'\n ┊4┊4┊import AuthScreen from './components/AuthScreen'\n ┊5┊5┊import ChatsListScreen from './components/ChatsListScreen'\n+┊ ┊6┊import SettingsScreen from './components/SettingsScreen'\n ┊6┊7┊import { withAuth } from './services/auth.service'\n ┊7┊8┊\n ┊8┊9┊const RedirectToChats = () => (\n```\n```diff\n@@ -14,6 +15,7 @@\n ┊14┊15┊    <AnimatedSwitch>\n ┊15┊16┊      <Route exact path=\"/sign-(in|up)\" component={AuthScreen} />\n ┊16┊17┊      <Route exact path=\"/chats\" component={withAuth(ChatsListScreen)} />\n+┊  ┊18┊      <Route exact path=\"/settings\" component={withAuth(SettingsScreen)} />\n ┊17┊19┊      <Route component={RedirectToChats} />\n ┊18┊20┊    </AnimatedSwitch>\n ┊19┊21┊  </BrowserRouter>\n```\n\n##### Changed src&#x2F;components&#x2F;ChatsListScreen&#x2F;ChatsNavbar.tsx\n```diff\n@@ -1,14 +1,95 @@\n+┊  ┊ 1┊import Button from '@material-ui/core/Button'\n+┊  ┊ 2┊import List from '@material-ui/core/List'\n+┊  ┊ 3┊import ListItem from '@material-ui/core/ListItem'\n+┊  ┊ 4┊import Popover from '@material-ui/core/Popover'\n+┊  ┊ 5┊import MoreIcon from '@material-ui/icons/MoreVert'\n+┊  ┊ 6┊import SignOutIcon from '@material-ui/icons/PowerSettingsNew'\n+┊  ┊ 7┊import SettingsIcon from '@material-ui/icons/Settings'\n+┊  ┊ 8┊import { History } from 'history'\n ┊ 1┊ 9┊import * as React from 'react'\n+┊  ┊10┊import { useState } from 'react'\n ┊ 2┊11┊import styled from 'styled-components'\n+┊  ┊12┊import { signOut } from '../../services/auth.service'\n ┊ 3┊13┊\n ┊ 4┊14┊const Style = styled.div`\n+┊  ┊15┊  padding: 0;\n+┊  ┊16┊  display: flex;\n+┊  ┊17┊  flex-direction: row;\n+┊  ┊18┊\n ┊ 5┊19┊  .ChatsNavbar-title {\n-┊ 6┊  ┊    float: left;\n+┊  ┊20┊    line-height: 56px;\n+┊  ┊21┊  }\n+┊  ┊22┊\n+┊  ┊23┊  .ChatsNavbar-options-btn {\n+┊  ┊24┊    float: right;\n+┊  ┊25┊    height: 100%;\n+┊  ┊26┊    font-size: 1.2em;\n+┊  ┊27┊    margin-right: -15px;\n+┊  ┊28┊    color: var(--primary-text);\n+┊  ┊29┊  }\n+┊  ┊30┊\n+┊  ┊31┊  .ChatsNavbar-rest {\n+┊  ┊32┊    flex: 1;\n+┊  ┊33┊    justify-content: flex-end;\n+┊  ┊34┊  }\n+┊  ┊35┊\n+┊  ┊36┊  .ChatsNavbar-options-item svg {\n+┊  ┊37┊    margin-right: 10px;\n ┊ 7┊38┊  }\n ┊ 8┊39┊`\n ┊ 9┊40┊\n-┊10┊  ┊export default () => (\n-┊11┊  ┊  <Style className=\"ChatsNavbar\">\n-┊12┊  ┊    <span className=\"ChatsNavbar-title\">WhatsApp Clone</span>\n-┊13┊  ┊  </Style>\n-┊14┊  ┊)\n+┊  ┊41┊interface ChatsNavbarProps {\n+┊  ┊42┊  history: History\n+┊  ┊43┊}\n+┊  ┊44┊\n+┊  ┊45┊export default ({ history }: ChatsNavbarProps) => {\n+┊  ┊46┊  const [popped, setPopped] = useState(false)\n+┊  ┊47┊\n+┊  ┊48┊  const navToSettings = () => {\n+┊  ┊49┊    setPopped(false)\n+┊  ┊50┊    history.push('/settings')\n+┊  ┊51┊  }\n+┊  ┊52┊\n+┊  ┊53┊  const handleSignOut = () => {\n+┊  ┊54┊    setPopped(false)\n+┊  ┊55┊    signOut()\n+┊  ┊56┊\n+┊  ┊57┊    history.push('/sign-in')\n+┊  ┊58┊  }\n+┊  ┊59┊\n+┊  ┊60┊  return (\n+┊  ┊61┊    <Style className=\"ChatsNavbar\">\n+┊  ┊62┊      <span className=\"ChatsNavbar-title\">WhatsApp Clone</span>\n+┊  ┊63┊      <div className=\"ChatsNavbar-rest\">\n+┊  ┊64┊        <Button className=\"ChatsNavbar-options-btn\" onClick={setPopped.bind(null, true)}>\n+┊  ┊65┊          <MoreIcon />\n+┊  ┊66┊        </Button>\n+┊  ┊67┊      </div>\n+┊  ┊68┊      <Popover\n+┊  ┊69┊        open={popped}\n+┊  ┊70┊        onClose={setPopped.bind(null, false)}\n+┊  ┊71┊        anchorOrigin={{\n+┊  ┊72┊          vertical: 'top',\n+┊  ┊73┊          horizontal: 'right',\n+┊  ┊74┊        }}\n+┊  ┊75┊        transformOrigin={{\n+┊  ┊76┊          vertical: 'top',\n+┊  ┊77┊          horizontal: 'right',\n+┊  ┊78┊        }}\n+┊  ┊79┊      >\n+┊  ┊80┊        <Style>\n+┊  ┊81┊          <List>\n+┊  ┊82┊            <ListItem className=\"ChatsNavbar-options-item\" button onClick={navToSettings}>\n+┊  ┊83┊              <SettingsIcon />\n+┊  ┊84┊              Settings\n+┊  ┊85┊            </ListItem>\n+┊  ┊86┊            <ListItem className=\"ChatsNavbar-options-item\" button onClick={handleSignOut}>\n+┊  ┊87┊              <SignOutIcon />\n+┊  ┊88┊              Sign Out\n+┊  ┊89┊            </ListItem>\n+┊  ┊90┊          </List>\n+┊  ┊91┊        </Style>\n+┊  ┊92┊      </Popover>\n+┊  ┊93┊    </Style>\n+┊  ┊94┊  )\n+┊  ┊95┊}\n```\n\n##### Changed src&#x2F;components&#x2F;ChatsListScreen&#x2F;index.tsx\n```diff\n@@ -1,13 +1,14 @@\n ┊ 1┊ 1┊import * as React from 'react'\n ┊ 2┊ 2┊import { Suspense } from 'react'\n+┊  ┊ 3┊import { RouteComponentProps } from 'react-router-dom'\n ┊ 3┊ 4┊import Navbar from '../Navbar'\n ┊ 4┊ 5┊import ChatsList from './ChatsList'\n ┊ 5┊ 6┊import ChatsNavbar from './ChatsNavbar'\n ┊ 6┊ 7┊\n-┊ 7┊  ┊export default () => (\n+┊  ┊ 8┊export default ({ history }: RouteComponentProps) => (\n ┊ 8┊ 9┊  <div className=\"ChatsListScreen Screen\">\n ┊ 9┊10┊    <Navbar>\n-┊10┊  ┊      <ChatsNavbar />\n+┊  ┊11┊      <ChatsNavbar history={history} />\n ┊11┊12┊    </Navbar>\n ┊12┊13┊    <Suspense fallback={null}>\n ┊13┊14┊      <ChatsList />\n```\n\n[}]: #"
          },
          {
            "manualTitle": "Step 3: Creating a chat app",
            "stepRevision": "147e1cf8fe6cdd0baceef5f1ae02176549a4507b",
            "manualView": "![chats](https://user-images.githubusercontent.com/7648874/52663040-aa1dc180-2f40-11e9-9ae4-bda648916bc4.png)\n\nIn this step we will be implementing a basic chat app. We will be able to:\n\n- Create chats.\n- Remove chats.\n- Send messages.\n\nThe flow is gonna go like this:\n\n- A chat can be created by picking a user from the users list.\n- When clicking on a chat, we will be promoted to a chat room.\n- The chat room will have a pop-over menu where we will be able to remove the chat.\n\nWe will start by adding a new entity called `Recipient`. The `Recipient` entity is the bridge between the `User` and the `Message` and it will tell us when the message was received and when it was read. Note that a message holds multiple recipients - this way we can extend its functionality to support group messaging where each message can have more than 2 recipients. Accordingly, we will have to make few adjustments to the existing entities:\n\n[{]: <helper> (diffStep 3.1 module=\"server\")\n\n#### [Step 3.1: Edit entities to serve chat app](https://github.com/Urigo/WhatsApp-Clone-Server/commit/a547772)\n\n##### Changed codegen.yml\n```diff\n@@ -12,6 +12,7 @@\n ┊12┊12┊      mappers:\n ┊13┊13┊        Chat: ./entity/chat#Chat\n ┊14┊14┊        Message: ./entity/message#Message\n+┊  ┊15┊        Recipient: ./entity/recipient#Recipient\n ┊15┊16┊        User: ./entity/user#User\n ┊16┊17┊      scalars:\n ┊17┊18┊        Date: Date\n```\n\n##### Changed entity&#x2F;message.ts\n```diff\n@@ -9,6 +9,7 @@\n ┊ 9┊ 9┊  CreateDateColumn,\n ┊10┊10┊} from 'typeorm'\n ┊11┊11┊import Chat from './chat'\n+┊  ┊12┊import Recipient from './recipient'\n ┊12┊13┊import User from './user'\n ┊13┊14┊import { MessageType } from '../db'\n ┊14┊15┊\n```\n```diff\n@@ -17,6 +18,7 @@\n ┊17┊18┊  content?: string\n ┊18┊19┊  createdAt?: Date\n ┊19┊20┊  type?: MessageType\n+┊  ┊21┊  recipients?: Recipient[]\n ┊20┊22┊  holders?: User[]\n ┊21┊23┊  chat?: Chat\n ┊22┊24┊}\n```\n```diff\n@@ -38,6 +40,9 @@\n ┊38┊40┊  @Column()\n ┊39┊41┊  type: number\n ┊40┊42┊\n+┊  ┊43┊  @OneToMany(type => Recipient, recipient => recipient.message, { cascade: ['insert', 'update'], eager: true })\n+┊  ┊44┊  recipients: Recipient[]\n+┊  ┊45┊\n ┊41┊46┊  @ManyToMany(type => User, user => user.holderMessages, {\n ┊42┊47┊    cascade: ['insert', 'update'],\n ┊43┊48┊    eager: true,\n```\n```diff\n@@ -53,6 +58,7 @@\n ┊53┊58┊    content,\n ┊54┊59┊    createdAt,\n ┊55┊60┊    type,\n+┊  ┊61┊    recipients,\n ┊56┊62┊    holders,\n ┊57┊63┊    chat,\n ┊58┊64┊  }: MessageConstructor = {}) {\n```\n```diff\n@@ -68,6 +74,10 @@\n ┊68┊74┊    if (type) {\n ┊69┊75┊      this.type = type\n ┊70┊76┊    }\n+┊  ┊77┊    if (recipients) {\n+┊  ┊78┊      recipients.forEach(recipient => recipient.message = this)\n+┊  ┊79┊      this.recipients = recipients\n+┊  ┊80┊    }\n ┊71┊81┊    if (holders) {\n ┊72┊82┊      this.holders = holders\n ┊73┊83┊    }\n```\n\n##### Added entity&#x2F;recipient.ts\n```diff\n@@ -0,0 +1,42 @@\n+┊  ┊ 1┊import { Entity, ManyToOne, Column } from 'typeorm'\n+┊  ┊ 2┊import { Message } from './message'\n+┊  ┊ 3┊import { User } from './user'\n+┊  ┊ 4┊\n+┊  ┊ 5┊interface RecipientConstructor {\n+┊  ┊ 6┊  user?: User\n+┊  ┊ 7┊  message?: Message\n+┊  ┊ 8┊  receivedAt?: Date\n+┊  ┊ 9┊  readAt?: Date\n+┊  ┊10┊}\n+┊  ┊11┊\n+┊  ┊12┊@Entity()\n+┊  ┊13┊export class Recipient {\n+┊  ┊14┊  @ManyToOne(type => User, user => user.recipients, { primary: true })\n+┊  ┊15┊  user: User\n+┊  ┊16┊\n+┊  ┊17┊  @ManyToOne(type => Message, message => message.recipients, { primary: true })\n+┊  ┊18┊  message: Message\n+┊  ┊19┊\n+┊  ┊20┊  @Column({ nullable: true })\n+┊  ┊21┊  receivedAt: Date\n+┊  ┊22┊\n+┊  ┊23┊  @Column({ nullable: true })\n+┊  ┊24┊  readAt: Date\n+┊  ┊25┊\n+┊  ┊26┊  constructor({ user, message, receivedAt, readAt }: RecipientConstructor = {}) {\n+┊  ┊27┊    if (user) {\n+┊  ┊28┊      this.user = user\n+┊  ┊29┊    }\n+┊  ┊30┊    if (message) {\n+┊  ┊31┊      this.message = message\n+┊  ┊32┊    }\n+┊  ┊33┊    if (receivedAt) {\n+┊  ┊34┊      this.receivedAt = receivedAt\n+┊  ┊35┊    }\n+┊  ┊36┊    if (readAt) {\n+┊  ┊37┊      this.readAt = readAt\n+┊  ┊38┊    }\n+┊  ┊39┊  }\n+┊  ┊40┊}\n+┊  ┊41┊\n+┊  ┊42┊export default Recipient\n```\n\n##### Changed entity&#x2F;user.ts\n```diff\n@@ -1,6 +1,7 @@\n ┊1┊1┊import { Entity, Column, PrimaryGeneratedColumn, ManyToMany, OneToMany } from 'typeorm'\n ┊2┊2┊import Chat from './chat'\n ┊3┊3┊import Message from './message'\n+┊ ┊4┊import Recipient from './recipient'\n ┊4┊5┊\n ┊5┊6┊interface UserConstructor {\n ┊6┊7┊  username?: string\n```\n```diff\n@@ -41,6 +42,9 @@\n ┊41┊42┊  @OneToMany(type => Message, message => message.sender)\n ┊42┊43┊  senderMessages: Message[]\n ┊43┊44┊\n+┊  ┊45┊  @OneToMany(type => Recipient, recipient => recipient.user)\n+┊  ┊46┊  recipients: Recipient[]\n+┊  ┊47┊\n ┊44┊48┊  constructor({ username, password, name, picture }: UserConstructor = {}) {\n ┊45┊49┊    if (username) {\n ┊46┊50┊      this.username = username\n```\n\n##### Changed modules&#x2F;app.module.ts\n```diff\n@@ -4,6 +4,7 @@\n ┊ 4┊ 4┊import { AuthModule } from './auth'\n ┊ 5┊ 5┊import { UserModule } from './user'\n ┊ 6┊ 6┊import { ChatModule } from './chat'\n+┊  ┊ 7┊import { RecipientModule } from './recipient'\n ┊ 7┊ 8┊import { MessageModule } from './message'\n ┊ 8┊ 9┊\n ┊ 9┊10┊export interface IAppModuleConfig {\n```\n```diff\n@@ -21,6 +22,7 @@\n ┊21┊22┊    UserModule,\n ┊22┊23┊    ChatModule,\n ┊23┊24┊    MessageModule,\n+┊  ┊25┊    RecipientModule,\n ┊24┊26┊  ],\n ┊25┊27┊  configRequired: true,\n ┊26┊28┊})\n```\n\n##### Added modules&#x2F;recipient&#x2F;index.ts\n```diff\n@@ -0,0 +1,22 @@\n+┊  ┊ 1┊import { GraphQLModule } from '@graphql-modules/core';\n+┊  ┊ 2┊import { loadResolversFiles, loadSchemaFiles } from '@graphql-modules/sonar';\n+┊  ┊ 3┊import { UserModule } from '../user';\n+┊  ┊ 4┊import { MessageModule } from '../message';\n+┊  ┊ 5┊import { ChatModule } from '../chat';\n+┊  ┊ 6┊import { RecipientProvider } from './providers/recipient.provider';\n+┊  ┊ 7┊import { AuthModule } from '../auth';\n+┊  ┊ 8┊\n+┊  ┊ 9┊export const RecipientModule = new GraphQLModule({\n+┊  ┊10┊  name: 'Recipient',\n+┊  ┊11┊  imports: [\n+┊  ┊12┊    AuthModule,\n+┊  ┊13┊    UserModule,\n+┊  ┊14┊    ChatModule,\n+┊  ┊15┊    MessageModule,\n+┊  ┊16┊  ],\n+┊  ┊17┊  providers: [\n+┊  ┊18┊    RecipientProvider,\n+┊  ┊19┊  ],\n+┊  ┊20┊  typeDefs: loadSchemaFiles(__dirname + '/schema/'),\n+┊  ┊21┊  resolvers: loadResolversFiles(__dirname + '/resolvers/'),\n+┊  ┊22┊});\n```\n\n##### Added modules&#x2F;recipient&#x2F;providers&#x2F;recipient.provider.ts\n```diff\n@@ -0,0 +1,123 @@\n+┊   ┊  1┊import { Injectable, ProviderScope } from '@graphql-modules/di'\n+┊   ┊  2┊import { Connection } from 'typeorm'\n+┊   ┊  3┊import { MessageProvider } from '../../message/providers/message.provider'\n+┊   ┊  4┊import { Chat } from '../../../entity/chat'\n+┊   ┊  5┊import { Message } from '../../../entity/message'\n+┊   ┊  6┊import { Recipient } from '../../../entity/recipient'\n+┊   ┊  7┊import { AuthProvider } from '../../auth/providers/auth.provider'\n+┊   ┊  8┊\n+┊   ┊  9┊@Injectable({\n+┊   ┊ 10┊  scope: ProviderScope.Session,\n+┊   ┊ 11┊})\n+┊   ┊ 12┊export class RecipientProvider {\n+┊   ┊ 13┊  constructor(\n+┊   ┊ 14┊    private authProvider: AuthProvider,\n+┊   ┊ 15┊    private connection: Connection,\n+┊   ┊ 16┊    private messageProvider: MessageProvider\n+┊   ┊ 17┊  ) {}\n+┊   ┊ 18┊\n+┊   ┊ 19┊  public repository = this.connection.getRepository(Recipient)\n+┊   ┊ 20┊  public currentUser = this.authProvider.currentUser\n+┊   ┊ 21┊\n+┊   ┊ 22┊  createQueryBuilder() {\n+┊   ┊ 23┊    return this.connection.createQueryBuilder(Recipient, 'recipient')\n+┊   ┊ 24┊  }\n+┊   ┊ 25┊\n+┊   ┊ 26┊  getChatUnreadMessagesCount(chat: Chat) {\n+┊   ┊ 27┊    return this.messageProvider\n+┊   ┊ 28┊      .createQueryBuilder()\n+┊   ┊ 29┊      .innerJoin('message.chat', 'chat', 'chat.id = :chatId', { chatId: chat.id })\n+┊   ┊ 30┊      .innerJoin(\n+┊   ┊ 31┊        'message.recipients',\n+┊   ┊ 32┊        'recipients',\n+┊   ┊ 33┊        'recipients.user.id = :userId AND recipients.readAt IS NULL',\n+┊   ┊ 34┊        {\n+┊   ┊ 35┊          userId: this.currentUser.id,\n+┊   ┊ 36┊        }\n+┊   ┊ 37┊      )\n+┊   ┊ 38┊      .getCount()\n+┊   ┊ 39┊  }\n+┊   ┊ 40┊\n+┊   ┊ 41┊  getMessageRecipients(message: Message) {\n+┊   ┊ 42┊    return this.createQueryBuilder()\n+┊   ┊ 43┊      .innerJoinAndSelect('recipient.message', 'message', 'message.id = :messageId', {\n+┊   ┊ 44┊        messageId: message.id,\n+┊   ┊ 45┊      })\n+┊   ┊ 46┊      .innerJoinAndSelect('recipient.user', 'user')\n+┊   ┊ 47┊      .getMany()\n+┊   ┊ 48┊  }\n+┊   ┊ 49┊\n+┊   ┊ 50┊  async getRecipientChat(recipient: Recipient) {\n+┊   ┊ 51┊    if (recipient.message.chat) {\n+┊   ┊ 52┊      return recipient.message.chat\n+┊   ┊ 53┊    }\n+┊   ┊ 54┊\n+┊   ┊ 55┊    return this.messageProvider.getMessageChat(recipient.message)\n+┊   ┊ 56┊  }\n+┊   ┊ 57┊\n+┊   ┊ 58┊  async removeChat(chatId: string) {\n+┊   ┊ 59┊    const messages = await this.messageProvider._removeChatGetMessages(chatId)\n+┊   ┊ 60┊\n+┊   ┊ 61┊    for (let message of messages) {\n+┊   ┊ 62┊      if (message.holders.length === 0) {\n+┊   ┊ 63┊        const recipients = await this.createQueryBuilder()\n+┊   ┊ 64┊          .innerJoinAndSelect('recipient.message', 'message', 'message.id = :messageId', {\n+┊   ┊ 65┊            messageId: message.id,\n+┊   ┊ 66┊          })\n+┊   ┊ 67┊          .innerJoinAndSelect('recipient.user', 'user')\n+┊   ┊ 68┊          .getMany()\n+┊   ┊ 69┊\n+┊   ┊ 70┊        for (let recipient of recipients) {\n+┊   ┊ 71┊          await this.repository.remove(recipient)\n+┊   ┊ 72┊        }\n+┊   ┊ 73┊      }\n+┊   ┊ 74┊    }\n+┊   ┊ 75┊\n+┊   ┊ 76┊    return await this.messageProvider.removeChat(chatId, messages)\n+┊   ┊ 77┊  }\n+┊   ┊ 78┊\n+┊   ┊ 79┊  async addMessage(chatId: string, content: string) {\n+┊   ┊ 80┊    const message = await this.messageProvider.addMessage(chatId, content)\n+┊   ┊ 81┊\n+┊   ┊ 82┊    for (let user of message.holders) {\n+┊   ┊ 83┊      if (user.id !== this.currentUser.id) {\n+┊   ┊ 84┊        await this.repository.save(new Recipient({ user, message }))\n+┊   ┊ 85┊      }\n+┊   ┊ 86┊    }\n+┊   ┊ 87┊\n+┊   ┊ 88┊    return message\n+┊   ┊ 89┊  }\n+┊   ┊ 90┊\n+┊   ┊ 91┊  async removeMessages(\n+┊   ┊ 92┊    chatId: string,\n+┊   ┊ 93┊    {\n+┊   ┊ 94┊      messageIds,\n+┊   ┊ 95┊      all,\n+┊   ┊ 96┊    }: {\n+┊   ┊ 97┊      messageIds?: string[]\n+┊   ┊ 98┊      all?: boolean\n+┊   ┊ 99┊    } = {}\n+┊   ┊100┊  ) {\n+┊   ┊101┊    const { deletedIds, removedMessages } = await this.messageProvider._removeMessages(chatId, {\n+┊   ┊102┊      messageIds,\n+┊   ┊103┊      all,\n+┊   ┊104┊    })\n+┊   ┊105┊\n+┊   ┊106┊    for (let message of removedMessages) {\n+┊   ┊107┊      const recipients = await this.createQueryBuilder()\n+┊   ┊108┊        .innerJoinAndSelect('recipient.message', 'message', 'message.id = :messageId', {\n+┊   ┊109┊          messageId: message.id,\n+┊   ┊110┊        })\n+┊   ┊111┊        .innerJoinAndSelect('recipient.user', 'user')\n+┊   ┊112┊        .getMany()\n+┊   ┊113┊\n+┊   ┊114┊      for (let recipient of recipients) {\n+┊   ┊115┊        await this.repository.remove(recipient)\n+┊   ┊116┊      }\n+┊   ┊117┊\n+┊   ┊118┊      await this.messageProvider.repository.remove(message)\n+┊   ┊119┊    }\n+┊   ┊120┊\n+┊   ┊121┊    return deletedIds\n+┊   ┊122┊  }\n+┊   ┊123┊}\n```\n\n##### Added modules&#x2F;recipient&#x2F;resolvers&#x2F;resolvers.ts\n```diff\n@@ -0,0 +1,35 @@\n+┊  ┊ 1┊import { IResolvers } from '../../../types'\n+┊  ┊ 2┊import { RecipientProvider } from '../providers/recipient.provider'\n+┊  ┊ 3┊\n+┊  ┊ 4┊export default {\n+┊  ┊ 5┊  Mutation: {\n+┊  ┊ 6┊    // TODO: implement me\n+┊  ┊ 7┊    markAsReceived: async (obj, { chatId }) => false,\n+┊  ┊ 8┊    // TODO: implement me\n+┊  ┊ 9┊    markAsRead: async (obj, { chatId }) => false,\n+┊  ┊10┊    // We may also need to remove the recipients\n+┊  ┊11┊    removeChat: async (obj, { chatId }, { injector }) =>\n+┊  ┊12┊      injector.get(RecipientProvider).removeChat(chatId),\n+┊  ┊13┊    // We also need to create the recipients\n+┊  ┊14┊    addMessage: async (obj, { chatId, content }, { injector }) =>\n+┊  ┊15┊      injector.get(RecipientProvider).addMessage(chatId, content),\n+┊  ┊16┊    // We may also need to remove the recipients\n+┊  ┊17┊    removeMessages: async (obj, { chatId, messageIds, all }, { injector }) =>\n+┊  ┊18┊      injector.get(RecipientProvider).removeMessages(chatId, {\n+┊  ┊19┊        messageIds: messageIds || undefined,\n+┊  ┊20┊        all: all || false,\n+┊  ┊21┊      }),\n+┊  ┊22┊  },\n+┊  ┊23┊  Chat: {\n+┊  ┊24┊    unreadMessages: async (chat, args, { injector }) =>\n+┊  ┊25┊      injector.get(RecipientProvider).getChatUnreadMessagesCount(chat),\n+┊  ┊26┊  },\n+┊  ┊27┊  Message: {\n+┊  ┊28┊    recipients: async (message, args, { injector }) =>\n+┊  ┊29┊      injector.get(RecipientProvider).getMessageRecipients(message),\n+┊  ┊30┊  },\n+┊  ┊31┊  Recipient: {\n+┊  ┊32┊    chat: async (recipient, args, { injector }) =>\n+┊  ┊33┊      injector.get(RecipientProvider).getRecipientChat(recipient),\n+┊  ┊34┊  },\n+┊  ┊35┊} as IResolvers\n```\n\n##### Added modules&#x2F;recipient&#x2F;schema&#x2F;typeDefs.graphql\n```diff\n@@ -0,0 +1,22 @@\n+┊  ┊ 1┊extend type Chat {\n+┊  ┊ 2┊  #Computed property\n+┊  ┊ 3┊  unreadMessages: Int!\n+┊  ┊ 4┊}\n+┊  ┊ 5┊\n+┊  ┊ 6┊extend type Message {\n+┊  ┊ 7┊  #Whoever received the message\n+┊  ┊ 8┊  recipients: [Recipient!]!\n+┊  ┊ 9┊}\n+┊  ┊10┊\n+┊  ┊11┊type Recipient {\n+┊  ┊12┊  user: User!\n+┊  ┊13┊  message: Message!\n+┊  ┊14┊  chat: Chat!\n+┊  ┊15┊  receivedAt: Date\n+┊  ┊16┊  readAt: Date\n+┊  ┊17┊}\n+┊  ┊18┊\n+┊  ┊19┊type Mutation {\n+┊  ┊20┊  markAsReceived(chatId: ID!): Boolean\n+┊  ┊21┊  markAsRead(chatId: ID!): Boolean\n+┊  ┊22┊}\n```\n\n[}]: #\n\nThe flow will require us to implement the following GraphQL operations:\n\n- `users` query - Will be used to create a chat by picking a user from the users list.\n- `addMessage` mutation\n- `addChat` mutation\n- `removeChat` mutation\n\nAccordingly we will define the operations in our schema and implement their resolvers:\n\n[{]: <helper> (diffStep 3.2 module=\"server\")\n\n#### [Step 3.2: Implement mutations for chat app](https://github.com/Urigo/WhatsApp-Clone-Server/commit/7550441)\n\n##### Changed modules&#x2F;chat&#x2F;providers&#x2F;chat.provider.ts\n```diff\n@@ -38,6 +38,63 @@\n ┊ 38┊ 38┊    return chat || null\n ┊ 39┊ 39┊  }\n ┊ 40┊ 40┊\n+┊   ┊ 41┊  async addChat(userId: string) {\n+┊   ┊ 42┊    const user = await this.userProvider\n+┊   ┊ 43┊      .createQueryBuilder()\n+┊   ┊ 44┊      .whereInIds(userId)\n+┊   ┊ 45┊      .getOne();\n+┊   ┊ 46┊\n+┊   ┊ 47┊    if (!user) {\n+┊   ┊ 48┊      throw new Error(`User ${userId} doesn't exist.`);\n+┊   ┊ 49┊    }\n+┊   ┊ 50┊\n+┊   ┊ 51┊    let chat = await this\n+┊   ┊ 52┊      .createQueryBuilder()\n+┊   ┊ 53┊      .where('chat.name IS NULL')\n+┊   ┊ 54┊      .innerJoin('chat.allTimeMembers', 'allTimeMembers1', 'allTimeMembers1.id = :currentUserId', {\n+┊   ┊ 55┊        currentUserId: this.currentUser.id,\n+┊   ┊ 56┊      })\n+┊   ┊ 57┊      .innerJoin('chat.allTimeMembers', 'allTimeMembers2', 'allTimeMembers2.id = :userId', {\n+┊   ┊ 58┊        userId: userId,\n+┊   ┊ 59┊      })\n+┊   ┊ 60┊      .innerJoinAndSelect('chat.listingMembers', 'listingMembers')\n+┊   ┊ 61┊      .getOne();\n+┊   ┊ 62┊\n+┊   ┊ 63┊    if (chat) {\n+┊   ┊ 64┊      // Chat already exists. Both users are already in the userIds array\n+┊   ┊ 65┊      const listingMembers = await this.userProvider\n+┊   ┊ 66┊        .createQueryBuilder()\n+┊   ┊ 67┊        .innerJoin(\n+┊   ┊ 68┊          'user.listingMemberChats',\n+┊   ┊ 69┊          'listingMemberChats',\n+┊   ┊ 70┊          'listingMemberChats.id = :chatId',\n+┊   ┊ 71┊          { chatId: chat.id },\n+┊   ┊ 72┊        )\n+┊   ┊ 73┊        .getMany();\n+┊   ┊ 74┊\n+┊   ┊ 75┊      if (!listingMembers.find(user => user.id === this.currentUser.id)) {\n+┊   ┊ 76┊        // The chat isn't listed for the current user. Add him to the memberIds\n+┊   ┊ 77┊        chat.listingMembers.push(this.currentUser);\n+┊   ┊ 78┊        chat = await this.repository.save(chat);\n+┊   ┊ 79┊\n+┊   ┊ 80┊        return chat || null;\n+┊   ┊ 81┊      } else {\n+┊   ┊ 82┊        return chat;\n+┊   ┊ 83┊      }\n+┊   ┊ 84┊    } else {\n+┊   ┊ 85┊      // Create the chat\n+┊   ┊ 86┊      chat = await this.repository.save(\n+┊   ┊ 87┊        new Chat({\n+┊   ┊ 88┊          allTimeMembers: [this.currentUser, user],\n+┊   ┊ 89┊          // Chat will not be listed to the other user until the first message gets written\n+┊   ┊ 90┊          listingMembers: [this.currentUser],\n+┊   ┊ 91┊        }),\n+┊   ┊ 92┊      );\n+┊   ┊ 93┊\n+┊   ┊ 94┊      return chat || null;\n+┊   ┊ 95┊    }\n+┊   ┊ 96┊  }\n+┊   ┊ 97┊\n ┊ 41┊ 98┊  async getChatName(chat: Chat) {\n ┊ 42┊ 99┊    if (chat.name) {\n ┊ 43┊100┊      return chat.name\n```\n```diff\n@@ -159,4 +216,55 @@\n ┊159┊216┊\n ┊160┊217┊    return this.currentUser\n ┊161┊218┊  }\n+┊   ┊219┊\n+┊   ┊220┊  async removeChat(chatId: string) {\n+┊   ┊221┊    const chat = await this.createQueryBuilder()\n+┊   ┊222┊      .whereInIds(Number(chatId))\n+┊   ┊223┊      .innerJoinAndSelect('chat.listingMembers', 'listingMembers')\n+┊   ┊224┊      .leftJoinAndSelect('chat.owner', 'owner')\n+┊   ┊225┊      .getOne();\n+┊   ┊226┊\n+┊   ┊227┊    if (!chat) {\n+┊   ┊228┊      throw new Error(`The chat ${chatId} doesn't exist.`)\n+┊   ┊229┊    }\n+┊   ┊230┊\n+┊   ┊231┊    if (!chat.name) {\n+┊   ┊232┊      // Chat\n+┊   ┊233┊      if (!chat.listingMembers.find(user => user.id === this.currentUser.id)) {\n+┊   ┊234┊        throw new Error(`The user is not a listing member of the chat ${chatId}.`)\n+┊   ┊235┊      }\n+┊   ┊236┊\n+┊   ┊237┊      // Remove the current user from who gets the chat listed. The chat will no longer appear in his list\n+┊   ┊238┊      chat.listingMembers = chat.listingMembers.filter(user => user.id !== this.currentUser.id);\n+┊   ┊239┊\n+┊   ┊240┊      // Check how many members are left\n+┊   ┊241┊      if (chat.listingMembers.length === 0) {\n+┊   ┊242┊        // Delete the chat\n+┊   ┊243┊        await this.repository.remove(chat);\n+┊   ┊244┊      } else {\n+┊   ┊245┊        // Update the chat\n+┊   ┊246┊        await this.repository.save(chat);\n+┊   ┊247┊      }\n+┊   ┊248┊\n+┊   ┊249┊      return chatId;\n+┊   ┊250┊    } else {\n+┊   ┊251┊      // Group\n+┊   ┊252┊\n+┊   ┊253┊      // Remove the current user from who gets the group listed. The group will no longer appear in his list\n+┊   ┊254┊      chat.listingMembers = chat.listingMembers.filter(user => user.id !== this.currentUser.id);\n+┊   ┊255┊\n+┊   ┊256┊      // Check how many members (including previous ones who can still access old messages) are left\n+┊   ┊257┊      if (chat.listingMembers.length === 0) {\n+┊   ┊258┊        // Remove the group\n+┊   ┊259┊        await this.repository.remove(chat);\n+┊   ┊260┊      } else {\n+┊   ┊261┊        // TODO: Implement for group\n+┊   ┊262┊        chat.owner = chat.listingMembers[0]\n+┊   ┊263┊\n+┊   ┊264┊        await this.repository.save(chat);\n+┊   ┊265┊      }\n+┊   ┊266┊\n+┊   ┊267┊      return chatId;\n+┊   ┊268┊    }\n+┊   ┊269┊  }\n ┊162┊270┊}\n```\n\n##### Changed modules&#x2F;chat&#x2F;resolvers&#x2F;resolvers.ts\n```diff\n@@ -14,6 +14,8 @@\n ┊14┊14┊      name: name || '',\n ┊15┊15┊      picture: picture || '',\n ┊16┊16┊    }),\n+┊  ┊17┊    addChat: (obj, { userId }, { injector }) => injector.get(ChatProvider).addChat(userId),\n+┊  ┊18┊    removeChat: (obj, { chatId }, { injector }) => injector.get(ChatProvider).removeChat(chatId),\n ┊17┊19┊  },\n ┊18┊20┊  Subscription: {\n ┊19┊21┊    chatUpdated: {\n```\n\n##### Changed modules&#x2F;chat&#x2F;schema&#x2F;typeDefs.graphql\n```diff\n@@ -21,3 +21,8 @@\n ┊21┊21┊  #If null the group is read-only. Null for chats.\n ┊22┊22┊  owner: User\n ┊23┊23┊}\n+┊  ┊24┊\n+┊  ┊25┊type Mutation {\n+┊  ┊26┊  addChat(userId: ID!): Chat\n+┊  ┊27┊  removeChat(chatId: ID!): ID\n+┊  ┊28┊}\n```\n\n##### Changed modules&#x2F;message&#x2F;providers&#x2F;message.provider.ts\n```diff\n@@ -1,4 +1,5 @@\n ┊1┊1┊import { Injectable } from '@graphql-modules/di'\n+┊ ┊2┊import { PubSub } from 'apollo-server-express'\n ┊2┊3┊import { Connection } from 'typeorm'\n ┊3┊4┊import { MessageType } from '../../../db'\n ┊4┊5┊import { Chat } from '../../../entity/chat'\n```\n```diff\n@@ -11,6 +12,7 @@\n ┊11┊12┊@Injectable()\n ┊12┊13┊export class MessageProvider {\n ┊13┊14┊  constructor(\n+┊  ┊15┊    private pubsub: PubSub,\n ┊14┊16┊    private connection: Connection,\n ┊15┊17┊    private chatProvider: ChatProvider,\n ┊16┊18┊    private authProvider: AuthProvider,\n```\n```diff\n@@ -24,6 +26,182 @@\n ┊ 24┊ 26┊    return this.connection.createQueryBuilder(Message, 'message')\n ┊ 25┊ 27┊  }\n ┊ 26┊ 28┊\n+┊   ┊ 29┊  async addMessage(chatId: string, content: string) {\n+┊   ┊ 30┊    if (content === null || content === '') {\n+┊   ┊ 31┊      throw new Error(`Cannot add empty or null messages.`);\n+┊   ┊ 32┊    }\n+┊   ┊ 33┊\n+┊   ┊ 34┊    let chat = await this.chatProvider\n+┊   ┊ 35┊      .createQueryBuilder()\n+┊   ┊ 36┊      .whereInIds(chatId)\n+┊   ┊ 37┊      .innerJoinAndSelect('chat.allTimeMembers', 'allTimeMembers')\n+┊   ┊ 38┊      .innerJoinAndSelect('chat.listingMembers', 'listingMembers')\n+┊   ┊ 39┊      .getOne();\n+┊   ┊ 40┊\n+┊   ┊ 41┊    if (!chat) {\n+┊   ┊ 42┊      throw new Error(`Cannot find chat ${chatId}.`);\n+┊   ┊ 43┊    }\n+┊   ┊ 44┊\n+┊   ┊ 45┊    let holders: User[];\n+┊   ┊ 46┊\n+┊   ┊ 47┊    if (!chat.name) {\n+┊   ┊ 48┊      // Chat\n+┊   ┊ 49┊      if (!chat.listingMembers.map(user => user.id).includes(this.currentUser.id)) {\n+┊   ┊ 50┊        throw new Error(`The chat ${chatId} must be listed for the current user in order to add a message.`);\n+┊   ┊ 51┊      }\n+┊   ┊ 52┊\n+┊   ┊ 53┊      // Receiver's user\n+┊   ┊ 54┊      const user = chat.allTimeMembers.find(user => user.id !== this.currentUser.id);\n+┊   ┊ 55┊\n+┊   ┊ 56┊      if (!user) {\n+┊   ┊ 57┊        throw new Error(`Cannot find receiver's user.`);\n+┊   ┊ 58┊      }\n+┊   ┊ 59┊\n+┊   ┊ 60┊      if (!chat.listingMembers.find(listingMember => listingMember.id === user.id)) {\n+┊   ┊ 61┊        // Chat is not listed for the receiver user. Add him to the listingIds\n+┊   ┊ 62┊        chat.listingMembers.push(user);\n+┊   ┊ 63┊\n+┊   ┊ 64┊        await this.chatProvider.repository.save(chat);\n+┊   ┊ 65┊      }\n+┊   ┊ 66┊\n+┊   ┊ 67┊      holders = chat.listingMembers;\n+┊   ┊ 68┊    } else {\n+┊   ┊ 69┊      // TODO: Implement for groups\n+┊   ┊ 70┊      holders = chat.listingMembers\n+┊   ┊ 71┊    }\n+┊   ┊ 72┊\n+┊   ┊ 73┊    const message = await this.repository.save(new Message({\n+┊   ┊ 74┊      chat,\n+┊   ┊ 75┊      sender: this.currentUser,\n+┊   ┊ 76┊      content,\n+┊   ┊ 77┊      type: MessageType.TEXT,\n+┊   ┊ 78┊      holders,\n+┊   ┊ 79┊    }));\n+┊   ┊ 80┊\n+┊   ┊ 81┊    this.pubsub.publish('messageAdded', {\n+┊   ┊ 82┊      messageAdded: message,\n+┊   ┊ 83┊    });\n+┊   ┊ 84┊\n+┊   ┊ 85┊    return message || null;\n+┊   ┊ 86┊  }\n+┊   ┊ 87┊\n+┊   ┊ 88┊  async _removeMessages(\n+┊   ┊ 89┊\n+┊   ┊ 90┊    chatId: string,\n+┊   ┊ 91┊    {\n+┊   ┊ 92┊      messageIds,\n+┊   ┊ 93┊      all,\n+┊   ┊ 94┊    }: {\n+┊   ┊ 95┊      messageIds?: string[]\n+┊   ┊ 96┊      all?: boolean\n+┊   ┊ 97┊    } = {},\n+┊   ┊ 98┊  ) {\n+┊   ┊ 99┊    const chat = await this.chatProvider\n+┊   ┊100┊      .createQueryBuilder()\n+┊   ┊101┊      .whereInIds(chatId)\n+┊   ┊102┊      .innerJoinAndSelect('chat.listingMembers', 'listingMembers')\n+┊   ┊103┊      .innerJoinAndSelect('chat.messages', 'messages')\n+┊   ┊104┊      .innerJoinAndSelect('messages.holders', 'holders')\n+┊   ┊105┊      .getOne();\n+┊   ┊106┊\n+┊   ┊107┊    if (!chat) {\n+┊   ┊108┊      throw new Error(`Cannot find chat ${chatId}.`);\n+┊   ┊109┊    }\n+┊   ┊110┊\n+┊   ┊111┊    if (!chat.listingMembers.find(user => user.id === this.currentUser.id)) {\n+┊   ┊112┊      throw new Error(`The chat/group ${chatId} is not listed for the current user so there is nothing to delete.`);\n+┊   ┊113┊    }\n+┊   ┊114┊\n+┊   ┊115┊    if (all && messageIds) {\n+┊   ┊116┊      throw new Error(`Cannot specify both 'all' and 'messageIds'.`)\n+┊   ┊117┊    }\n+┊   ┊118┊\n+┊   ┊119┊    if (!all && !(messageIds && messageIds.length)) {\n+┊   ┊120┊      throw new Error(`'all' and 'messageIds' cannot be both null`)\n+┊   ┊121┊    }\n+┊   ┊122┊\n+┊   ┊123┊    let deletedIds: string[] = [];\n+┊   ┊124┊    let removedMessages: Message[] = [];\n+┊   ┊125┊    // Instead of chaining map and filter we can loop once using reduce\n+┊   ┊126┊    chat.messages = await chat.messages.reduce<Promise<Message[]>>(async (filtered$, message) => {\n+┊   ┊127┊      const filtered = await filtered$;\n+┊   ┊128┊\n+┊   ┊129┊      if (all || messageIds!.includes(message.id)) {\n+┊   ┊130┊        deletedIds.push(message.id);\n+┊   ┊131┊        // Remove the current user from the message holders\n+┊   ┊132┊        message.holders = message.holders.filter(user => user.id !== this.currentUser.id);\n+┊   ┊133┊\n+┊   ┊134┊      }\n+┊   ┊135┊\n+┊   ┊136┊      if (message.holders.length !== 0) {\n+┊   ┊137┊        // Remove the current user from the message holders\n+┊   ┊138┊        await this.repository.save(message);\n+┊   ┊139┊        filtered.push(message);\n+┊   ┊140┊      } else {\n+┊   ┊141┊        // Message is flagged for removal\n+┊   ┊142┊        removedMessages.push(message);\n+┊   ┊143┊      }\n+┊   ┊144┊\n+┊   ┊145┊      return filtered;\n+┊   ┊146┊    }, Promise.resolve([]));\n+┊   ┊147┊\n+┊   ┊148┊    return { deletedIds, removedMessages };\n+┊   ┊149┊  }\n+┊   ┊150┊\n+┊   ┊151┊  async removeMessages(\n+┊   ┊152┊\n+┊   ┊153┊    chatId: string,\n+┊   ┊154┊    {\n+┊   ┊155┊      messageIds,\n+┊   ┊156┊      all,\n+┊   ┊157┊    }: {\n+┊   ┊158┊      messageIds?: string[]\n+┊   ┊159┊      all?: boolean\n+┊   ┊160┊    } = {},\n+┊   ┊161┊  ) {\n+┊   ┊162┊    const { deletedIds, removedMessages } = await this._removeMessages(chatId, { messageIds, all });\n+┊   ┊163┊\n+┊   ┊164┊    for (let message of removedMessages) {\n+┊   ┊165┊      await this.repository.remove(message);\n+┊   ┊166┊    }\n+┊   ┊167┊\n+┊   ┊168┊    return deletedIds;\n+┊   ┊169┊  }\n+┊   ┊170┊\n+┊   ┊171┊  async _removeChatGetMessages(chatId: string) {\n+┊   ┊172┊    let messages = await this.createQueryBuilder()\n+┊   ┊173┊      .innerJoin('message.chat', 'chat', 'chat.id = :chatId', { chatId })\n+┊   ┊174┊      .leftJoinAndSelect('message.holders', 'holders')\n+┊   ┊175┊      .getMany();\n+┊   ┊176┊\n+┊   ┊177┊    messages = messages.map(message => ({\n+┊   ┊178┊      ...message,\n+┊   ┊179┊      holders: message.holders.filter(user => user.id !== this.currentUser.id),\n+┊   ┊180┊    }));\n+┊   ┊181┊\n+┊   ┊182┊    return messages;\n+┊   ┊183┊  }\n+┊   ┊184┊\n+┊   ┊185┊  async removeChat(chatId: string, messages?: Message[]) {\n+┊   ┊186┊    if (!messages) {\n+┊   ┊187┊      messages = await this._removeChatGetMessages(chatId);\n+┊   ┊188┊    }\n+┊   ┊189┊\n+┊   ┊190┊    for (let message of messages) {\n+┊   ┊191┊      message.holders = message.holders.filter(user => user.id !== this.currentUser.id);\n+┊   ┊192┊\n+┊   ┊193┊      if (message.holders.length !== 0) {\n+┊   ┊194┊        // Remove the current user from the message holders\n+┊   ┊195┊        await this.repository.save(message);\n+┊   ┊196┊      } else {\n+┊   ┊197┊        // Simply remove the message\n+┊   ┊198┊        await this.repository.remove(message);\n+┊   ┊199┊      }\n+┊   ┊200┊    }\n+┊   ┊201┊\n+┊   ┊202┊    return await this.chatProvider.removeChat(chatId);\n+┊   ┊203┊  }\n+┊   ┊204┊\n ┊ 27┊205┊  async getMessageSender(message: Message) {\n ┊ 28┊206┊    const sender = await this.userProvider\n ┊ 29┊207┊      .createQueryBuilder()\n```\n\n##### Changed modules&#x2F;message&#x2F;resolvers&#x2F;resolvers.ts\n```diff\n@@ -8,6 +8,17 @@\n ┊ 8┊ 8┊    // The ordering depends on the messages\n ┊ 9┊ 9┊    chats: (obj, args, { injector }) => injector.get(MessageProvider).getChats(),\n ┊10┊10┊  },\n+┊  ┊11┊  Mutation: {\n+┊  ┊12┊    addMessage: async (obj, { chatId, content }, { injector }) =>\n+┊  ┊13┊      injector.get(MessageProvider).addMessage(chatId, content),\n+┊  ┊14┊    removeMessages: async (obj, { chatId, messageIds, all }, { injector }) =>\n+┊  ┊15┊      injector.get(MessageProvider).removeMessages(chatId, {\n+┊  ┊16┊        messageIds: messageIds || undefined,\n+┊  ┊17┊        all: all || false,\n+┊  ┊18┊      }),\n+┊  ┊19┊    // We may need to also remove the messages\n+┊  ┊20┊    removeChat: async (obj, { chatId }, { injector }) => injector.get(MessageProvider).removeChat(chatId),\n+┊  ┊21┊  },\n ┊11┊22┊  Chat: {\n ┊12┊23┊    messages: async (chat, { amount }, { injector }) =>\n ┊13┊24┊      injector.get(MessageProvider).getChatMessages(chat, amount || 0),\n```\n\n##### Changed modules&#x2F;message&#x2F;schema&#x2F;typeDefs.graphql\n```diff\n@@ -23,3 +23,8 @@\n ┊23┊23┊  #Computed property\n ┊24┊24┊  ownership: Boolean!\n ┊25┊25┊}\n+┊  ┊26┊\n+┊  ┊27┊type Mutation {\n+┊  ┊28┊  addMessage(chatId: ID!, content: String!): Message\n+┊  ┊29┊  removeMessages(chatId: ID!, messageIds: [ID!], all: Boolean): [ID]!\n+┊  ┊30┊}\n```\n\n[}]: #\n\nRemember that every change that happens in the back-end should trigger a subscription that will notify all the use regards that change. For the current flow, we should have the following subscriptions:\n\n- `messageAdded` subscription\n- `userAdded` subscription\n- `userUpdated` subscription - Since we will be able to create a new chat by picking from a users list, this list needs to be synced with the most recent changes.\n\nLet's implement these subscriptions:\n\n[{]: <helper> (diffStep 3.3 module=\"server\")\n\n#### [Step 3.3: Add necessary subscriptions](https://github.com/Urigo/WhatsApp-Clone-Server/commit/e2ad65e)\n\n##### Changed modules&#x2F;chat&#x2F;resolvers&#x2F;resolvers.ts\n```diff\n@@ -18,6 +18,12 @@\n ┊18┊18┊    removeChat: (obj, { chatId }, { injector }) => injector.get(ChatProvider).removeChat(chatId),\n ┊19┊19┊  },\n ┊20┊20┊  Subscription: {\n+┊  ┊21┊    chatAdded: {\n+┊  ┊22┊      subscribe: withFilter((root, args, { injector }: ModuleContext) => injector.get(PubSub).asyncIterator('chatAdded'),\n+┊  ┊23┊        (data: { chatAdded: Chat, creatorId: string }, variables, { injector }: ModuleContext) =>\n+┊  ┊24┊          data && injector.get(ChatProvider).filterChatAddedOrUpdated(data.chatAdded, data.creatorId)\n+┊  ┊25┊      ),\n+┊  ┊26┊    },\n ┊21┊27┊    chatUpdated: {\n ┊22┊28┊      subscribe: withFilter((root, args, { injector }: ModuleContext) => injector.get(PubSub).asyncIterator('chatUpdated'),\n ┊23┊29┊        (data: { chatUpdated: Chat, updaterId: string }, variables, { injector }: ModuleContext) =>\n```\n\n##### Changed modules&#x2F;chat&#x2F;schema&#x2F;typeDefs.graphql\n```diff\n@@ -4,6 +4,7 @@\n ┊ 4┊ 4┊}\n ┊ 5┊ 5┊\n ┊ 6┊ 6┊type Subscription {\n+┊  ┊ 7┊  chatAdded: Chat\n ┊ 7┊ 8┊  chatUpdated: Chat\n ┊ 8┊ 9┊}\n ┊ 9┊10┊\n```\n\n##### Changed modules&#x2F;message&#x2F;providers&#x2F;message.provider.ts\n```diff\n@@ -62,6 +62,11 @@\n ┊62┊62┊        chat.listingMembers.push(user);\n ┊63┊63┊\n ┊64┊64┊        await this.chatProvider.repository.save(chat);\n+┊  ┊65┊\n+┊  ┊66┊        this.pubsub.publish('chatAdded', {\n+┊  ┊67┊          creatorId: this.currentUser.id,\n+┊  ┊68┊          chatAdded: chat,\n+┊  ┊69┊        });\n ┊65┊70┊      }\n ┊66┊71┊\n ┊67┊72┊      holders = chat.listingMembers;\n```\n```diff\n@@ -317,4 +322,18 @@\n ┊317┊322┊\n ┊318┊323┊    return latestMessage ? latestMessage.createdAt : null\n ┊319┊324┊  }\n+┊   ┊325┊\n+┊   ┊326┊  async filterMessageAdded(messageAdded: Message) {\n+┊   ┊327┊    const relevantUsers = (await this.userProvider\n+┊   ┊328┊      .createQueryBuilder()\n+┊   ┊329┊      .innerJoin(\n+┊   ┊330┊        'user.listingMemberChats',\n+┊   ┊331┊        'listingMemberChats',\n+┊   ┊332┊        'listingMemberChats.id = :chatId',\n+┊   ┊333┊        { chatId: messageAdded.chat.id }\n+┊   ┊334┊      )\n+┊   ┊335┊      .getMany()).filter(user => user.id != messageAdded.sender.id)\n+┊   ┊336┊\n+┊   ┊337┊    return relevantUsers.some(user => user.id === this.currentUser.id)\n+┊   ┊338┊  }\n ┊320┊339┊}\n```\n\n##### Changed modules&#x2F;message&#x2F;resolvers&#x2F;resolvers.ts\n```diff\n@@ -1,4 +1,5 @@\n ┊1┊1┊import { ModuleContext } from '@graphql-modules/core'\n+┊ ┊2┊import { PubSub, withFilter } from 'apollo-server-express'\n ┊2┊3┊import { Message } from '../../../entity/message'\n ┊3┊4┊import { IResolvers } from '../../../types'\n ┊4┊5┊import { MessageProvider } from '../providers/message.provider'\n```\n```diff\n@@ -19,6 +20,13 @@\n ┊19┊20┊    // We may need to also remove the messages\n ┊20┊21┊    removeChat: async (obj, { chatId }, { injector }) => injector.get(MessageProvider).removeChat(chatId),\n ┊21┊22┊  },\n+┊  ┊23┊  Subscription: {\n+┊  ┊24┊    messageAdded: {\n+┊  ┊25┊      subscribe: withFilter((root, args, { injector }: ModuleContext) => injector.get(PubSub).asyncIterator('messageAdded'),\n+┊  ┊26┊        (data: { messageAdded: Message }, variables, { injector }: ModuleContext) => data && injector.get(MessageProvider).filterMessageAdded(data.messageAdded)\n+┊  ┊27┊      ),\n+┊  ┊28┊    },\n+┊  ┊29┊  },\n ┊22┊30┊  Chat: {\n ┊23┊31┊    messages: async (chat, { amount }, { injector }) =>\n ┊24┊32┊      injector.get(MessageProvider).getChatMessages(chat, amount || 0),\n```\n\n##### Changed modules&#x2F;message&#x2F;schema&#x2F;typeDefs.graphql\n```diff\n@@ -1,3 +1,7 @@\n+┊ ┊1┊type Subscription {\n+┊ ┊2┊  messageAdded: Message\n+┊ ┊3┊}\n+┊ ┊4┊\n ┊1┊5┊enum MessageType {\n ┊2┊6┊  LOCATION\n ┊3┊7┊  TEXT\n```\n\n##### Changed modules&#x2F;user&#x2F;providers&#x2F;user.provider.ts\n```diff\n@@ -1,4 +1,5 @@\n ┊1┊1┊import { Injectable, ProviderScope } from '@graphql-modules/di'\n+┊ ┊2┊import { PubSub } from 'apollo-server-express'\n ┊2┊3┊import cloudinary from 'cloudinary'\n ┊3┊4┊import { Connection } from 'typeorm'\n ┊4┊5┊import { User } from '../../../entity/user'\n```\n```diff\n@@ -6,7 +7,11 @@\n ┊ 6┊ 7┊\n ┊ 7┊ 8┊@Injectable()\n ┊ 8┊ 9┊export class UserProvider {\n-┊ 9┊  ┊  constructor(private connection: Connection, private authProvider: AuthProvider) {}\n+┊  ┊10┊  constructor(\n+┊  ┊11┊    private pubsub: PubSub,\n+┊  ┊12┊    private connection: Connection,\n+┊  ┊13┊    private authProvider: AuthProvider,\n+┊  ┊14┊  ) {}\n ┊10┊15┊\n ┊11┊16┊  public repository = this.connection.getRepository(User)\n ┊12┊17┊  private currentUser = this.authProvider.currentUser\n```\n```diff\n@@ -41,9 +46,17 @@\n ┊41┊46┊\n ┊42┊47┊    await this.repository.save(this.currentUser);\n ┊43┊48┊\n+┊  ┊49┊    this.pubsub.publish('userUpdated', {\n+┊  ┊50┊      userUpdated: this.currentUser,\n+┊  ┊51┊    });\n+┊  ┊52┊\n ┊44┊53┊    return this.currentUser;\n ┊45┊54┊  }\n ┊46┊55┊\n+┊  ┊56┊  filterUserAddedOrUpdated(userAddedOrUpdated: User) {\n+┊  ┊57┊    return userAddedOrUpdated.id !== this.currentUser.id;\n+┊  ┊58┊  }\n+┊  ┊59┊\n ┊47┊60┊  uploadProfilePic(filePath: string) {\n ┊48┊61┊    return new Promise((resolve, reject) => {\n ┊49┊62┊      cloudinary.v2.uploader.upload(filePath, (error, result) => {\n```\n\n##### Changed modules&#x2F;user&#x2F;resolvers&#x2F;resolvers.ts\n```diff\n@@ -1,4 +1,5 @@\n ┊1┊1┊import { ModuleContext } from '@graphql-modules/core'\n+┊ ┊2┊import { PubSub, withFilter } from 'apollo-server-express'\n ┊2┊3┊import { User } from '../../../entity/User'\n ┊3┊4┊import { IResolvers } from '../../../types'\n ┊4┊5┊import { UserProvider } from '../providers/user.provider'\n```\n```diff\n@@ -14,4 +15,18 @@\n ┊14┊15┊      picture: picture || '',\n ┊15┊16┊    }),\n ┊16┊17┊  },\n+┊  ┊18┊  Subscription: {\n+┊  ┊19┊    userAdded: {\n+┊  ┊20┊      subscribe: withFilter(\n+┊  ┊21┊        (root, args, { injector }: ModuleContext) => injector.get(PubSub).asyncIterator('userAdded'),\n+┊  ┊22┊        (data: { userAdded: User }, variables, { injector }: ModuleContext) => data && injector.get(UserProvider).filterUserAddedOrUpdated(data.userAdded),\n+┊  ┊23┊      ),\n+┊  ┊24┊    },\n+┊  ┊25┊    userUpdated: {\n+┊  ┊26┊      subscribe: withFilter(\n+┊  ┊27┊        (root, args, { injector }: ModuleContext) => injector.get(PubSub).asyncIterator('userAdded'),\n+┊  ┊28┊        (data: { userUpdated: User }, variables, { injector }: ModuleContext) => data && injector.get(UserProvider).filterUserAddedOrUpdated(data.userUpdated)\n+┊  ┊29┊      ),\n+┊  ┊30┊    },\n+┊  ┊31┊  },\n ┊17┊32┊} as IResolvers\n```\n\n##### Changed modules&#x2F;user&#x2F;schema&#x2F;typeDefs.graphql\n```diff\n@@ -7,6 +7,11 @@\n ┊ 7┊ 7┊  updateUser(name: String, picture: String): User!\n ┊ 8┊ 8┊}\n ┊ 9┊ 9┊\n+┊  ┊10┊type Subscription {\n+┊  ┊11┊  userAdded: User\n+┊  ┊12┊  userUpdated: User\n+┊  ┊13┊}\n+┊  ┊14┊\n ┊10┊15┊type User {\n ┊11┊16┊  id: ID!\n ┊12┊17┊  name: String\n```\n\n[}]: #\n\nNow that we have that ready, we will get back to the client and implement the necessary components. We will start with the chat room screen. The layout consists of the following component:\n\n- A navbar - Includes the name and a picture of the person we're chatting with, a \"back\" button to navigate back to the main screen, and a pop-over menu where we can remove the chat from.\n- A messages list - The list of messages that were sent and received in the chat. This will be a scrollable view where message bubbles are colored differently based on who they belong to. Just like WhatsApp!\n- A message box - The input that will be used to write the new message. This will include a \"send\" button right next to it.\n\nLet's implement the components\n\n[{]: <helper> (diffStep 3.1 files=\"src/components/ChatRoomScreen\" module=\"client\")\n\n#### [Step 3.1: Add chat room screen](https://github.com/Urigo/WhatsApp-Clone-Client-React/commit/685c9fe)\n\n##### Added src&#x2F;components&#x2F;ChatRoomScreen&#x2F;ChatNavbar.tsx\n```diff\n@@ -0,0 +1,171 @@\n+┊   ┊  1┊import Button from '@material-ui/core/Button'\n+┊   ┊  2┊import List from '@material-ui/core/List'\n+┊   ┊  3┊import ListItem from '@material-ui/core/ListItem'\n+┊   ┊  4┊import Popover from '@material-ui/core/Popover'\n+┊   ┊  5┊import ArrowBackIcon from '@material-ui/icons/ArrowBack'\n+┊   ┊  6┊import DeleteIcon from '@material-ui/icons/Delete'\n+┊   ┊  7┊import MoreIcon from '@material-ui/icons/MoreVert'\n+┊   ┊  8┊import { defaultDataIdFromObject } from 'apollo-cache-inmemory'\n+┊   ┊  9┊import gql from 'graphql-tag'\n+┊   ┊ 10┊import { History } from 'history'\n+┊   ┊ 11┊import * as React from 'react'\n+┊   ┊ 12┊import { useState } from 'react'\n+┊   ┊ 13┊import { useQuery, useMutation } from 'react-apollo-hooks'\n+┊   ┊ 14┊import styled from 'styled-components'\n+┊   ┊ 15┊import * as fragments from '../../graphql/fragments'\n+┊   ┊ 16┊import * as queries from '../../graphql/queries'\n+┊   ┊ 17┊import { ChatNavbarMutation, ChatNavbarQuery, Chats } from '../../graphql/types'\n+┊   ┊ 18┊\n+┊   ┊ 19┊const Style = styled.div`\n+┊   ┊ 20┊  padding: 0;\n+┊   ┊ 21┊  display: flex;\n+┊   ┊ 22┊  flex-direction: row;\n+┊   ┊ 23┊\n+┊   ┊ 24┊  margin-left: -20px;\n+┊   ┊ 25┊  .ChatNavbar-title {\n+┊   ┊ 26┊    line-height: 56px;\n+┊   ┊ 27┊  }\n+┊   ┊ 28┊\n+┊   ┊ 29┊  .ChatNavbar-back-button {\n+┊   ┊ 30┊    color: var(--primary-text);\n+┊   ┊ 31┊  }\n+┊   ┊ 32┊\n+┊   ┊ 33┊  .ChatNavbar-picture {\n+┊   ┊ 34┊    height: 40px;\n+┊   ┊ 35┊    width: 40px;\n+┊   ┊ 36┊    margin-top: 3px;\n+┊   ┊ 37┊    margin-left: -22px;\n+┊   ┊ 38┊    object-fit: cover;\n+┊   ┊ 39┊    padding: 5px;\n+┊   ┊ 40┊    border-radius: 50%;\n+┊   ┊ 41┊  }\n+┊   ┊ 42┊\n+┊   ┊ 43┊  .ChatNavbar-rest {\n+┊   ┊ 44┊    flex: 1;\n+┊   ┊ 45┊    justify-content: flex-end;\n+┊   ┊ 46┊  }\n+┊   ┊ 47┊\n+┊   ┊ 48┊  .ChatNavbar-options-btn {\n+┊   ┊ 49┊    float: right;\n+┊   ┊ 50┊    height: 100%;\n+┊   ┊ 51┊    font-size: 1.2em;\n+┊   ┊ 52┊    margin-right: -15px;\n+┊   ┊ 53┊    color: var(--primary-text);\n+┊   ┊ 54┊  }\n+┊   ┊ 55┊\n+┊   ┊ 56┊  .ChatNavbar-options-item svg {\n+┊   ┊ 57┊    margin-right: 10px;\n+┊   ┊ 58┊    padding-left: 15px;\n+┊   ┊ 59┊  }\n+┊   ┊ 60┊`\n+┊   ┊ 61┊\n+┊   ┊ 62┊const query = gql`\n+┊   ┊ 63┊  query ChatNavbarQuery($chatId: ID!) {\n+┊   ┊ 64┊    chat(chatId: $chatId) {\n+┊   ┊ 65┊      ...Chat\n+┊   ┊ 66┊    }\n+┊   ┊ 67┊  }\n+┊   ┊ 68┊  ${fragments.chat}\n+┊   ┊ 69┊`\n+┊   ┊ 70┊\n+┊   ┊ 71┊const mutation = gql`\n+┊   ┊ 72┊  mutation ChatNavbarMutation($chatId: ID!) {\n+┊   ┊ 73┊    removeChat(chatId: $chatId)\n+┊   ┊ 74┊  }\n+┊   ┊ 75┊`\n+┊   ┊ 76┊\n+┊   ┊ 77┊interface ChatNavbarProps {\n+┊   ┊ 78┊  chatId: string\n+┊   ┊ 79┊  history: History\n+┊   ┊ 80┊}\n+┊   ┊ 81┊\n+┊   ┊ 82┊export default ({ chatId, history }: ChatNavbarProps) => {\n+┊   ┊ 83┊  const {\n+┊   ┊ 84┊    data: { chat },\n+┊   ┊ 85┊  } = useQuery<ChatNavbarQuery.Query, ChatNavbarQuery.Variables>(query, {\n+┊   ┊ 86┊    variables: { chatId },\n+┊   ┊ 87┊  })\n+┊   ┊ 88┊  const removeChat = useMutation<ChatNavbarMutation.Mutation, ChatNavbarMutation.Variables>(\n+┊   ┊ 89┊    mutation,\n+┊   ┊ 90┊    {\n+┊   ┊ 91┊      variables: { chatId },\n+┊   ┊ 92┊      update: (client, { data: { removeChat } }) => {\n+┊   ┊ 93┊        client.writeFragment({\n+┊   ┊ 94┊          id: defaultDataIdFromObject({\n+┊   ┊ 95┊            __typename: 'Chat',\n+┊   ┊ 96┊            id: removeChat,\n+┊   ┊ 97┊          }),\n+┊   ┊ 98┊          fragment: fragments.chat,\n+┊   ┊ 99┊          fragmentName: 'Chat',\n+┊   ┊100┊          data: null,\n+┊   ┊101┊        })\n+┊   ┊102┊\n+┊   ┊103┊        let chats\n+┊   ┊104┊        try {\n+┊   ┊105┊          chats = client.readQuery<Chats.Query>({\n+┊   ┊106┊            query: queries.chats,\n+┊   ┊107┊          }).chats\n+┊   ┊108┊        } catch (e) {}\n+┊   ┊109┊\n+┊   ┊110┊        if (chats && chats.some(chat => chat.id === removeChat)) {\n+┊   ┊111┊          const index = chats.findIndex(chat => chat.id === removeChat)\n+┊   ┊112┊          chats.splice(index, 1)\n+┊   ┊113┊\n+┊   ┊114┊          client.writeQuery({\n+┊   ┊115┊            query: queries.chats,\n+┊   ┊116┊            data: { chats },\n+┊   ┊117┊          })\n+┊   ┊118┊        }\n+┊   ┊119┊      },\n+┊   ┊120┊    },\n+┊   ┊121┊  )\n+┊   ┊122┊  const [popped, setPopped] = useState(false)\n+┊   ┊123┊\n+┊   ┊124┊  const navToChats = () => {\n+┊   ┊125┊    history.push('/chats')\n+┊   ┊126┊  }\n+┊   ┊127┊\n+┊   ┊128┊  const handleRemoveChat = () => {\n+┊   ┊129┊    setPopped(false)\n+┊   ┊130┊    removeChat().then(navToChats)\n+┊   ┊131┊  }\n+┊   ┊132┊\n+┊   ┊133┊  return (\n+┊   ┊134┊    <Style className={name}>\n+┊   ┊135┊      <Button className=\"ChatNavbar-back-button\" onClick={navToChats}>\n+┊   ┊136┊        <ArrowBackIcon />\n+┊   ┊137┊      </Button>\n+┊   ┊138┊      <img\n+┊   ┊139┊        className=\"ChatNavbar-picture\"\n+┊   ┊140┊        src={chat.picture || '/assets/default-profile-pic.jpg'}\n+┊   ┊141┊      />\n+┊   ┊142┊      <div className=\"ChatNavbar-title\">{chat.name}</div>\n+┊   ┊143┊      <div className=\"ChatNavbar-rest\">\n+┊   ┊144┊        <Button className=\"ChatNavbar-options-btn\" onClick={setPopped.bind(null, true)}>\n+┊   ┊145┊          <MoreIcon />\n+┊   ┊146┊        </Button>\n+┊   ┊147┊      </div>\n+┊   ┊148┊      <Popover\n+┊   ┊149┊        open={popped}\n+┊   ┊150┊        onClose={setPopped.bind(null, false)}\n+┊   ┊151┊        anchorOrigin={{\n+┊   ┊152┊          vertical: 'top',\n+┊   ┊153┊          horizontal: 'right',\n+┊   ┊154┊        }}\n+┊   ┊155┊        transformOrigin={{\n+┊   ┊156┊          vertical: 'top',\n+┊   ┊157┊          horizontal: 'right',\n+┊   ┊158┊        }}\n+┊   ┊159┊      >\n+┊   ┊160┊        <Style style={{ marginLeft: '-15px' }}>\n+┊   ┊161┊          <List>\n+┊   ┊162┊            <ListItem className=\"ChatNavbar-options-item\" button onClick={handleRemoveChat}>\n+┊   ┊163┊              <DeleteIcon />\n+┊   ┊164┊              Delete\n+┊   ┊165┊            </ListItem>\n+┊   ┊166┊          </List>\n+┊   ┊167┊        </Style>\n+┊   ┊168┊      </Popover>\n+┊   ┊169┊    </Style>\n+┊   ┊170┊  )\n+┊   ┊171┊}\n```\n\n##### Added src&#x2F;components&#x2F;ChatRoomScreen&#x2F;MessageBox.tsx\n```diff\n@@ -0,0 +1,162 @@\n+┊   ┊  1┊import Button from '@material-ui/core/Button'\n+┊   ┊  2┊import SendIcon from '@material-ui/icons/Send'\n+┊   ┊  3┊import { defaultDataIdFromObject } from 'apollo-cache-inmemory'\n+┊   ┊  4┊import gql from 'graphql-tag'\n+┊   ┊  5┊import * as React from 'react'\n+┊   ┊  6┊import { useState } from 'react'\n+┊   ┊  7┊import { useQuery, useMutation } from 'react-apollo-hooks'\n+┊   ┊  8┊import styled from 'styled-components'\n+┊   ┊  9┊import { time as uniqid } from 'uniqid'\n+┊   ┊ 10┊import * as fragments from '../../graphql/fragments'\n+┊   ┊ 11┊import { MessageBoxMutation, FullChat, Message } from '../../graphql/types'\n+┊   ┊ 12┊import { useMe } from '../../services/auth.service'\n+┊   ┊ 13┊\n+┊   ┊ 14┊const Style = styled.div`\n+┊   ┊ 15┊  display: flex;\n+┊   ┊ 16┊  height: 50px;\n+┊   ┊ 17┊  padding: 5px;\n+┊   ┊ 18┊  width: calc(100% - 10px);\n+┊   ┊ 19┊\n+┊   ┊ 20┊  .MessageBox-input {\n+┊   ┊ 21┊    width: calc(100% - 50px);\n+┊   ┊ 22┊    border: none;\n+┊   ┊ 23┊    border-radius: 999px;\n+┊   ┊ 24┊    padding: 10px;\n+┊   ┊ 25┊    padding-left: 20px;\n+┊   ┊ 26┊    padding-right: 20px;\n+┊   ┊ 27┊    font-size: 15px;\n+┊   ┊ 28┊    outline: none;\n+┊   ┊ 29┊    box-shadow: 0 1px silver;\n+┊   ┊ 30┊    font-size: 18px;\n+┊   ┊ 31┊    line-height: 45px;\n+┊   ┊ 32┊  }\n+┊   ┊ 33┊\n+┊   ┊ 34┊  .MessageBox-button {\n+┊   ┊ 35┊    min-width: 50px;\n+┊   ┊ 36┊    width: 50px;\n+┊   ┊ 37┊    border-radius: 999px;\n+┊   ┊ 38┊    background-color: var(--primary-bg);\n+┊   ┊ 39┊    margin: 0 5px;\n+┊   ┊ 40┊    margin-right: 0;\n+┊   ┊ 41┊    color: white;\n+┊   ┊ 42┊    padding-left: 20px;\n+┊   ┊ 43┊    svg {\n+┊   ┊ 44┊      margin-left: -3px;\n+┊   ┊ 45┊    }\n+┊   ┊ 46┊  }\n+┊   ┊ 47┊`\n+┊   ┊ 48┊\n+┊   ┊ 49┊const mutation = gql`\n+┊   ┊ 50┊  mutation MessageBoxMutation($chatId: ID!, $content: String!) {\n+┊   ┊ 51┊    addMessage(chatId: $chatId, content: $content) {\n+┊   ┊ 52┊      ...Message\n+┊   ┊ 53┊    }\n+┊   ┊ 54┊  }\n+┊   ┊ 55┊  ${fragments.message}\n+┊   ┊ 56┊`\n+┊   ┊ 57┊\n+┊   ┊ 58┊interface MessageBoxProps {\n+┊   ┊ 59┊  chatId: string\n+┊   ┊ 60┊}\n+┊   ┊ 61┊\n+┊   ┊ 62┊export default ({ chatId }: MessageBoxProps) => {\n+┊   ┊ 63┊  const [message, setMessage] = useState('')\n+┊   ┊ 64┊  const me = useMe()\n+┊   ┊ 65┊\n+┊   ┊ 66┊  const addMessage = useMutation<MessageBoxMutation.Mutation, MessageBoxMutation.Variables>(\n+┊   ┊ 67┊    mutation,\n+┊   ┊ 68┊    {\n+┊   ┊ 69┊      variables: {\n+┊   ┊ 70┊        chatId,\n+┊   ┊ 71┊        content: message,\n+┊   ┊ 72┊      },\n+┊   ┊ 73┊      optimisticResponse: {\n+┊   ┊ 74┊        __typename: 'Mutation',\n+┊   ┊ 75┊        addMessage: {\n+┊   ┊ 76┊          id: uniqid(),\n+┊   ┊ 77┊          __typename: 'Message',\n+┊   ┊ 78┊          chat: {\n+┊   ┊ 79┊            id: chatId,\n+┊   ┊ 80┊            __typename: 'Chat',\n+┊   ┊ 81┊          },\n+┊   ┊ 82┊          sender: {\n+┊   ┊ 83┊            id: me.id,\n+┊   ┊ 84┊            __typename: 'User',\n+┊   ┊ 85┊            name: me.name,\n+┊   ┊ 86┊          },\n+┊   ┊ 87┊          content: message,\n+┊   ┊ 88┊          createdAt: new Date(),\n+┊   ┊ 89┊          type: 0,\n+┊   ┊ 90┊          recipients: [],\n+┊   ┊ 91┊          ownership: true,\n+┊   ┊ 92┊        },\n+┊   ┊ 93┊      },\n+┊   ┊ 94┊      update: (client, { data: { addMessage } }) => {\n+┊   ┊ 95┊        client.writeFragment({\n+┊   ┊ 96┊          id: defaultDataIdFromObject(addMessage),\n+┊   ┊ 97┊          fragment: fragments.message,\n+┊   ┊ 98┊          data: addMessage,\n+┊   ┊ 99┊        })\n+┊   ┊100┊\n+┊   ┊101┊        let fullChat\n+┊   ┊102┊        try {\n+┊   ┊103┊          fullChat = client.readFragment<FullChat.Fragment>({\n+┊   ┊104┊            id: defaultDataIdFromObject(addMessage.chat),\n+┊   ┊105┊            fragment: fragments.fullChat,\n+┊   ┊106┊            fragmentName: 'FullChat',\n+┊   ┊107┊          })\n+┊   ┊108┊        } catch (e) {}\n+┊   ┊109┊\n+┊   ┊110┊        if (fullChat && !fullChat.messages.some(message => message.id === addMessage.id)) {\n+┊   ┊111┊          fullChat.messages.push(addMessage)\n+┊   ┊112┊          fullChat.lastMessage = addMessage\n+┊   ┊113┊\n+┊   ┊114┊          client.writeFragment({\n+┊   ┊115┊            id: defaultDataIdFromObject(addMessage.chat),\n+┊   ┊116┊            fragment: fragments.fullChat,\n+┊   ┊117┊            fragmentName: 'FullChat',\n+┊   ┊118┊            data: fullChat,\n+┊   ┊119┊          })\n+┊   ┊120┊        }\n+┊   ┊121┊      },\n+┊   ┊122┊    },\n+┊   ┊123┊  )\n+┊   ┊124┊\n+┊   ┊125┊  const onKeyPress = e => {\n+┊   ┊126┊    if (e.charCode === 13) {\n+┊   ┊127┊      submitMessage()\n+┊   ┊128┊    }\n+┊   ┊129┊  }\n+┊   ┊130┊\n+┊   ┊131┊  const onChange = ({ target }) => {\n+┊   ┊132┊    setMessage(target.value)\n+┊   ┊133┊  }\n+┊   ┊134┊\n+┊   ┊135┊  const submitMessage = () => {\n+┊   ┊136┊    if (!message) return\n+┊   ┊137┊\n+┊   ┊138┊    addMessage()\n+┊   ┊139┊    setMessage('')\n+┊   ┊140┊  }\n+┊   ┊141┊\n+┊   ┊142┊  return (\n+┊   ┊143┊    <Style className=\"MessageBox\">\n+┊   ┊144┊      <input\n+┊   ┊145┊        className=\"MessageBox-input\"\n+┊   ┊146┊        type=\"text\"\n+┊   ┊147┊        placeholder=\"Type a message\"\n+┊   ┊148┊        value={message}\n+┊   ┊149┊        onKeyPress={onKeyPress}\n+┊   ┊150┊        onChange={onChange}\n+┊   ┊151┊      />\n+┊   ┊152┊      <Button\n+┊   ┊153┊        variant=\"contained\"\n+┊   ┊154┊        color=\"primary\"\n+┊   ┊155┊        className=\"MessageBox-button\"\n+┊   ┊156┊        onClick={submitMessage}\n+┊   ┊157┊      >\n+┊   ┊158┊        <SendIcon />\n+┊   ┊159┊      </Button>\n+┊   ┊160┊    </Style>\n+┊   ┊161┊  )\n+┊   ┊162┊}\n```\n\n##### Added src&#x2F;components&#x2F;ChatRoomScreen&#x2F;MessagesList.tsx\n```diff\n@@ -0,0 +1,143 @@\n+┊   ┊  1┊import gql from 'graphql-tag'\n+┊   ┊  2┊import * as moment from 'moment'\n+┊   ┊  3┊import * as React from 'react'\n+┊   ┊  4┊import { useRef, useEffect } from 'react'\n+┊   ┊  5┊import { useQuery, useMutation } from 'react-apollo-hooks'\n+┊   ┊  6┊import * as ReactDOM from 'react-dom'\n+┊   ┊  7┊import styled from 'styled-components'\n+┊   ┊  8┊import * as fragments from '../../graphql/fragments'\n+┊   ┊  9┊import { MessagesListQuery } from '../../graphql/types'\n+┊   ┊ 10┊\n+┊   ┊ 11┊const Style = styled.div`\n+┊   ┊ 12┊  display: block;\n+┊   ┊ 13┊  height: calc(100% - 60px);\n+┊   ┊ 14┊  width: calc(100% - 30px);\n+┊   ┊ 15┊  overflow-y: overlay;\n+┊   ┊ 16┊  padding: 0 15px;\n+┊   ┊ 17┊\n+┊   ┊ 18┊  .MessagesList-message {\n+┊   ┊ 19┊    display: inline-block;\n+┊   ┊ 20┊    position: relative;\n+┊   ┊ 21┊    max-width: 100%;\n+┊   ┊ 22┊    border-radius: 7px;\n+┊   ┊ 23┊    box-shadow: 0 1px 2px rgba(0, 0, 0, 0.15);\n+┊   ┊ 24┊    margin-top: 10px;\n+┊   ┊ 25┊    margin-bottom: 10px;\n+┊   ┊ 26┊    clear: both;\n+┊   ┊ 27┊\n+┊   ┊ 28┊    &::after {\n+┊   ┊ 29┊      content: '';\n+┊   ┊ 30┊      display: table;\n+┊   ┊ 31┊      clear: both;\n+┊   ┊ 32┊    }\n+┊   ┊ 33┊  }\n+┊   ┊ 34┊\n+┊   ┊ 35┊  .MessagesList-message-mine {\n+┊   ┊ 36┊    float: right;\n+┊   ┊ 37┊    background-color: #dcf8c6;\n+┊   ┊ 38┊\n+┊   ┊ 39┊    &::before {\n+┊   ┊ 40┊      right: -11px;\n+┊   ┊ 41┊      background-image: url(/assets/message-mine.png);\n+┊   ┊ 42┊    }\n+┊   ┊ 43┊  }\n+┊   ┊ 44┊\n+┊   ┊ 45┊  .MessagesList-message-others {\n+┊   ┊ 46┊    float: left;\n+┊   ┊ 47┊    background-color: #fff;\n+┊   ┊ 48┊\n+┊   ┊ 49┊    &::before {\n+┊   ┊ 50┊      left: -11px;\n+┊   ┊ 51┊      background-image: url(/assets/message-other.png);\n+┊   ┊ 52┊    }\n+┊   ┊ 53┊  }\n+┊   ┊ 54┊\n+┊   ┊ 55┊  .MessagesList-message-others::before,\n+┊   ┊ 56┊  .MessagesList-message-mine::before {\n+┊   ┊ 57┊    content: '';\n+┊   ┊ 58┊    position: absolute;\n+┊   ┊ 59┊    bottom: 3px;\n+┊   ┊ 60┊    width: 12px;\n+┊   ┊ 61┊    height: 19px;\n+┊   ┊ 62┊    background-position: 50% 50%;\n+┊   ┊ 63┊    background-repeat: no-repeat;\n+┊   ┊ 64┊    background-size: contain;\n+┊   ┊ 65┊  }\n+┊   ┊ 66┊\n+┊   ┊ 67┊  .MessagesList-message-sender {\n+┊   ┊ 68┊    font-weight: bold;\n+┊   ┊ 69┊    margin-left: 5px;\n+┊   ┊ 70┊    margin-top: 5px;\n+┊   ┊ 71┊  }\n+┊   ┊ 72┊\n+┊   ┊ 73┊  .MessagesList-message-contents {\n+┊   ┊ 74┊    padding: 5px 7px;\n+┊   ┊ 75┊    word-wrap: break-word;\n+┊   ┊ 76┊\n+┊   ┊ 77┊    &::after {\n+┊   ┊ 78┊      content: ' \\00a0\\00a0\\00a0\\00a0\\00a0\\00a0\\00a0\\00a0\\00a0\\00a0\\00a0\\00a0\\00a0\\00a0\\00a0\\00a0\\00a0\\00a0\\00a0';\n+┊   ┊ 79┊      display: inline;\n+┊   ┊ 80┊    }\n+┊   ┊ 81┊  }\n+┊   ┊ 82┊\n+┊   ┊ 83┊  .MessagesList-message-timestamp {\n+┊   ┊ 84┊    position: absolute;\n+┊   ┊ 85┊    bottom: 2px;\n+┊   ┊ 86┊    right: 7px;\n+┊   ┊ 87┊    color: gray;\n+┊   ┊ 88┊    font-size: 12px;\n+┊   ┊ 89┊  }\n+┊   ┊ 90┊`\n+┊   ┊ 91┊\n+┊   ┊ 92┊const query = gql`\n+┊   ┊ 93┊  query MessagesListQuery($chatId: ID!) {\n+┊   ┊ 94┊    chat(chatId: $chatId) {\n+┊   ┊ 95┊      ...FullChat\n+┊   ┊ 96┊    }\n+┊   ┊ 97┊  }\n+┊   ┊ 98┊  ${fragments.fullChat}\n+┊   ┊ 99┊`\n+┊   ┊100┊\n+┊   ┊101┊interface MessagesListProps {\n+┊   ┊102┊  chatId: string\n+┊   ┊103┊}\n+┊   ┊104┊\n+┊   ┊105┊export default ({ chatId }: MessagesListProps) => {\n+┊   ┊106┊  const {\n+┊   ┊107┊    data: {\n+┊   ┊108┊      chat: { messages },\n+┊   ┊109┊    },\n+┊   ┊110┊  } = useQuery<MessagesListQuery.Query, MessagesListQuery.Variables>(query, {\n+┊   ┊111┊    variables: { chatId },\n+┊   ┊112┊  })\n+┊   ┊113┊  const selfRef = useRef(null)\n+┊   ┊114┊\n+┊   ┊115┊  const resetScrollTop = () => {\n+┊   ┊116┊    if (!selfRef.current) return\n+┊   ┊117┊\n+┊   ┊118┊    const selfDOMNode = ReactDOM.findDOMNode(selfRef.current) as HTMLElement\n+┊   ┊119┊    selfDOMNode.scrollTop = Number.MAX_SAFE_INTEGER\n+┊   ┊120┊  }\n+┊   ┊121┊\n+┊   ┊122┊  useEffect(resetScrollTop, [selfRef.current])\n+┊   ┊123┊  useEffect(resetScrollTop, [messages.length])\n+┊   ┊124┊\n+┊   ┊125┊  return (\n+┊   ┊126┊    <Style className={name} ref={selfRef}>\n+┊   ┊127┊      {messages &&\n+┊   ┊128┊        messages.map(message => (\n+┊   ┊129┊          <div\n+┊   ┊130┊            key={message.id}\n+┊   ┊131┊            className={`MessagesList-message ${\n+┊   ┊132┊              message.ownership ? 'MessagesList-message-mine' : 'MessagesList-message-others'\n+┊   ┊133┊            }`}\n+┊   ┊134┊          >\n+┊   ┊135┊            <div className=\"MessagesList-message-contents\">{message.content}</div>\n+┊   ┊136┊            <span className=\"MessagesList-message-timestamp\">\n+┊   ┊137┊              {moment(message.createdAt).format('HH:mm')}\n+┊   ┊138┊            </span>\n+┊   ┊139┊          </div>\n+┊   ┊140┊        ))}\n+┊   ┊141┊    </Style>\n+┊   ┊142┊  )\n+┊   ┊143┊}\n```\n\n##### Added src&#x2F;components&#x2F;ChatRoomScreen&#x2F;index.tsx\n```diff\n@@ -0,0 +1,56 @@\n+┊  ┊ 1┊import * as React from 'react'\n+┊  ┊ 2┊import { Suspense } from 'react'\n+┊  ┊ 3┊import { RouteComponentProps } from 'react-router-dom'\n+┊  ┊ 4┊import styled from 'styled-components'\n+┊  ┊ 5┊import Navbar from '../Navbar'\n+┊  ┊ 6┊import ChatNavbar from './ChatNavbar'\n+┊  ┊ 7┊import MessageBox from './MessageBox'\n+┊  ┊ 8┊import MessagesList from './MessagesList'\n+┊  ┊ 9┊\n+┊  ┊10┊const Style = styled.div`\n+┊  ┊11┊  .ChatScreen-body {\n+┊  ┊12┊    position: relative;\n+┊  ┊13┊    background: url(/assets/chat-background.jpg);\n+┊  ┊14┊    width: 100%;\n+┊  ┊15┊    height: calc(100% - 56px);\n+┊  ┊16┊\n+┊  ┊17┊    .MessagesList {\n+┊  ┊18┊      position: absolute;\n+┊  ┊19┊      height: calc(100% - 60px);\n+┊  ┊20┊      top: 0;\n+┊  ┊21┊    }\n+┊  ┊22┊\n+┊  ┊23┊    .MessageBox {\n+┊  ┊24┊      position: absolute;\n+┊  ┊25┊      bottom: 0;\n+┊  ┊26┊      left: 0;\n+┊  ┊27┊    }\n+┊  ┊28┊\n+┊  ┊29┊    .AddChatButton {\n+┊  ┊30┊      right: 0;\n+┊  ┊31┊      bottom: 0;\n+┊  ┊32┊    }\n+┊  ┊33┊  }\n+┊  ┊34┊`\n+┊  ┊35┊\n+┊  ┊36┊export default ({ match, history }: RouteComponentProps) => {\n+┊  ┊37┊  const chatId = match.params.chatId\n+┊  ┊38┊\n+┊  ┊39┊  return (\n+┊  ┊40┊    <Style className=\"ChatScreen Screen\">\n+┊  ┊41┊      <Navbar>\n+┊  ┊42┊        <Suspense fallback={null}>\n+┊  ┊43┊          <ChatNavbar chatId={chatId} history={history} />\n+┊  ┊44┊        </Suspense>\n+┊  ┊45┊      </Navbar>\n+┊  ┊46┊      <div className=\"ChatScreen-body\">\n+┊  ┊47┊        <Suspense fallback={null}>\n+┊  ┊48┊          <MessagesList chatId={chatId} />\n+┊  ┊49┊        </Suspense>\n+┊  ┊50┊        <Suspense fallback={null}>\n+┊  ┊51┊          <MessageBox chatId={chatId} />\n+┊  ┊52┊        </Suspense>\n+┊  ┊53┊      </div>\n+┊  ┊54┊    </Style>\n+┊  ┊55┊  )\n+┊  ┊56┊}\n```\n\n[}]: #\n\nWe're introduced to new 2 packages in the implementation above:\n\n- [`uniqid`](https://www.npmjs.com/package/uniqid) - Used to generate a unique ID in our optimistic response.\n- [`styled-components`](https://www.npmjs.com/package/styled-components) - Used to create encapsulated style for React components.\n\nLet's install them then:\n\n    $ yarn add uniqid@5.0.3 styled-components@4.1.3\n\nYou'll notice that there's a new fragment called `fullChat`. The full chat includes the base chat details, plus a list of messages that we're gonna view in the chat room screen. Let's define the fragment then:\n\n[{]: <helper> (diffStep 3.1 files=\"src/graphql/fragments\" module=\"client\")\n\n#### [Step 3.1: Add chat room screen](https://github.com/Urigo/WhatsApp-Clone-Client-React/commit/685c9fe)\n\n##### Added src&#x2F;graphql&#x2F;fragments&#x2F;fullChat.fragment.ts\n```diff\n@@ -0,0 +1,14 @@\n+┊  ┊ 1┊import gql from 'graphql-tag'\n+┊  ┊ 2┊import chat from './chat.fragment'\n+┊  ┊ 3┊import message from './message.fragment'\n+┊  ┊ 4┊\n+┊  ┊ 5┊export default gql `\n+┊  ┊ 6┊  fragment FullChat on Chat {\n+┊  ┊ 7┊    ...Chat\n+┊  ┊ 8┊    messages {\n+┊  ┊ 9┊      ...Message\n+┊  ┊10┊    }\n+┊  ┊11┊  }\n+┊  ┊12┊  ${chat}\n+┊  ┊13┊  ${message}\n+┊  ┊14┊`\n```\n\n##### Changed src&#x2F;graphql&#x2F;fragments&#x2F;index.ts\n```diff\n@@ -1,3 +1,4 @@\n ┊1┊1┊export { default as chat } from './chat.fragment'\n+┊ ┊2┊export { default as fullChat } from './fullChat.fragment'\n ┊2┊3┊export { default as message } from './message.fragment'\n ┊3┊4┊export { default as user } from './user.fragment'\n```\n\n[}]: #\n\nAt this point the chat room should be functional. Let's add a dedicated route for it and make it navigatable by clicking on a chat item from the chats list screen:\n\n[{]: <helper> (diffStep 3.1 files=\"src/App, src/components/ChatsListScreen\" module=\"client\")\n\n#### [Step 3.1: Add chat room screen](https://github.com/Urigo/WhatsApp-Clone-Client-React/commit/685c9fe)\n\n##### Changed src&#x2F;App.tsx\n```diff\n@@ -1,5 +1,6 @@\n ┊1┊1┊import * as React from 'react'\n ┊2┊2┊import { BrowserRouter, Route, Redirect } from 'react-router-dom'\n+┊ ┊3┊import ChatRoomScreen from './components/ChatRoomScreen'\n ┊3┊4┊import AnimatedSwitch from './components/AnimatedSwitch'\n ┊4┊5┊import AuthScreen from './components/AuthScreen'\n ┊5┊6┊import ChatsListScreen from './components/ChatsListScreen'\n```\n```diff\n@@ -16,6 +17,7 @@\n ┊16┊17┊      <Route exact path=\"/sign-(in|up)\" component={AuthScreen} />\n ┊17┊18┊      <Route exact path=\"/chats\" component={withAuth(ChatsListScreen)} />\n ┊18┊19┊      <Route exact path=\"/settings\" component={withAuth(SettingsScreen)} />\n+┊  ┊20┊      <Route exact path=\"/chats/:chatId\" component={withAuth(ChatRoomScreen)} />\n ┊19┊21┊      <Route component={RedirectToChats} />\n ┊20┊22┊    </AnimatedSwitch>\n ┊21┊23┊  </BrowserRouter>\n```\n\n##### Changed src&#x2F;components&#x2F;ChatsListScreen&#x2F;ChatsList.tsx\n```diff\n@@ -1,6 +1,7 @@\n ┊1┊1┊import List from '@material-ui/core/List'\n ┊2┊2┊import ListItem from '@material-ui/core/ListItem'\n ┊3┊3┊import gql from 'graphql-tag'\n+┊ ┊4┊import { History } from 'history'\n ┊4┊5┊import * as moment from 'moment'\n ┊5┊6┊import * as React from 'react'\n ┊6┊7┊import { useQuery } from 'react-apollo-hooks'\n```\n```diff\n@@ -71,11 +72,19 @@\n ┊71┊72┊  ${fragments.chat}\n ┊72┊73┊`\n ┊73┊74┊\n-┊74┊  ┊export default () => {\n+┊  ┊75┊interface ChatsListProps {\n+┊  ┊76┊  history: History\n+┊  ┊77┊}\n+┊  ┊78┊\n+┊  ┊79┊export default ({ history }: ChatsListProps) => {\n ┊75┊80┊  const {\n ┊76┊81┊    data: { chats },\n ┊77┊82┊  } = useQuery<ChatsListQuery.Query>(query)\n ┊78┊83┊\n+┊  ┊84┊  const navToChat = chatId => {\n+┊  ┊85┊    history.push(`chats/${chatId}`)\n+┊  ┊86┊  }\n+┊  ┊87┊\n ┊79┊88┊  return (\n ┊80┊89┊    <Style className=\"ChatsList\">\n ┊81┊90┊      <List className=\"ChatsList-chats-list\">\n```\n```diff\n@@ -84,6 +93,7 @@\n ┊84┊93┊            key={chat.id}\n ┊85┊94┊            className=\"ChatsList-chat-item\"\n ┊86┊95┊            button\n+┊  ┊96┊            onClick={navToChat.bind(null, chat.id)}\n ┊87┊97┊          >\n ┊88┊98┊            <img\n ┊89┊99┊              className=\"ChatsList-profile-pic\"\n```\n\n##### Changed src&#x2F;components&#x2F;ChatsListScreen&#x2F;index.tsx\n```diff\n@@ -11,7 +11,7 @@\n ┊11┊11┊      <ChatsNavbar history={history} />\n ┊12┊12┊    </Navbar>\n ┊13┊13┊    <Suspense fallback={null}>\n-┊14┊  ┊      <ChatsList />\n+┊  ┊14┊      <ChatsList history={history} />\n ┊15┊15┊    </Suspense>\n ┊16┊16┊  </div>\n ┊17┊17┊)\n```\n\n[}]: #\n\nLike we said in the previous step, everything in our application is connected and so whenever there's a mutation or a change in data we should update the cache. Let's define the right subscriptions and update our `cache.service`:\n\n[{]: <helper> (diffStep 3.1 files=\"src/graphql/subscriptions, src/services/cache\" module=\"client\")\n\n#### [Step 3.1: Add chat room screen](https://github.com/Urigo/WhatsApp-Clone-Client-React/commit/685c9fe)\n\n##### Changed src&#x2F;graphql&#x2F;subscriptions&#x2F;index.ts\n```diff\n@@ -1 +1,2 @@\n ┊1┊1┊export { default as chatUpdated } from './chatUpdated.subscription'\n+┊ ┊2┊export { default as messageAdded } from './messageAdded.subscription'\n```\n\n##### Added src&#x2F;graphql&#x2F;subscriptions&#x2F;messageAdded.subscription.ts\n```diff\n@@ -0,0 +1,11 @@\n+┊  ┊ 1┊import gql from 'graphql-tag'\n+┊  ┊ 2┊import * as fragments from '../fragments'\n+┊  ┊ 3┊\n+┊  ┊ 4┊export default gql `\n+┊  ┊ 5┊  subscription MessageAdded {\n+┊  ┊ 6┊    messageAdded {\n+┊  ┊ 7┊      ...Message\n+┊  ┊ 8┊    }\n+┊  ┊ 9┊  }\n+┊  ┊10┊  ${fragments.message}\n+┊  ┊11┊`\n```\n\n##### Changed src&#x2F;services&#x2F;cache.service.tsx\n```diff\n@@ -1,7 +1,8 @@\n ┊1┊1┊import { defaultDataIdFromObject } from 'apollo-cache-inmemory'\n ┊2┊2┊import * as fragments from '../graphql/fragments'\n ┊3┊3┊import * as subscriptions from '../graphql/subscriptions'\n-┊4┊ ┊import { ChatUpdated } from '../graphql/types'\n+┊ ┊4┊import * as queries from '../graphql/queries'\n+┊ ┊5┊import { ChatUpdated, MessageAdded, Message, Chats, FullChat } from '../graphql/types'\n ┊5┊6┊import { useSubscription } from '../polyfills/react-apollo-hooks'\n ┊6┊7┊\n ┊7┊8┊export const useSubscriptions = () => {\n```\n```diff\n@@ -15,4 +16,54 @@\n ┊15┊16┊      })\n ┊16┊17┊    },\n ┊17┊18┊  })\n+┊  ┊19┊\n+┊  ┊20┊  useSubscription<MessageAdded.Subscription>(subscriptions.messageAdded, {\n+┊  ┊21┊    onSubscriptionData: ({ client, subscriptionData: { messageAdded } }) => {\n+┊  ┊22┊      client.writeFragment<Message.Fragment>({\n+┊  ┊23┊        id: defaultDataIdFromObject(messageAdded),\n+┊  ┊24┊        fragment: fragments.message,\n+┊  ┊25┊        data: messageAdded,\n+┊  ┊26┊      })\n+┊  ┊27┊\n+┊  ┊28┊      let fullChat\n+┊  ┊29┊      try {\n+┊  ┊30┊        fullChat = client.readFragment<FullChat.Fragment>({\n+┊  ┊31┊          id: defaultDataIdFromObject(messageAdded.chat),\n+┊  ┊32┊          fragment: fragments.fullChat,\n+┊  ┊33┊          fragmentName: 'FullChat',\n+┊  ┊34┊        })\n+┊  ┊35┊      } catch (e) {}\n+┊  ┊36┊\n+┊  ┊37┊      if (fullChat && !fullChat.messages.some(message => message.id === messageAdded.id)) {\n+┊  ┊38┊        fullChat.messages.push(messageAdded)\n+┊  ┊39┊        fullChat.lastMessage = messageAdded\n+┊  ┊40┊\n+┊  ┊41┊        client.writeFragment({\n+┊  ┊42┊          id: defaultDataIdFromObject(fullChat),\n+┊  ┊43┊          fragment: fragments.fullChat,\n+┊  ┊44┊          fragmentName: 'FullChat',\n+┊  ┊45┊          data: fullChat,\n+┊  ┊46┊        })\n+┊  ┊47┊      }\n+┊  ┊48┊\n+┊  ┊49┊      let chats\n+┊  ┊50┊      try {\n+┊  ┊51┊        chats = client.readQuery<Chats.Query>({\n+┊  ┊52┊          query: queries.chats,\n+┊  ┊53┊        }).chats\n+┊  ┊54┊      } catch (e) {}\n+┊  ┊55┊\n+┊  ┊56┊      if (chats) {\n+┊  ┊57┊        const index = chats.findIndex(chat => chat.id === messageAdded.chat.id)\n+┊  ┊58┊        const chat = chats[index]\n+┊  ┊59┊        chats.splice(index, 1)\n+┊  ┊60┊        chats.unshift(chat)\n+┊  ┊61┊\n+┊  ┊62┊        client.writeQuery({\n+┊  ┊63┊          query: queries.chats,\n+┊  ┊64┊          data: { chats },\n+┊  ┊65┊        })\n+┊  ┊66┊      }\n+┊  ┊67┊    },\n+┊  ┊68┊  })\n ┊18┊69┊}\n```\n\n[}]: #\n\nWe've already implemented all the necessary subscription handlers in the server in the beginning of this step, so things should work smoothly.\n\nNow we're gonna implement a users list component where we will be able to pick users and chat with them. The users list component is gonna be global to the rest of the components because we will be using it in other screens in the upcoming steps.\n\n[{]: <helper> (diffStep 3.2 files=\"src/components/UsersList\" module=\"client\")\n\n#### [Step 3.2: Add new chat screen](https://github.com/Urigo/WhatsApp-Clone-Client-React/commit/ca48569)\n\n##### Added src&#x2F;components&#x2F;UsersList.tsx\n```diff\n@@ -0,0 +1,112 @@\n+┊   ┊  1┊import List from '@material-ui/core/List'\n+┊   ┊  2┊import ListItem from '@material-ui/core/ListItem'\n+┊   ┊  3┊import CheckCircle from '@material-ui/icons/CheckCircle'\n+┊   ┊  4┊import gql from 'graphql-tag'\n+┊   ┊  5┊import * as React from 'react'\n+┊   ┊  6┊import { useState } from 'react'\n+┊   ┊  7┊import { useQuery } from 'react-apollo-hooks'\n+┊   ┊  8┊import styled from 'styled-components'\n+┊   ┊  9┊import * as fragments from '../graphql/fragments'\n+┊   ┊ 10┊import { UsersListQuery, User } from '../graphql/types'\n+┊   ┊ 11┊\n+┊   ┊ 12┊const Style = styled.div`\n+┊   ┊ 13┊  .UsersList-users-list {\n+┊   ┊ 14┊    padding: 0;\n+┊   ┊ 15┊  }\n+┊   ┊ 16┊\n+┊   ┊ 17┊  .UsersList-user-item {\n+┊   ┊ 18┊    position: relative;\n+┊   ┊ 19┊    padding: 7.5px 15px;\n+┊   ┊ 20┊    display: flex;\n+┊   ┊ 21┊    ${props => props.selectable && 'cursor: pointer;'}\n+┊   ┊ 22┊  }\n+┊   ┊ 23┊\n+┊   ┊ 24┊  .UsersList-profile-pic {\n+┊   ┊ 25┊    height: 50px;\n+┊   ┊ 26┊    width: 50px;\n+┊   ┊ 27┊    object-fit: cover;\n+┊   ┊ 28┊    border-radius: 50%;\n+┊   ┊ 29┊  }\n+┊   ┊ 30┊\n+┊   ┊ 31┊  .UsersList-name {\n+┊   ┊ 32┊    padding-left: 15px;\n+┊   ┊ 33┊    font-weight: bold;\n+┊   ┊ 34┊  }\n+┊   ┊ 35┊\n+┊   ┊ 36┊  .UsersList-checkmark {\n+┊   ┊ 37┊    position: absolute;\n+┊   ┊ 38┊    left: 50px;\n+┊   ┊ 39┊    top: 35px;\n+┊   ┊ 40┊    color: var(--secondary-bg);\n+┊   ┊ 41┊    background-color: white;\n+┊   ┊ 42┊    border-radius: 50%;\n+┊   ┊ 43┊  }\n+┊   ┊ 44┊`\n+┊   ┊ 45┊\n+┊   ┊ 46┊const query = gql`\n+┊   ┊ 47┊  query UsersListQuery {\n+┊   ┊ 48┊    users {\n+┊   ┊ 49┊      ...User\n+┊   ┊ 50┊    }\n+┊   ┊ 51┊  }\n+┊   ┊ 52┊  ${fragments.user}\n+┊   ┊ 53┊`\n+┊   ┊ 54┊\n+┊   ┊ 55┊interface UsersListProps {\n+┊   ┊ 56┊  selectable?: boolean\n+┊   ┊ 57┊  onSelectionChange?: (users: User.Fragment[]) => void\n+┊   ┊ 58┊  onUserPick?: (user: User.Fragment) => void\n+┊   ┊ 59┊}\n+┊   ┊ 60┊\n+┊   ┊ 61┊export default (props: UsersListProps) => {\n+┊   ┊ 62┊  const { selectable, onSelectionChange, onUserPick } = {\n+┊   ┊ 63┊    selectable: false,\n+┊   ┊ 64┊    onSelectionChange: () => {},\n+┊   ┊ 65┊    onUserPick: () => {},\n+┊   ┊ 66┊    ...props,\n+┊   ┊ 67┊  }\n+┊   ┊ 68┊\n+┊   ┊ 69┊  const [selectedUsers, setSelectedUsers] = useState([])\n+┊   ┊ 70┊  const {\n+┊   ┊ 71┊    data: { users },\n+┊   ┊ 72┊  } = useQuery<UsersListQuery.Query>(query)\n+┊   ┊ 73┊\n+┊   ┊ 74┊  const onListItemClick = user => {\n+┊   ┊ 75┊    if (!selectable) {\n+┊   ┊ 76┊      return onUserPick(user)\n+┊   ┊ 77┊    }\n+┊   ┊ 78┊\n+┊   ┊ 79┊    if (selectedUsers.includes(user)) {\n+┊   ┊ 80┊      const index = selectedUsers.indexOf(user)\n+┊   ┊ 81┊      selectedUsers.splice(index, 1)\n+┊   ┊ 82┊    } else {\n+┊   ┊ 83┊      selectedUsers.push(user)\n+┊   ┊ 84┊    }\n+┊   ┊ 85┊\n+┊   ┊ 86┊    setSelectedUsers(selectedUsers)\n+┊   ┊ 87┊    onSelectionChange(selectedUsers)\n+┊   ┊ 88┊  }\n+┊   ┊ 89┊\n+┊   ┊ 90┊  return (\n+┊   ┊ 91┊    <Style className=\"UsersList\" selectable={selectable}>\n+┊   ┊ 92┊      <List className=\"UsersList-users-list\">\n+┊   ┊ 93┊        {users.map(user => (\n+┊   ┊ 94┊          <ListItem\n+┊   ┊ 95┊            className=\"UsersList-user-item\"\n+┊   ┊ 96┊            key={user.id}\n+┊   ┊ 97┊            button\n+┊   ┊ 98┊            onClick={onListItemClick.bind(null, user)}\n+┊   ┊ 99┊          >\n+┊   ┊100┊            <img\n+┊   ┊101┊              className=\"UsersList-profile-pic\"\n+┊   ┊102┊              src={user.picture || '/assets/default-profile-pic.jpg'}\n+┊   ┊103┊            />\n+┊   ┊104┊            <div className=\"UsersList-name\">{user.name}</div>\n+┊   ┊105┊\n+┊   ┊106┊            {selectedUsers.includes(user) && <CheckCircle className=\"UsersList-checkmark\" />}\n+┊   ┊107┊          </ListItem>\n+┊   ┊108┊        ))}\n+┊   ┊109┊      </List>\n+┊   ┊110┊    </Style>\n+┊   ┊111┊  )\n+┊   ┊112┊}\n```\n\n[}]: #\n\nNow let's implement the new chat screen:\n\n[{]: <helper> (diffStep 3.2 files=\"src/components/NewChatScreen\" module=\"client\")\n\n#### [Step 3.2: Add new chat screen](https://github.com/Urigo/WhatsApp-Clone-Client-React/commit/ca48569)\n\n##### Added src&#x2F;components&#x2F;NewChatScreen&#x2F;NewChatNavbar.tsx\n```diff\n@@ -0,0 +1,39 @@\n+┊  ┊ 1┊import Button from '@material-ui/core/Button'\n+┊  ┊ 2┊import ArrowBackIcon from '@material-ui/icons/ArrowBack'\n+┊  ┊ 3┊import { History } from 'history'\n+┊  ┊ 4┊import * as React from 'react'\n+┊  ┊ 5┊import styled from 'styled-components'\n+┊  ┊ 6┊\n+┊  ┊ 7┊const Style = styled.div`\n+┊  ┊ 8┊  padding: 0;\n+┊  ┊ 9┊  display: flex;\n+┊  ┊10┊  flex-direction: row;\n+┊  ┊11┊  margin-left: -20px;\n+┊  ┊12┊\n+┊  ┊13┊  .NewChatNavbar-title {\n+┊  ┊14┊    line-height: 56px;\n+┊  ┊15┊  }\n+┊  ┊16┊\n+┊  ┊17┊  .NewChatNavbar-back-button {\n+┊  ┊18┊    color: var(--primary-text);\n+┊  ┊19┊  }\n+┊  ┊20┊`\n+┊  ┊21┊\n+┊  ┊22┊interface NewChatNavbarProps {\n+┊  ┊23┊  history: History\n+┊  ┊24┊}\n+┊  ┊25┊\n+┊  ┊26┊export default ({ history }: NewChatNavbarProps) => {\n+┊  ┊27┊  const navToChats = () => {\n+┊  ┊28┊    history.push('/chats')\n+┊  ┊29┊  }\n+┊  ┊30┊\n+┊  ┊31┊  return (\n+┊  ┊32┊    <Style className=\"NewChatNavbar\">\n+┊  ┊33┊      <Button className=\"NewChatNavbar-back-button\" onClick={navToChats}>\n+┊  ┊34┊        <ArrowBackIcon />\n+┊  ┊35┊      </Button>\n+┊  ┊36┊      <div className=\"NewChatNavbar-title\">New Chat</div>\n+┊  ┊37┊    </Style>\n+┊  ┊38┊  )\n+┊  ┊39┊}\n```\n\n##### Added src&#x2F;components&#x2F;NewChatScreen&#x2F;index.tsx\n```diff\n@@ -0,0 +1,106 @@\n+┊   ┊  1┊import { defaultDataIdFromObject } from 'apollo-cache-inmemory'\n+┊   ┊  2┊import gql from 'graphql-tag'\n+┊   ┊  3┊import * as React from 'react'\n+┊   ┊  4┊import { Suspense } from 'react'\n+┊   ┊  5┊import { useMutation } from 'react-apollo-hooks'\n+┊   ┊  6┊import { RouteComponentProps } from 'react-router-dom'\n+┊   ┊  7┊import styled from 'styled-components'\n+┊   ┊  8┊import { time as uniqid } from 'uniqid'\n+┊   ┊  9┊import * as fragments from '../../graphql/fragments'\n+┊   ┊ 10┊import * as queries from '../../graphql/queries'\n+┊   ┊ 11┊import { Chats } from '../../graphql/types'\n+┊   ┊ 12┊import { NewChatScreenMutation } from '../../graphql/types'\n+┊   ┊ 13┊import { useMe } from '../../services/auth.service'\n+┊   ┊ 14┊import Navbar from '../Navbar'\n+┊   ┊ 15┊import UsersList from '../UsersList'\n+┊   ┊ 16┊import NewChatNavbar from './NewChatNavbar'\n+┊   ┊ 17┊\n+┊   ┊ 18┊const Style = styled.div`\n+┊   ┊ 19┊  .UsersList {\n+┊   ┊ 20┊    height: calc(100% - 56px);\n+┊   ┊ 21┊  }\n+┊   ┊ 22┊\n+┊   ┊ 23┊  .NewChatScreen-users-list {\n+┊   ┊ 24┊    height: calc(100% - 56px);\n+┊   ┊ 25┊    overflow-y: overlay;\n+┊   ┊ 26┊  }\n+┊   ┊ 27┊`\n+┊   ┊ 28┊\n+┊   ┊ 29┊const mutation = gql`\n+┊   ┊ 30┊  mutation NewChatScreenMutation($userId: ID!) {\n+┊   ┊ 31┊    addChat(userId: $userId) {\n+┊   ┊ 32┊      ...Chat\n+┊   ┊ 33┊    }\n+┊   ┊ 34┊  }\n+┊   ┊ 35┊  ${fragments.chat}\n+┊   ┊ 36┊`\n+┊   ┊ 37┊\n+┊   ┊ 38┊export default ({ history }: RouteComponentProps) => {\n+┊   ┊ 39┊  const me = useMe()\n+┊   ┊ 40┊\n+┊   ┊ 41┊  const addChat = useMutation<NewChatScreenMutation.Mutation, NewChatScreenMutation.Variables>(\n+┊   ┊ 42┊    mutation,\n+┊   ┊ 43┊    {\n+┊   ┊ 44┊      update: (client, { data: { addChat } }) => {\n+┊   ┊ 45┊        client.writeFragment({\n+┊   ┊ 46┊          id: defaultDataIdFromObject(addChat),\n+┊   ┊ 47┊          fragment: fragments.chat,\n+┊   ┊ 48┊          fragmentName: 'Chat',\n+┊   ┊ 49┊          data: addChat,\n+┊   ┊ 50┊        })\n+┊   ┊ 51┊\n+┊   ┊ 52┊        let chats\n+┊   ┊ 53┊        try {\n+┊   ┊ 54┊          chats = client.readQuery<Chats.Query>({\n+┊   ┊ 55┊            query: queries.chats,\n+┊   ┊ 56┊          }).chats\n+┊   ┊ 57┊        } catch (e) {}\n+┊   ┊ 58┊\n+┊   ┊ 59┊        if (chats && !chats.some(chat => chat.id === addChat.id)) {\n+┊   ┊ 60┊          chats.unshift(addChat)\n+┊   ┊ 61┊\n+┊   ┊ 62┊          client.writeQuery({\n+┊   ┊ 63┊            query: queries.chats,\n+┊   ┊ 64┊            data: { chats },\n+┊   ┊ 65┊          })\n+┊   ┊ 66┊        }\n+┊   ┊ 67┊      },\n+┊   ┊ 68┊    },\n+┊   ┊ 69┊  )\n+┊   ┊ 70┊\n+┊   ┊ 71┊  const onUserPick = user => {\n+┊   ┊ 72┊    addChat({\n+┊   ┊ 73┊      optimisticResponse: {\n+┊   ┊ 74┊        __typename: 'Mutation',\n+┊   ┊ 75┊        addChat: {\n+┊   ┊ 76┊          __typename: 'Chat',\n+┊   ┊ 77┊          id: uniqid(),\n+┊   ┊ 78┊          name: user.name,\n+┊   ┊ 79┊          picture: user.picture,\n+┊   ┊ 80┊          allTimeMembers: [],\n+┊   ┊ 81┊          owner: me,\n+┊   ┊ 82┊          isGroup: false,\n+┊   ┊ 83┊          lastMessage: null,\n+┊   ┊ 84┊        },\n+┊   ┊ 85┊      },\n+┊   ┊ 86┊      variables: {\n+┊   ┊ 87┊        userId: user.id,\n+┊   ┊ 88┊      },\n+┊   ┊ 89┊    }).then(({ data: { addChat } }) => {\n+┊   ┊ 90┊      history.push(`/chats/${addChat.id}`)\n+┊   ┊ 91┊    })\n+┊   ┊ 92┊  }\n+┊   ┊ 93┊\n+┊   ┊ 94┊  return (\n+┊   ┊ 95┊    <Style className=\"NewChatScreen Screen\">\n+┊   ┊ 96┊      <Navbar>\n+┊   ┊ 97┊        <NewChatNavbar history={history} />\n+┊   ┊ 98┊      </Navbar>\n+┊   ┊ 99┊      <div className=\"NewChatScreen-users-list\">\n+┊   ┊100┊        <Suspense fallback={null}>\n+┊   ┊101┊          <UsersList onUserPick={onUserPick} />\n+┊   ┊102┊        </Suspense>\n+┊   ┊103┊      </div>\n+┊   ┊104┊    </Style>\n+┊   ┊105┊  )\n+┊   ┊106┊}\n```\n\n[}]: #\n\nAnd implement a dedicated route for it:\n\n[{]: <helper> (diffStep 3.2 files=\"src/App\" module=\"client\")\n\n#### [Step 3.2: Add new chat screen](https://github.com/Urigo/WhatsApp-Clone-Client-React/commit/ca48569)\n\n##### Changed src&#x2F;App.tsx\n```diff\n@@ -1,6 +1,7 @@\n ┊1┊1┊import * as React from 'react'\n ┊2┊2┊import { BrowserRouter, Route, Redirect } from 'react-router-dom'\n ┊3┊3┊import ChatRoomScreen from './components/ChatRoomScreen'\n+┊ ┊4┊import NewChatScreen from './components/NewChatScreen'\n ┊4┊5┊import AnimatedSwitch from './components/AnimatedSwitch'\n ┊5┊6┊import AuthScreen from './components/AuthScreen'\n ┊6┊7┊import ChatsListScreen from './components/ChatsListScreen'\n```\n```diff\n@@ -18,6 +19,7 @@\n ┊18┊19┊      <Route exact path=\"/chats\" component={withAuth(ChatsListScreen)} />\n ┊19┊20┊      <Route exact path=\"/settings\" component={withAuth(SettingsScreen)} />\n ┊20┊21┊      <Route exact path=\"/chats/:chatId\" component={withAuth(ChatRoomScreen)} />\n+┊  ┊22┊      <Route exact path=\"/new-chat\" component={withAuth(NewChatScreen)} />\n ┊21┊23┊      <Route component={RedirectToChats} />\n ┊22┊24┊    </AnimatedSwitch>\n ┊23┊25┊  </BrowserRouter>\n```\n\n[}]: #\n\nWe will also add a button which will redirect us right to the new chat screen:\n\n[{]: <helper> (diffStep 3.2 files=\"src/components/ChatsListScreen\" module=\"client\")\n\n#### [Step 3.2: Add new chat screen](https://github.com/Urigo/WhatsApp-Clone-Client-React/commit/ca48569)\n\n##### Added src&#x2F;components&#x2F;ChatsListScreen&#x2F;AddChatButton.tsx\n```diff\n@@ -0,0 +1,38 @@\n+┊  ┊ 1┊import Button from '@material-ui/core/Button'\n+┊  ┊ 2┊import ChatIcon from '@material-ui/icons/Chat'\n+┊  ┊ 3┊import { History } from 'history'\n+┊  ┊ 4┊import * as React from 'react'\n+┊  ┊ 5┊import styled from 'styled-components'\n+┊  ┊ 6┊\n+┊  ┊ 7┊const Style = styled.div`\n+┊  ┊ 8┊  position: fixed;\n+┊  ┊ 9┊  right: 10px;\n+┊  ┊10┊  bottom: 10px;\n+┊  ┊11┊\n+┊  ┊12┊  button {\n+┊  ┊13┊    min-width: 50px;\n+┊  ┊14┊    width: 50px;\n+┊  ┊15┊    height: 50px;\n+┊  ┊16┊    border-radius: 999px;\n+┊  ┊17┊    background-color: var(--secondary-bg);\n+┊  ┊18┊    color: white;\n+┊  ┊19┊  }\n+┊  ┊20┊`\n+┊  ┊21┊\n+┊  ┊22┊interface AddChatButtonProps {\n+┊  ┊23┊  history: History\n+┊  ┊24┊}\n+┊  ┊25┊\n+┊  ┊26┊export default ({ history }: AddChatButtonProps) => {\n+┊  ┊27┊  const onClick = () => {\n+┊  ┊28┊    history.push('/new-chat')\n+┊  ┊29┊  }\n+┊  ┊30┊\n+┊  ┊31┊  return (\n+┊  ┊32┊    <Style className=\"AddChatButton\">\n+┊  ┊33┊      <Button variant=\"contained\" color=\"secondary\" onClick={onClick}>\n+┊  ┊34┊        <ChatIcon />\n+┊  ┊35┊      </Button>\n+┊  ┊36┊    </Style>\n+┊  ┊37┊  )\n+┊  ┊38┊}\n```\n\n##### Changed src&#x2F;components&#x2F;ChatsListScreen&#x2F;index.tsx\n```diff\n@@ -2,6 +2,7 @@\n ┊2┊2┊import { Suspense } from 'react'\n ┊3┊3┊import { RouteComponentProps } from 'react-router-dom'\n ┊4┊4┊import Navbar from '../Navbar'\n+┊ ┊5┊import AddChatButton from './AddChatButton'\n ┊5┊6┊import ChatsList from './ChatsList'\n ┊6┊7┊import ChatsNavbar from './ChatsNavbar'\n ┊7┊8┊\n```\n```diff\n@@ -13,5 +14,6 @@\n ┊13┊14┊    <Suspense fallback={null}>\n ┊14┊15┊      <ChatsList history={history} />\n ┊15┊16┊    </Suspense>\n+┊  ┊17┊    <AddChatButton history={history} />\n ┊16┊18┊  </div>\n ┊17┊19┊)\n```\n\n[}]: #\n\nAgain, we will need to define the right subscriptions and update the cache accordingly:\n\n[{]: <helper> (diffStep 3.2 files=\"src/graphql/queries, src/graphql/subscriptions, src/services/cache\" module=\"client\")\n\n#### [Step 3.2: Add new chat screen](https://github.com/Urigo/WhatsApp-Clone-Client-React/commit/ca48569)\n\n##### Changed src&#x2F;graphql&#x2F;queries&#x2F;index.ts\n```diff\n@@ -1,2 +1,3 @@\n ┊1┊1┊export { default as chats } from './chats.query'\n+┊ ┊2┊export { default as users } from './users.query'\n ┊2┊3┊export { default as me } from './me.query'\n```\n\n##### Added src&#x2F;graphql&#x2F;queries&#x2F;users.query.ts\n```diff\n@@ -0,0 +1,11 @@\n+┊  ┊ 1┊import gql from 'graphql-tag'\n+┊  ┊ 2┊import * as fragments from '../fragments'\n+┊  ┊ 3┊\n+┊  ┊ 4┊export default gql `\n+┊  ┊ 5┊  query Users {\n+┊  ┊ 6┊    users {\n+┊  ┊ 7┊      ...User\n+┊  ┊ 8┊    }\n+┊  ┊ 9┊  }\n+┊  ┊10┊  ${fragments.user}\n+┊  ┊11┊`\n```\n\n##### Added src&#x2F;graphql&#x2F;subscriptions&#x2F;chatAdded.subscription.ts\n```diff\n@@ -0,0 +1,11 @@\n+┊  ┊ 1┊import gql from 'graphql-tag'\n+┊  ┊ 2┊import * as fragments from '../fragments'\n+┊  ┊ 3┊\n+┊  ┊ 4┊export default gql `\n+┊  ┊ 5┊  subscription ChatAdded {\n+┊  ┊ 6┊    chatAdded {\n+┊  ┊ 7┊      ...Chat\n+┊  ┊ 8┊    }\n+┊  ┊ 9┊  }\n+┊  ┊10┊  ${fragments.chat}\n+┊  ┊11┊`\n```\n\n##### Changed src&#x2F;graphql&#x2F;subscriptions&#x2F;index.ts\n```diff\n@@ -1,2 +1,5 @@\n ┊1┊1┊export { default as chatUpdated } from './chatUpdated.subscription'\n ┊2┊2┊export { default as messageAdded } from './messageAdded.subscription'\n+┊ ┊3┊export { default as chatAdded } from './chatAdded.subscription'\n+┊ ┊4┊export { default as userAdded } from './userAdded.subscription'\n+┊ ┊5┊export { default as userUpdated } from './userUpdated.subscription'\n```\n\n##### Added src&#x2F;graphql&#x2F;subscriptions&#x2F;userAdded.subscription.ts\n```diff\n@@ -0,0 +1,11 @@\n+┊  ┊ 1┊import gql from 'graphql-tag'\n+┊  ┊ 2┊import * as fragments from '../fragments'\n+┊  ┊ 3┊\n+┊  ┊ 4┊export default gql `\n+┊  ┊ 5┊  subscription UserAdded {\n+┊  ┊ 6┊    userAdded {\n+┊  ┊ 7┊      ...User\n+┊  ┊ 8┊    }\n+┊  ┊ 9┊  }\n+┊  ┊10┊  ${fragments.user}\n+┊  ┊11┊`\n```\n\n##### Added src&#x2F;graphql&#x2F;subscriptions&#x2F;userUpdated.subscription.ts\n```diff\n@@ -0,0 +1,11 @@\n+┊  ┊ 1┊import gql from 'graphql-tag'\n+┊  ┊ 2┊import * as fragments from '../fragments'\n+┊  ┊ 3┊\n+┊  ┊ 4┊export default gql `\n+┊  ┊ 5┊  subscription UserUpdated {\n+┊  ┊ 6┊    userUpdated {\n+┊  ┊ 7┊      ...User\n+┊  ┊ 8┊    }\n+┊  ┊ 9┊  }\n+┊  ┊10┊  ${fragments.user}\n+┊  ┊11┊`\n```\n\n##### Changed src&#x2F;services&#x2F;cache.service.tsx\n```diff\n@@ -2,10 +2,48 @@\n ┊ 2┊ 2┊import * as fragments from '../graphql/fragments'\n ┊ 3┊ 3┊import * as subscriptions from '../graphql/subscriptions'\n ┊ 4┊ 4┊import * as queries from '../graphql/queries'\n-┊ 5┊  ┊import { ChatUpdated, MessageAdded, Message, Chats, FullChat } from '../graphql/types'\n+┊  ┊ 5┊import {\n+┊  ┊ 6┊  ChatUpdated,\n+┊  ┊ 7┊  MessageAdded,\n+┊  ┊ 8┊  Message,\n+┊  ┊ 9┊  Chats,\n+┊  ┊10┊  FullChat,\n+┊  ┊11┊  User,\n+┊  ┊12┊  Users,\n+┊  ┊13┊  UserAdded,\n+┊  ┊14┊  UserUpdated,\n+┊  ┊15┊  ChatAdded,\n+┊  ┊16┊} from '../graphql/types'\n ┊ 6┊17┊import { useSubscription } from '../polyfills/react-apollo-hooks'\n ┊ 7┊18┊\n ┊ 8┊19┊export const useSubscriptions = () => {\n+┊  ┊20┊  useSubscription<ChatAdded.Subscription>(subscriptions.chatAdded, {\n+┊  ┊21┊    onSubscriptionData: ({ client, subscriptionData: { chatAdded } }) => {\n+┊  ┊22┊      client.writeFragment({\n+┊  ┊23┊        id: defaultDataIdFromObject(chatAdded),\n+┊  ┊24┊        fragment: fragments.chat,\n+┊  ┊25┊        fragmentName: 'Chat',\n+┊  ┊26┊        data: chatAdded,\n+┊  ┊27┊      })\n+┊  ┊28┊\n+┊  ┊29┊      let chats\n+┊  ┊30┊      try {\n+┊  ┊31┊        chats = client.readQuery<Chats.Query>({\n+┊  ┊32┊          query: queries.chats,\n+┊  ┊33┊        }).chats\n+┊  ┊34┊      } catch (e) {}\n+┊  ┊35┊\n+┊  ┊36┊      if (chats && !chats.some(chat => chat.id === chatAdded.id)) {\n+┊  ┊37┊        chats.unshift(chatAdded)\n+┊  ┊38┊\n+┊  ┊39┊        client.writeQuery({\n+┊  ┊40┊          query: queries.chats,\n+┊  ┊41┊          data: { chats },\n+┊  ┊42┊        })\n+┊  ┊43┊      }\n+┊  ┊44┊    },\n+┊  ┊45┊  })\n+┊  ┊46┊\n ┊ 9┊47┊  useSubscription<ChatUpdated.Subscription>(subscriptions.chatUpdated, {\n ┊10┊48┊    onSubscriptionData: ({ client, subscriptionData: { chatUpdated } }) => {\n ┊11┊49┊      client.writeFragment({\n```\n```diff\n@@ -66,4 +104,40 @@\n ┊ 66┊104┊      }\n ┊ 67┊105┊    },\n ┊ 68┊106┊  })\n+┊   ┊107┊\n+┊   ┊108┊  useSubscription<UserAdded.Subscription>(subscriptions.userAdded, {\n+┊   ┊109┊    onSubscriptionData: ({ client, subscriptionData: { userAdded } }) => {\n+┊   ┊110┊      client.writeFragment({\n+┊   ┊111┊        id: defaultDataIdFromObject(userAdded),\n+┊   ┊112┊        fragment: fragments.user,\n+┊   ┊113┊        data: userAdded,\n+┊   ┊114┊      })\n+┊   ┊115┊\n+┊   ┊116┊      let users\n+┊   ┊117┊      try {\n+┊   ┊118┊        users = client.readQuery<Users.Query>({\n+┊   ┊119┊          query: queries.users,\n+┊   ┊120┊        }).users\n+┊   ┊121┊      } catch (e) {}\n+┊   ┊122┊\n+┊   ┊123┊      if (users && !users.some(user => user.id === userAdded.id)) {\n+┊   ┊124┊        users.push(userAdded)\n+┊   ┊125┊\n+┊   ┊126┊        client.writeQuery({\n+┊   ┊127┊          query: queries.users,\n+┊   ┊128┊          data: { users },\n+┊   ┊129┊        })\n+┊   ┊130┊      }\n+┊   ┊131┊    },\n+┊   ┊132┊  })\n+┊   ┊133┊\n+┊   ┊134┊  useSubscription<UserUpdated.Subscription>(subscriptions.userUpdated, {\n+┊   ┊135┊    onSubscriptionData: ({ client, subscriptionData: { userUpdated } }) => {\n+┊   ┊136┊      client.writeFragment({\n+┊   ┊137┊        id: defaultDataIdFromObject(userUpdated),\n+┊   ┊138┊        fragment: fragments.user,\n+┊   ┊139┊        data: userUpdated,\n+┊   ┊140┊      })\n+┊   ┊141┊    },\n+┊   ┊142┊  })\n ┊ 69┊143┊}\n```\n\n[}]: #\n\nNow we have a real, functional chat app! Where we have a complete flow of:\n\n- Signing in/up.\n- Editing profile.\n- Creating and removing chats.\n- Sending messages.\n\nIn the next step we will to something slightly more complex and extend the current functionality by adding a group chatting feature where we will be able to communicate with multiple users in a single chat room."
          },
          {
            "manualTitle": "Step 4: Bonus! Group chatting",
            "stepRevision": "7b14a2b372ed49ca2d072e9eb182509f0eecb182",
            "manualView": "Group messaging can be quite tricky and so I would like to explain the hierarchy between the entities. `Chat` will have the following fields:\n\n- `Chat.actualGroupMembers` - The current users who are currently participating in the group. Once a message was sent by someone in the group, all the members under `actualGroupMembers` will be notified with the target message.\n\n- `Chat.listingMembers` - The current users which have the chat listed in their view. Any user who will be kicked out of the group will not only be absent from `Chat.actualGroupMembers`, but it will also be spliced from `Chat.listingMembers`, as its existence in the chat is correlated to what it can currently view.\n\n- `Chat.admins` - The users who currently control the group; they will have permissions to add and remove users from the group, and change its name and picture.\n\nTogether we can have a complete flow where users can chat with each-other in a group. In this step we will add a group-details screen, where we will be able to see the participants of the group, and we will use the existing users list component to select users that we would like to participate in our group chat. The back-end should include a new mutation called `addGroup()` that will help use create chat group.\n\nSo before we proceed to the front-end, let's take care of the back-end. We will add the missing fields to the Chat entity, and make the necessary adjustments in existing resolvers:\n\n[{]: <helper> (diffStep 4.1 module=\"server\")\n\n#### [Step 4.1: Add group-related fields to Chat type](https://github.com/Urigo/WhatsApp-Clone-Server/commit/1a1ba5e)\n\n##### Changed entity&#x2F;chat.ts\n```diff\n@@ -16,6 +16,8 @@\n ┊16┊16┊  picture?: string\n ┊17┊17┊  allTimeMembers?: User[]\n ┊18┊18┊  listingMembers?: User[]\n+┊  ┊19┊  actualGroupMembers?: User[]\n+┊  ┊20┊  admins?: User[]\n ┊19┊21┊  owner?: User\n ┊20┊22┊  messages?: Message[]\n ┊21┊23┊}\n```\n```diff\n@@ -48,6 +50,14 @@\n ┊48┊50┊  @JoinTable()\n ┊49┊51┊  listingMembers: User[]\n ┊50┊52┊\n+┊  ┊53┊  @ManyToMany(type => User, user => user.actualGroupMemberChats, { cascade: [\"insert\", \"update\"], eager: false })\n+┊  ┊54┊  @JoinTable()\n+┊  ┊55┊  actualGroupMembers?: User[]\n+┊  ┊56┊\n+┊  ┊57┊  @ManyToMany(type => User, user => user.adminChats, { cascade: [\"insert\", \"update\"], eager: false })\n+┊  ┊58┊  @JoinTable()\n+┊  ┊59┊  admins?: User[]\n+┊  ┊60┊\n ┊51┊61┊  @ManyToOne(type => User, user => user.ownerChats, { cascade: ['insert', 'update'], eager: false })\n ┊52┊62┊  owner?: User | null\n ┊53┊63┊\n```\n```diff\n@@ -62,6 +72,8 @@\n ┊62┊72┊    picture,\n ┊63┊73┊    allTimeMembers,\n ┊64┊74┊    listingMembers,\n+┊  ┊75┊    actualGroupMembers,\n+┊  ┊76┊    admins,\n ┊65┊77┊    owner,\n ┊66┊78┊    messages,\n ┊67┊79┊  }: ChatConstructor = {}) {\n```\n```diff\n@@ -74,6 +86,12 @@\n ┊74┊86┊    if (allTimeMembers) {\n ┊75┊87┊      this.allTimeMembers = allTimeMembers\n ┊76┊88┊    }\n+┊  ┊89┊    if (actualGroupMembers) {\n+┊  ┊90┊      this.actualGroupMembers = actualGroupMembers\n+┊  ┊91┊    }\n+┊  ┊92┊    if (admins) {\n+┊  ┊93┊      this.admins = admins\n+┊  ┊94┊    }\n ┊77┊95┊    if (listingMembers) {\n ┊78┊96┊      this.listingMembers = listingMembers\n ┊79┊97┊    }\n```\n\n##### Changed entity&#x2F;user.ts\n```diff\n@@ -33,6 +33,12 @@\n ┊33┊33┊  @ManyToMany(type => Chat, chat => chat.listingMembers)\n ┊34┊34┊  listingMemberChats: Chat[]\n ┊35┊35┊\n+┊  ┊36┊  @ManyToMany(type => Chat, chat => chat.actualGroupMembers)\n+┊  ┊37┊  actualGroupMemberChats: Chat[]\n+┊  ┊38┊\n+┊  ┊39┊  @ManyToMany(type => Chat, chat => chat.admins)\n+┊  ┊40┊  adminChats: Chat[]\n+┊  ┊41┊\n ┊36┊42┊  @ManyToMany(type => Message, message => message.holders)\n ┊37┊43┊  holderMessages: Message[]\n ┊38┊44┊\n```\n\n##### Changed modules&#x2F;chat&#x2F;providers&#x2F;chat.provider.ts\n```diff\n@@ -157,6 +157,27 @@\n ┊157┊157┊      .getMany()\n ┊158┊158┊  }\n ┊159┊159┊\n+┊   ┊160┊  getChatActualGroupMembers(chat: Chat) {\n+┊   ┊161┊    return this.userProvider\n+┊   ┊162┊      .createQueryBuilder()\n+┊   ┊163┊      .innerJoin(\n+┊   ┊164┊        'user.actualGroupMemberChats',\n+┊   ┊165┊        'actualGroupMemberChats',\n+┊   ┊166┊        'actualGroupMemberChats.id = :chatId',\n+┊   ┊167┊        { chatId: chat.id },\n+┊   ┊168┊      )\n+┊   ┊169┊      .getMany();\n+┊   ┊170┊  }\n+┊   ┊171┊\n+┊   ┊172┊  getChatAdmins(chat: Chat) {\n+┊   ┊173┊    return this.userProvider\n+┊   ┊174┊      .createQueryBuilder()\n+┊   ┊175┊      .innerJoin('user.adminChats', 'adminChats', 'adminChats.id = :chatId', {\n+┊   ┊176┊        chatId: chat.id,\n+┊   ┊177┊      })\n+┊   ┊178┊      .getMany();\n+┊   ┊179┊  }\n+┊   ┊180┊\n ┊160┊181┊  async getChatOwner(chat: Chat) {\n ┊161┊182┊    const owner = await this.userProvider\n ┊162┊183┊      .createQueryBuilder()\n```\n```diff\n@@ -168,6 +189,10 @@\n ┊168┊189┊    return owner || null\n ┊169┊190┊  }\n ┊170┊191┊\n+┊   ┊192┊  async isChatGroup(chat: Chat) {\n+┊   ┊193┊    return !!chat.name;\n+┊   ┊194┊  }\n+┊   ┊195┊\n ┊171┊196┊  async filterChatAddedOrUpdated(chatAddedOrUpdated: Chat, creatorOrUpdaterId: string) {\n ┊172┊197┊    return (\n ┊173┊198┊      creatorOrUpdaterId !== this.currentUser.id &&\n```\n```diff\n@@ -221,6 +246,8 @@\n ┊221┊246┊    const chat = await this.createQueryBuilder()\n ┊222┊247┊      .whereInIds(Number(chatId))\n ┊223┊248┊      .innerJoinAndSelect('chat.listingMembers', 'listingMembers')\n+┊   ┊249┊      .leftJoinAndSelect('chat.actualGroupMembers', 'actualGroupMembers')\n+┊   ┊250┊      .leftJoinAndSelect('chat.admins', 'admins')\n ┊224┊251┊      .leftJoinAndSelect('chat.owner', 'owner')\n ┊225┊252┊      .getOne();\n ┊226┊253┊\n```\n```diff\n@@ -242,7 +269,18 @@\n ┊242┊269┊        // Delete the chat\n ┊243┊270┊        await this.repository.remove(chat);\n ┊244┊271┊      } else {\n-┊245┊   ┊        // Update the chat\n+┊   ┊272┊        // Update the group\n+┊   ┊273┊\n+┊   ┊274┊        // Remove the current user from the chat members. He is no longer a member of the group\n+┊   ┊275┊        chat.actualGroupMembers = chat.actualGroupMembers && chat.actualGroupMembers.filter(user =>\n+┊   ┊276┊          user.id !== this.currentUser.id\n+┊   ┊277┊        );\n+┊   ┊278┊        // Remove the current user from the chat admins\n+┊   ┊279┊        chat.admins = chat.admins && chat.admins.filter(user => user.id !== this.currentUser.id);\n+┊   ┊280┊        // If there are no more admins left the group goes read only\n+┊   ┊281┊        // A null owner means the group is read-only\n+┊   ┊282┊        chat.owner = chat.admins && chat.admins[0] || null;\n+┊   ┊283┊\n ┊246┊284┊        await this.repository.save(chat);\n ┊247┊285┊      }\n ┊248┊286┊\n```\n\n##### Changed modules&#x2F;chat&#x2F;resolvers&#x2F;resolvers.ts\n```diff\n@@ -38,6 +38,9 @@\n ┊38┊38┊      injector.get(ChatProvider).getChatAllTimeMembers(chat),\n ┊39┊39┊    listingMembers: (chat, args, { injector }) =>\n ┊40┊40┊      injector.get(ChatProvider).getChatListingMembers(chat),\n+┊  ┊41┊    actualGroupMembers: (chat, args, { injector }) => injector.get(ChatProvider).getChatActualGroupMembers(chat),\n+┊  ┊42┊    admins: (chat, args, { injector }) => injector.get(ChatProvider).getChatAdmins(chat),\n ┊41┊43┊    owner: (chat, args, { injector }) => injector.get(ChatProvider).getChatOwner(chat),\n+┊  ┊44┊    isGroup: (chat, args, { injector }) => injector.get(ChatProvider).isChatGroup(chat),\n ┊42┊45┊  },\n ┊43┊46┊} as IResolvers\n```\n\n##### Changed modules&#x2F;chat&#x2F;schema&#x2F;typeDefs.graphql\n```diff\n@@ -19,8 +19,14 @@\n ┊19┊19┊  allTimeMembers: [User!]!\n ┊20┊20┊  #Whoever gets the chat listed. For groups includes past members who still didn't delete the group.\n ┊21┊21┊  listingMembers: [User!]!\n+┊  ┊22┊  #Actual members of the group. Null for chats. For groups they are the only ones who can send messages. They aren't the only ones who get the group listed.\n+┊  ┊23┊  actualGroupMembers: [User!]\n+┊  ┊24┊  #Null for chats\n+┊  ┊25┊  admins: [User!]\n ┊22┊26┊  #If null the group is read-only. Null for chats.\n ┊23┊27┊  owner: User\n+┊  ┊28┊  #Computed property\n+┊  ┊29┊  isGroup: Boolean!\n ┊24┊30┊}\n ┊25┊31┊\n ┊26┊32┊type Mutation {\n```\n\n##### Changed modules&#x2F;message&#x2F;providers&#x2F;message.provider.ts\n```diff\n@@ -36,6 +36,7 @@\n ┊36┊36┊      .whereInIds(chatId)\n ┊37┊37┊      .innerJoinAndSelect('chat.allTimeMembers', 'allTimeMembers')\n ┊38┊38┊      .innerJoinAndSelect('chat.listingMembers', 'listingMembers')\n+┊  ┊39┊      .leftJoinAndSelect('chat.actualGroupMembers', 'actualGroupMembers')\n ┊39┊40┊      .getOne();\n ┊40┊41┊\n ┊41┊42┊    if (!chat) {\n```\n```diff\n@@ -71,8 +72,12 @@\n ┊71┊72┊\n ┊72┊73┊      holders = chat.listingMembers;\n ┊73┊74┊    } else {\n-┊74┊  ┊      // TODO: Implement for groups\n-┊75┊  ┊      holders = chat.listingMembers\n+┊  ┊75┊      // Group\n+┊  ┊76┊      if (!chat.actualGroupMembers || !chat.actualGroupMembers.find(user => user.id === this.currentUser.id)) {\n+┊  ┊77┊        throw new Error(`The user is not a member of the group ${chatId}. Cannot add message.`);\n+┊  ┊78┊      }\n+┊  ┊79┊\n+┊  ┊80┊      holders = chat.actualGroupMembers;\n ┊76┊81┊    }\n ┊77┊82┊\n ┊78┊83┊    const message = await this.repository.save(new Message({\n```\n```diff\n@@ -324,15 +329,31 @@\n ┊324┊329┊  }\n ┊325┊330┊\n ┊326┊331┊  async filterMessageAdded(messageAdded: Message) {\n-┊327┊   ┊    const relevantUsers = (await this.userProvider\n-┊328┊   ┊      .createQueryBuilder()\n-┊329┊   ┊      .innerJoin(\n-┊330┊   ┊        'user.listingMemberChats',\n-┊331┊   ┊        'listingMemberChats',\n-┊332┊   ┊        'listingMemberChats.id = :chatId',\n-┊333┊   ┊        { chatId: messageAdded.chat.id }\n-┊334┊   ┊      )\n-┊335┊   ┊      .getMany()).filter(user => user.id != messageAdded.sender.id)\n+┊   ┊332┊    let relevantUsers: User[]\n+┊   ┊333┊\n+┊   ┊334┊    if (!messageAdded.chat.name) {\n+┊   ┊335┊      // Chat\n+┊   ┊336┊      relevantUsers = (await this.userProvider\n+┊   ┊337┊        .createQueryBuilder()\n+┊   ┊338┊        .innerJoin(\n+┊   ┊339┊          'user.listingMemberChats',\n+┊   ┊340┊          'listingMemberChats',\n+┊   ┊341┊          'listingMemberChats.id = :chatId',\n+┊   ┊342┊          { chatId: messageAdded.chat.id }\n+┊   ┊343┊        )\n+┊   ┊344┊        .getMany()).filter(user => user.id != messageAdded.sender.id)\n+┊   ┊345┊    } else {\n+┊   ┊346┊      // Group\n+┊   ┊347┊      relevantUsers = (await this.userProvider\n+┊   ┊348┊        .createQueryBuilder()\n+┊   ┊349┊        .innerJoin(\n+┊   ┊350┊          'user.actualGroupMemberChats',\n+┊   ┊351┊          'actualGroupMemberChats',\n+┊   ┊352┊          'actualGroupMemberChats.id = :chatId',\n+┊   ┊353┊          { chatId: messageAdded.chat.id }\n+┊   ┊354┊        )\n+┊   ┊355┊        .getMany()).filter(user => user.id != messageAdded.sender.id)\n+┊   ┊356┊    }\n ┊336┊357┊\n ┊337┊358┊    return relevantUsers.some(user => user.id === this.currentUser.id)\n ┊338┊359┊  }\n```\n\n[}]: #\n\nNow we will add 2 new mutations:\n\n- `addGroup` mutation - Responsible for creating chat groups.\n- `updateChat` mutation - Unlike a single chat which is synced with a user's info, a group chat will be independent, therefore we will need a method that could updated its fields.\n\nLet's implement those:\n\n[{]: <helper> (diffStep 4.2 module=\"server\")\n\n#### [Step 4.2: Add group related mutations](https://github.com/Urigo/WhatsApp-Clone-Server/commit/d94a68a)\n\n##### Changed modules&#x2F;chat&#x2F;providers&#x2F;chat.provider.ts\n```diff\n@@ -305,4 +305,80 @@\n ┊305┊305┊      return chatId;\n ┊306┊306┊    }\n ┊307┊307┊  }\n+┊   ┊308┊\n+┊   ┊309┊  async addGroup(\n+┊   ┊310┊    userIds: string[],\n+┊   ┊311┊    {\n+┊   ┊312┊      groupName,\n+┊   ┊313┊      groupPicture,\n+┊   ┊314┊    }: {\n+┊   ┊315┊      groupName?: string\n+┊   ┊316┊      groupPicture?: string\n+┊   ┊317┊    } = {},\n+┊   ┊318┊  ) {\n+┊   ┊319┊    let users: User[] = [];\n+┊   ┊320┊    for (let userId of userIds) {\n+┊   ┊321┊      const user = await this.userProvider\n+┊   ┊322┊        .createQueryBuilder()\n+┊   ┊323┊        .whereInIds(userId)\n+┊   ┊324┊        .getOne();\n+┊   ┊325┊\n+┊   ┊326┊      if (!user) {\n+┊   ┊327┊        throw new Error(`User ${userId} doesn't exist.`);\n+┊   ┊328┊      }\n+┊   ┊329┊\n+┊   ┊330┊      users.push(user);\n+┊   ┊331┊    }\n+┊   ┊332┊\n+┊   ┊333┊    const chat = await this.repository.save(\n+┊   ┊334┊      new Chat({\n+┊   ┊335┊        name: groupName,\n+┊   ┊336┊        admins: [this.currentUser],\n+┊   ┊337┊        picture: groupPicture || undefined,\n+┊   ┊338┊        owner: this.currentUser,\n+┊   ┊339┊        allTimeMembers: [...users, this.currentUser],\n+┊   ┊340┊        listingMembers: [...users, this.currentUser],\n+┊   ┊341┊        actualGroupMembers: [...users, this.currentUser],\n+┊   ┊342┊      }),\n+┊   ┊343┊    );\n+┊   ┊344┊\n+┊   ┊345┊    this.pubsub.publish('chatAdded', {\n+┊   ┊346┊      creatorId: this.currentUser.id,\n+┊   ┊347┊      chatAdded: chat,\n+┊   ┊348┊    });\n+┊   ┊349┊\n+┊   ┊350┊    return chat || null;\n+┊   ┊351┊  }\n+┊   ┊352┊\n+┊   ┊353┊  async updateChat(\n+┊   ┊354┊    chatId: string,\n+┊   ┊355┊    {\n+┊   ┊356┊      name,\n+┊   ┊357┊      picture,\n+┊   ┊358┊    }: {\n+┊   ┊359┊      name?: string\n+┊   ┊360┊      picture?: string\n+┊   ┊361┊    } = {},\n+┊   ┊362┊  ) {\n+┊   ┊363┊    const chat = await this.createQueryBuilder()\n+┊   ┊364┊      .whereInIds(chatId)\n+┊   ┊365┊      .getOne();\n+┊   ┊366┊\n+┊   ┊367┊    if (!chat) return null;\n+┊   ┊368┊    if (!chat.name) return chat;\n+┊   ┊369┊\n+┊   ┊370┊    name = name || chat.name;\n+┊   ┊371┊    picture = picture || chat.picture;\n+┊   ┊372┊    Object.assign(chat, { name, picture });\n+┊   ┊373┊\n+┊   ┊374┊    // Update the chat\n+┊   ┊375┊    await this.repository.save(chat);\n+┊   ┊376┊\n+┊   ┊377┊    this.pubsub.publish('chatUpdated', {\n+┊   ┊378┊      updaterId: this.currentUser.id,\n+┊   ┊379┊      chatUpdated: chat,\n+┊   ┊380┊    });\n+┊   ┊381┊\n+┊   ┊382┊    return chat || null;\n+┊   ┊383┊  }\n ┊308┊384┊}\n```\n\n##### Changed modules&#x2F;chat&#x2F;resolvers&#x2F;resolvers.ts\n```diff\n@@ -16,6 +16,15 @@\n ┊16┊16┊    }),\n ┊17┊17┊    addChat: (obj, { userId }, { injector }) => injector.get(ChatProvider).addChat(userId),\n ┊18┊18┊    removeChat: (obj, { chatId }, { injector }) => injector.get(ChatProvider).removeChat(chatId),\n+┊  ┊19┊    addGroup: (obj, { userIds, groupName, groupPicture }, { injector }) =>\n+┊  ┊20┊      injector.get(ChatProvider).addGroup(userIds, {\n+┊  ┊21┊        groupName: groupName || '',\n+┊  ┊22┊        groupPicture: groupPicture || '',\n+┊  ┊23┊      }),\n+┊  ┊24┊    updateChat: (obj, { chatId, name, picture }, { injector }) => injector.get(ChatProvider).updateChat(chatId, {\n+┊  ┊25┊      name: name || '',\n+┊  ┊26┊      picture: picture || '',\n+┊  ┊27┊    }),\n ┊19┊28┊  },\n ┊20┊29┊  Subscription: {\n ┊21┊30┊    chatAdded: {\n```\n\n##### Changed modules&#x2F;chat&#x2F;schema&#x2F;typeDefs.graphql\n```diff\n@@ -32,4 +32,10 @@\n ┊32┊32┊type Mutation {\n ┊33┊33┊  addChat(userId: ID!): Chat\n ┊34┊34┊  removeChat(chatId: ID!): ID\n+┊  ┊35┊  addAdmins(groupId: ID!, userIds: [ID!]!): [ID]!\n+┊  ┊36┊  removeAdmins(groupId: ID!, userIds: [ID!]!): [ID]!\n+┊  ┊37┊  addMembers(groupId: ID!, userIds: [ID!]!): [ID]!\n+┊  ┊38┊  removeMembers(groupId: ID!, userIds: [ID!]!): [ID]!\n+┊  ┊39┊  addGroup(userIds: [ID!]!, groupName: String!, groupPicture: String): Chat\n+┊  ┊40┊  updateChat(chatId: ID!, name: String, picture: String): Chat\n ┊35┊41┊}\n```\n\n[}]: #\n\nNow that the back-end is set, we will need to update the chat fragment in the client to contain the new field `isGroup`:\n\n[{]: <helper> (diffStep 4.1 module=\"client\")\n\n#### [Step 4.1: Update chat fragment](https://github.com/Urigo/WhatsApp-Clone-Client-React/commit/7d366b0)\n\n##### Changed src&#x2F;graphql&#x2F;fragments&#x2F;chat.fragment.ts\n```diff\n@@ -17,6 +17,7 @@\n ┊17┊17┊    lastMessage {\n ┊18┊18┊      ...Message\n ┊19┊19┊    }\n+┊  ┊20┊    isGroup\n ┊20┊21┊  }\n ┊21┊22┊  ${message}\n ┊22┊23┊`\n```\n\n[}]: #\n\nNow we will create the new-group screen. Like the new-chat screen, it will have an almost identical layout, only the behavior is gonna be slightly different. In the new screen we will be able to select multiple users before we proceed, then, we should be able to view the group details and edit them before we create the group. Let's implement the new-group screen:\n\n[{]: <helper> (diffStep 4.2 files=\"src/components/NewGroupScreen\" module=\"client\")\n\n#### [Step 4.2: Add new group screen](https://github.com/Urigo/WhatsApp-Clone-Client-React/commit/c574ada)\n\n##### Added src&#x2F;components&#x2F;NewGroupScreen&#x2F;CreateGroupButton.tsx\n```diff\n@@ -0,0 +1,42 @@\n+┊  ┊ 1┊import Button from '@material-ui/core/Button'\n+┊  ┊ 2┊import AddIcon from '@material-ui/icons/Add'\n+┊  ┊ 3┊import { History } from 'history'\n+┊  ┊ 4┊import * as React from 'react'\n+┊  ┊ 5┊import styled from 'styled-components'\n+┊  ┊ 6┊import { User } from '../../graphql/types'\n+┊  ┊ 7┊\n+┊  ┊ 8┊const Style = styled.div`\n+┊  ┊ 9┊  position: fixed;\n+┊  ┊10┊  right: 10px;\n+┊  ┊11┊  bottom: 10px;\n+┊  ┊12┊\n+┊  ┊13┊  button {\n+┊  ┊14┊    min-width: 50px;\n+┊  ┊15┊    width: 50px;\n+┊  ┊16┊    height: 50px;\n+┊  ┊17┊    border-radius: 999px;\n+┊  ┊18┊    background-color: var(--secondary-bg);\n+┊  ┊19┊    color: white;\n+┊  ┊20┊  }\n+┊  ┊21┊`\n+┊  ┊22┊\n+┊  ┊23┊interface CreateGroupButtonProps {\n+┊  ┊24┊  history: History\n+┊  ┊25┊  users: User.Fragment[]\n+┊  ┊26┊}\n+┊  ┊27┊\n+┊  ┊28┊export default ({ history, users }: CreateGroupButtonProps) => {\n+┊  ┊29┊  const onClick = () => {\n+┊  ┊30┊    history.push('/new-chat/group/details', {\n+┊  ┊31┊      users,\n+┊  ┊32┊    })\n+┊  ┊33┊  }\n+┊  ┊34┊\n+┊  ┊35┊  return (\n+┊  ┊36┊    <Style className=\"CreateGroupButton\">\n+┊  ┊37┊      <Button variant=\"contained\" color=\"secondary\" onClick={onClick}>\n+┊  ┊38┊        <AddIcon />\n+┊  ┊39┊      </Button>\n+┊  ┊40┊    </Style>\n+┊  ┊41┊  )\n+┊  ┊42┊}\n```\n\n##### Added src&#x2F;components&#x2F;NewGroupScreen&#x2F;NewGroupNavbar.tsx\n```diff\n@@ -0,0 +1,39 @@\n+┊  ┊ 1┊import Button from '@material-ui/core/Button'\n+┊  ┊ 2┊import ArrowBackIcon from '@material-ui/icons/ArrowBack'\n+┊  ┊ 3┊import { History } from 'history'\n+┊  ┊ 4┊import * as React from 'react'\n+┊  ┊ 5┊import styled from 'styled-components'\n+┊  ┊ 6┊\n+┊  ┊ 7┊const Style = styled.div`\n+┊  ┊ 8┊  padding: 0;\n+┊  ┊ 9┊  display: flex;\n+┊  ┊10┊  flex-direction: row;\n+┊  ┊11┊  margin-left: -20px;\n+┊  ┊12┊\n+┊  ┊13┊  .NewGroupNavbar-title {\n+┊  ┊14┊    line-height: 56px;\n+┊  ┊15┊  }\n+┊  ┊16┊\n+┊  ┊17┊  .NewGroupNavbar-back-button {\n+┊  ┊18┊    color: var(--primary-text);\n+┊  ┊19┊  }\n+┊  ┊20┊`\n+┊  ┊21┊\n+┊  ┊22┊interface NewGroupNavbarProps {\n+┊  ┊23┊  history: History\n+┊  ┊24┊}\n+┊  ┊25┊\n+┊  ┊26┊export default ({ history }: NewGroupNavbarProps) => {\n+┊  ┊27┊  const navToChats = () => {\n+┊  ┊28┊    history.push('/new-chat')\n+┊  ┊29┊  }\n+┊  ┊30┊\n+┊  ┊31┊  return (\n+┊  ┊32┊    <Style className=\"NewGroupNavbar\">\n+┊  ┊33┊      <Button className=\"NewGroupNavbar-back-button\" onClick={navToChats}>\n+┊  ┊34┊        <ArrowBackIcon />\n+┊  ┊35┊      </Button>\n+┊  ┊36┊      <div className=\"NewGroupNavbar-title\">New Chat Group</div>\n+┊  ┊37┊    </Style>\n+┊  ┊38┊  )\n+┊  ┊39┊}\n```\n\n##### Added src&#x2F;components&#x2F;NewGroupScreen&#x2F;index.tsx\n```diff\n@@ -0,0 +1,32 @@\n+┊  ┊ 1┊import * as React from 'react'\n+┊  ┊ 2┊import { useState, Suspense } from 'react'\n+┊  ┊ 3┊import { RouteComponentProps } from 'react-router-dom'\n+┊  ┊ 4┊import styled from 'styled-components'\n+┊  ┊ 5┊import Navbar from '../Navbar'\n+┊  ┊ 6┊import UsersList from '../UsersList'\n+┊  ┊ 7┊import CreateGroupButton from './CreateGroupButton'\n+┊  ┊ 8┊import NewGroupNavbar from './NewGroupNavbar'\n+┊  ┊ 9┊\n+┊  ┊10┊const Style = styled.div`\n+┊  ┊11┊  .UsersList {\n+┊  ┊12┊    height: calc(100% - 56px);\n+┊  ┊13┊    overflow-y: overlay;\n+┊  ┊14┊  }\n+┊  ┊15┊`\n+┊  ┊16┊\n+┊  ┊17┊export default ({ history }: RouteComponentProps) => {\n+┊  ┊18┊  const [selectedUsers, setSelectedUsers] = useState([])\n+┊  ┊19┊\n+┊  ┊20┊  return (\n+┊  ┊21┊    <Style className=\"NewGroupScreen Screen\">\n+┊  ┊22┊      <Navbar>\n+┊  ┊23┊        <NewGroupNavbar history={history} />\n+┊  ┊24┊      </Navbar>\n+┊  ┊25┊      <Suspense fallback={null}>\n+┊  ┊26┊        <UsersList selectable onSelectionChange={setSelectedUsers} />\n+┊  ┊27┊      </Suspense>\n+┊  ┊28┊\n+┊  ┊29┊      {!!selectedUsers.length && <CreateGroupButton history={history} users={selectedUsers} />}\n+┊  ┊30┊    </Style>\n+┊  ┊31┊  )\n+┊  ┊32┊}\n```\n\n[}]: #\n\nNow we will add a dedicated route, and we will also create a \"New Group\" button which will be presented in the new chat screen. This way we can create a new group from the new chat screen if we want to, by simply clicking on that button and moving on to the new group screen.\n\n[{]: <helper> (diffStep 4.2 files=\"src/App, src/components/NewChatScreen\" module=\"client\")\n\n#### [Step 4.2: Add new group screen](https://github.com/Urigo/WhatsApp-Clone-Client-React/commit/c574ada)\n\n##### Changed src&#x2F;App.tsx\n```diff\n@@ -6,6 +6,7 @@\n ┊ 6┊ 6┊import AuthScreen from './components/AuthScreen'\n ┊ 7┊ 7┊import ChatsListScreen from './components/ChatsListScreen'\n ┊ 8┊ 8┊import SettingsScreen from './components/SettingsScreen'\n+┊  ┊ 9┊import NewGroupScreen from './components/NewGroupScreen'\n ┊ 9┊10┊import { withAuth } from './services/auth.service'\n ┊10┊11┊\n ┊11┊12┊const RedirectToChats = () => (\n```\n```diff\n@@ -20,6 +21,7 @@\n ┊20┊21┊      <Route exact path=\"/settings\" component={withAuth(SettingsScreen)} />\n ┊21┊22┊      <Route exact path=\"/chats/:chatId\" component={withAuth(ChatRoomScreen)} />\n ┊22┊23┊      <Route exact path=\"/new-chat\" component={withAuth(NewChatScreen)} />\n+┊  ┊24┊      <Route exact path=\"/new-chat/group\" component={withAuth(NewGroupScreen)} />\n ┊23┊25┊      <Route component={RedirectToChats} />\n ┊24┊26┊    </AnimatedSwitch>\n ┊25┊27┊  </BrowserRouter>\n```\n\n##### Added src&#x2F;components&#x2F;NewChatScreen&#x2F;NewGroupButton.tsx\n```diff\n@@ -0,0 +1,59 @@\n+┊  ┊ 1┊import Button from '@material-ui/core/Button'\n+┊  ┊ 2┊import GroupAddIcon from '@material-ui/icons/GroupAdd'\n+┊  ┊ 3┊import { History } from 'history'\n+┊  ┊ 4┊import * as React from 'react'\n+┊  ┊ 5┊import styled from 'styled-components'\n+┊  ┊ 6┊\n+┊  ┊ 7┊const Style = styled.div`\n+┊  ┊ 8┊  display: flex;\n+┊  ┊ 9┊\n+┊  ┊10┊  button {\n+┊  ┊11┊    border-radius: 0;\n+┊  ┊12┊    text-transform: none;\n+┊  ┊13┊    font-size: inherit;\n+┊  ┊14┊    width: 100%;\n+┊  ┊15┊    justify-content: flex-start;\n+┊  ┊16┊    padding-left: 15px;\n+┊  ┊17┊    padding-right: 15px;\n+┊  ┊18┊\n+┊  ┊19┊    svg {\n+┊  ┊20┊      font-size: 30px;\n+┊  ┊21┊      margin-top: 10px;\n+┊  ┊22┊    }\n+┊  ┊23┊  }\n+┊  ┊24┊\n+┊  ┊25┊  .NewGroupButton-icon {\n+┊  ┊26┊    height: 50px;\n+┊  ┊27┊    width: 50px;\n+┊  ┊28┊    object-fit: cover;\n+┊  ┊29┊    border-radius: 50%;\n+┊  ┊30┊    color: white;\n+┊  ┊31┊    background-color: var(--secondary-bg);\n+┊  ┊32┊  }\n+┊  ┊33┊\n+┊  ┊34┊  .NewGroupButton-title {\n+┊  ┊35┊    padding-left: 15px;\n+┊  ┊36┊    font-weight: bold;\n+┊  ┊37┊  }\n+┊  ┊38┊`\n+┊  ┊39┊\n+┊  ┊40┊interface NewGroupButtonProps {\n+┊  ┊41┊  history: History\n+┊  ┊42┊}\n+┊  ┊43┊\n+┊  ┊44┊export default ({ history }: NewGroupButtonProps) => {\n+┊  ┊45┊  const navToGroup = () => {\n+┊  ┊46┊    history.push('/new-chat/group')\n+┊  ┊47┊  }\n+┊  ┊48┊\n+┊  ┊49┊  return (\n+┊  ┊50┊    <Style>\n+┊  ┊51┊      <Button onClick={navToGroup}>\n+┊  ┊52┊        <div className=\"NewGroupButton-icon\">\n+┊  ┊53┊          <GroupAddIcon />\n+┊  ┊54┊        </div>\n+┊  ┊55┊        <div className=\"NewGroupButton-title\">New Group</div>\n+┊  ┊56┊      </Button>\n+┊  ┊57┊    </Style>\n+┊  ┊58┊  )\n+┊  ┊59┊}\n```\n\n##### Changed src&#x2F;components&#x2F;NewChatScreen&#x2F;index.tsx\n```diff\n@@ -14,6 +14,7 @@\n ┊14┊14┊import Navbar from '../Navbar'\n ┊15┊15┊import UsersList from '../UsersList'\n ┊16┊16┊import NewChatNavbar from './NewChatNavbar'\n+┊  ┊17┊import NewGroupButton from './NewGroupButton'\n ┊17┊18┊\n ┊18┊19┊const Style = styled.div`\n ┊19┊20┊  .UsersList {\n```\n```diff\n@@ -97,6 +98,7 @@\n ┊ 97┊ 98┊        <NewChatNavbar history={history} />\n ┊ 98┊ 99┊      </Navbar>\n ┊ 99┊100┊      <div className=\"NewChatScreen-users-list\">\n+┊   ┊101┊        <NewGroupButton history={history} />\n ┊100┊102┊        <Suspense fallback={null}>\n ┊101┊103┊          <UsersList onUserPick={onUserPick} />\n ┊102┊104┊        </Suspense>\n```\n\n[}]: #\n\nUp-next would be the group details screen. The layout consists of:\n\n- A navbar with a back button.\n- Picture and name inputs.\n- A horizontal list of all the participants.\n- A \"complete\" button that will send a mutation request to the server.\n\nOnce a name has been typed, the \"complete\" button should pop-up. Let's implement the screen then:\n\n[{]: <helper> (diffStep 4.3 files=\"src/components/GroupDetailsScreen\" module=\"client\")\n\n#### [Step 4.3: Add group details screen](https://github.com/Urigo/WhatsApp-Clone-Client-React/commit/e4b8c8f)\n\n##### Added src&#x2F;components&#x2F;GroupDetailsScreen&#x2F;CompleteGroupButton.tsx\n```diff\n@@ -0,0 +1,114 @@\n+┊   ┊  1┊import Button from '@material-ui/core/Button'\n+┊   ┊  2┊import ArrowRightIcon from '@material-ui/icons/ArrowRightAlt'\n+┊   ┊  3┊import { defaultDataIdFromObject } from 'apollo-cache-inmemory'\n+┊   ┊  4┊import gql from 'graphql-tag'\n+┊   ┊  5┊import { History } from 'history'\n+┊   ┊  6┊import * as React from 'react'\n+┊   ┊  7┊import { useMutation } from 'react-apollo-hooks'\n+┊   ┊  8┊import styled from 'styled-components'\n+┊   ┊  9┊import { time as uniqid } from 'uniqid'\n+┊   ┊ 10┊import * as fragments from '../../graphql/fragments'\n+┊   ┊ 11┊import * as queries from '../../graphql/queries'\n+┊   ┊ 12┊import { Chats, User, CompleteGroupButtonMutation } from '../../graphql/types'\n+┊   ┊ 13┊import { useMe } from '../../services/auth.service'\n+┊   ┊ 14┊\n+┊   ┊ 15┊const Style = styled.div`\n+┊   ┊ 16┊  position: fixed;\n+┊   ┊ 17┊  right: 10px;\n+┊   ┊ 18┊  bottom: 10px;\n+┊   ┊ 19┊\n+┊   ┊ 20┊  button {\n+┊   ┊ 21┊    min-width: 50px;\n+┊   ┊ 22┊    width: 50px;\n+┊   ┊ 23┊    height: 50px;\n+┊   ┊ 24┊    border-radius: 999px;\n+┊   ┊ 25┊    background-color: var(--secondary-bg);\n+┊   ┊ 26┊    color: white;\n+┊   ┊ 27┊  }\n+┊   ┊ 28┊`\n+┊   ┊ 29┊\n+┊   ┊ 30┊const mutation = gql`\n+┊   ┊ 31┊  mutation CompleteGroupButtonMutation(\n+┊   ┊ 32┊    $userIds: [ID!]!\n+┊   ┊ 33┊    $groupName: String!\n+┊   ┊ 34┊    $groupPicture: String\n+┊   ┊ 35┊  ) {\n+┊   ┊ 36┊    addGroup(userIds: $userIds, groupName: $groupName, groupPicture: $groupPicture) {\n+┊   ┊ 37┊      ...Chat\n+┊   ┊ 38┊    }\n+┊   ┊ 39┊  }\n+┊   ┊ 40┊  ${fragments.chat}\n+┊   ┊ 41┊`\n+┊   ┊ 42┊\n+┊   ┊ 43┊interface CompleteGroupButtonProps {\n+┊   ┊ 44┊  history: History\n+┊   ┊ 45┊  users: User.Fragment[]\n+┊   ┊ 46┊  groupName: string\n+┊   ┊ 47┊  groupPicture: string\n+┊   ┊ 48┊}\n+┊   ┊ 49┊\n+┊   ┊ 50┊export default ({ history, users, groupName, groupPicture }: CompleteGroupButtonProps) => {\n+┊   ┊ 51┊  const me = useMe()\n+┊   ┊ 52┊\n+┊   ┊ 53┊  const addGroup = useMutation<\n+┊   ┊ 54┊    CompleteGroupButtonMutation.Mutation,\n+┊   ┊ 55┊    CompleteGroupButtonMutation.Variables\n+┊   ┊ 56┊  >(mutation, {\n+┊   ┊ 57┊    optimisticResponse: {\n+┊   ┊ 58┊      __typename: 'Mutation',\n+┊   ┊ 59┊      addGroup: {\n+┊   ┊ 60┊        __typename: 'Chat',\n+┊   ┊ 61┊        id: uniqid(),\n+┊   ┊ 62┊        name: groupName,\n+┊   ┊ 63┊        picture: groupPicture,\n+┊   ┊ 64┊        allTimeMembers: users,\n+┊   ┊ 65┊        owner: me,\n+┊   ┊ 66┊        isGroup: true,\n+┊   ┊ 67┊        lastMessage: null,\n+┊   ┊ 68┊      },\n+┊   ┊ 69┊    },\n+┊   ┊ 70┊    variables: {\n+┊   ┊ 71┊      userIds: users.map(user => user.id),\n+┊   ┊ 72┊      groupName,\n+┊   ┊ 73┊      groupPicture,\n+┊   ┊ 74┊    },\n+┊   ┊ 75┊    update: (client, { data: { addGroup } }) => {\n+┊   ┊ 76┊      client.writeFragment({\n+┊   ┊ 77┊        id: defaultDataIdFromObject(addGroup),\n+┊   ┊ 78┊        fragment: fragments.chat,\n+┊   ┊ 79┊        fragmentName: 'Chat',\n+┊   ┊ 80┊        data: addGroup,\n+┊   ┊ 81┊      })\n+┊   ┊ 82┊\n+┊   ┊ 83┊      let chats\n+┊   ┊ 84┊      try {\n+┊   ┊ 85┊        chats = client.readQuery<Chats.Query>({\n+┊   ┊ 86┊          query: queries.chats,\n+┊   ┊ 87┊        }).chats\n+┊   ┊ 88┊      } catch (e) {}\n+┊   ┊ 89┊\n+┊   ┊ 90┊      if (chats && !chats.some(chat => chat.id === addGroup.id)) {\n+┊   ┊ 91┊        chats.unshift(addGroup)\n+┊   ┊ 92┊\n+┊   ┊ 93┊        client.writeQuery({\n+┊   ┊ 94┊          query: queries.chats,\n+┊   ┊ 95┊          data: { chats },\n+┊   ┊ 96┊        })\n+┊   ┊ 97┊      }\n+┊   ┊ 98┊    },\n+┊   ┊ 99┊  })\n+┊   ┊100┊\n+┊   ┊101┊  const onClick = () => {\n+┊   ┊102┊    addGroup().then(({ data: { addGroup } }) => {\n+┊   ┊103┊      history.push(`/chats/${addGroup.id}`)\n+┊   ┊104┊    })\n+┊   ┊105┊  }\n+┊   ┊106┊\n+┊   ┊107┊  return (\n+┊   ┊108┊    <Style className=\"CompleteGroupButton\">\n+┊   ┊109┊      <Button variant=\"contained\" color=\"secondary\" onClick={onClick}>\n+┊   ┊110┊        <ArrowRightIcon />\n+┊   ┊111┊      </Button>\n+┊   ┊112┊    </Style>\n+┊   ┊113┊  )\n+┊   ┊114┊}\n```\n\n##### Added src&#x2F;components&#x2F;GroupDetailsScreen&#x2F;GroupDetailsNavbar.tsx\n```diff\n@@ -0,0 +1,39 @@\n+┊  ┊ 1┊import Button from '@material-ui/core/Button'\n+┊  ┊ 2┊import ArrowBackIcon from '@material-ui/icons/ArrowBack'\n+┊  ┊ 3┊import { History } from 'history'\n+┊  ┊ 4┊import * as React from 'react'\n+┊  ┊ 5┊import styled from 'styled-components'\n+┊  ┊ 6┊\n+┊  ┊ 7┊const Style = styled.div`\n+┊  ┊ 8┊  padding: 0;\n+┊  ┊ 9┊  display: flex;\n+┊  ┊10┊  flex-direction: row;\n+┊  ┊11┊  margin-left: -20px;\n+┊  ┊12┊\n+┊  ┊13┊  .GroupDetailsNavbar-title {\n+┊  ┊14┊    line-height: 56px;\n+┊  ┊15┊  }\n+┊  ┊16┊\n+┊  ┊17┊  .GroupDetailsNavbar-back-button {\n+┊  ┊18┊    color: var(--primary-text);\n+┊  ┊19┊  }\n+┊  ┊20┊`\n+┊  ┊21┊\n+┊  ┊22┊interface GroupDetailsNavbarProps {\n+┊  ┊23┊  history: History\n+┊  ┊24┊}\n+┊  ┊25┊\n+┊  ┊26┊export default ({ history }: GroupDetailsNavbarProps) => {\n+┊  ┊27┊  const navToNewGroup = () => {\n+┊  ┊28┊    history.push('/new-chat/group')\n+┊  ┊29┊  }\n+┊  ┊30┊\n+┊  ┊31┊  return (\n+┊  ┊32┊    <Style className=\"GroupDetailsNavbar\">\n+┊  ┊33┊      <Button className=\"GroupDetailsNavbar-back-button\" onClick={navToNewGroup}>\n+┊  ┊34┊        <ArrowBackIcon />\n+┊  ┊35┊      </Button>\n+┊  ┊36┊      <div className=\"GroupDetailsNavbar-title\">Group Details</div>\n+┊  ┊37┊    </Style>\n+┊  ┊38┊  )\n+┊  ┊39┊}\n```\n\n##### Added src&#x2F;components&#x2F;GroupDetailsScreen&#x2F;index.tsx\n```diff\n@@ -0,0 +1,163 @@\n+┊   ┊  1┊import TextField from '@material-ui/core/TextField'\n+┊   ┊  2┊import { defaultDataIdFromObject } from 'apollo-cache-inmemory'\n+┊   ┊  3┊import gql from 'graphql-tag'\n+┊   ┊  4┊import * as React from 'react'\n+┊   ┊  5┊import { useState, useEffect } from 'react'\n+┊   ┊  6┊import { MutationHookOptions } from 'react-apollo-hooks'\n+┊   ┊  7┊import { useQuery, useMutation } from 'react-apollo-hooks'\n+┊   ┊  8┊import { Redirect } from 'react-router-dom'\n+┊   ┊  9┊import { RouteComponentProps } from 'react-router-dom'\n+┊   ┊ 10┊import styled from 'styled-components'\n+┊   ┊ 11┊import * as fragments from '../../graphql/fragments'\n+┊   ┊ 12┊import { GroupDetailsScreenQuery, GroupDetailsScreenMutation, User } from '../../graphql/types'\n+┊   ┊ 13┊import { useMe } from '../../services/auth.service'\n+┊   ┊ 14┊import { pickPicture, uploadProfilePicture } from '../../services/picture.service'\n+┊   ┊ 15┊import Navbar from '../Navbar'\n+┊   ┊ 16┊import CompleteGroupButton from './CompleteGroupButton'\n+┊   ┊ 17┊import GroupDetailsNavbar from './GroupDetailsNavbar'\n+┊   ┊ 18┊\n+┊   ┊ 19┊const Style = styled.div`\n+┊   ┊ 20┊  .GroupDetailsScreen-group-name {\n+┊   ┊ 21┊    width: calc(100% - 30px);\n+┊   ┊ 22┊    margin: 15px;\n+┊   ┊ 23┊  }\n+┊   ┊ 24┊\n+┊   ┊ 25┊  .GroupDetailsScreen-participants-title {\n+┊   ┊ 26┊    margin-top: 10px;\n+┊   ┊ 27┊    margin-left: 15px;\n+┊   ┊ 28┊  }\n+┊   ┊ 29┊\n+┊   ┊ 30┊  .GroupDetailsScreen-participants-list {\n+┊   ┊ 31┊    display: flex;\n+┊   ┊ 32┊    overflow: overlay;\n+┊   ┊ 33┊    padding: 0;\n+┊   ┊ 34┊  }\n+┊   ┊ 35┊\n+┊   ┊ 36┊  .GroupDetailsScreen-participant-item {\n+┊   ┊ 37┊    padding: 10px;\n+┊   ┊ 38┊    flex-flow: row wrap;\n+┊   ┊ 39┊    text-align: center;\n+┊   ┊ 40┊  }\n+┊   ┊ 41┊\n+┊   ┊ 42┊  .GroupDetailsScreen-participant-picture {\n+┊   ┊ 43┊    flex: 0 1 50px;\n+┊   ┊ 44┊    height: 50px;\n+┊   ┊ 45┊    width: 50px;\n+┊   ┊ 46┊    object-fit: cover;\n+┊   ┊ 47┊    border-radius: 50%;\n+┊   ┊ 48┊    display: block;\n+┊   ┊ 49┊    margin-left: auto;\n+┊   ┊ 50┊    margin-right: auto;\n+┊   ┊ 51┊  }\n+┊   ┊ 52┊\n+┊   ┊ 53┊  .GroupDetailsScreen-group-info {\n+┊   ┊ 54┊    display: flex;\n+┊   ┊ 55┊    flex-direction: row;\n+┊   ┊ 56┊    align-items: center;\n+┊   ┊ 57┊  }\n+┊   ┊ 58┊\n+┊   ┊ 59┊  .GroupDetailsScreen-participant-name {\n+┊   ┊ 60┊    line-height: 10px;\n+┊   ┊ 61┊    font-size: 14px;\n+┊   ┊ 62┊  }\n+┊   ┊ 63┊\n+┊   ┊ 64┊  .GroupDetailsScreen-group-picture {\n+┊   ┊ 65┊    width: 50px;\n+┊   ┊ 66┊    flex-basis: 50px;\n+┊   ┊ 67┊    border-radius: 50%;\n+┊   ┊ 68┊    margin-left: 15px;\n+┊   ┊ 69┊    object-fit: cover;\n+┊   ┊ 70┊    cursor: pointer;\n+┊   ┊ 71┊  }\n+┊   ┊ 72┊`\n+┊   ┊ 73┊\n+┊   ┊ 74┊const query = gql`\n+┊   ┊ 75┊  query GroupDetailsScreenQuery($chatId: ID!) {\n+┊   ┊ 76┊    chat(chatId: $chatId) {\n+┊   ┊ 77┊      ...Chat\n+┊   ┊ 78┊    }\n+┊   ┊ 79┊  }\n+┊   ┊ 80┊  ${fragments.chat}\n+┊   ┊ 81┊`\n+┊   ┊ 82┊\n+┊   ┊ 83┊const mutation = gql`\n+┊   ┊ 84┊  mutation GroupDetailsScreenMutation($chatId: ID!, $name: String, $picture: String) {\n+┊   ┊ 85┊    updateChat(chatId: $chatId, name: $name, picture: $picture) {\n+┊   ┊ 86┊      ...Chat\n+┊   ┊ 87┊    }\n+┊   ┊ 88┊  }\n+┊   ┊ 89┊  ${fragments.chat}\n+┊   ┊ 90┊`\n+┊   ┊ 91┊\n+┊   ┊ 92┊export default ({ location, history }: RouteComponentProps) => {\n+┊   ┊ 93┊  const users = location.state.users\n+┊   ┊ 94┊\n+┊   ┊ 95┊  // Users are missing from state\n+┊   ┊ 96┊  if (!(users instanceof Array)) {\n+┊   ┊ 97┊    return <Redirect to=\"/chats\" />\n+┊   ┊ 98┊  }\n+┊   ┊ 99┊\n+┊   ┊100┊  const me = useMe()\n+┊   ┊101┊  const [chatName, setChatName] = useState('')\n+┊   ┊102┊  const [chatPicture, setChatPicture] = useState('')\n+┊   ┊103┊  const participants = [me].concat(users)\n+┊   ┊104┊\n+┊   ┊105┊  const updateChatName = ({ target }) => {\n+┊   ┊106┊    setChatName(target.value)\n+┊   ┊107┊  }\n+┊   ┊108┊\n+┊   ┊109┊  const updateChatPicture = async () => {\n+┊   ┊110┊    const file = await pickPicture()\n+┊   ┊111┊\n+┊   ┊112┊    if (!file) return\n+┊   ┊113┊\n+┊   ┊114┊    const { url } = await uploadProfilePicture(file)\n+┊   ┊115┊\n+┊   ┊116┊    setChatPicture(url)\n+┊   ┊117┊  }\n+┊   ┊118┊\n+┊   ┊119┊  return (\n+┊   ┊120┊    <Style className=\"GroupDetailsScreen Screen\">\n+┊   ┊121┊      <Navbar>\n+┊   ┊122┊        <GroupDetailsNavbar history={history} />\n+┊   ┊123┊      </Navbar>\n+┊   ┊124┊      <div className=\"GroupDetailsScreen-group-info\">\n+┊   ┊125┊        <img\n+┊   ┊126┊          className=\"GroupDetailsScreen-group-picture\"\n+┊   ┊127┊          src={chatPicture || '/assets/default-group-pic.jpg'}\n+┊   ┊128┊          onClick={updateChatPicture}\n+┊   ┊129┊        />\n+┊   ┊130┊        <TextField\n+┊   ┊131┊          label=\"Group name\"\n+┊   ┊132┊          placeholder=\"Enter group name\"\n+┊   ┊133┊          className=\"GroupDetailsScreen-group-name\"\n+┊   ┊134┊          value={chatName}\n+┊   ┊135┊          onChange={updateChatName}\n+┊   ┊136┊          autoFocus={true}\n+┊   ┊137┊        />\n+┊   ┊138┊      </div>\n+┊   ┊139┊      <div className=\"GroupDetailsScreen-participants-title\">\n+┊   ┊140┊        Participants: {participants.length}\n+┊   ┊141┊      </div>\n+┊   ┊142┊      <ul className=\"GroupDetailsScreen-participants-list\">\n+┊   ┊143┊        {participants.map(participant => (\n+┊   ┊144┊          <div key={participant.id} className=\"GroupDetailsScreen-participant-item\">\n+┊   ┊145┊            <img\n+┊   ┊146┊              src={participant.picture || '/assets/default-profile-pic.jpg'}\n+┊   ┊147┊              className=\"GroupDetailsScreen-participant-picture\"\n+┊   ┊148┊            />\n+┊   ┊149┊            <span className=\"GroupDetailsScreen-participant-name\">{participant.name}</span>\n+┊   ┊150┊          </div>\n+┊   ┊151┊        ))}\n+┊   ┊152┊      </ul>\n+┊   ┊153┊      {chatName && (\n+┊   ┊154┊        <CompleteGroupButton\n+┊   ┊155┊          history={history}\n+┊   ┊156┊          groupName={chatName}\n+┊   ┊157┊          groupPicture={chatPicture}\n+┊   ┊158┊          users={users}\n+┊   ┊159┊        />\n+┊   ┊160┊      )}\n+┊   ┊161┊    </Style>\n+┊   ┊162┊  )\n+┊   ┊163┊}\n```\n\n[}]: #\n\nThis will require us to download a new asset to the `public/assets` directory which represents the default picture for a group. Please save it as `default-group-pic.jpg`:\n\n![default-group-pic.jpg](https://user-images.githubusercontent.com/7648874/51983284-3b1d8300-24d3-11e9-9f8b-afe36a3b9df1.jpg)\n\nLet's add a route for the screen we've just created:\n\n[{]: <helper> (diffStep 4.3 files=\"src/App\" module=\"client\")\n\n#### [Step 4.3: Add group details screen](https://github.com/Urigo/WhatsApp-Clone-Client-React/commit/e4b8c8f)\n\n##### Changed src&#x2F;App.tsx\n```diff\n@@ -5,6 +5,7 @@\n ┊ 5┊ 5┊import AnimatedSwitch from './components/AnimatedSwitch'\n ┊ 6┊ 6┊import AuthScreen from './components/AuthScreen'\n ┊ 7┊ 7┊import ChatsListScreen from './components/ChatsListScreen'\n+┊  ┊ 8┊import GroupDetailsScreen from './components/GroupDetailsScreen'\n ┊ 8┊ 9┊import SettingsScreen from './components/SettingsScreen'\n ┊ 9┊10┊import NewGroupScreen from './components/NewGroupScreen'\n ┊10┊11┊import { withAuth } from './services/auth.service'\n```\n```diff\n@@ -22,6 +23,7 @@\n ┊22┊23┊      <Route exact path=\"/chats/:chatId\" component={withAuth(ChatRoomScreen)} />\n ┊23┊24┊      <Route exact path=\"/new-chat\" component={withAuth(NewChatScreen)} />\n ┊24┊25┊      <Route exact path=\"/new-chat/group\" component={withAuth(NewGroupScreen)} />\n+┊  ┊26┊      <Route exact path=\"/new-chat/group/details\" component={withAuth(GroupDetailsScreen)} />\n ┊25┊27┊      <Route component={RedirectToChats} />\n ┊26┊28┊    </AnimatedSwitch>\n ┊27┊29┊  </BrowserRouter>\n```\n\n[}]: #\n\nThere's one last thing missing in the flow and that would be migrating existing components to work well with the new feature of group chats.\n\nStarting with the chats list component, we would like to display the default profile picture for group chats:\n\n[{]: <helper> (diffStep 4.4 files=\"src/components/ChatsListScreen\" module=\"client\")\n\n#### [Step 4.4: Apply group logic to existing components](https://github.com/Urigo/WhatsApp-Clone-Client-React/commit/6c978bc)\n\n##### Changed src&#x2F;components&#x2F;ChatsListScreen&#x2F;ChatsList.tsx\n```diff\n@@ -97,7 +97,12 @@\n ┊ 97┊ 97┊          >\n ┊ 98┊ 98┊            <img\n ┊ 99┊ 99┊              className=\"ChatsList-profile-pic\"\n-┊100┊   ┊              src={chat.picture || '/assets/default-profile-pic.jpg'}\n+┊   ┊100┊              src={\n+┊   ┊101┊                chat.picture ||\n+┊   ┊102┊                (chat.isGroup\n+┊   ┊103┊                  ? '/assets/default-group-pic.jpg'\n+┊   ┊104┊                  : '/assets/default-profile-pic.jpg')\n+┊   ┊105┊              }\n ┊101┊106┊            />\n ┊102┊107┊            <div className=\"ChatsList-info\">\n ┊103┊108┊              <div className=\"ChatsList-name\">{chat.name}</div>\n```\n\n[}]: #\n\nIn the messages list component, we would like to display the name of the owner of the message, so we would know exactly who sent it in case we're in a group chat:\n\n[{]: <helper> (diffStep 4.4 files=\"src/components/ChatRoomScreen/MessagesList\" module=\"client\")\n\n#### [Step 4.4: Apply group logic to existing components](https://github.com/Urigo/WhatsApp-Clone-Client-React/commit/6c978bc)\n\n##### Changed src&#x2F;components&#x2F;ChatRoomScreen&#x2F;MessagesList.tsx\n```diff\n@@ -105,7 +105,7 @@\n ┊105┊105┊export default ({ chatId }: MessagesListProps) => {\n ┊106┊106┊  const {\n ┊107┊107┊    data: {\n-┊108┊   ┊      chat: { messages },\n+┊   ┊108┊      chat: { messages, isGroup },\n ┊109┊109┊    },\n ┊110┊110┊  } = useQuery<MessagesListQuery.Query, MessagesListQuery.Variables>(query, {\n ┊111┊111┊    variables: { chatId },\n```\n```diff\n@@ -132,6 +132,9 @@\n ┊132┊132┊              message.ownership ? 'MessagesList-message-mine' : 'MessagesList-message-others'\n ┊133┊133┊            }`}\n ┊134┊134┊          >\n+┊   ┊135┊            {isGroup && !message.ownership && (\n+┊   ┊136┊              <div className=\"MessagesList-message-sender\">{message.sender.name}</div>\n+┊   ┊137┊            )}\n ┊135┊138┊            <div className=\"MessagesList-message-contents\">{message.content}</div>\n ┊136┊139┊            <span className=\"MessagesList-message-timestamp\">\n ┊137┊140┊              {moment(message.createdAt).format('HH:mm')}\n```\n\n[}]: #\n\nAnd now what we're gonna do is basically use the group details screen to show the details of the group that we're currently at. If we're an admin of the group, we would be able to edit its details, and if not, we will only be able to view its details without changing any of it. The view and some of the logic are the same whether it's a new group or an existing one, but there are slight differences. To deal with the differences, we will use \"if\" statements before we use the hooks, but **beware whenever you do that!** If you'll use an expression that is likely to change during the component's lifespan, you should NOT use a hook inside the \"if\" statement's block, because the React engine relies on the hooks to be called in a similar order.\n\n[{]: <helper> (diffStep 4.3 files=\"src/components/ChatRoomScreen/ChatNavBar, src/components/GroupDetailsScreen\" module=\"client\")\n\n#### [Step 4.3: Add group details screen](https://github.com/Urigo/WhatsApp-Clone-Client-React/commit/e4b8c8f)\n\n##### Added src&#x2F;components&#x2F;GroupDetailsScreen&#x2F;CompleteGroupButton.tsx\n```diff\n@@ -0,0 +1,114 @@\n+┊   ┊  1┊import Button from '@material-ui/core/Button'\n+┊   ┊  2┊import ArrowRightIcon from '@material-ui/icons/ArrowRightAlt'\n+┊   ┊  3┊import { defaultDataIdFromObject } from 'apollo-cache-inmemory'\n+┊   ┊  4┊import gql from 'graphql-tag'\n+┊   ┊  5┊import { History } from 'history'\n+┊   ┊  6┊import * as React from 'react'\n+┊   ┊  7┊import { useMutation } from 'react-apollo-hooks'\n+┊   ┊  8┊import styled from 'styled-components'\n+┊   ┊  9┊import { time as uniqid } from 'uniqid'\n+┊   ┊ 10┊import * as fragments from '../../graphql/fragments'\n+┊   ┊ 11┊import * as queries from '../../graphql/queries'\n+┊   ┊ 12┊import { Chats, User, CompleteGroupButtonMutation } from '../../graphql/types'\n+┊   ┊ 13┊import { useMe } from '../../services/auth.service'\n+┊   ┊ 14┊\n+┊   ┊ 15┊const Style = styled.div`\n+┊   ┊ 16┊  position: fixed;\n+┊   ┊ 17┊  right: 10px;\n+┊   ┊ 18┊  bottom: 10px;\n+┊   ┊ 19┊\n+┊   ┊ 20┊  button {\n+┊   ┊ 21┊    min-width: 50px;\n+┊   ┊ 22┊    width: 50px;\n+┊   ┊ 23┊    height: 50px;\n+┊   ┊ 24┊    border-radius: 999px;\n+┊   ┊ 25┊    background-color: var(--secondary-bg);\n+┊   ┊ 26┊    color: white;\n+┊   ┊ 27┊  }\n+┊   ┊ 28┊`\n+┊   ┊ 29┊\n+┊   ┊ 30┊const mutation = gql`\n+┊   ┊ 31┊  mutation CompleteGroupButtonMutation(\n+┊   ┊ 32┊    $userIds: [ID!]!\n+┊   ┊ 33┊    $groupName: String!\n+┊   ┊ 34┊    $groupPicture: String\n+┊   ┊ 35┊  ) {\n+┊   ┊ 36┊    addGroup(userIds: $userIds, groupName: $groupName, groupPicture: $groupPicture) {\n+┊   ┊ 37┊      ...Chat\n+┊   ┊ 38┊    }\n+┊   ┊ 39┊  }\n+┊   ┊ 40┊  ${fragments.chat}\n+┊   ┊ 41┊`\n+┊   ┊ 42┊\n+┊   ┊ 43┊interface CompleteGroupButtonProps {\n+┊   ┊ 44┊  history: History\n+┊   ┊ 45┊  users: User.Fragment[]\n+┊   ┊ 46┊  groupName: string\n+┊   ┊ 47┊  groupPicture: string\n+┊   ┊ 48┊}\n+┊   ┊ 49┊\n+┊   ┊ 50┊export default ({ history, users, groupName, groupPicture }: CompleteGroupButtonProps) => {\n+┊   ┊ 51┊  const me = useMe()\n+┊   ┊ 52┊\n+┊   ┊ 53┊  const addGroup = useMutation<\n+┊   ┊ 54┊    CompleteGroupButtonMutation.Mutation,\n+┊   ┊ 55┊    CompleteGroupButtonMutation.Variables\n+┊   ┊ 56┊  >(mutation, {\n+┊   ┊ 57┊    optimisticResponse: {\n+┊   ┊ 58┊      __typename: 'Mutation',\n+┊   ┊ 59┊      addGroup: {\n+┊   ┊ 60┊        __typename: 'Chat',\n+┊   ┊ 61┊        id: uniqid(),\n+┊   ┊ 62┊        name: groupName,\n+┊   ┊ 63┊        picture: groupPicture,\n+┊   ┊ 64┊        allTimeMembers: users,\n+┊   ┊ 65┊        owner: me,\n+┊   ┊ 66┊        isGroup: true,\n+┊   ┊ 67┊        lastMessage: null,\n+┊   ┊ 68┊      },\n+┊   ┊ 69┊    },\n+┊   ┊ 70┊    variables: {\n+┊   ┊ 71┊      userIds: users.map(user => user.id),\n+┊   ┊ 72┊      groupName,\n+┊   ┊ 73┊      groupPicture,\n+┊   ┊ 74┊    },\n+┊   ┊ 75┊    update: (client, { data: { addGroup } }) => {\n+┊   ┊ 76┊      client.writeFragment({\n+┊   ┊ 77┊        id: defaultDataIdFromObject(addGroup),\n+┊   ┊ 78┊        fragment: fragments.chat,\n+┊   ┊ 79┊        fragmentName: 'Chat',\n+┊   ┊ 80┊        data: addGroup,\n+┊   ┊ 81┊      })\n+┊   ┊ 82┊\n+┊   ┊ 83┊      let chats\n+┊   ┊ 84┊      try {\n+┊   ┊ 85┊        chats = client.readQuery<Chats.Query>({\n+┊   ┊ 86┊          query: queries.chats,\n+┊   ┊ 87┊        }).chats\n+┊   ┊ 88┊      } catch (e) {}\n+┊   ┊ 89┊\n+┊   ┊ 90┊      if (chats && !chats.some(chat => chat.id === addGroup.id)) {\n+┊   ┊ 91┊        chats.unshift(addGroup)\n+┊   ┊ 92┊\n+┊   ┊ 93┊        client.writeQuery({\n+┊   ┊ 94┊          query: queries.chats,\n+┊   ┊ 95┊          data: { chats },\n+┊   ┊ 96┊        })\n+┊   ┊ 97┊      }\n+┊   ┊ 98┊    },\n+┊   ┊ 99┊  })\n+┊   ┊100┊\n+┊   ┊101┊  const onClick = () => {\n+┊   ┊102┊    addGroup().then(({ data: { addGroup } }) => {\n+┊   ┊103┊      history.push(`/chats/${addGroup.id}`)\n+┊   ┊104┊    })\n+┊   ┊105┊  }\n+┊   ┊106┊\n+┊   ┊107┊  return (\n+┊   ┊108┊    <Style className=\"CompleteGroupButton\">\n+┊   ┊109┊      <Button variant=\"contained\" color=\"secondary\" onClick={onClick}>\n+┊   ┊110┊        <ArrowRightIcon />\n+┊   ┊111┊      </Button>\n+┊   ┊112┊    </Style>\n+┊   ┊113┊  )\n+┊   ┊114┊}\n```\n\n##### Added src&#x2F;components&#x2F;GroupDetailsScreen&#x2F;GroupDetailsNavbar.tsx\n```diff\n@@ -0,0 +1,39 @@\n+┊  ┊ 1┊import Button from '@material-ui/core/Button'\n+┊  ┊ 2┊import ArrowBackIcon from '@material-ui/icons/ArrowBack'\n+┊  ┊ 3┊import { History } from 'history'\n+┊  ┊ 4┊import * as React from 'react'\n+┊  ┊ 5┊import styled from 'styled-components'\n+┊  ┊ 6┊\n+┊  ┊ 7┊const Style = styled.div`\n+┊  ┊ 8┊  padding: 0;\n+┊  ┊ 9┊  display: flex;\n+┊  ┊10┊  flex-direction: row;\n+┊  ┊11┊  margin-left: -20px;\n+┊  ┊12┊\n+┊  ┊13┊  .GroupDetailsNavbar-title {\n+┊  ┊14┊    line-height: 56px;\n+┊  ┊15┊  }\n+┊  ┊16┊\n+┊  ┊17┊  .GroupDetailsNavbar-back-button {\n+┊  ┊18┊    color: var(--primary-text);\n+┊  ┊19┊  }\n+┊  ┊20┊`\n+┊  ┊21┊\n+┊  ┊22┊interface GroupDetailsNavbarProps {\n+┊  ┊23┊  history: History\n+┊  ┊24┊}\n+┊  ┊25┊\n+┊  ┊26┊export default ({ history }: GroupDetailsNavbarProps) => {\n+┊  ┊27┊  const navToNewGroup = () => {\n+┊  ┊28┊    history.push('/new-chat/group')\n+┊  ┊29┊  }\n+┊  ┊30┊\n+┊  ┊31┊  return (\n+┊  ┊32┊    <Style className=\"GroupDetailsNavbar\">\n+┊  ┊33┊      <Button className=\"GroupDetailsNavbar-back-button\" onClick={navToNewGroup}>\n+┊  ┊34┊        <ArrowBackIcon />\n+┊  ┊35┊      </Button>\n+┊  ┊36┊      <div className=\"GroupDetailsNavbar-title\">Group Details</div>\n+┊  ┊37┊    </Style>\n+┊  ┊38┊  )\n+┊  ┊39┊}\n```\n\n##### Added src&#x2F;components&#x2F;GroupDetailsScreen&#x2F;index.tsx\n```diff\n@@ -0,0 +1,163 @@\n+┊   ┊  1┊import TextField from '@material-ui/core/TextField'\n+┊   ┊  2┊import { defaultDataIdFromObject } from 'apollo-cache-inmemory'\n+┊   ┊  3┊import gql from 'graphql-tag'\n+┊   ┊  4┊import * as React from 'react'\n+┊   ┊  5┊import { useState, useEffect } from 'react'\n+┊   ┊  6┊import { MutationHookOptions } from 'react-apollo-hooks'\n+┊   ┊  7┊import { useQuery, useMutation } from 'react-apollo-hooks'\n+┊   ┊  8┊import { Redirect } from 'react-router-dom'\n+┊   ┊  9┊import { RouteComponentProps } from 'react-router-dom'\n+┊   ┊ 10┊import styled from 'styled-components'\n+┊   ┊ 11┊import * as fragments from '../../graphql/fragments'\n+┊   ┊ 12┊import { GroupDetailsScreenQuery, GroupDetailsScreenMutation, User } from '../../graphql/types'\n+┊   ┊ 13┊import { useMe } from '../../services/auth.service'\n+┊   ┊ 14┊import { pickPicture, uploadProfilePicture } from '../../services/picture.service'\n+┊   ┊ 15┊import Navbar from '../Navbar'\n+┊   ┊ 16┊import CompleteGroupButton from './CompleteGroupButton'\n+┊   ┊ 17┊import GroupDetailsNavbar from './GroupDetailsNavbar'\n+┊   ┊ 18┊\n+┊   ┊ 19┊const Style = styled.div`\n+┊   ┊ 20┊  .GroupDetailsScreen-group-name {\n+┊   ┊ 21┊    width: calc(100% - 30px);\n+┊   ┊ 22┊    margin: 15px;\n+┊   ┊ 23┊  }\n+┊   ┊ 24┊\n+┊   ┊ 25┊  .GroupDetailsScreen-participants-title {\n+┊   ┊ 26┊    margin-top: 10px;\n+┊   ┊ 27┊    margin-left: 15px;\n+┊   ┊ 28┊  }\n+┊   ┊ 29┊\n+┊   ┊ 30┊  .GroupDetailsScreen-participants-list {\n+┊   ┊ 31┊    display: flex;\n+┊   ┊ 32┊    overflow: overlay;\n+┊   ┊ 33┊    padding: 0;\n+┊   ┊ 34┊  }\n+┊   ┊ 35┊\n+┊   ┊ 36┊  .GroupDetailsScreen-participant-item {\n+┊   ┊ 37┊    padding: 10px;\n+┊   ┊ 38┊    flex-flow: row wrap;\n+┊   ┊ 39┊    text-align: center;\n+┊   ┊ 40┊  }\n+┊   ┊ 41┊\n+┊   ┊ 42┊  .GroupDetailsScreen-participant-picture {\n+┊   ┊ 43┊    flex: 0 1 50px;\n+┊   ┊ 44┊    height: 50px;\n+┊   ┊ 45┊    width: 50px;\n+┊   ┊ 46┊    object-fit: cover;\n+┊   ┊ 47┊    border-radius: 50%;\n+┊   ┊ 48┊    display: block;\n+┊   ┊ 49┊    margin-left: auto;\n+┊   ┊ 50┊    margin-right: auto;\n+┊   ┊ 51┊  }\n+┊   ┊ 52┊\n+┊   ┊ 53┊  .GroupDetailsScreen-group-info {\n+┊   ┊ 54┊    display: flex;\n+┊   ┊ 55┊    flex-direction: row;\n+┊   ┊ 56┊    align-items: center;\n+┊   ┊ 57┊  }\n+┊   ┊ 58┊\n+┊   ┊ 59┊  .GroupDetailsScreen-participant-name {\n+┊   ┊ 60┊    line-height: 10px;\n+┊   ┊ 61┊    font-size: 14px;\n+┊   ┊ 62┊  }\n+┊   ┊ 63┊\n+┊   ┊ 64┊  .GroupDetailsScreen-group-picture {\n+┊   ┊ 65┊    width: 50px;\n+┊   ┊ 66┊    flex-basis: 50px;\n+┊   ┊ 67┊    border-radius: 50%;\n+┊   ┊ 68┊    margin-left: 15px;\n+┊   ┊ 69┊    object-fit: cover;\n+┊   ┊ 70┊    cursor: pointer;\n+┊   ┊ 71┊  }\n+┊   ┊ 72┊`\n+┊   ┊ 73┊\n+┊   ┊ 74┊const query = gql`\n+┊   ┊ 75┊  query GroupDetailsScreenQuery($chatId: ID!) {\n+┊   ┊ 76┊    chat(chatId: $chatId) {\n+┊   ┊ 77┊      ...Chat\n+┊   ┊ 78┊    }\n+┊   ┊ 79┊  }\n+┊   ┊ 80┊  ${fragments.chat}\n+┊   ┊ 81┊`\n+┊   ┊ 82┊\n+┊   ┊ 83┊const mutation = gql`\n+┊   ┊ 84┊  mutation GroupDetailsScreenMutation($chatId: ID!, $name: String, $picture: String) {\n+┊   ┊ 85┊    updateChat(chatId: $chatId, name: $name, picture: $picture) {\n+┊   ┊ 86┊      ...Chat\n+┊   ┊ 87┊    }\n+┊   ┊ 88┊  }\n+┊   ┊ 89┊  ${fragments.chat}\n+┊   ┊ 90┊`\n+┊   ┊ 91┊\n+┊   ┊ 92┊export default ({ location, history }: RouteComponentProps) => {\n+┊   ┊ 93┊  const users = location.state.users\n+┊   ┊ 94┊\n+┊   ┊ 95┊  // Users are missing from state\n+┊   ┊ 96┊  if (!(users instanceof Array)) {\n+┊   ┊ 97┊    return <Redirect to=\"/chats\" />\n+┊   ┊ 98┊  }\n+┊   ┊ 99┊\n+┊   ┊100┊  const me = useMe()\n+┊   ┊101┊  const [chatName, setChatName] = useState('')\n+┊   ┊102┊  const [chatPicture, setChatPicture] = useState('')\n+┊   ┊103┊  const participants = [me].concat(users)\n+┊   ┊104┊\n+┊   ┊105┊  const updateChatName = ({ target }) => {\n+┊   ┊106┊    setChatName(target.value)\n+┊   ┊107┊  }\n+┊   ┊108┊\n+┊   ┊109┊  const updateChatPicture = async () => {\n+┊   ┊110┊    const file = await pickPicture()\n+┊   ┊111┊\n+┊   ┊112┊    if (!file) return\n+┊   ┊113┊\n+┊   ┊114┊    const { url } = await uploadProfilePicture(file)\n+┊   ┊115┊\n+┊   ┊116┊    setChatPicture(url)\n+┊   ┊117┊  }\n+┊   ┊118┊\n+┊   ┊119┊  return (\n+┊   ┊120┊    <Style className=\"GroupDetailsScreen Screen\">\n+┊   ┊121┊      <Navbar>\n+┊   ┊122┊        <GroupDetailsNavbar history={history} />\n+┊   ┊123┊      </Navbar>\n+┊   ┊124┊      <div className=\"GroupDetailsScreen-group-info\">\n+┊   ┊125┊        <img\n+┊   ┊126┊          className=\"GroupDetailsScreen-group-picture\"\n+┊   ┊127┊          src={chatPicture || '/assets/default-group-pic.jpg'}\n+┊   ┊128┊          onClick={updateChatPicture}\n+┊   ┊129┊        />\n+┊   ┊130┊        <TextField\n+┊   ┊131┊          label=\"Group name\"\n+┊   ┊132┊          placeholder=\"Enter group name\"\n+┊   ┊133┊          className=\"GroupDetailsScreen-group-name\"\n+┊   ┊134┊          value={chatName}\n+┊   ┊135┊          onChange={updateChatName}\n+┊   ┊136┊          autoFocus={true}\n+┊   ┊137┊        />\n+┊   ┊138┊      </div>\n+┊   ┊139┊      <div className=\"GroupDetailsScreen-participants-title\">\n+┊   ┊140┊        Participants: {participants.length}\n+┊   ┊141┊      </div>\n+┊   ┊142┊      <ul className=\"GroupDetailsScreen-participants-list\">\n+┊   ┊143┊        {participants.map(participant => (\n+┊   ┊144┊          <div key={participant.id} className=\"GroupDetailsScreen-participant-item\">\n+┊   ┊145┊            <img\n+┊   ┊146┊              src={participant.picture || '/assets/default-profile-pic.jpg'}\n+┊   ┊147┊              className=\"GroupDetailsScreen-participant-picture\"\n+┊   ┊148┊            />\n+┊   ┊149┊            <span className=\"GroupDetailsScreen-participant-name\">{participant.name}</span>\n+┊   ┊150┊          </div>\n+┊   ┊151┊        ))}\n+┊   ┊152┊      </ul>\n+┊   ┊153┊      {chatName && (\n+┊   ┊154┊        <CompleteGroupButton\n+┊   ┊155┊          history={history}\n+┊   ┊156┊          groupName={chatName}\n+┊   ┊157┊          groupPicture={chatPicture}\n+┊   ┊158┊          users={users}\n+┊   ┊159┊        />\n+┊   ┊160┊      )}\n+┊   ┊161┊    </Style>\n+┊   ┊162┊  )\n+┊   ┊163┊}\n```\n\n[}]: #\n\nThat's it! Now we should be able to create group chats and message multiple people at once."
          }
        ]
      }
    ]
  }
]
