[
  {
    "repoUrl": "",
    "branchName": "master",
    "historyBranchName": "master-history",
    "releases": [
      {
        "releaseVersion": "1.0.0",
        "releaseDate": "2018-05-29 03:26:43 +0800",
        "tagName": "master@1.0.0",
        "tagRevision": "c38546e6bb3bb87878f0be1d7d6b45c3791f4675",
        "historyRevision": "8627bb415ef1b4eed8704a7f56e143dcd337e232",
        "changesDiff": "diff --git a/client/.angular-cli.json b/client/.angular-cli.json\ndeleted file mode 100644\nindex 542e27b..0000000\n--- a/client/.angular-cli.json\n+++ /dev/null\n@@ -1,60 +0,0 @@\n-{\n-  \"$schema\": \"./node_modules/@angular/cli/lib/config/schema.json\",\n-  \"project\": {\n-    \"name\": \"whatsapp-client-angularcli-material\"\n-  },\n-  \"apps\": [\n-    {\n-      \"root\": \"src\",\n-      \"outDir\": \"dist\",\n-      \"assets\": [\n-        \"assets\",\n-        \"favicon.ico\"\n-      ],\n-      \"index\": \"index.html\",\n-      \"main\": \"main.ts\",\n-      \"polyfills\": \"polyfills.ts\",\n-      \"test\": \"test.ts\",\n-      \"tsconfig\": \"tsconfig.app.json\",\n-      \"testTsconfig\": \"tsconfig.spec.json\",\n-      \"prefix\": \"app\",\n-      \"styles\": [\n-        \"styles.scss\"\n-      ],\n-      \"scripts\": [],\n-      \"environmentSource\": \"environments/environment.ts\",\n-      \"environments\": {\n-        \"dev\": \"environments/environment.ts\",\n-        \"prod\": \"environments/environment.prod.ts\"\n-      }\n-    }\n-  ],\n-  \"e2e\": {\n-    \"protractor\": {\n-      \"config\": \"./protractor.conf.js\"\n-    }\n-  },\n-  \"lint\": [\n-    {\n-      \"project\": \"src/tsconfig.app.json\",\n-      \"exclude\": \"**/node_modules/**\"\n-    },\n-    {\n-      \"project\": \"src/tsconfig.spec.json\",\n-      \"exclude\": \"**/node_modules/**\"\n-    },\n-    {\n-      \"project\": \"e2e/tsconfig.e2e.json\",\n-      \"exclude\": \"**/node_modules/**\"\n-    }\n-  ],\n-  \"test\": {\n-    \"karma\": {\n-      \"config\": \"./karma.conf.js\"\n-    }\n-  },\n-  \"defaults\": {\n-    \"styleExt\": \"scss\",\n-    \"component\": {}\n-  }\n-}\ndiff --git a/client/.gitignore b/client/.gitignore\nindex 22657a5..b600fc4 100644\n--- a/client/.gitignore\n+++ b/client/.gitignore\n@@ -2,7 +2,6 @@\n \n # compiled output\n /dist\n-/dist-server\n /tmp\n /out-tsc\n \n@@ -31,13 +30,10 @@\n /coverage\n /libpeerconnection.log\n npm-debug.log\n+yarn-error.log\n testem.log\n /typings\n \n-# e2e\n-/e2e/*.js\n-/e2e/*.map\n-\n # System Files\n .DS_Store\n Thumbs.db\ndiff --git a/client/angular.json b/client/angular.json\nnew file mode 100644\nindex 0000000..3d9af93\n--- /dev/null\n+++ b/client/angular.json\n@@ -0,0 +1,126 @@\n+{\n+  \"$schema\": \"./node_modules/@angular/cli/lib/config/schema.json\",\n+  \"version\": 1,\n+  \"newProjectRoot\": \"projects\",\n+  \"projects\": {\n+    \"whatsapp-client-angularcli-material\": {\n+      \"root\": \"\",\n+      \"sourceRoot\": \"src\",\n+      \"projectType\": \"application\",\n+      \"prefix\": \"app\",\n+      \"schematics\": {\n+        \"@schematics/angular:component\": {\n+          \"styleext\": \"scss\"\n+        }\n+      },\n+      \"architect\": {\n+        \"build\": {\n+          \"builder\": \"@angular-devkit/build-angular:browser\",\n+          \"options\": {\n+            \"outputPath\": \"dist/whatsapp-client-angularcli-material\",\n+            \"index\": \"src/index.html\",\n+            \"main\": \"src/main.ts\",\n+            \"polyfills\": \"src/polyfills.ts\",\n+            \"tsConfig\": \"src/tsconfig.app.json\",\n+            \"assets\": [\n+              \"src/favicon.ico\",\n+              \"src/assets\"\n+            ],\n+            \"styles\": [\n+              \"src/styles.scss\"\n+            ],\n+            \"scripts\": []\n+          },\n+          \"configurations\": {\n+            \"production\": {\n+              \"fileReplacements\": [\n+                {\n+                  \"replace\": \"src/environments/environment.ts\",\n+                  \"with\": \"src/environments/environment.prod.ts\"\n+                }\n+              ],\n+              \"optimization\": true,\n+              \"outputHashing\": \"all\",\n+              \"sourceMap\": false,\n+              \"extractCss\": true,\n+              \"namedChunks\": false,\n+              \"aot\": true,\n+              \"extractLicenses\": true,\n+              \"vendorChunk\": false,\n+              \"buildOptimizer\": true\n+            }\n+          }\n+        },\n+        \"serve\": {\n+          \"builder\": \"@angular-devkit/build-angular:dev-server\",\n+          \"options\": {\n+            \"browserTarget\": \"whatsapp-client-angularcli-material:build\"\n+          },\n+          \"configurations\": {\n+            \"production\": {\n+              \"browserTarget\": \"whatsapp-client-angularcli-material:build:production\"\n+            }\n+          }\n+        },\n+        \"extract-i18n\": {\n+          \"builder\": \"@angular-devkit/build-angular:extract-i18n\",\n+          \"options\": {\n+            \"browserTarget\": \"whatsapp-client-angularcli-material:build\"\n+          }\n+        },\n+        \"test\": {\n+          \"builder\": \"@angular-devkit/build-angular:karma\",\n+          \"options\": {\n+            \"main\": \"src/test.ts\",\n+            \"polyfills\": \"src/polyfills.ts\",\n+            \"tsConfig\": \"src/tsconfig.spec.json\",\n+            \"karmaConfig\": \"src/karma.conf.js\",\n+            \"styles\": [\n+              \"styles.scss\"\n+            ],\n+            \"scripts\": [],\n+            \"assets\": [\n+              \"src/favicon.ico\",\n+              \"src/assets\"\n+            ]\n+          }\n+        },\n+        \"lint\": {\n+          \"builder\": \"@angular-devkit/build-angular:tslint\",\n+          \"options\": {\n+            \"tsConfig\": [\n+              \"src/tsconfig.app.json\",\n+              \"src/tsconfig.spec.json\"\n+            ],\n+            \"exclude\": [\n+              \"**/node_modules/**\"\n+            ]\n+          }\n+        }\n+      }\n+    },\n+    \"whatsapp-client-angularcli-material-e2e\": {\n+      \"root\": \"e2e/\",\n+      \"projectType\": \"application\",\n+      \"architect\": {\n+        \"e2e\": {\n+          \"builder\": \"@angular-devkit/build-angular:protractor\",\n+          \"options\": {\n+            \"protractorConfig\": \"e2e/protractor.conf.js\",\n+            \"devServerTarget\": \"whatsapp-client-angularcli-material:serve\"\n+          }\n+        },\n+        \"lint\": {\n+          \"builder\": \"@angular-devkit/build-angular:tslint\",\n+          \"options\": {\n+            \"tsConfig\": \"e2e/tsconfig.e2e.json\",\n+            \"exclude\": [\n+              \"**/node_modules/**\"\n+            ]\n+          }\n+        }\n+      }\n+    }\n+  },\n+  \"defaultProject\": \"whatsapp-client-angularcli-material\"\n+}\n\\ No newline at end of file\ndiff --git a/client/protractor.conf.js b/client/e2e/protractor.conf.js\nsimilarity index 86%\nrename from client/protractor.conf.js\nrename to client/e2e/protractor.conf.js\nindex 7ee3b5e..86776a3 100644\n--- a/client/protractor.conf.js\n+++ b/client/e2e/protractor.conf.js\n@@ -6,7 +6,7 @@ const { SpecReporter } = require('jasmine-spec-reporter');\n exports.config = {\n   allScriptsTimeout: 11000,\n   specs: [\n-    './e2e/**/*.e2e-spec.ts'\n+    './src/**/*.e2e-spec.ts'\n   ],\n   capabilities: {\n     'browserName': 'chrome'\n@@ -21,8 +21,8 @@ exports.config = {\n   },\n   onPrepare() {\n     require('ts-node').register({\n-      project: 'e2e/tsconfig.e2e.json'\n+      project: require('path').join(__dirname, './tsconfig.e2e.json')\n     });\n     jasmine.getEnv().addReporter(new SpecReporter({ spec: { displayStacktrace: true } }));\n   }\n-};\n+};\n\\ No newline at end of file\ndiff --git a/client/e2e/app.e2e-spec.ts b/client/e2e/src/app.e2e-spec.ts\nsimilarity index 81%\nrename from client/e2e/app.e2e-spec.ts\nrename to client/e2e/src/app.e2e-spec.ts\nindex aaf19d5..e42d1f9 100644\n--- a/client/e2e/app.e2e-spec.ts\n+++ b/client/e2e/src/app.e2e-spec.ts\n@@ -1,6 +1,6 @@\n import { AppPage } from './app.po';\n \n-describe('whatsapp-client-angularcli-material App', () => {\n+describe('workspace-project App', () => {\n   let page: AppPage;\n \n   beforeEach(() => {\ndiff --git a/client/e2e/app.po.ts b/client/e2e/src/app.po.ts\nsimilarity index 100%\nrename from client/e2e/app.po.ts\nrename to client/e2e/src/app.po.ts\ndiff --git a/client/e2e/tsconfig.e2e.json b/client/e2e/tsconfig.e2e.json\nindex 1d9e5ed..a6dd622 100644\n--- a/client/e2e/tsconfig.e2e.json\n+++ b/client/e2e/tsconfig.e2e.json\n@@ -1,8 +1,7 @@\n {\n   \"extends\": \"../tsconfig.json\",\n   \"compilerOptions\": {\n-    \"outDir\": \"../out-tsc/e2e\",\n-    \"baseUrl\": \"./\",\n+    \"outDir\": \"../out-tsc/app\",\n     \"module\": \"commonjs\",\n     \"target\": \"es5\",\n     \"types\": [\n@@ -11,4 +10,4 @@\n       \"node\"\n     ]\n   }\n-}\n+}\n\\ No newline at end of file\ndiff --git a/client/package.json b/client/package.json\nindex 7229a04..b2da7ed 100644\n--- a/client/package.json\n+++ b/client/package.json\n@@ -1,69 +1,69 @@\n {\n   \"name\": \"whatsapp-client-angularcli-material\",\n   \"version\": \"0.0.0\",\n-  \"license\": \"MIT\",\n   \"scripts\": {\n     \"ng\": \"ng\",\n     \"start\": \"ng serve\",\n-    \"build\": \"ng build --prod\",\n+    \"build\": \"ng build\",\n     \"test\": \"ng test\",\n     \"lint\": \"ng lint\",\n     \"e2e\": \"ng e2e\",\n-    \"generator\": \"gql-gen --url http://localhost:3000/graphql --template ts --out ./src/types.d.ts \\\"./src/graphql/**/*.ts\\\"\"\n+    \"generator\": \"gql-gen --schema http://localhost:3000/graphql --template ts --out ./src/types.d.ts \\\"./src/graphql/**/*.ts\\\"\"\n   },\n   \"private\": true,\n   \"dependencies\": {\n-    \"@angular/animations\": \"5.2.5\",\n-    \"@angular/cdk\": \"5.2.1\",\n-    \"@angular/common\": \"5.2.5\",\n-    \"@angular/compiler\": \"5.2.5\",\n-    \"@angular/core\": \"5.2.5\",\n-    \"@angular/flex-layout\": \"2.0.0-beta.12\",\n-    \"@angular/forms\": \"5.2.5\",\n-    \"@angular/http\": \"5.2.5\",\n-    \"@angular/material\": \"5.2.1\",\n-    \"@angular/platform-browser\": \"5.2.5\",\n-    \"@angular/platform-browser-dynamic\": \"5.2.5\",\n-    \"@angular/router\": \"5.2.5\",\n-    \"ajv\": \"6.1.1\",\n-    \"apollo-angular\": \"1.0.1\",\n-    \"apollo-angular-link-http\": \"1.0.2-beta.0\",\n-    \"apollo-cache-inmemory\": \"1.1.9\",\n-    \"apollo-client\": \"2.2.5\",\n-    \"apollo-link\": \"1.1.0\",\n-    \"apollo-link-ws\": \"1.0.5\",\n-    \"apollo-utilities\": \"1.0.8\",\n-    \"core-js\": \"2.5.3\",\n-    \"graphql\": \"0.12.3\",\n-    \"graphql-tag\": \"2.7.3\",\n+    \"@angular/animations\": \"6.0.0\",\n+    \"@angular/cdk\": \"6.0.1\",\n+    \"@angular/common\": \"6.0.0\",\n+    \"@angular/compiler\": \"6.0.0\",\n+    \"@angular/core\": \"6.0.0\",\n+    \"@angular/flex-layout\": \"6.0.0-beta.15\",\n+    \"@angular/forms\": \"6.0.0\",\n+    \"@angular/http\": \"6.0.0\",\n+    \"@angular/material\": \"6.0.1\",\n+    \"@angular/platform-browser\": \"6.0.0\",\n+    \"@angular/platform-browser-dynamic\": \"6.0.0\",\n+    \"@angular/router\": \"6.0.0\",\n+    \"apollo-angular\": \"1.1.0-rc.0\",\n+    \"apollo-angular-link-http\": \"1.1.0-rc.0\",\n+    \"apollo-cache-inmemory\": \"1.2.1\",\n+    \"apollo-client\": \"2.3.1\",\n+    \"apollo-link\": \"1.2.2\",\n+    \"apollo-link-ws\": \"1.0.8\",\n+    \"apollo-utilities\": \"1.0.12\",\n+    \"core-js\": \"2.5.6\",\n+    \"graphql\": \"0.13.2\",\n+    \"graphql-tag\": \"2.9.2\",\n     \"hammerjs\": \"2.0.8\",\n-    \"moment\": \"2.20.1\",\n-    \"ng2-truncate\": \"1.3.11\",\n-    \"ngx-selectable-list\": \"1.1.0\",\n-    \"rxjs\": \"5.5.6\",\n-    \"subscriptions-transport-ws\": \"0.9.5\",\n-    \"zone.js\": \"0.8.20\"\n+    \"moment\": \"2.22.1\",\n+    \"ng2-truncate\": \"1.3.17\",\n+    \"ngx-selectable-list\": \"^1.2.1\",\n+    \"rxjs\": \"6.1.0\",\n+    \"subscriptions-transport-ws\": \"0.9.9\",\n+    \"zone.js\": \"0.8.26\"\n   },\n   \"devDependencies\": {\n-    \"@angular/cli\": \"1.7.0\",\n-    \"@angular/compiler-cli\": \"5.2.5\",\n-    \"@angular/language-service\": \"5.2.5\",\n-    \"@types/graphql\": \"0.12.4\",\n-    \"@types/jasmine\": \"2.8.6\",\n+    \"@angular-devkit/build-angular\": \"0.6.0\",\n+    \"@angular/cli\": \"6.0.0\",\n+    \"@angular/compiler-cli\": \"6.0.0\",\n+    \"@angular/language-service\": \"6.0.0\",\n+    \"@types/graphql\": \"0.13.0\",\n+    \"@types/jasmine\": \"2.8.7\",\n     \"@types/jasminewd2\": \"2.0.3\",\n-    \"@types/node\": \"6.0.101\",\n-    \"codelyzer\": \"4.1.0\",\n-    \"graphql-code-generator\": \"0.8.14\",\n-    \"jasmine-core\": \"2.8.0\",\n+    \"@types/node\": \"8.9.5\",\n+    \"codelyzer\": \"4.2.1\",\n+    \"graphql-code-generator\": \"0.9.1\",\n+    \"graphql-codegen-typescript-template\": \"0.9.1\",\n+    \"jasmine-core\": \"2.99.1\",\n     \"jasmine-spec-reporter\": \"4.2.1\",\n-    \"karma\": \"2.0.0\",\n+    \"karma\": \"1.7.1\",\n     \"karma-chrome-launcher\": \"2.2.0\",\n-    \"karma-coverage-istanbul-reporter\": \"1.4.1\",\n-    \"karma-jasmine\": \"1.1.1\",\n+    \"karma-coverage-istanbul-reporter\": \"1.4.2\",\n+    \"karma-jasmine\": \"1.1.2\",\n     \"karma-jasmine-html-reporter\": \"0.2.2\",\n-    \"protractor\": \"5.1.2\",\n-    \"ts-node\": \"4.1.0\",\n+    \"protractor\": \"5.3.1\",\n+    \"ts-node\": \"5.0.1\",\n     \"tslint\": \"5.9.1\",\n-    \"typescript\": \"2.5.3\"\n+    \"typescript\": \"2.7.2\"\n   }\n }\ndiff --git a/client/package.json.orig b/client/package.json.orig\ndeleted file mode 100644\nindex e025965..0000000\n--- a/client/package.json.orig\n+++ /dev/null\n@@ -1,61 +0,0 @@\n-{\n-  \"name\": \"whatsapp-client-angularcli-material\",\n-  \"version\": \"0.0.0\",\n-  \"license\": \"MIT\",\n-  \"scripts\": {\n-    \"ng\": \"ng\",\n-    \"start\": \"ng serve\",\n-    \"build\": \"ng build --prod\",\n-    \"test\": \"ng test\",\n-    \"lint\": \"ng lint\",\n-    \"e2e\": \"ng e2e\"\n-  },\n-  \"private\": true,\n-  \"dependencies\": {\n-    \"@angular/animations\": \"5.2.5\",\n-    \"@angular/common\": \"5.2.5\",\n-    \"@angular/compiler\": \"5.2.5\",\n-    \"@angular/core\": \"5.2.5\",\n-    \"@angular/forms\": \"5.2.5\",\n-    \"@angular/http\": \"5.2.5\",\n-    \"@angular/platform-browser\": \"5.2.5\",\n-    \"@angular/platform-browser-dynamic\": \"5.2.5\",\n-    \"@angular/router\": \"5.2.5\",\n-    \"ajv\": \"6.1.1\",\n-    \"apollo-angular\": \"1.0.1\",\n-    \"apollo-angular-link-http\": \"1.0.2-beta.0\",\n-    \"apollo-cache-inmemory\": \"1.1.9\",\n-    \"apollo-client\": \"2.2.5\",\n-    \"apollo-link\": \"1.1.0\",\n-    \"core-js\": \"2.5.3\",\n-    \"graphql\": \"0.12.3\",\n-    \"graphql-tag\": \"2.7.3\",\n-    \"rxjs\": \"5.5.6\",\n-    \"zone.js\": \"0.8.20\"\n-  },\n-  \"devDependencies\": {\n-    \"@angular/cli\": \"1.7.0\",\n-    \"@angular/compiler-cli\": \"5.2.5\",\n-    \"@angular/language-service\": \"5.2.5\",\n-<<<<<<< HEAD\n-    \"@types/graphql\": \"^0.12.4\",\n-=======\n-    \"@types/graphql\": \"0.12.4\",\n->>>>>>> 48ac17b... Step 1.2: Add chats service\n-    \"@types/jasmine\": \"2.8.6\",\n-    \"@types/jasminewd2\": \"2.0.3\",\n-    \"@types/node\": \"6.0.101\",\n-    \"codelyzer\": \"4.1.0\",\n-    \"jasmine-core\": \"2.8.0\",\n-    \"jasmine-spec-reporter\": \"4.2.1\",\n-    \"karma\": \"2.0.0\",\n-    \"karma-chrome-launcher\": \"2.2.0\",\n-    \"karma-coverage-istanbul-reporter\": \"1.4.1\",\n-    \"karma-jasmine\": \"1.1.1\",\n-    \"karma-jasmine-html-reporter\": \"0.2.2\",\n-    \"protractor\": \"5.1.2\",\n-    \"ts-node\": \"4.1.0\",\n-    \"tslint\": \"5.9.1\",\n-    \"typescript\": \"2.5.3\"\n-  }\n-}\ndiff --git a/client/src/app/app.module.ts b/client/src/app/app.module.ts\nindex d81a15c..356b000 100644\n--- a/client/src/app/app.module.ts\n+++ b/client/src/app/app.module.ts\n@@ -1,7 +1,6 @@\n import { BrowserModule } from '@angular/platform-browser';\n import { NgModule } from '@angular/core';\n \n-\n import { AppComponent } from './app.component';\n import {HTTP_INTERCEPTORS, HttpClientModule} from '@angular/common/http';\n import {HttpLink, HttpLinkModule, Options} from 'apollo-angular-link-http';\n@@ -18,7 +17,6 @@ import {OperationDefinitionNode} from 'graphql';\n import {split} from 'apollo-link';\n import {WebSocketLink} from 'apollo-link-ws';\n import {LoginService} from './login/services/login.service';\n-\n const routes: Routes = [];\n \n @NgModule({\n@@ -44,7 +42,7 @@ const routes: Routes = [];\n       provide: HTTP_INTERCEPTORS,\n       useClass: AuthInterceptor,\n       multi: true,\n-    }\n+    },\n   ],\n   bootstrap: [AppComponent]\n })\n@@ -67,7 +65,7 @@ export class AppModule {\n \n     const link = split(\n       ({ query }) => {\n-        const { kind, operation } = <OperationDefinitionNode>getMainDefinition(query);\n+        const { kind, operation } = <OperationDefinitionNode>getMainDefinition(<any>query);\n         return kind === 'OperationDefinition' && operation === 'subscription';\n       },\n       subscriptionLink,\ndiff --git a/client/src/app/chat-viewer/chat-viewer.module.ts b/client/src/app/chat-viewer/chat-viewer.module.ts\nindex dac388a..030ee57 100644\n--- a/client/src/app/chat-viewer/chat-viewer.module.ts\n+++ b/client/src/app/chat-viewer/chat-viewer.module.ts\n@@ -11,7 +11,7 @@ import {MessagesListComponent} from './components/messages-list/messages-list.co\n import {MessageItemComponent} from './components/message-item/message-item.component';\n import {NewMessageComponent} from './components/new-message/new-message.component';\n import {SharedModule} from '../shared/shared.module';\n-import {SelectableListModule} from 'ngx-selectable-list';\n+import {NgxSelectableListModule} from 'ngx-selectable-list';\n import {AuthGuard} from '../login/services/auth.guard';\n \n const routes: Routes = [\n@@ -46,7 +46,7 @@ const routes: Routes = [\n     FormsModule,\n     // Feature modules\n     SharedModule,\n-    SelectableListModule,\n+    NgxSelectableListModule,\n   ],\n   providers: [\n     ChatsService,\ndiff --git a/client/src/app/chat-viewer/components/messages-list/messages-list.component.ts b/client/src/app/chat-viewer/components/messages-list/messages-list.component.ts\nindex f123280..c6bc667 100644\n--- a/client/src/app/chat-viewer/components/messages-list/messages-list.component.ts\n+++ b/client/src/app/chat-viewer/components/messages-list/messages-list.component.ts\n@@ -8,7 +8,7 @@ import {SelectableListDirective} from 'ngx-selectable-list';\n     <mat-list>\n       <mat-list-item *ngFor=\"let message of messages\">\n         <app-message-item [item]=\"message\" [isGroup]=\"isGroup\"\n-                          appSelectableItem></app-message-item>\n+                          libSelectableItem></app-message-item>\n       </mat-list-item>\n     </mat-list>\n     <ng-content *ngIf=\"selectableListDirective.selecting\"></ng-content>\ndiff --git a/client/src/app/chat-viewer/containers/chat/chat.component.spec.ts b/client/src/app/chat-viewer/containers/chat/chat.component.spec.ts\nindex 930cf89..1bef7f3 100644\n--- a/client/src/app/chat-viewer/containers/chat/chat.component.spec.ts\n+++ b/client/src/app/chat-viewer/containers/chat/chat.component.spec.ts\n@@ -10,14 +10,14 @@ import {HttpLink, HttpLinkModule, Options} from 'apollo-angular-link-http';\n import {defaultDataIdFromObject, InMemoryCache} from 'apollo-cache-inmemory';\n import {RouterTestingModule} from '@angular/router/testing';\n import {ActivatedRoute} from '@angular/router';\n-import {of} from 'rxjs/observable/of';\n+import {of} from 'rxjs';\n import {By} from '@angular/platform-browser';\n import {FormsModule} from '@angular/forms';\n import {SharedModule} from '../../../shared/shared.module';\n import {NewMessageComponent} from '../../components/new-message/new-message.component';\n import {MessagesListComponent} from '../../components/messages-list/messages-list.component';\n import {MessageItemComponent} from '../../components/message-item/message-item.component';\n-import {SelectableListModule} from 'ngx-selectable-list';\n+import {NgxSelectableListModule} from 'ngx-selectable-list';\n import {LoginService} from '../../../login/services/login.service';\n \n describe('ChatComponent', () => {\n@@ -110,7 +110,7 @@ describe('ChatComponent', () => {\n         HttpLinkModule,\n         HttpClientTestingModule,\n         RouterTestingModule,\n-        SelectableListModule,\n+        NgxSelectableListModule,\n       ],\n       providers: [\n         ChatsService,\ndiff --git a/client/src/app/chat-viewer/containers/chat/chat.component.ts b/client/src/app/chat-viewer/containers/chat/chat.component.ts\nindex a8be4f1..9c48c14 100644\n--- a/client/src/app/chat-viewer/containers/chat/chat.component.ts\n+++ b/client/src/app/chat-viewer/containers/chat/chat.component.ts\n@@ -2,8 +2,9 @@ import {Component, OnInit} from '@angular/core';\n import {ActivatedRoute, Router} from '@angular/router';\n import {ChatsService} from '../../../services/chats.service';\n import {GetChat} from '../../../../types';\n-import {combineLatest} from 'rxjs/observable/combineLatest';\n+import {combineLatest} from 'rxjs';\n import {Location} from '@angular/common';\n+import {QueryRef} from 'apollo-angular';\n \n @Component({\n   template: `\n@@ -15,7 +16,7 @@ import {Location} from '@angular/common';\n     </app-toolbar>\n     <div class=\"container\">\n       <app-messages-list [items]=\"messages\" [isGroup]=\"isGroup\"\n-                         appSelectableList=\"multiple_press\" (multiple)=\"deleteMessages($event)\">\n+                         libSelectableList=\"multiple_press\" (multiple)=\"deleteMessages($event)\">\n         <app-confirm-selection #confirmSelection></app-confirm-selection>\n       </app-messages-list>\n       <app-new-message (newMessage)=\"addMessage($event)\"></app-new-message>\n@@ -29,6 +30,7 @@ export class ChatComponent implements OnInit {\n   name: string;\n   isGroup: boolean;\n   optimisticUI: boolean;\n+  query: QueryRef<GetChat.Query>;\n \n   constructor(private route: ActivatedRoute,\n               private router: Router,\n@@ -56,8 +58,12 @@ export class ChatComponent implements OnInit {\n           });\n         }\n \n-        this.chatsService.getChat(chatId, this.optimisticUI).chat$.subscribe(chat => {\n-          this.messages = chat.messages;\n+        const {query$, chat$} = this.chatsService.getChat(chatId, this.optimisticUI);\n+\n+        query$.subscribe(query => this.query = query);\n+\n+        chat$.subscribe(chat => {\n+          this.messages = chat.messageFeed.messages;\n           this.name = chat.name;\n           this.isGroup = chat.isGroup;\n         });\n@@ -69,7 +75,8 @@ export class ChatComponent implements OnInit {\n   }\n \n   addMessage(content: string) {\n-    this.chatsService.addMessage(this.chatId, content).subscribe();\n+    // this.chatsService.addMessage(this.chatId, content).subscribe();\n+    this.chatsService.moreMessages(this.query, this.chatId);\n   }\n \n   deleteMessages(messageIds: string[]) {\ndiff --git a/client/src/app/chats-creation/chats-creation.module.ts b/client/src/app/chats-creation/chats-creation.module.ts\nindex f8a9754..0504e39 100644\n--- a/client/src/app/chats-creation/chats-creation.module.ts\n+++ b/client/src/app/chats-creation/chats-creation.module.ts\n@@ -15,7 +15,7 @@ import {NewGroupComponent} from './containers/new-group/new-group.component';\n import {NewChatComponent} from './containers/new-chat/new-chat.component';\n import {NewGroupDetailsComponent} from './components/new-group-details/new-group-details.component';\n import {SharedModule} from '../shared/shared.module';\n-import {SelectableListModule} from 'ngx-selectable-list';\n+import {NgxSelectableListModule} from 'ngx-selectable-list';\n import {AuthGuard} from '../login/services/auth.guard';\n \n const routes: Routes = [\n@@ -50,7 +50,7 @@ const routes: Routes = [\n     // Forms\n     FormsModule,\n     // Feature modules\n-    SelectableListModule,\n+    NgxSelectableListModule,\n     SharedModule,\n   ],\n   providers: [\ndiff --git a/client/src/app/chats-creation/components/users-list/users-list.component.ts b/client/src/app/chats-creation/components/users-list/users-list.component.ts\nindex 96d5421..c01a8f8 100644\n--- a/client/src/app/chats-creation/components/users-list/users-list.component.ts\n+++ b/client/src/app/chats-creation/components/users-list/users-list.component.ts\n@@ -8,7 +8,7 @@ import {SelectableListDirective} from 'ngx-selectable-list';\n     <mat-list>\n       <mat-list-item *ngFor=\"let user of users\">\n         <app-user-item [item]=\"user\"\n-                       appSelectableItem></app-user-item>\n+                       libSelectableItem></app-user-item>\n       </mat-list-item>\n     </mat-list>\n     <ng-content *ngIf=\"selectableListDirective.selecting\"></ng-content>\ndiff --git a/client/src/app/chats-creation/containers/new-chat/new-chat.component.ts b/client/src/app/chats-creation/containers/new-chat/new-chat.component.ts\nindex 91820c8..1559ee1 100644\n--- a/client/src/app/chats-creation/containers/new-chat/new-chat.component.ts\n+++ b/client/src/app/chats-creation/containers/new-chat/new-chat.component.ts\n@@ -21,7 +21,7 @@ import {ChatsService} from '../../../services/chats.service';\n     </div>\n \n     <app-users-list [items]=\"users\"\n-                    appSelectableList=\"single\" (single)=\"addChat($event)\">\n+                    libSelectableList=\"single\" (single)=\"addChat($event)\">\n     </app-users-list>\n   `,\n   styleUrls: ['new-chat.component.scss'],\ndiff --git a/client/src/app/chats-creation/containers/new-group/new-group.component.ts b/client/src/app/chats-creation/containers/new-group/new-group.component.ts\nindex 19e9fb9..93586cd 100644\n--- a/client/src/app/chats-creation/containers/new-group/new-group.component.ts\n+++ b/client/src/app/chats-creation/containers/new-group/new-group.component.ts\n@@ -14,7 +14,7 @@ import {ChatsService} from '../../../services/chats.service';\n     </app-toolbar>\n \n     <app-users-list *ngIf=\"!recipientIds.length\" [items]=\"users\"\n-                    appSelectableList=\"multiple_tap\" (multiple)=\"selectUsers($event)\">\n+                    libSelectableList=\"multiple_tap\" (multiple)=\"selectUsers($event)\">\n       <app-confirm-selection #confirmSelection icon=\"arrow_forward\"></app-confirm-selection>\n     </app-users-list>\n     <app-new-group-details *ngIf=\"recipientIds.length\" [users]=\"getSelectedUsers()\"\ndiff --git a/client/src/app/chats-lister/chats-lister.module.ts b/client/src/app/chats-lister/chats-lister.module.ts\nindex 0e86163..714ccce 100644\n--- a/client/src/app/chats-lister/chats-lister.module.ts\n+++ b/client/src/app/chats-lister/chats-lister.module.ts\n@@ -11,7 +11,7 @@ import {ChatsComponent} from './containers/chats/chats.component';\n import {ChatsListComponent} from './components/chats-list/chats-list.component';\n import {TruncateModule} from 'ng2-truncate';\n import {SharedModule} from '../shared/shared.module';\n-import {SelectableListModule} from 'ngx-selectable-list';\n+import {NgxSelectableListModule} from 'ngx-selectable-list';\n import {AuthGuard} from '../login/services/auth.guard';\n \n const routes: Routes = [\n@@ -42,7 +42,7 @@ const routes: Routes = [\n     TruncateModule,\n     // Feature modules\n     SharedModule,\n-    SelectableListModule,\n+    NgxSelectableListModule,\n   ],\n   providers: [\n     ChatsService,\ndiff --git a/client/src/app/chats-lister/components/chat-item/chat-item.component.ts b/client/src/app/chats-lister/components/chat-item/chat-item.component.ts\nindex afd5b1d..dae6050 100644\n--- a/client/src/app/chats-lister/components/chat-item/chat-item.component.ts\n+++ b/client/src/app/chats-lister/components/chat-item/chat-item.component.ts\n@@ -9,7 +9,9 @@ import {GetChats} from '../../../../types';\n           <img *ngIf=\"chat.picture\" [src]=\"chat.picture\" width=\"48\" height=\"48\">\n           <div>{{ chat.name }} [id: {{ chat.id }}]</div>\n         </div>\n-        <div class=\"chat-content\">{{ chat.messages[chat.messages.length - 1]?.content | truncate : 20 : '...' }}</div>\n+        <div class=\"chat-content\">\n+          {{ chat.messageFeed.messages[chat.messageFeed.messages.length - 1]?.content | truncate : 20 : '...' }}\n+        </div>\n     </div>\n   `,\n   styleUrls: ['chat-item.component.scss'],\ndiff --git a/client/src/app/chats-lister/components/chats-list/chats-list.component.ts b/client/src/app/chats-lister/components/chats-list/chats-list.component.ts\nindex 161d07c..0a13405 100644\n--- a/client/src/app/chats-lister/components/chats-list/chats-list.component.ts\n+++ b/client/src/app/chats-lister/components/chats-list/chats-list.component.ts\n@@ -8,7 +8,7 @@ import {SelectableListDirective} from 'ngx-selectable-list';\n     <mat-list>\n       <mat-list-item *ngFor=\"let chat of chats\">\n         <app-chat-item [item]=\"chat\"\n-                       appSelectableItem></app-chat-item>\n+                       libSelectableItem></app-chat-item>\n       </mat-list-item>\n     </mat-list>\n     <ng-content *ngIf=\"selectableListDirective.selecting\"></ng-content>\ndiff --git a/client/src/app/chats-lister/containers/chats/chats.component.spec.ts b/client/src/app/chats-lister/containers/chats/chats.component.spec.ts\nindex 0377385..e7835d0 100644\n--- a/client/src/app/chats-lister/containers/chats/chats.component.spec.ts\n+++ b/client/src/app/chats-lister/containers/chats/chats.component.spec.ts\n@@ -13,7 +13,7 @@ import {HttpLink, HttpLinkModule, Options} from 'apollo-angular-link-http';\n import {defaultDataIdFromObject, InMemoryCache} from 'apollo-cache-inmemory';\n import {By} from '@angular/platform-browser';\n import {RouterTestingModule} from '@angular/router/testing';\n-import {SelectableListModule} from 'ngx-selectable-list';\n+import {NgxSelectableListModule} from 'ngx-selectable-list';\n import {LoginService} from '../../../login/services/login.service';\n \n describe('ChatsComponent', () => {\n@@ -332,7 +332,7 @@ describe('ChatsComponent', () => {\n         HttpLinkModule,\n         HttpClientTestingModule,\n         RouterTestingModule,\n-        SelectableListModule,\n+        NgxSelectableListModule,\n       ],\n       providers: [\n         ChatsService,\ndiff --git a/client/src/app/chats-lister/containers/chats/chats.component.ts b/client/src/app/chats-lister/containers/chats/chats.component.ts\nindex 69ce46c..6f78b4a 100644\n--- a/client/src/app/chats-lister/containers/chats/chats.component.ts\n+++ b/client/src/app/chats-lister/containers/chats/chats.component.ts\n@@ -1,6 +1,6 @@\n import {Component, OnInit} from '@angular/core';\n import {ChatsService} from '../../../services/chats.service';\n-import {Observable} from 'rxjs/Observable';\n+import {Observable} from 'rxjs';\n import {GetChats} from '../../../../types';\n import {Router} from '@angular/router';\n \n@@ -29,7 +29,7 @@ import {Router} from '@angular/router';\n     </mat-menu>\n \n     <app-chats-list [items]=\"chats$ | async\"\n-                    appSelectableList=\"both\"\n+                    libSelectableList=\"both\"\n                     (single)=\"goToChat($event)\" (multiple)=\"deleteChats($event)\" (isSelecting)=\"isSelecting = $event\">\n       <app-confirm-selection #confirmSelection></app-confirm-selection>\n     </app-chats-list>\ndiff --git a/client/src/app/login/services/auth.interceptor.ts b/client/src/app/login/services/auth.interceptor.ts\nindex c0dc097..9f374dd 100644\n--- a/client/src/app/login/services/auth.interceptor.ts\n+++ b/client/src/app/login/services/auth.interceptor.ts\n@@ -1,6 +1,6 @@\n import {Injectable} from '@angular/core';\n import {HttpEvent, HttpHandler, HttpInterceptor, HttpRequest} from '@angular/common/http';\n-import {Observable} from 'rxjs/Observable';\n+import {Observable} from 'rxjs';\n import {LoginService} from './login.service';\n \n @Injectable()\ndiff --git a/client/src/app/services/chats.service.ts b/client/src/app/services/chats.service.ts\nindex 6bd09bd..1c737bc 100644\n--- a/client/src/app/services/chats.service.ts\n+++ b/client/src/app/services/chats.service.ts\n@@ -1,10 +1,10 @@\n-import {ApolloQueryResult, MutationOptions, WatchQueryOptions} from 'apollo-client';\n+import {ApolloQueryResult, FetchMoreOptions, FetchMoreQueryOptions, MutationOptions, WatchQueryOptions} from 'apollo-client';\n import {concat, map, share, switchMap} from 'rxjs/operators';\n import {Apollo, QueryRef} from 'apollo-angular';\n import {Injectable} from '@angular/core';\n import {getChatsQuery} from '../../graphql/getChats.query';\n import {\n-  AddChat, AddGroup, AddMessage, GetChat, GetChats, GetUsers, MessageAdded, RemoveAllMessages, RemoveChat,\n+  AddChat, AddGroup, AddMessage, GetChat, GetChats, GetUsers, MessageAdded, MoreMessages, RemoveAllMessages, RemoveChat,\n   RemoveMessages\n } from '../../types';\n import {getChatQuery} from '../../graphql/getChat.query';\n@@ -14,20 +14,20 @@ import {DocumentNode} from 'graphql';\n import {removeAllMessagesMutation} from '../../graphql/removeAllMessages.mutation';\n import {removeMessagesMutation} from '../../graphql/removeMessages.mutation';\n import {getUsersQuery} from '../../graphql/getUsers.query';\n-import {Observable} from 'rxjs/Observable';\n+import {Observable, AsyncSubject, of} from 'rxjs';\n import {addChatMutation} from '../../graphql/addChat.mutation';\n import {addGroupMutation} from '../../graphql/addGroup.mutation';\n import * as moment from 'moment';\n-import {AsyncSubject} from 'rxjs/AsyncSubject';\n-import {of} from 'rxjs/observable/of';\n import {FetchResult} from 'apollo-link';\n import {LoginService} from '../login/services/login.service';\n import {chatAddedSubscription} from '../../graphql/chatAdded.subscription';\n import {messageAddedSubscription} from '../../graphql/messageAdded.subscription';\n+import {moreMessagesQuery} from '../../graphql/moreMessages.query';\n \n @Injectable()\n export class ChatsService {\n-  messagesAmount = 3;\n+  chatsMessagesAmount = 2;\n+  chatMessagesAmount = 5;\n   getChatsWq: QueryRef<GetChats.Query>;\n   chats$: Observable<GetChats.Chats[]>;\n   chats: GetChats.Chats[];\n@@ -39,12 +39,15 @@ export class ChatsService {\n     this.getChatsWq = this.apollo.watchQuery<GetChats.Query>(<WatchQueryOptions>{\n       query: getChatsQuery,\n       variables: {\n-        amount: this.messagesAmount,\n+        amount: this.chatsMessagesAmount,\n       },\n     });\n \n     this.getChatsWq.subscribeToMore({\n       document: chatAddedSubscription,\n+      variables: {\n+        amount: this.chatsMessagesAmount,\n+      },\n       updateQuery: (prev: GetChats.Query, { subscriptionData }) => {\n         if (!subscriptionData.data) {\n           return prev;\n@@ -73,20 +76,25 @@ export class ChatsService {\n           const {chat}: GetChat.Query = this.apollo.getClient().readQuery({\n             query: getChatQuery, variables: {\n               chatId: newMessage.chat.id,\n+              amount: this.chatMessagesAmount,\n             }\n           });\n \n           // Add our message from the mutation to the end.\n-          chat.messages.push(newMessage);\n+          chat.messageFeed.messages.push(newMessage);\n           // Write our data back to the cache.\n-          this.apollo.getClient().writeQuery({ query: getChatQuery, data: {chat} });\n+          this.apollo.getClient().writeQuery({\n+            query: getChatQuery,\n+            variables: {chatId: newMessage.chat.id, amount: this.chatMessagesAmount},\n+            data: {chat} });\n         } catch {\n           console.error('The chat we received an update for does not exist in the store');\n         }\n \n         return Object.assign({}, prev, {\n-          chats: [...prev.chats.map(_chat =>\n-            _chat.id === newMessage.chat.id ? {..._chat, messages: [..._chat.messages, newMessage]} : _chat)]\n+          chats: [...prev.chats.map(chat => chat.id === newMessage.chat.id ? {\n+            ...chat, messageFeed: {...chat.messageFeed, messages: [...chat.messageFeed.messages, newMessage]}\n+          } : chat)]\n         });\n       }\n     });\n@@ -105,7 +113,7 @@ export class ChatsService {\n     return {query: this.getChatsWq, chats$: this.chats$};\n   }\n \n-  getChat(chatId: string, oui?: boolean) {\n+  getChat(chatId: string, oui?: boolean, amount?: number) {\n     const _chat = this.chats && this.chats.find(chat => chat.id === chatId) || {\n       id: chatId,\n       name: '',\n@@ -113,7 +121,11 @@ export class ChatsService {\n       allTimeMembers: [],\n       unreadMessages: 0,\n       isGroup: false,\n-      messages: [],\n+      messageFeed: {\n+        hasNextPage: false,\n+        cursor: null,\n+        messages: [],\n+      },\n     };\n     const chat$FromCache = of<GetChat.Chat>(_chat);\n \n@@ -122,6 +134,7 @@ export class ChatsService {\n         query: getChatQuery,\n         variables: {\n           chatId: id,\n+          amount: this.chatMessagesAmount,\n         }\n       });\n     };\n@@ -154,6 +167,34 @@ export class ChatsService {\n     return {query$: this.getChatWqSubject.asObservable(), chat$};\n   }\n \n+  moreMessages(query: QueryRef<GetChat.Query>, chatId: string) {\n+    const {data: {chat: {messageFeed}}} = query.getLastResult();\n+    if (messageFeed.hasNextPage) {\n+      query.fetchMore({\n+        query: moreMessagesQuery,\n+        variables: {\n+          chatId,\n+          amount: this.chatMessagesAmount,\n+          before: messageFeed.cursor,\n+        },\n+        updateQuery: (previousResult: GetChat.Query, { fetchMoreResult }) => {\n+          return {\n+            chat: {\n+              ...previousResult.chat,\n+              messageFeed: {\n+                ...fetchMoreResult.chat.messageFeed,\n+                messages: [\n+                  ...fetchMoreResult.chat.messageFeed.messages,\n+                  ...previousResult.chat.messageFeed.messages,\n+                ],\n+              },\n+            },\n+          };\n+        },\n+      });\n+    }\n+  }\n+\n   addMessage(chatId: string, content: string) {\n     return this.apollo.mutate(<MutationOptions>{\n       mutation: addMessageMutation,\n@@ -166,14 +207,17 @@ export class ChatsService {\n         addMessage: {\n           id: ChatsService.getRandomId(),\n           __typename: 'Message',\n-          senderId: this.loginService.getUser().id,\n+          chat: {\n+            id: chatId,\n+            __typename: 'Chat',\n+          },\n           sender: {\n             id: this.loginService.getUser().id,\n             __typename: 'User',\n             name: this.loginService.getUser().name,\n           },\n           content,\n-          createdAt: moment().unix(),\n+          createdAt: new Date(),\n           type: 0,\n           recipients: [],\n           ownership: true,\n@@ -186,12 +230,13 @@ export class ChatsService {\n           const {chat}: GetChat.Query = store.readQuery({\n             query: getChatQuery, variables: {\n               chatId,\n+              amount: this.chatMessagesAmount,\n             }\n           });\n           // Add our message from the mutation to the end.\n-          chat.messages.push(addMessage);\n+          chat.messageFeed.messages.push(addMessage);\n           // Write our data back to the cache.\n-          store.writeQuery({ query: getChatQuery, data: {chat} });\n+          store.writeQuery({ query: getChatQuery, variables: {chatId, amount: this.chatMessagesAmount}, data: {chat} });\n         }\n         // Update last message cache\n         {\n@@ -199,16 +244,16 @@ export class ChatsService {\n           const {chats}: GetChats.Query = store.readQuery({\n             query: getChatsQuery,\n             variables: <GetChats.Variables>{\n-              amount: this.messagesAmount,\n+              amount: this.chatsMessagesAmount,\n             },\n           });\n           // Add our comment from the mutation to the end.\n-          chats.find(chat => chat.id === chatId).messages.push(addMessage);\n+          chats.find(chat => chat.id === chatId).messageFeed.messages.push(addMessage);\n           // Write our data back to the cache.\n           store.writeQuery({\n             query: getChatsQuery,\n             variables: <GetChats.Variables>{\n-              amount: this.messagesAmount,\n+              amount: this.chatsMessagesAmount,\n             },\n             data: {\n               chats,\n@@ -234,7 +279,7 @@ export class ChatsService {\n         const {chats}: GetChats.Query = store.readQuery({\n           query: getChatsQuery,\n           variables: <GetChats.Variables>{\n-            amount: this.messagesAmount,\n+            amount: this.chatsMessagesAmount,\n           },\n         });\n         // Remove the chat (mutable)\n@@ -247,7 +292,7 @@ export class ChatsService {\n         store.writeQuery({\n           query: getChatsQuery,\n           variables: <GetChats.Variables>{\n-            amount: this.messagesAmount,\n+            amount: this.chatsMessagesAmount,\n           },\n           data: {\n             chats,\n@@ -286,18 +331,19 @@ export class ChatsService {\n           const {chat}: GetChat.Query = store.readQuery({\n             query: getChatQuery, variables: {\n               chatId,\n+              amount: this.chatMessagesAmount,\n             }\n           });\n           // Remove the messages (mutable)\n           removeMessages.forEach(messageId => {\n-            for (const index of chat.messages.keys()) {\n-              if (chat.messages[index].id === messageId) {\n-                chat.messages.splice(index, 1);\n+            for (const index of chat.messageFeed.messages.keys()) {\n+              if (chat.messageFeed.messages[index].id === messageId) {\n+                chat.messageFeed.messages.splice(index, 1);\n               }\n             }\n           });\n           // Write our data back to the cache.\n-          store.writeQuery({ query: getChatQuery, data: {chat} });\n+          store.writeQuery({ query: getChatQuery, variables: {chatId, amount: this.chatMessagesAmount}, data: {chat} });\n         }\n         // Update last message cache\n         {\n@@ -305,18 +351,18 @@ export class ChatsService {\n           const {chats}: GetChats.Query = store.readQuery({\n             query: getChatsQuery,\n             variables: <GetChats.Variables>{\n-              amount: this.messagesAmount,\n+              amount: this.chatsMessagesAmount,\n             },\n           });\n           // Fix last message\n-          chats.find(chat => chat.id === chatId).messages = messages\n+          chats.find(chat => chat.id === chatId).messageFeed.messages = messages\n             .filter(message => !ids.includes(message.id))\n             .sort((a, b) => Number(b.createdAt) - Number(a.createdAt)) || [];\n           // Write our data back to the cache.\n           store.writeQuery({\n             query: getChatsQuery,\n             variables: <GetChats.Variables>{\n-              amount: this.messagesAmount,\n+              amount: this.chatsMessagesAmount,\n             },\n             data: {\n               chats,\n@@ -371,7 +417,12 @@ export class ChatsService {\n             }\n           ],\n           unreadMessages: 0,\n-          messages: [],\n+          messageFeed: {\n+            __typename: 'MessageFeed',\n+            hasNextPage: false,\n+            cursor: null,\n+            messages: [],\n+          },\n           isGroup: false,\n         },\n       },\n@@ -380,7 +431,7 @@ export class ChatsService {\n         const {chats}: GetChats.Query = store.readQuery({\n           query: getChatsQuery,\n           variables: <GetChats.Variables>{\n-            amount: this.messagesAmount,\n+            amount: this.chatsMessagesAmount,\n           },\n         });\n         // Add our comment from the mutation to the end.\n@@ -389,7 +440,7 @@ export class ChatsService {\n         store.writeQuery({\n           query: getChatsQuery,\n           variables: <GetChats.Variables>{\n-            amount: this.messagesAmount,\n+            amount: this.chatsMessagesAmount,\n           },\n           data: {\n             chats,\n@@ -423,7 +474,12 @@ export class ChatsService {\n             ...recipientIds.map(id => ({id, __typename: 'User'})),\n           ],\n           unreadMessages: 0,\n-          messages: [],\n+          messageFeed: {\n+            __typename: 'MessageFeed',\n+            hasNextPage: false,\n+            cursor: null,\n+            messages: [],\n+          },\n           isGroup: true,\n         },\n       },\n@@ -432,7 +488,7 @@ export class ChatsService {\n         const {chats}: GetChats.Query = store.readQuery({\n           query: getChatsQuery,\n           variables: <GetChats.Variables>{\n-            amount: this.messagesAmount,\n+            amount: this.chatsMessagesAmount,\n           },\n         });\n         // Add our comment from the mutation to the end.\n@@ -441,7 +497,7 @@ export class ChatsService {\n         store.writeQuery({\n           query: getChatsQuery,\n           variables: <GetChats.Variables>{\n-            amount: this.messagesAmount,\n+            amount: this.chatsMessagesAmount,\n           },\n           data: {\n             chats,\ndiff --git a/client/src/browserslist b/client/src/browserslist\nnew file mode 100644\nindex 0000000..8e09ab4\n--- /dev/null\n+++ b/client/src/browserslist\n@@ -0,0 +1,9 @@\n+# This file is currently used by autoprefixer to adjust CSS to support the below specified browsers\n+# For additional information regarding the format and rule options, please see:\n+# https://github.com/browserslist/browserslist#queries\n+# For IE 9-11 support, please uncomment the last line of the file and adjust as needed\n+> 0.5%\n+last 2 versions\n+Firefox ESR\n+not dead\n+# IE 9-11\n\\ No newline at end of file\ndiff --git a/client/src/environments/environment.ts b/client/src/environments/environment.ts\nindex b7f639a..012182e 100644\n--- a/client/src/environments/environment.ts\n+++ b/client/src/environments/environment.ts\n@@ -1,8 +1,15 @@\n-// The file contents for the current environment will overwrite these during build.\n-// The build system defaults to the dev environment which uses `environment.ts`, but if you do\n-// `ng build --env=prod` then `environment.prod.ts` will be used instead.\n-// The list of which env maps to which file can be found in `.angular-cli.json`.\n+// This file can be replaced during build by using the `fileReplacements` array.\n+// `ng build ---prod` replaces `environment.ts` with `environment.prod.ts`.\n+// The list of file replacements can be found in `angular.json`.\n \n export const environment = {\n   production: false\n };\n+\n+/*\n+ * In development mode, to ignore zone related error stack frames such as\n+ * `zone.run`, `zoneDelegate.invokeTask` for easier debugging, you can\n+ * import the following file, but please comment it out in production mode\n+ * because it will have performance impact when throw error\n+ */\n+// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\ndiff --git a/client/src/graphql/addChat.mutation.ts b/client/src/graphql/addChat.mutation.ts\nindex cf33eba..3e4da4c 100644\n--- a/client/src/graphql/addChat.mutation.ts\n+++ b/client/src/graphql/addChat.mutation.ts\n@@ -6,8 +6,12 @@ export const addChatMutation = gql`\n   mutation AddChat($recipientId: ID!) {\n     addChat(recipientId: $recipientId) {\n       ...ChatWithoutMessages\n-      messages {\n-        ...Message\n+      messageFeed {\n+        hasNextPage,\n+        cursor,\n+        messages {\n+          ...Message\n+        }\n       }\n     }\n   }\ndiff --git a/client/src/graphql/addGroup.mutation.ts b/client/src/graphql/addGroup.mutation.ts\nindex 8fb2362..07eeb21 100644\n--- a/client/src/graphql/addGroup.mutation.ts\n+++ b/client/src/graphql/addGroup.mutation.ts\n@@ -6,8 +6,12 @@ export const addGroupMutation = gql`\n   mutation AddGroup($recipientIds: [ID!]!, $groupName: String!) {\n     addGroup(recipientIds: $recipientIds, groupName: $groupName) {\n       ...ChatWithoutMessages\n-      messages {\n-        ...Message\n+      messageFeed {\n+        hasNextPage,\n+        cursor,\n+        messages {\n+          ...Message\n+        }\n       }\n     }\n   }\ndiff --git a/client/src/graphql/chatAdded.subscription.ts b/client/src/graphql/chatAdded.subscription.ts\nindex 9f6afe5..e6f194d 100644\n--- a/client/src/graphql/chatAdded.subscription.ts\n+++ b/client/src/graphql/chatAdded.subscription.ts\n@@ -3,11 +3,15 @@ import {fragments} from './fragment';\n \n // We use the gql tag to parse our query string into a query document\n export const chatAddedSubscription = gql`\n-  subscription chatAdded {\n+  subscription chatAdded($amount: Int!) {\n     chatAdded {\n       ...ChatWithoutMessages\n-      messages {\n-        ...Message\n+      messageFeed(amount: $amount) {\n+        hasNextPage,\n+        cursor,\n+        messages {\n+          ...Message\n+        }\n       }\n     }\n   }\ndiff --git a/client/src/graphql/getChat.query.ts b/client/src/graphql/getChat.query.ts\nindex 621c4b9..5386633 100644\n--- a/client/src/graphql/getChat.query.ts\n+++ b/client/src/graphql/getChat.query.ts\n@@ -3,11 +3,15 @@ import {fragments} from './fragment';\n \n // We use the gql tag to parse our query string into a query document\n export const getChatQuery = gql`\n-  query GetChat($chatId: ID!) {\n+  query GetChat($chatId: ID!, $amount: Int!) {\n     chat(chatId: $chatId) {\n       ...ChatWithoutMessages\n-      messages {\n-        ...Message\n+      messageFeed(amount: $amount) {\n+        hasNextPage,\n+        cursor,\n+        messages {\n+          ...Message\n+        }\n       }\n     }\n   }\ndiff --git a/client/src/graphql/getChats.query.ts b/client/src/graphql/getChats.query.ts\nindex 44e6d96..127a70d 100644\n--- a/client/src/graphql/getChats.query.ts\n+++ b/client/src/graphql/getChats.query.ts\n@@ -3,11 +3,15 @@ import {fragments} from './fragment';\n \n // We use the gql tag to parse our query string into a query document\n export const getChatsQuery = gql`\n-  query GetChats($amount: Int) {\n+  query GetChats($amount: Int!) {\n     chats {\n       ...ChatWithoutMessages\n-      messages(amount: $amount) {\n-        ...Message\n+      messageFeed(amount: $amount) {\n+        hasNextPage,\n+        cursor,\n+        messages {\n+          ...Message\n+        }\n       }\n     }\n   }\ndiff --git a/client/src/graphql/moreMessages.query.ts b/client/src/graphql/moreMessages.query.ts\nnew file mode 100644\nindex 0000000..369d028\n--- /dev/null\n+++ b/client/src/graphql/moreMessages.query.ts\n@@ -0,0 +1,19 @@\n+import gql from 'graphql-tag';\n+import {fragments} from './fragment';\n+\n+// We use the gql tag to parse our query string into a query document\n+export const moreMessagesQuery = gql`\n+  query MoreMessages($chatId: ID!, $amount: Int!, $before: String!) {\n+    chat(chatId: $chatId) {\n+      messageFeed(amount: $amount, before: $before) {\n+        hasNextPage,\n+        cursor,\n+        messages {\n+          ...Message\n+        }\n+      }\n+    }\n+  }\n+\n+  ${fragments['message']}\n+`;\ndiff --git a/client/karma.conf.js b/client/src/karma.conf.js\nsimilarity index 76%\nrename from client/karma.conf.js\nrename to client/src/karma.conf.js\nindex 68c2f7c..aa9f74a 100644\n--- a/client/karma.conf.js\n+++ b/client/src/karma.conf.js\n@@ -4,24 +4,22 @@\n module.exports = function (config) {\n   config.set({\n     basePath: '',\n-    frameworks: ['jasmine', '@angular/cli'],\n+    frameworks: ['jasmine', '@angular-devkit/build-angular'],\n     plugins: [\n       require('karma-jasmine'),\n       require('karma-chrome-launcher'),\n       require('karma-jasmine-html-reporter'),\n       require('karma-coverage-istanbul-reporter'),\n-      require('@angular/cli/plugins/karma')\n+      require('@angular-devkit/build-angular/plugins/karma')\n     ],\n-    client:{\n+    client: {\n       clearContext: false // leave Jasmine Spec Runner output visible in browser\n     },\n     coverageIstanbulReporter: {\n-      reports: [ 'html', 'lcovonly' ],\n+      dir: require('path').join(__dirname, '../coverage'),\n+      reports: ['html', 'lcovonly'],\n       fixWebpackSourcePaths: true\n     },\n-    angularCli: {\n-      environment: 'dev'\n-    },\n     reporters: ['progress', 'kjhtml'],\n     port: 9876,\n     colors: true,\ndiff --git a/client/src/polyfills.ts b/client/src/polyfills.ts\nindex af84770..d310405 100644\n--- a/client/src/polyfills.ts\n+++ b/client/src/polyfills.ts\n@@ -47,8 +47,9 @@ import 'core-js/es7/reflect';\n \n \n /**\n- * Required to support Web Animations `@angular/platform-browser/animations`.\n- * Needed for: All but Chrome, Firefox and Opera. http://caniuse.com/#feat=web-animation\n+ * Web Animations `@angular/platform-browser/animations`\n+ * Only required if AnimationBuilder is used within the application and using IE/Edge or Safari.\n+ * Standard animation support in Angular DOES NOT require any polyfills (as of Angular 6.0).\n  **/\n // import 'web-animations-js';  // Run `npm install --save web-animations-js`.\n \ndiff --git a/client/src/tsconfig.app.json b/client/src/tsconfig.app.json\nindex 39ba8db..722c370 100644\n--- a/client/src/tsconfig.app.json\n+++ b/client/src/tsconfig.app.json\n@@ -2,12 +2,11 @@\n   \"extends\": \"../tsconfig.json\",\n   \"compilerOptions\": {\n     \"outDir\": \"../out-tsc/app\",\n-    \"baseUrl\": \"./\",\n     \"module\": \"es2015\",\n     \"types\": []\n   },\n   \"exclude\": [\n-    \"test.ts\",\n+    \"src/test.ts\",\n     \"**/*.spec.ts\"\n   ]\n }\ndiff --git a/client/src/tsconfig.spec.json b/client/src/tsconfig.spec.json\nindex ac22a29..8f7cede 100644\n--- a/client/src/tsconfig.spec.json\n+++ b/client/src/tsconfig.spec.json\n@@ -2,7 +2,6 @@\n   \"extends\": \"../tsconfig.json\",\n   \"compilerOptions\": {\n     \"outDir\": \"../out-tsc/spec\",\n-    \"baseUrl\": \"./\",\n     \"module\": \"commonjs\",\n     \"types\": [\n       \"jasmine\",\n@@ -10,7 +9,8 @@\n     ]\n   },\n   \"files\": [\n-    \"test.ts\"\n+    \"test.ts\",\n+    \"polyfills.ts\"\n   ],\n   \"include\": [\n     \"**/*.spec.ts\",\ndiff --git a/client/src/tslint.json b/client/src/tslint.json\nnew file mode 100644\nindex 0000000..52e2c1a\n--- /dev/null\n+++ b/client/src/tslint.json\n@@ -0,0 +1,17 @@\n+{\n+    \"extends\": \"../tslint.json\",\n+    \"rules\": {\n+        \"directive-selector\": [\n+            true,\n+            \"attribute\",\n+            \"app\",\n+            \"camelCase\"\n+        ],\n+        \"component-selector\": [\n+            true,\n+            \"element\",\n+            \"app\",\n+            \"kebab-case\"\n+        ]\n+    }\n+}\ndiff --git a/client/src/types.d.ts b/client/src/types.d.ts\nindex b1986ca..b4b3c22 100644\n--- a/client/src/types.d.ts\n+++ b/client/src/types.d.ts\n@@ -1,321 +1,446 @@\n /* tslint:disable */\n \n+/** A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar. */\n+export type DateTime = any;\n+\n export interface Query {\n-  users: User[]; \n-  chats: Chat[]; \n-  chat?: Chat | null; \n+  users?: User[] | null;\n+  chats?: Chat[] | null;\n+  chat?: Chat | null;\n }\n \n export interface User {\n-  id: string; \n-  name?: string | null; \n-  picture?: string | null; \n-  phone?: string | null; \n+  id: string;\n+  name?: string | null;\n+  picture?: string | null;\n+  phone?: string | null;\n }\n \n export interface Chat {\n-  id: string; /* May be a chat or a group */\n-  name?: string | null; /* Computed for chats */\n-  picture?: string | null; /* Computed for chats */\n-  allTimeMembers: User[]; /* All members, current and past ones. */\n-  listingMembers: User[]; /* Whoever gets the chat listed. For groups includes past members who still didn&#x27;t delete the group. */\n-  actualGroupMembers: User[]; /* Actual members of the group (they are not the only ones who get the group listed). Null for chats. */\n-  admins: User[]; /* Null for chats */\n-  owner?: User | null; /* If null the group is read-only. Null for chats. */\n-  messages: Message[]; \n-  unreadMessages: number; /* Computed property */\n-  isGroup: boolean; /* Computed property */\n+  id: string /** May be a chat or a group */;\n+  name?: string | null /** Computed for chats */;\n+  picture?: string | null /** Computed for chats */;\n+  allTimeMembers: User[] /** All members, current and past ones. */;\n+  listingMembers: User[] /** Whoever gets the chat listed. For groups includes past members who still didn't delete the group. */;\n+  actualGroupMembers: User[] /** Actual members of the group (they are not the only ones who get the group listed). Null for chats. */;\n+  admins?: User[] | null /** Null for chats */;\n+  owner?: User | null /** If null the group is read-only. Null for chats. */;\n+  messages: (Message | null)[];\n+  messageFeed?: MessageFeed | null /** Return messages in a a Feed Wrapper with cursor based pagination */;\n+  unreadMessages: number /** Computed property */;\n+  isGroup: boolean /** Computed property */;\n }\n \n export interface Message {\n-  id: string; \n-  sender: User; \n-  chat: Chat; \n-  content: string; \n-  createdAt: string; \n-  type: number; /* FIXME: should return MessageType */\n-  recipients: Recipient[]; /* Whoever received the message */\n-  holders: User[]; /* Whoever still holds a copy of the message. Cannot be null because the message gets deleted otherwise */\n-  ownership: boolean; /* Computed property */\n+  id: string;\n+  sender: User;\n+  chat: Chat;\n+  content: string;\n+  createdAt: DateTime;\n+  type: number /** FIXME: should return MessageType */;\n+  recipients: Recipient[] /** Whoever received the message */;\n+  holders: User[] /** Whoever still holds a copy of the message. Cannot be null because the message gets deleted otherwise */;\n+  ownership: boolean /** Computed property */;\n }\n \n export interface Recipient {\n-  user: User; \n-  message: Message; \n-  receivedAt?: string | null; \n-  readAt?: string | null; \n+  user: User;\n+  message: Message;\n+  chat: Chat;\n+  receivedAt?: DateTime | null;\n+  readAt?: DateTime | null;\n+}\n+\n+export interface MessageFeed {\n+  hasNextPage: boolean;\n+  cursor?: string | null;\n+  messages: (Message | null)[];\n }\n \n export interface Mutation {\n-  addChat?: Chat | null; \n-  addGroup?: Chat | null; \n-  removeChat?: string | null; \n-  addMessage?: Message | null; \n-  removeMessages?: string[] | null; \n-  addMembers?: string[] | null; \n-  removeMembers?: string[] | null; \n-  addAdmins?: string[] | null; \n-  removeAdmins?: string[] | null; \n-  setGroupName?: string | null; \n-  setGroupPicture?: string | null; \n-  markAsReceived?: boolean | null; \n-  markAsRead?: boolean | null; \n+  addChat?: Chat | null;\n+  addGroup?: Chat | null;\n+  removeChat?: string | null;\n+  addMessage?: Message | null;\n+  removeMessages?: (string | null)[] | null;\n+  addMembers?: (string | null)[] | null;\n+  removeMembers?: (string | null)[] | null;\n+  addAdmins?: (string | null)[] | null;\n+  removeAdmins?: (string | null)[] | null;\n+  setGroupName?: string | null;\n+  setGroupPicture?: string | null;\n+  markAsReceived?: boolean | null;\n+  markAsRead?: boolean | null;\n }\n \n export interface Subscription {\n-  messageAdded?: Message | null; \n-  chatAdded?: Chat | null; \n+  messageAdded?: Message | null;\n+  chatAdded?: Chat | null;\n }\n export interface ChatQueryArgs {\n-  chatId: string; \n+  chatId: string;\n }\n export interface MessagesChatArgs {\n-  amount?: number | null; \n+  amount?: number | null;\n+  before?: string | null;\n+}\n+export interface MessageFeedChatArgs {\n+  amount?: number | null;\n+  before?: string | null;\n }\n export interface AddChatMutationArgs {\n-  recipientId: string; \n+  recipientId: string;\n }\n export interface AddGroupMutationArgs {\n-  recipientIds: string[]; \n-  groupName: string; \n+  recipientIds: string[];\n+  groupName: string;\n }\n export interface RemoveChatMutationArgs {\n-  chatId: string; \n+  chatId: string;\n }\n export interface AddMessageMutationArgs {\n-  chatId: string; \n-  content: string; \n+  chatId: string;\n+  content: string;\n }\n export interface RemoveMessagesMutationArgs {\n-  chatId: string; \n-  messageIds?: string[] | null; \n-  all?: boolean | null; \n+  chatId: string;\n+  messageIds?: (string | null)[] | null;\n+  all?: boolean | null;\n }\n export interface AddMembersMutationArgs {\n-  groupId: string; \n-  userIds: string[]; \n+  groupId: string;\n+  userIds: string[];\n }\n export interface RemoveMembersMutationArgs {\n-  groupId: string; \n-  userIds: string[]; \n+  groupId: string;\n+  userIds: string[];\n }\n export interface AddAdminsMutationArgs {\n-  groupId: string; \n-  userIds: string[]; \n+  groupId: string;\n+  userIds: string[];\n }\n export interface RemoveAdminsMutationArgs {\n-  groupId: string; \n-  userIds: string[]; \n+  groupId: string;\n+  userIds: string[];\n }\n export interface SetGroupNameMutationArgs {\n-  groupId: string; \n+  groupId: string;\n }\n export interface SetGroupPictureMutationArgs {\n-  groupId: string; \n+  groupId: string;\n }\n export interface MarkAsReceivedMutationArgs {\n-  chatId: string; \n+  chatId: string;\n }\n export interface MarkAsReadMutationArgs {\n-  chatId: string; \n+  chatId: string;\n }\n export interface MessageAddedSubscriptionArgs {\n-  chatId?: string | null; \n+  chatId?: string | null;\n }\n \n-export type MessageType = \"LOCATION\" | \"TEXT\" | \"PICTURE\";\n-\n+export enum MessageType {\n+  LOCATION = \"LOCATION\",\n+  TEXT = \"TEXT\",\n+  PICTURE = \"PICTURE\"\n+}\n export namespace AddChat {\n   export type Variables = {\n     recipientId: string;\n-  }\n+  };\n \n   export type Mutation = {\n-    addChat?: AddChat | null; \n-  } \n+    __typename?: \"Mutation\";\n+    addChat?: AddChat | null;\n+  };\n \n   export type AddChat = {\n-    messages: Messages[]; \n-  } & ChatWithoutMessages.Fragment\n+    __typename?: \"Chat\";\n+    messageFeed?: MessageFeed | null;\n+  } & ChatWithoutMessages.Fragment;\n \n-  export type Messages = Message.Fragment\n+  export type MessageFeed = {\n+    __typename?: \"MessageFeed\";\n+    hasNextPage: boolean;\n+    cursor?: string | null;\n+    messages: (Messages | null)[];\n+  };\n+\n+  export type Messages = Message.Fragment;\n }\n export namespace AddGroup {\n   export type Variables = {\n     recipientIds: string[];\n     groupName: string;\n-  }\n+  };\n \n   export type Mutation = {\n-    addGroup?: AddGroup | null; \n-  } \n+    __typename?: \"Mutation\";\n+    addGroup?: AddGroup | null;\n+  };\n \n   export type AddGroup = {\n-    messages: Messages[]; \n-  } & ChatWithoutMessages.Fragment\n+    __typename?: \"Chat\";\n+    messageFeed?: MessageFeed | null;\n+  } & ChatWithoutMessages.Fragment;\n+\n+  export type MessageFeed = {\n+    __typename?: \"MessageFeed\";\n+    hasNextPage: boolean;\n+    cursor?: string | null;\n+    messages: (Messages | null)[];\n+  };\n \n-  export type Messages = Message.Fragment\n+  export type Messages = Message.Fragment;\n }\n export namespace AddMessage {\n   export type Variables = {\n     chatId: string;\n     content: string;\n-  }\n+  };\n \n   export type Mutation = {\n-    addMessage?: AddMessage | null; \n-  } \n+    __typename?: \"Mutation\";\n+    addMessage?: AddMessage | null;\n+  };\n \n-  export type AddMessage = Message.Fragment\n+  export type AddMessage = Message.Fragment;\n }\n export namespace ChatAdded {\n   export type Variables = {\n-  }\n+    amount: number;\n+  };\n \n   export type Subscription = {\n-    chatAdded?: ChatAdded | null; \n-  } \n+    __typename?: \"Subscription\";\n+    chatAdded?: ChatAdded | null;\n+  };\n \n   export type ChatAdded = {\n-    messages: Messages[]; \n-  } & ChatWithoutMessages.Fragment\n+    __typename?: \"Chat\";\n+    messageFeed?: MessageFeed | null;\n+  } & ChatWithoutMessages.Fragment;\n+\n+  export type MessageFeed = {\n+    __typename?: \"MessageFeed\";\n+    hasNextPage: boolean;\n+    cursor?: string | null;\n+    messages: (Messages | null)[];\n+  };\n \n-  export type Messages = Message.Fragment\n+  export type Messages = Message.Fragment;\n }\n export namespace GetChat {\n   export type Variables = {\n     chatId: string;\n-  }\n+    amount: number;\n+  };\n \n   export type Query = {\n-    chat?: Chat | null; \n-  } \n+    __typename?: \"Query\";\n+    chat?: Chat | null;\n+  };\n \n   export type Chat = {\n-    messages: Messages[]; \n-  } & ChatWithoutMessages.Fragment\n+    __typename?: \"Chat\";\n+    messageFeed?: MessageFeed | null;\n+  } & ChatWithoutMessages.Fragment;\n \n-  export type Messages = Message.Fragment\n+  export type MessageFeed = {\n+    __typename?: \"MessageFeed\";\n+    hasNextPage: boolean;\n+    cursor?: string | null;\n+    messages: (Messages | null)[];\n+  };\n+\n+  export type Messages = Message.Fragment;\n }\n export namespace GetChats {\n   export type Variables = {\n-    amount?: number | null;\n-  }\n+    amount: number;\n+  };\n \n   export type Query = {\n-    chats: Chats[]; \n-  } \n+    __typename?: \"Query\";\n+    chats?: Chats[] | null;\n+  };\n \n   export type Chats = {\n-    messages: Messages[]; \n-  } & ChatWithoutMessages.Fragment\n+    __typename?: \"Chat\";\n+    messageFeed?: MessageFeed | null;\n+  } & ChatWithoutMessages.Fragment;\n+\n+  export type MessageFeed = {\n+    __typename?: \"MessageFeed\";\n+    hasNextPage: boolean;\n+    cursor?: string | null;\n+    messages: (Messages | null)[];\n+  };\n \n-  export type Messages = Message.Fragment\n+  export type Messages = Message.Fragment;\n }\n export namespace GetUsers {\n-  export type Variables = {\n-  }\n+  export type Variables = {};\n \n   export type Query = {\n-    users: Users[]; \n-  } \n+    __typename?: \"Query\";\n+    users?: Users[] | null;\n+  };\n \n   export type Users = {\n-    id: string; \n-    name?: string | null; \n-    picture?: string | null; \n-  } \n+    __typename?: \"User\";\n+    id: string;\n+    name?: string | null;\n+    picture?: string | null;\n+  };\n }\n export namespace MessageAdded {\n   export type Variables = {\n     chatId?: string | null;\n-  }\n+  };\n \n   export type Subscription = {\n-    messageAdded?: MessageAdded | null; \n-  } \n+    __typename?: \"Subscription\";\n+    messageAdded?: MessageAdded | null;\n+  };\n \n   export type MessageAdded = {\n-    chat: Chat; \n-  } & Message.Fragment\n+    __typename?: \"Message\";\n+    chat: Chat;\n+  } & Message.Fragment;\n \n   export type Chat = {\n-    id: string; \n-  } \n+    __typename?: \"Chat\";\n+    id: string;\n+  };\n+}\n+export namespace MoreMessages {\n+  export type Variables = {\n+    chatId: string;\n+    amount: number;\n+    before: string;\n+  };\n+\n+  export type Query = {\n+    __typename?: \"Query\";\n+    chat?: Chat | null;\n+  };\n+\n+  export type Chat = {\n+    __typename?: \"Chat\";\n+    messageFeed?: MessageFeed | null;\n+  };\n+\n+  export type MessageFeed = {\n+    __typename?: \"MessageFeed\";\n+    hasNextPage: boolean;\n+    cursor?: string | null;\n+    messages: (Messages | null)[];\n+  };\n+\n+  export type Messages = Message.Fragment;\n }\n export namespace RemoveAllMessages {\n   export type Variables = {\n     chatId: string;\n     all?: boolean | null;\n-  }\n+  };\n \n   export type Mutation = {\n-    removeMessages?: string[] | null; \n-  } \n+    __typename?: \"Mutation\";\n+    removeMessages?: (string | null)[] | null;\n+  };\n }\n export namespace RemoveChat {\n   export type Variables = {\n     chatId: string;\n-  }\n+  };\n \n   export type Mutation = {\n-    removeChat?: string | null; \n-  } \n+    __typename?: \"Mutation\";\n+    removeChat?: string | null;\n+  };\n }\n export namespace RemoveMessages {\n   export type Variables = {\n     chatId: string;\n-    messageIds?: string[] | null;\n-  }\n+    messageIds?: (string | null)[] | null;\n+  };\n \n   export type Mutation = {\n-    removeMessages?: string[] | null; \n-  } \n+    __typename?: \"Mutation\";\n+    removeMessages?: (string | null)[] | null;\n+  };\n }\n \n export namespace ChatWithoutMessages {\n   export type Fragment = {\n-    id: string; \n-    name?: string | null; \n-    picture?: string | null; \n-    allTimeMembers: AllTimeMembers[]; \n-    unreadMessages: number; \n-    isGroup: boolean; \n-  } \n+    __typename?: \"Chat\";\n+    id: string;\n+    name?: string | null;\n+    picture?: string | null;\n+    allTimeMembers: AllTimeMembers[];\n+    unreadMessages: number;\n+    isGroup: boolean;\n+  };\n \n   export type AllTimeMembers = {\n-    id: string; \n-  } \n+    __typename?: \"User\";\n+    id: string;\n+  };\n }\n \n export namespace Message {\n   export type Fragment = {\n-    id: string; \n-    sender: Sender; \n-    content: string; \n-    createdAt: string; \n-    type: number; \n-    recipients: Recipients[]; \n-    ownership: boolean; \n-  } \n+    __typename?: \"Message\";\n+    id: string;\n+    chat: Chat;\n+    sender: Sender;\n+    content: string;\n+    createdAt: DateTime;\n+    type: number;\n+    recipients: Recipients[];\n+    ownership: boolean;\n+  };\n+\n+  export type Chat = {\n+    __typename?: \"Chat\";\n+    id: string;\n+  };\n \n   export type Sender = {\n-    id: string; \n-    name?: string | null; \n-  } \n+    __typename?: \"User\";\n+    id: string;\n+    name?: string | null;\n+  };\n \n   export type Recipients = {\n-    user: User; \n-    message: Message; \n-    receivedAt?: string | null; \n-    readAt?: string | null; \n-  } \n+    __typename?: \"Recipient\";\n+    user: User;\n+    message: Message;\n+    chat: __Chat;\n+    receivedAt?: DateTime | null;\n+    readAt?: DateTime | null;\n+  };\n \n   export type User = {\n-    id: string; \n-  } \n+    __typename?: \"User\";\n+    id: string;\n+  };\n \n   export type Message = {\n-    id: string; \n-  } \n+    __typename?: \"Message\";\n+    id: string;\n+    chat: _Chat;\n+  };\n+\n+  export type _Chat = {\n+    __typename?: \"Chat\";\n+    id: string;\n+  };\n+\n+  export type __Chat = {\n+    __typename?: \"Chat\";\n+    id: string;\n+  };\n }\ndiff --git a/client/src/typings.d.ts b/client/src/typings.d.ts\ndeleted file mode 100644\nindex ef5c7bd..0000000\n--- a/client/src/typings.d.ts\n+++ /dev/null\n@@ -1,5 +0,0 @@\n-/* SystemJS module definition */\n-declare var module: NodeModule;\n-interface NodeModule {\n-  id: string;\n-}\ndiff --git a/client/tsconfig.json b/client/tsconfig.json\nindex d8195f3..9431dd1 100644\n--- a/client/tsconfig.json\n+++ b/client/tsconfig.json\n@@ -1,6 +1,7 @@\n {\n   \"compileOnSave\": false,\n   \"compilerOptions\": {\n+    \"baseUrl\": \"./\",\n     \"outDir\": \"./dist/out-tsc\",\n     \"sourceMap\": true,\n     \"declaration\": false,\ndiff --git a/client/tslint.json b/client/tslint.json\nindex 9963d6c..3ea984c 100644\n--- a/client/tslint.json\n+++ b/client/tslint.json\n@@ -18,7 +18,6 @@\n     \"forin\": true,\n     \"import-blacklist\": [\n       true,\n-      \"rxjs\",\n       \"rxjs/Rx\"\n     ],\n     \"import-spacing\": true,\n@@ -117,18 +116,6 @@\n       \"check-separator\",\n       \"check-type\"\n     ],\n-    \"directive-selector\": [\n-      true,\n-      \"attribute\",\n-      \"app\",\n-      \"camelCase\"\n-    ],\n-    \"component-selector\": [\n-      true,\n-      \"element\",\n-      \"app\",\n-      \"kebab-case\"\n-    ],\n     \"no-output-on-prefix\": true,\n     \"use-input-property-decorator\": true,\n     \"use-output-property-decorator\": true,\ndiff --git a/server/index.ts b/server/index.ts\nindex f8063a6..85fd2d3 100644\n--- a/server/index.ts\n+++ b/server/index.ts\n@@ -24,7 +24,7 @@ function validPassword(password: string, localPassword: string) {\n }\n \n createConnection().then(async connection => {\n-  await addSampleData(connection);\n+  //await addSampleData(connection);\n \n   passport.use('basic-signin', new basicStrategy.BasicStrategy(\n     async function (username, password, done) {\n@@ -62,12 +62,20 @@ createConnection().then(async connection => {\n   app.post('/signup',\n     passport.authenticate('basic-signup', {session: false}),\n     function (req, res) {\n+      if (req.user && req.user.id) {\n+        // We want to return id as string\n+        req.user.id = String(req.user.id);\n+      }\n       res.json(req.user);\n     });\n \n   app.use(passport.authenticate('basic-signin', {session: false}));\n \n   app.post('/signin', function (req, res) {\n+    if (req.user && req.user.id) {\n+      // We want to return id as string\n+      req.user.id = String(req.user.id);\n+    }\n     res.json(req.user);\n   });\n \ndiff --git a/server/package.json b/server/package.json\nindex 05d9063..1c38026 100644\n--- a/server/package.json\n+++ b/server/package.json\n@@ -5,39 +5,42 @@\n   \"scripts\": {\n     \"start\": \"npm run build:live\",\n     \"build:live\": \"nodemon --exec ./node_modules/.bin/ts-node -- ./index.ts\",\n-    \"generator\": \"gql-gen --url http://localhost:3000/graphql --template ts --out ./types.d.ts\"\n+    \"generator\": \"gql-gen --schema http://localhost:3000/graphql --template ts --out ./types.d.ts\"\n   },\n   \"devDependencies\": {\n     \"@types/bcrypt-nodejs\": \"0.0.30\",\n-    \"@types/body-parser\": \"1.16.8\",\n-    \"@types/cors\": \"2.8.3\",\n+    \"@types/body-parser\": \"1.17.0\",\n+    \"@types/cors\": \"2.8.4\",\n     \"@types/express\": \"4.11.1\",\n-    \"@types/graphql\": \"0.12.6\",\n-    \"@types/node\": \"9.6.5\",\n-    \"@types/passport\": \"0.4.4\",\n+    \"@types/graphql\": \"0.13.0\",\n+    \"@types/graphql-iso-date\": \"3.3.0\",\n+    \"@types/node\": \"10.0.6\",\n+    \"@types/passport\": \"0.4.5\",\n     \"@types/passport-http\": \"0.3.6\",\n-    \"@types/pg\": \"7.4.5\",\n-    \"@types/ws\": \"4.0.2\",\n-    \"nodemon\": \"1.17.3\",\n-    \"ts-node\": \"6.0.0\",\n-    \"typescript\": \"2.8.1\"\n+    \"@types/pg\": \"7.4.8\",\n+    \"@types/ws\": \"5.1.1\",\n+    \"nodemon\": \"1.17.4\",\n+    \"ts-node\": \"6.0.3\",\n+    \"typescript\": \"2.8.3\"\n   },\n   \"dependencies\": {\n-    \"apollo-server-express\": \"1.3.4\",\n+    \"apollo-server-express\": \"1.3.6\",\n     \"bcrypt-nodejs\": \"0.0.3\",\n     \"body-parser\": \"1.18.2\",\n     \"cors\": \"2.8.4\",\n     \"express\": \"4.16.3\",\n-    \"graphql\": \"0.12.3\",\n-    \"graphql-code-generator\": \"0.8.21\",\n+    \"graphql\": \"0.13.2\",\n+    \"graphql-code-generator\": \"0.9.1\",\n+    \"graphql-codegen-typescript-template\": \"0.9.1\",\n+    \"graphql-iso-date\": \"3.5.0\",\n     \"graphql-subscriptions\": \"0.5.8\",\n-    \"graphql-tools\": \"2.24.0\",\n+    \"graphql-tools\": \"3.0.1\",\n     \"moment\": \"2.22.1\",\n     \"passport\": \"0.4.0\",\n     \"passport-http\": \"0.3.0\",\n-    \"pg\": \"7.4.1\",\n+    \"pg\": \"7.4.3\",\n     \"reflect-metadata\": \"0.1.12\",\n-    \"subscriptions-transport-ws\": \"0.9.7\",\n-    \"typeorm\": \"0.2.0-alpha.46\"\n+    \"subscriptions-transport-ws\": \"0.9.9\",\n+    \"typeorm\": \"0.2.5\"\n   }\n }\ndiff --git a/server/schema/resolvers.ts b/server/schema/resolvers.ts\nindex d901f79..077dc35 100644\n--- a/server/schema/resolvers.ts\n+++ b/server/schema/resolvers.ts\n@@ -2,7 +2,7 @@ import { MessageType } from \"../db\";\n import { IResolvers } from \"graphql-tools/dist/Interfaces\";\n import {\n   AddChatMutationArgs, AddGroupMutationArgs, AddMessageMutationArgs, ChatQueryArgs, MessageAddedSubscriptionArgs,\n-  RemoveChatMutationArgs, RemoveMessagesMutationArgs\n+  MessageFeedChatArgs, MessagesChatArgs, RemoveChatMutationArgs, RemoveMessagesMutationArgs\n } from \"../types\";\n import * as moment from \"moment\";\n import { PubSub, withFilter } from \"graphql-subscriptions\";\n@@ -11,10 +11,12 @@ import { Chat } from \"../entity/Chat\";\n import { Message } from \"../entity/Message\";\n import { Recipient } from \"../entity/Recipient\";\n import { Connection } from \"typeorm\";\n+import { GraphQLDateTime } from \"graphql-iso-date\";\n \n export const pubsub = new PubSub();\n \n export const resolvers: IResolvers = {\n+  Date: GraphQLDateTime,\n   Query: {\n     // Show all users for the moment.\n     users: async (obj: any, args: any, {user: currentUser, connection}: { user: User, connection: Connection }): Promise<User[]> => {\n@@ -429,13 +431,41 @@ export const resolvers: IResolvers = {\n         .innerJoin('user.ownerChats', 'ownerChats', 'ownerChats.id = :chatId', {chatId: chat.id})\n         .getOne() || null;\n     },\n-    messages: async (chat: Chat, {amount = null}: {amount: number}, {user: currentUser, connection}: {user: User, connection: Connection}): Promise<Message[]> => {\n-      const query = connection\n+    messages: async (chat: Chat, {before, amount}: MessagesChatArgs, {user: currentUser, connection}: {user: User, connection: Connection}): Promise<Message[]> => {\n+      let query = connection\n         .createQueryBuilder(Message, \"message\")\n         .innerJoin('message.chat', 'chat', 'chat.id = :chatId', {chatId: chat.id})\n         .innerJoin('message.holders', 'holders', 'holders.id = :userId', {userId: currentUser.id})\n         .orderBy({\"message.createdAt\": \"DESC\"});\n-      return (amount ? await query.take(amount).getMany() : await query.getMany()).reverse();\n+\n+      if (amount) {\n+        query = query.take(amount);\n+      }\n+\n+      if (before) {\n+        query = query.where('message.createdAt < :before', {before: new Date(before)});\n+      }\n+\n+      return (await query.getMany()).reverse();\n+    },\n+    messageFeed: async (chat: Chat, {before, amount}: MessageFeedChatArgs, {user: currentUser, connection}: {user: User, connection: Connection}): Promise<{hasNextPage: boolean, cursor: Date | null, messages: Message[]}> => {\n+      let query = connection\n+        .createQueryBuilder(Message, \"message\")\n+        .innerJoin('message.chat', 'chat', 'chat.id = :chatId', {chatId: chat.id})\n+        .innerJoin('message.holders', 'holders', 'holders.id = :userId', {userId: currentUser.id})\n+        .orderBy({\"message.createdAt\": \"DESC\"})\n+        .take(amount || 15);\n+\n+      if (before) {\n+        query = query.where('message.createdAt < :before', {before: new Date(before)});\n+      }\n+\n+      const [messages, count] = await query.getManyAndCount();\n+      return {\n+        hasNextPage: messages.length !== count,\n+        cursor: messages && messages.length && messages[messages.length - 1].createdAt || null,\n+        messages: messages.reverse(),\n+      };\n     },\n     unreadMessages: async (chat: Chat, args: any, {user: currentUser, connection}: {user: User, connection: Connection}): Promise<number> => {\n       return await connection\ndiff --git a/server/schema/typeDefs.ts b/server/schema/typeDefs.ts\nindex c09cad4..9753c74 100644\n--- a/server/schema/typeDefs.ts\n+++ b/server/schema/typeDefs.ts\n@@ -1,6 +1,8 @@\n import { ITypeDefinitions } from \"graphql-tools/dist/Interfaces\";\n \n export const typeDefs: ITypeDefinitions = `\n+  scalar Date\n+\n   type Query {\n     users: [User!]\n     chats: [Chat!]\n@@ -35,19 +37,27 @@ export const typeDefs: ITypeDefinitions = `\n     admins: [User!]\n     #If null the group is read-only. Null for chats.\n     owner: User\n-    messages(amount: Int): [Message]!\n+    messages(amount: Int, before: String): [Message]!\n+    #Return messages in a a Feed Wrapper with cursor based pagination\n+    messageFeed(amount: Int, before: String): MessageFeed\n     #Computed property\n     unreadMessages: Int!\n     #Computed property\n     isGroup: Boolean!\n   }\n+  \n+  type MessageFeed {\n+    hasNextPage: Boolean!\n+    cursor: String\n+    messages: [Message]!\n+  }\n \n   type Message {\n     id: ID!\n     sender: User!\n     chat: Chat!\n     content: String!\n-    createdAt: String!\n+    createdAt: Date!\n     #FIXME: should return MessageType\n     type: Int!\n     #Whoever received the message\n@@ -62,8 +72,8 @@ export const typeDefs: ITypeDefinitions = `\n     user: User!\n     message: Message!\n     chat: Chat!\n-    receivedAt: String\n-    readAt: String\n+    receivedAt: Date\n+    readAt: Date\n   }\n \n   type User {\ndiff --git a/server/types.d.ts b/server/types.d.ts\nindex ce81b7a..f7e996d 100644\n--- a/server/types.d.ts\n+++ b/server/types.d.ts\n@@ -1,127 +1,146 @@\n /* tslint:disable */\n \n+/** A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar. */\n+export type DateTime = any;\n+\n export interface Query {\n-  users: User[]; \n-  chats: Chat[]; \n-  chat?: Chat | null; \n+  users?: User[] | null;\n+  chats?: Chat[] | null;\n+  chat?: Chat | null;\n }\n \n export interface User {\n-  id: string; \n-  name?: string | null; \n-  picture?: string | null; \n-  phone?: string | null; \n+  id: string;\n+  name?: string | null;\n+  picture?: string | null;\n+  phone?: string | null;\n }\n \n export interface Chat {\n-  id: string; /* May be a chat or a group */\n-  name?: string | null; /* Computed for chats */\n-  picture?: string | null; /* Computed for chats */\n-  allTimeMembers: User[]; /* All members, current and past ones. */\n-  listingMembers: User[]; /* Whoever gets the chat listed. For groups includes past members who still didn&#x27;t delete the group. */\n-  actualGroupMembers: User[]; /* Actual members of the group (they are not the only ones who get the group listed). Null for chats. */\n-  admins: User[]; /* Null for chats */\n-  owner?: User | null; /* If null the group is read-only. Null for chats. */\n-  messages: Message[]; \n-  unreadMessages: number; /* Computed property */\n-  isGroup: boolean; /* Computed property */\n+  id: string /** May be a chat or a group */;\n+  name?: string | null /** Computed for chats */;\n+  picture?: string | null /** Computed for chats */;\n+  allTimeMembers: User[] /** All members, current and past ones. */;\n+  listingMembers: User[] /** Whoever gets the chat listed. For groups includes past members who still didn't delete the group. */;\n+  actualGroupMembers: User[] /** Actual members of the group (they are not the only ones who get the group listed). Null for chats. */;\n+  admins?: User[] | null /** Null for chats */;\n+  owner?: User | null /** If null the group is read-only. Null for chats. */;\n+  messages: (Message | null)[];\n+  messageFeed?: MessageFeed | null /** Return messages in a a Feed Wrapper with cursor based pagination */;\n+  unreadMessages: number /** Computed property */;\n+  isGroup: boolean /** Computed property */;\n }\n \n export interface Message {\n-  id: string; \n-  sender: User; \n-  chat: Chat; \n-  content: string; \n-  createdAt: string; \n-  type: number; /* FIXME: should return MessageType */\n-  recipients: Recipient[]; /* Whoever received the message */\n-  holders: User[]; /* Whoever still holds a copy of the message. Cannot be null because the message gets deleted otherwise */\n-  ownership: boolean; /* Computed property */\n+  id: string;\n+  sender: User;\n+  chat: Chat;\n+  content: string;\n+  createdAt: DateTime;\n+  type: number /** FIXME: should return MessageType */;\n+  recipients: Recipient[] /** Whoever received the message */;\n+  holders: User[] /** Whoever still holds a copy of the message. Cannot be null because the message gets deleted otherwise */;\n+  ownership: boolean /** Computed property */;\n }\n \n export interface Recipient {\n-  user: User; \n-  message: Message; \n-  receivedAt?: string | null; \n-  readAt?: string | null; \n+  user: User;\n+  message: Message;\n+  chat: Chat;\n+  receivedAt?: DateTime | null;\n+  readAt?: DateTime | null;\n+}\n+\n+export interface MessageFeed {\n+  hasNextPage: boolean;\n+  cursor?: string | null;\n+  messages: (Message | null)[];\n }\n \n export interface Mutation {\n-  addChat?: Chat | null; \n-  addGroup?: Chat | null; \n-  removeChat?: string | null; \n-  addMessage?: Message | null; \n-  removeMessages?: string[] | null; \n-  addMembers?: string[] | null; \n-  removeMembers?: string[] | null; \n-  addAdmins?: string[] | null; \n-  removeAdmins?: string[] | null; \n-  setGroupName?: string | null; \n-  setGroupPicture?: string | null; \n-  markAsReceived?: boolean | null; \n-  markAsRead?: boolean | null; \n+  addChat?: Chat | null;\n+  addGroup?: Chat | null;\n+  removeChat?: string | null;\n+  addMessage?: Message | null;\n+  removeMessages?: (string | null)[] | null;\n+  addMembers?: (string | null)[] | null;\n+  removeMembers?: (string | null)[] | null;\n+  addAdmins?: (string | null)[] | null;\n+  removeAdmins?: (string | null)[] | null;\n+  setGroupName?: string | null;\n+  setGroupPicture?: string | null;\n+  markAsReceived?: boolean | null;\n+  markAsRead?: boolean | null;\n }\n \n export interface Subscription {\n-  messageAdded?: Message | null; \n-  chatAdded?: Chat | null; \n+  messageAdded?: Message | null;\n+  chatAdded?: Chat | null;\n }\n export interface ChatQueryArgs {\n-  chatId: string; \n+  chatId: string;\n }\n export interface MessagesChatArgs {\n-  amount?: number | null; \n+  amount?: number | null;\n+  before?: string | null;\n+}\n+export interface MessageFeedChatArgs {\n+  amount?: number | null;\n+  before?: string | null;\n }\n export interface AddChatMutationArgs {\n-  recipientId: string; \n+  recipientId: string;\n }\n export interface AddGroupMutationArgs {\n-  recipientIds: string[]; \n-  groupName: string; \n+  recipientIds: string[];\n+  groupName: string;\n }\n export interface RemoveChatMutationArgs {\n-  chatId: string; \n+  chatId: string;\n }\n export interface AddMessageMutationArgs {\n-  chatId: string; \n-  content: string; \n+  chatId: string;\n+  content: string;\n }\n export interface RemoveMessagesMutationArgs {\n-  chatId: string; \n-  messageIds?: string[] | null; \n-  all?: boolean | null; \n+  chatId: string;\n+  messageIds?: (string | null)[] | null;\n+  all?: boolean | null;\n }\n export interface AddMembersMutationArgs {\n-  groupId: string; \n-  userIds: string[]; \n+  groupId: string;\n+  userIds: string[];\n }\n export interface RemoveMembersMutationArgs {\n-  groupId: string; \n-  userIds: string[]; \n+  groupId: string;\n+  userIds: string[];\n }\n export interface AddAdminsMutationArgs {\n-  groupId: string; \n-  userIds: string[]; \n+  groupId: string;\n+  userIds: string[];\n }\n export interface RemoveAdminsMutationArgs {\n-  groupId: string; \n-  userIds: string[]; \n+  groupId: string;\n+  userIds: string[];\n }\n export interface SetGroupNameMutationArgs {\n-  groupId: string; \n+  groupId: string;\n }\n export interface SetGroupPictureMutationArgs {\n-  groupId: string; \n+  groupId: string;\n }\n export interface MarkAsReceivedMutationArgs {\n-  chatId: string; \n+  chatId: string;\n }\n export interface MarkAsReadMutationArgs {\n-  chatId: string; \n+  chatId: string;\n }\n export interface MessageAddedSubscriptionArgs {\n-  chatId?: string | null; \n+  chatId?: string | null;\n }\n \n-export type MessageType = \"LOCATION\" | \"TEXT\" | \"PICTURE\";\n-\n+export enum MessageType {\n+  LOCATION = \"LOCATION\",\n+  TEXT = \"TEXT\",\n+  PICTURE = \"PICTURE\"\n+}\n",
        "manuals": [
          {
            "manualTitle": "A Whatsapp clone written with Angular, Material, Express, Postgresql and Apollo GraphQL.",
            "stepRevision": "9a5dc25da5ceafb48c5fb70156fd73ffd1aab2c4",
            "manualView": "A newly created Tortilla project. For more information, see https://github.com/Urigo/tortilla."
          },
          {
            "manualTitle": "Step 1: Introduction",
            "stepRevision": "8045d2f23207c99ef82aea1e8b07f5117c67bb34",
            "manualView": "# Step 1: How to build an app?\n\nSo you want to build an app!\nThe good news is, it’s not that difficult and after a while anyone can do it!\nAnother good news is that it’s a great skill to have, there is a lot of demand in the job market and you can get to be very creative. Also you can be part of basically any industry you can think of if you know how to program (Healthcare, \nbanking, education, defense, gaming, etc…).\n\nSoftware builds as layers on top of layers.  Every code you write is using code that others have written before already and you can just use it even without fully understanding it.\nThat’s what makes software advance so fast and makes the pace of progress increase as time goes by.\nAlso, most software today is written in an open and free way - everyone can share their code and use other people's code for free.  We even have a social network for that!  It’s called Github.\n\nOne way of learning how to build an app is to study software from the origins. How computers, operating systems and compilers work. It is very interesting but that also takes a long time.\nAnother way to learn how to create a new app is to start by first using all the code that has been already written out there and once we have a real world running app, go deeper to understand how it works from the inside.\n\nI’ll try to use the later approach because I think it is more fun and also it gives context when we will dive inside on how things work. Also it helps when we try to compare between different technologies that do the same thing (Angular vs. \nReact , etc…).\nThat’s because understanding the bigger picture is more important than knowing and remembering the details.\n\nYou noticed that the chapter started with a simple question.\nAll the lessons will start and include many of those questions.  Those are the questions you will need to Google.  The reason is that the most important skill a creator has today is to know how to search Google for the things they need. Most \nprogrammers, even the best ones, don’t remember anything, they just use Google for almost every line of code they write. So know that you don’t need to know it all, Google knows it all for you.\nThis tutorial might get outdated (it won't, hopefully!), but Google will always have the answers so it is more important to know to ask the right questions.\nIn my opinion the most important skill a programmer needs to have is patience and acceptance when something just doesn’t work, enjoy that feeling and start Googling around in order to learn new things and solve this new problem (this process of \nfeeling like you don’t know anything will happen 1000 times a day, also after 20 years of programming).\n\n## Planning the app: how to design an app?\n\nThe first and most important phase in the process is the beginning - designing the app, its parts, components and architecture, and how it all works together.\nFor this tutorial we will build a WhatsApp clone so we have the designs already prepared.\n\nThe process will looks like that:\n\n1. **Visually sketch the screens of the app**. We already know how WhatsApp looks so we’ll just copy it on pen and paper.\n2. **Break down to components**. The best way to describe the UI of apps is to break the UI into separate components and mix them up together. When breaking down to components we would need to think about the following steps:\n  * **Presentational components**: the small building blocks of the UI. For example input fields, images, text, buttons etc…\n  * **Layout**: how the components are positioned inside each other (talk about flex, grid and older layout types)\n  * **Styles**: colors, fonts etc… We might skip that part at the beginning because we can have a perfectly working app without it\n  * **Data dependencies**: the data that those components need - chats, messages, people etc… We will need to to do the following:\n    * Gather data for each component\n    * Attach all those dependencies into one schema\n    * Attach actions for each component\n    * Data updates: decide when the data should be updated in the view (ideally we shouldn’t have to say when but for technical and performance reasons it helps)\n3. **Routing flow**: Moving between screens, what are the different paths the user can navigate through our app\n\nOnce we will finish that process, you will have a big picture in your head (and on your paper) and implementing it with code will be much easier and more technical, meaning you won’t need to know a lot, just Google how to do each step...\n\nAnother interesting thing is, that implementing this same process can be done with a variety of different technologies, so this work will make sense whether you are using web with React or Angular, native apps, Windows UWP or any other \ntechnology for the UI and also relevant whether your data source is a Node, .NET or Ruby server with Mongo, Postgres or MySQL database (if all those words doesn’t mean anything for you, don’t worry, those are just different names to very similar \nideas and we will learn all of them later on and of course you can always just Google them).\n\nHead over to the next chapter to start planning."
          },
          {
            "manualTitle": "Step 2: Planning process",
            "stepRevision": "b5cc76111d0a68e4451c3e4100d67209df0879be",
            "manualView": "## Visual sketch\nWell, not a lot to say about that: just draw your app on paper.\nDoesn’t matter if you don’t know how to draw, it’s just squares and circles.\n\n![alt text](../../assets/chats.png \"Chats\")\n![alt text](../../assets/chat.png \"Chat\")\n![alt text](../../assets/new_chat.png \"New chat\")\n![alt text](../../assets/new_group.png \"New group\")\n![alt text](../../assets/new_group_details.png \"New group details\")\n\n## Breaking down to components\n### -> Google Search\nThis part is a bit more tricky, but after a few examples you’ll get the hang of it.\n\nDraw boxes around every component and subcomponent in different colors and name each one.\nBut how do you know what should be its own component?\nJust follow the **single responsibility principle**, that is, a component should ideally only do one thing. If it ends up growing, it should be decomposed into smaller subcomponents.\n\n![alt text](../../assets/chats_components.png \"Chats components\")\n![alt text](../../assets/chat_components.png \"Chat components\")\n![alt text](../../assets/new_chat_components.png \"New chat components\")\n![alt text](../../assets/new_group_components.png \"New group components\")\n![alt text](../../assets/new_group_details_components.png \"New group details components\")\n\n  * Chats Component\n  * Header Component\n  * ChatsList Component\n  * ChatItem Component\n  * Chat Component\n  * MessagesList Component\n  * MessageItem Component\n  * NewMessage Component\n  * NewChat Component\n  * UsersList Component\n  * UserItem Component\n  * NewGroup Component\n  * NewGroupDetails Component\n\nNow let’s organize them in hierarchy:\n* Chats\n  * Header\n  * ChatsList\n    * ChatItem\n* Chat\n  * Header\n  * MessagesList\n    * MessageItem\n  * NewMessage\n* NewChat\n  * Header\n  * UsersList\n    * UserItem\n* NewGroup\n  * Header\n  * UsersList\n    * UserItem\n  * NewGroupDetails\n\n## Layout\n### -> Google Search\nNow let’s describe how the components are placed within each other.\nThere are infinite ways to explain how components sits inside of each other.\nAny approach has its benefits and limitations.\nWe are going to use one pattern that is pretty common, simple and also covers many types of UI structures. \nUsing that pattern we will keep us covered for a long while (until you would want to create a computer game or a graph. then you’ll need to expand your horizons).\nThis pattern is called flexbox.\n\nIn Flexbox we can separate the alignment in two ways:\nContainer (parent) component behaviour\nChild component behaviour inside the container\n\nWhen describing the parent, we have 3 main properties:\n* Flex-Flow: it's a shorthand for flex-direction and flex-wrap and lets you control the direction in which the items are displayed and whether or not they can wrap onto the next line. There are four possible settings, each of them in the wrap or \nnowrap variant:\n  * row `[wrap, nowrap]`\n  * row-reverse `[wrap, nowrap]`\n  * column `[wrap, nowrap]` - this is the normal way a group of divs would be displayed, so you might not use this often\n  * column-reverse `[wrap, nowrap]`\n* Justify-content: determines where a browser should place the flex items within the row. It works only if the flex items have set widths and if the total width of the items is less than the flex container. There are five possible settings:\n  * Flex-start - squash them to the left\n  * Center - Squash them to the center\n  * Flex-end - squash them to the right\n  * Space-around - squash them away from each other and the ends. Place as much space as possible between all elements\n  * Space-between - Squash the sides to the ends and place as much space between the rest of the elements as possible\n* alignItems: Same as justifyContent but on the secondary axis\n  * Flex-start - squash them to the left\n  * Center - Squash them to the center\n  * Flex-end - squash them to the right\n  * Space-around - squash them away from each other and the ends. Place as much space as possible between all elements\n  * Space-between - Squash the sides to the ends and place as much space between the rest of the elements as possible\n\nThe easiest way to explain that is by showing live examples:\n[awaiting for McFarland's permission to share his pictures]\n\n## Data dependencies\n### -> Google Search\nOur app needs to display data. Otherwise it will be just a nice moving set of pictures…\nSo let’s see what data each component needs and create a descriptions of all the data in our app.\n\nLet’s start with the chats list component:\n\n* Chats: Chats, Users, Messages\n  * Header\n  * ChatsList: Chats, Users, Messages\n    * ChatItem: Chats`[chatId]`, Users`[UserId]`, Message`[messageId]`\n\nWe need to have some basic information about the chats we are part of, like the chat id, the user id and the latest message content.\nThat means we will have to query for all the chats who we are part of, then look at the user IDs and query for those users to retrieve the name. Finally we need to query for the last message of each chat.\n\nNow let’s talk about the chat component (after clicking the single chat app).\nWe need a list of all the messages inside the chat, along with some info about the user or chat on the top corner:\n\n* Chat: Chat, User, Messages\n  * Header: User.name || Chat.name (Because we can have multiple participant could differ from the other person’s name)\n  * MessagesList: Messages\n    * MessageItem: Messages`[ID]`\n  * NewMessage\n\nThe NewChat and NewGroup components will need just some basic info about the user:\n\n* NewChat: Users\n  * Header\n  * UsersList: Users\n    * UserItem: Users`[ID]`\n\n* NewGroup: Users\n  * Header\n  * UsersList: Users\n    * UserItem: Users`[ID]`\n  * NewGroupDetails\n\n## Actions\n### -> Google Search\nBut components can also do thing beyond just displaying data. \nLet’s write all the actions each component can do.\n  * Chats list\n    * tap -> go to chat page\n    * press -> enable selection of multiple chats, confirming the selection will delete them\n  * Single Chat\n    * tap -> send the message\n    * press -> enable selection of multiple messages, confirming the selection will delete them\n  * New Chat\n    * tap -> create new chat or go to the NewGroup component\n  * New Group\n    * tap -> go to NewGroupDetails, then create the group\n\n## Communications\n### -> Google Search\nLet’s define when do we need to get the data from our data source.\nSounds easy but there are a few tricky pitfalls. (query and subscriptions).\nWe will start by simply requesting the data when we first start the component, later on we will tackle subscriptions.\n\n## UI flow\n### -> Google Search\nLet’s draw a diagram of how the user can navigate our app.\n  * Open the app ->\n    * Chats list ->\n      * Click on chat ->\n        * Specific chat page\n          * Click back ->\n            * Chat page\n    * Click on '+' ->\n      * NewChat page ->\n        * Click on user ->\n          * Chat page\n        * Click back ->\n          * Chats list\n        * Click on 'New Group' ->\n          * New Group page\n            * Multiple selection and subsequent confirmation ->\n              * NewGroupDetails page\n                * Insert name and click on confirm ->\n                  * Chat page\n              * Click back ->\n                * New Group page\n          * Click back ->\n            * New Group page\n\nNow let’s look at the whole diagram we created.\nThat basically describes all of our app.\nIf computers were smart enough to understand english and drawings, we would have an app by now.\nBut programming languages are very similar to regular languages so we now just need to translate this into any programming language, just choose a tool and start filling in the gaps.\n\nNext chapter will be about Scaffolding which will tell us the structure to put our code into.\nJust like our sketch has defined parts, we would do the same just with folders and files."
          },
          {
            "manualTitle": "Step 3: Scaffolding",
            "stepRevision": "d6f921a22eb60118c1552ac4b12361e72ba61f93",
            "manualView": "Now we can start writing code!\n\nBut like we said before, software is build in layers and instead of starting from nothing, we can use existing software with prepared structure.\n\nFirst let’s install some software that we need on our computer:\n\nThe following instructions are for computers with the Arch Linux operating system, so your mileage may vary.\n\nFirst let's start by installing npm and node.js, as simple as `# pacman -S nodejs npm`.\n\nThen we will need a way to install our npm global packages on a per-user basis, instead of relying on sudo: https://github.com/sindresorhus/guides/blob/master/npm-global-without-sudo.md\n\nNow it's the right moment to install a couple of global packages we will need later on: `npm install -g @angular/cli node-sass tortilla typescript`\n\n## IDE\n\nNow it's time to choose our IDE. I suggest you Webstorm, but it's paid software with a kind-of perpetual EAP (Early Access Preview) available for free: https://blog.jetbrains.com/webstorm/category/eap/\nIf you decide to start using Webstorm keep in mind that sooner or later you'll have to start paying an annual subscription because EAPs are not always available.\nTo have a look at some of the Webstorm features you can have a look at those videos: https://www.jetbrains.com/webstorm/documentation/\n\nAnother, completely free (as in freedom) alternative is VSCode: https://code.visualstudio.com/\nFor most things it's as good as Webstorm, for others (like type inference) it's even better. Unfortunately it lacks most of the Webstorm features.\n\nAt the end the choice is yours.\n\n## Mobile\nWe will talk once again about scaffolding once we will introduce `Android` and `Cordova`."
          },
          {
            "manualTitle": "Step 4: Debugging",
            "stepRevision": "32bfafb1cdb5ab1a27ec85cd68ecc1988217a1d2",
            "manualView": "Before we start writing code, it is important that we learn how to check our code.\n\nThe computer runs through everything we write in split second but we can still pause the computer and go through step by step, check what actually happens when the computer runs our code instructions.\n\nThis phase is sometimes being skipped by developers but trust me, you never want to skip this phase and you should always be super comfortable in debugging your code on whatever environment it’s running on.\n\nThe easiest way to debug your Javascript application is right into your editor:\n  * https://www.jetbrains.com/help/webstorm/debugging-javascript-in-chrome.html\n  * https://blog.jetbrains.com/webstorm/2017/01/debugging-angular-apps/\n\nLater on we will learn how to debug mobile applications."
          },
          {
            "manualTitle": "Step 5: Chats listing",
            "stepRevision": "6a2717a213f1a87f39bd42538d010736fc45b73d",
            "manualView": "## Server\n\nAfter the planning phase it's finally time to start writing some real code!\nWe'll start with the server, so let's install a couple of packages first:\n\n    $ npm install apollo-server-express body-parser cors express graphql graphql-tools\n    $ npm install --save-dev @types/body-parser @types/cors @types/express @types/graphql\n\nExpress is a fast, unopinionated, minimalist web framework for node.\nCross-Origin Resource Sharing (CORS) is a mechanism that uses additional HTTP headers to let a user agent gain permission to access selected resources from a server on a different origin (domain) than the site currently in use. A user agent makes a cross-origin HTTP request when it requests a resource from a different domain, protocol, or port than the one from which the current document originated.\nWe will need CORS because Webpack's development server used in the client will make use of a different port than the Express server, thus configuring a different origin.\nGraphQL is a query language for APIs and a runtime for fulfilling those queries with your existing data. GraphQL provides a complete and understandable description of the data in your API, gives clients the power to ask for exactly what they need and nothing more, makes it easier to evolve APIs over time, and enables powerful developer tools.\nApollo Server is a community-maintained open-source GraphQL server. It works with pretty much all Node.js HTTP server frameworks. Apollo Server works with any GraphQL schema built with GraphQL.js or with a convenience library such as graphql-tools.\n\nThe GraphQL query language is basically about selecting fields on objects. Because the shape of a GraphQL query closely matches the result, you can predict what the query will return without knowing that much about the server. But it's useful to have an exact description of the data we can ask for - what fields can we select? What kinds of objects might they return? What fields are available on those sub-objects? That's where the schema comes in.\nEvery GraphQL service defines a set of types which completely describe the set of possible data you can query on that service. Then, when queries come in, they are validated and executed against that schema.\n\nFor the moment let's create some empty schemas and resolvers:\n\n[{]: <helper> (diffStep \"1.1\" files=\"schema/*\" module=\"server\")\n\n#### Step 1.1: Create empty Apollo server\n\n##### Added schema&#x2F;index.ts\n```diff\n@@ -0,0 +1,10 @@\n+┊  ┊ 1┊import { makeExecutableSchema } from 'graphql-tools';\n+┊  ┊ 2┊import { typeDefs } from \"./typeDefs\";\n+┊  ┊ 3┊import { resolvers } from \"./resolvers\";\n+┊  ┊ 4┊import { IExecutableSchemaDefinition } from \"graphql-tools/dist/Interfaces\";\n+┊  ┊ 5┊import { GraphQLSchema } from \"graphql\";\n+┊  ┊ 6┊\n+┊  ┊ 7┊export const schema: GraphQLSchema = makeExecutableSchema(<IExecutableSchemaDefinition>{\n+┊  ┊ 8┊  typeDefs,\n+┊  ┊ 9┊  resolvers,\n+┊  ┊10┊});🚫↵\n```\n\n##### Added schema&#x2F;resolvers.ts\n```diff\n@@ -0,0 +1,6 @@\n+┊ ┊1┊import { IResolvers } from \"graphql-tools/dist/Interfaces\";\n+┊ ┊2┊\n+┊ ┊3┊export const resolvers: IResolvers = {\n+┊ ┊4┊  Query: {\n+┊ ┊5┊  },\n+┊ ┊6┊};\n```\n\n##### Added schema&#x2F;typeDefs.ts\n```diff\n@@ -0,0 +1,4 @@\n+┊ ┊1┊import { ITypeDefinitions } from \"graphql-tools/dist/Interfaces\";\n+┊ ┊2┊\n+┊ ┊3┊export const typeDefs: ITypeDefinitions = `\n+┊ ┊4┊`;\n```\n\n[}]: #\n\nTime to create our index:\n\n[{]: <helper> (diffStep \"1.1\" files=\"^index.ts\" module=\"server\")\n\n#### Step 1.1: Create empty Apollo server\n\n##### Added index.ts\n```diff\n@@ -0,0 +1,23 @@\n+┊  ┊ 1┊import { schema } from \"./schema\";\n+┊  ┊ 2┊import * as bodyParser from \"body-parser\";\n+┊  ┊ 3┊import * as cors from 'cors';\n+┊  ┊ 4┊import * as express from 'express';\n+┊  ┊ 5┊import { graphiqlExpress, graphqlExpress } from \"apollo-server-express\";\n+┊  ┊ 6┊\n+┊  ┊ 7┊const PORT = 3000;\n+┊  ┊ 8┊\n+┊  ┊ 9┊const app = express();\n+┊  ┊10┊\n+┊  ┊11┊app.use(cors());\n+┊  ┊12┊app.use(bodyParser.json());\n+┊  ┊13┊\n+┊  ┊14┊app.use('/graphql', graphqlExpress(req => ({\n+┊  ┊15┊  schema: schema,\n+┊  ┊16┊  context: req,\n+┊  ┊17┊})));\n+┊  ┊18┊\n+┊  ┊19┊app.use('/graphiql', graphiqlExpress({\n+┊  ┊20┊  endpointURL: '/graphql',\n+┊  ┊21┊}));\n+┊  ┊22┊\n+┊  ┊23┊app.listen(PORT);\n```\n\n[}]: #\n\nNow we want to feed our graphql server with some data. Soon we will need `moment`, so let's install it:\n\n    $ npm install moment\n\nNow we can create a fake db:\n\n[{]: <helper> (diffStep \"1.2\" files=\"db.ts\" module=\"server\")\n\n#### Step 1.2: Add fake db\n\n##### Added db.ts\n```diff\n@@ -0,0 +1,438 @@\n+┊   ┊  1┊import * as moment from 'moment';\n+┊   ┊  2┊\n+┊   ┊  3┊export enum MessageType {\n+┊   ┊  4┊  PICTURE,\n+┊   ┊  5┊  TEXT,\n+┊   ┊  6┊  LOCATION,\n+┊   ┊  7┊}\n+┊   ┊  8┊\n+┊   ┊  9┊export interface User {\n+┊   ┊ 10┊  id: number,\n+┊   ┊ 11┊  username: string,\n+┊   ┊ 12┊  password: string,\n+┊   ┊ 13┊  name: string,\n+┊   ┊ 14┊  picture?: string | null,\n+┊   ┊ 15┊  phone?: string | null,\n+┊   ┊ 16┊}\n+┊   ┊ 17┊\n+┊   ┊ 18┊export interface Chat {\n+┊   ┊ 19┊  id: number,\n+┊   ┊ 20┊  name?: string | null,\n+┊   ┊ 21┊  picture?: string | null,\n+┊   ┊ 22┊  // All members, current and past ones.\n+┊   ┊ 23┊  allTimeMemberIds: number[],\n+┊   ┊ 24┊  // Whoever gets the chat listed. For groups includes past members who still didn't delete the group.\n+┊   ┊ 25┊  listingMemberIds: number[],\n+┊   ┊ 26┊  // Actual members of the group (they are not the only ones who get the group listed). Null for chats.\n+┊   ┊ 27┊  actualGroupMemberIds?: number[] | null,\n+┊   ┊ 28┊  adminIds?: number[] | null,\n+┊   ┊ 29┊  ownerId?: number | null,\n+┊   ┊ 30┊  messages: Message[],\n+┊   ┊ 31┊}\n+┊   ┊ 32┊\n+┊   ┊ 33┊export interface Message {\n+┊   ┊ 34┊  id: number,\n+┊   ┊ 35┊  chatId: number,\n+┊   ┊ 36┊  senderId: number,\n+┊   ┊ 37┊  content: string,\n+┊   ┊ 38┊  createdAt: number,\n+┊   ┊ 39┊  type: MessageType,\n+┊   ┊ 40┊  recipients: Recipient[],\n+┊   ┊ 41┊  holderIds: number[],\n+┊   ┊ 42┊}\n+┊   ┊ 43┊\n+┊   ┊ 44┊export interface Recipient {\n+┊   ┊ 45┊  userId: number,\n+┊   ┊ 46┊  messageId: number,\n+┊   ┊ 47┊  chatId: number,\n+┊   ┊ 48┊  receivedAt: number | null,\n+┊   ┊ 49┊  readAt: number | null,\n+┊   ┊ 50┊}\n+┊   ┊ 51┊\n+┊   ┊ 52┊const users: User[] = [\n+┊   ┊ 53┊  {\n+┊   ┊ 54┊    id: 1,\n+┊   ┊ 55┊    username: 'ethan',\n+┊   ┊ 56┊    password: '$2a$08$NO9tkFLCoSqX1c5wk3s7z.JfxaVMKA.m7zUDdDwEquo4rvzimQeJm', // 111\n+┊   ┊ 57┊    name: 'Ethan Gonzalez',\n+┊   ┊ 58┊    picture: 'https://randomuser.me/api/portraits/thumb/men/1.jpg',\n+┊   ┊ 59┊    phone: '+391234567890',\n+┊   ┊ 60┊  },\n+┊   ┊ 61┊  {\n+┊   ┊ 62┊    id: 2,\n+┊   ┊ 63┊    username: 'bryan',\n+┊   ┊ 64┊    password: '$2a$08$xE4FuCi/ifxjL2S8CzKAmuKLwv18ktksSN.F3XYEnpmcKtpbpeZgO', // 222\n+┊   ┊ 65┊    name: 'Bryan Wallace',\n+┊   ┊ 66┊    picture: 'https://randomuser.me/api/portraits/thumb/men/2.jpg',\n+┊   ┊ 67┊    phone: '+391234567891',\n+┊   ┊ 68┊  },\n+┊   ┊ 69┊  {\n+┊   ┊ 70┊    id: 3,\n+┊   ┊ 71┊    username: 'avery',\n+┊   ┊ 72┊    password: '$2a$08$UHgH7J8G6z1mGQn2qx2kdeWv0jvgHItyAsL9hpEUI3KJmhVW5Q1d.', // 333\n+┊   ┊ 73┊    name: 'Avery Stewart',\n+┊   ┊ 74┊    picture: 'https://randomuser.me/api/portraits/thumb/women/1.jpg',\n+┊   ┊ 75┊    phone: '+391234567892',\n+┊   ┊ 76┊  },\n+┊   ┊ 77┊  {\n+┊   ┊ 78┊    id: 4,\n+┊   ┊ 79┊    username: 'katie',\n+┊   ┊ 80┊    password: '$2a$08$wR1k5Q3T9FC7fUgB7Gdb9Os/GV7dGBBf4PLlWT7HERMFhmFDt47xi', // 444\n+┊   ┊ 81┊    name: 'Katie Peterson',\n+┊   ┊ 82┊    picture: 'https://randomuser.me/api/portraits/thumb/women/2.jpg',\n+┊   ┊ 83┊    phone: '+391234567893',\n+┊   ┊ 84┊  },\n+┊   ┊ 85┊  {\n+┊   ┊ 86┊    id: 5,\n+┊   ┊ 87┊    username: 'ray',\n+┊   ┊ 88┊    password: '$2a$08$6.mbXqsDX82ZZ7q5d8Osb..JrGSsNp4R3IKj7mxgF6YGT0OmMw242', // 555\n+┊   ┊ 89┊    name: 'Ray Edwards',\n+┊   ┊ 90┊    picture: 'https://randomuser.me/api/portraits/thumb/men/3.jpg',\n+┊   ┊ 91┊    phone: '+391234567894',\n+┊   ┊ 92┊  },\n+┊   ┊ 93┊  {\n+┊   ┊ 94┊    id: 6,\n+┊   ┊ 95┊    username: 'niko',\n+┊   ┊ 96┊    password: '$2a$08$fL5lZR.Rwf9FWWe8XwwlceiPBBim8n9aFtaem.INQhiKT4.Ux3Uq.', // 666\n+┊   ┊ 97┊    name: 'Niccolò Belli',\n+┊   ┊ 98┊    picture: 'https://randomuser.me/api/portraits/thumb/men/4.jpg',\n+┊   ┊ 99┊    phone: '+391234567895',\n+┊   ┊100┊  },\n+┊   ┊101┊  {\n+┊   ┊102┊    id: 7,\n+┊   ┊103┊    username: 'mario',\n+┊   ┊104┊    password: '$2a$08$nDHDmWcVxDnH5DDT3HMMC.psqcnu6wBiOgkmJUy9IH..qxa3R6YrO', // 777\n+┊   ┊105┊    name: 'Mario Rossi',\n+┊   ┊106┊    picture: 'https://randomuser.me/api/portraits/thumb/men/5.jpg',\n+┊   ┊107┊    phone: '+391234567896',\n+┊   ┊108┊  },\n+┊   ┊109┊];\n+┊   ┊110┊\n+┊   ┊111┊const chats: Chat[] = [\n+┊   ┊112┊  {\n+┊   ┊113┊    id: 1,\n+┊   ┊114┊    name: null,\n+┊   ┊115┊    picture: null,\n+┊   ┊116┊    allTimeMemberIds: [1, 3],\n+┊   ┊117┊    listingMemberIds: [1, 3],\n+┊   ┊118┊    adminIds: null,\n+┊   ┊119┊    ownerId: null,\n+┊   ┊120┊    messages: [\n+┊   ┊121┊      {\n+┊   ┊122┊        id: 1,\n+┊   ┊123┊        chatId: 1,\n+┊   ┊124┊        senderId: 1,\n+┊   ┊125┊        content: 'You on your way?',\n+┊   ┊126┊        createdAt: moment().subtract(1, 'hours').unix(),\n+┊   ┊127┊        type: MessageType.TEXT,\n+┊   ┊128┊        recipients: [\n+┊   ┊129┊          {\n+┊   ┊130┊            userId: 3,\n+┊   ┊131┊            messageId: 1,\n+┊   ┊132┊            chatId: 1,\n+┊   ┊133┊            receivedAt: null,\n+┊   ┊134┊            readAt: null,\n+┊   ┊135┊          },\n+┊   ┊136┊        ],\n+┊   ┊137┊        holderIds: [1, 3],\n+┊   ┊138┊      },\n+┊   ┊139┊      {\n+┊   ┊140┊        id: 2,\n+┊   ┊141┊        chatId: 1,\n+┊   ┊142┊        senderId: 3,\n+┊   ┊143┊        content: 'Yep!',\n+┊   ┊144┊        createdAt: moment().subtract(1, 'hours').add(5, 'minutes').unix(),\n+┊   ┊145┊        type: MessageType.TEXT,\n+┊   ┊146┊        recipients: [\n+┊   ┊147┊          {\n+┊   ┊148┊            userId: 1,\n+┊   ┊149┊            messageId: 2,\n+┊   ┊150┊            chatId: 1,\n+┊   ┊151┊            receivedAt: null,\n+┊   ┊152┊            readAt: null,\n+┊   ┊153┊          },\n+┊   ┊154┊        ],\n+┊   ┊155┊        holderIds: [3, 1],\n+┊   ┊156┊      },\n+┊   ┊157┊    ],\n+┊   ┊158┊  },\n+┊   ┊159┊  {\n+┊   ┊160┊    id: 2,\n+┊   ┊161┊    name: null,\n+┊   ┊162┊    picture: null,\n+┊   ┊163┊    allTimeMemberIds: [1, 4],\n+┊   ┊164┊    listingMemberIds: [1, 4],\n+┊   ┊165┊    adminIds: null,\n+┊   ┊166┊    ownerId: null,\n+┊   ┊167┊    messages: [\n+┊   ┊168┊      {\n+┊   ┊169┊        id: 1,\n+┊   ┊170┊        chatId: 2,\n+┊   ┊171┊        senderId: 1,\n+┊   ┊172┊        content: 'Hey, it\\'s me',\n+┊   ┊173┊        createdAt: moment().subtract(2, 'hours').unix(),\n+┊   ┊174┊        type: MessageType.TEXT,\n+┊   ┊175┊        recipients: [\n+┊   ┊176┊          {\n+┊   ┊177┊            userId: 4,\n+┊   ┊178┊            messageId: 1,\n+┊   ┊179┊            chatId: 2,\n+┊   ┊180┊            receivedAt: null,\n+┊   ┊181┊            readAt: null,\n+┊   ┊182┊          },\n+┊   ┊183┊        ],\n+┊   ┊184┊        holderIds: [1, 4],\n+┊   ┊185┊      },\n+┊   ┊186┊    ],\n+┊   ┊187┊  },\n+┊   ┊188┊  {\n+┊   ┊189┊    id: 3,\n+┊   ┊190┊    name: null,\n+┊   ┊191┊    picture: null,\n+┊   ┊192┊    allTimeMemberIds: [1, 5],\n+┊   ┊193┊    listingMemberIds: [1, 5],\n+┊   ┊194┊    adminIds: null,\n+┊   ┊195┊    ownerId: null,\n+┊   ┊196┊    messages: [\n+┊   ┊197┊      {\n+┊   ┊198┊        id: 1,\n+┊   ┊199┊        chatId: 3,\n+┊   ┊200┊        senderId: 1,\n+┊   ┊201┊        content: 'I should buy a boat',\n+┊   ┊202┊        createdAt: moment().subtract(1, 'days').unix(),\n+┊   ┊203┊        type: MessageType.TEXT,\n+┊   ┊204┊        recipients: [\n+┊   ┊205┊          {\n+┊   ┊206┊            userId: 5,\n+┊   ┊207┊            messageId: 1,\n+┊   ┊208┊            chatId: 3,\n+┊   ┊209┊            receivedAt: null,\n+┊   ┊210┊            readAt: null,\n+┊   ┊211┊          },\n+┊   ┊212┊        ],\n+┊   ┊213┊        holderIds: [1, 5],\n+┊   ┊214┊      },\n+┊   ┊215┊      {\n+┊   ┊216┊        id: 2,\n+┊   ┊217┊        chatId: 3,\n+┊   ┊218┊        senderId: 1,\n+┊   ┊219┊        content: 'You still there?',\n+┊   ┊220┊        createdAt: moment().subtract(1, 'days').add(16, 'hours').unix(),\n+┊   ┊221┊        type: MessageType.TEXT,\n+┊   ┊222┊        recipients: [\n+┊   ┊223┊          {\n+┊   ┊224┊            userId: 5,\n+┊   ┊225┊            messageId: 2,\n+┊   ┊226┊            chatId: 3,\n+┊   ┊227┊            receivedAt: null,\n+┊   ┊228┊            readAt: null,\n+┊   ┊229┊          },\n+┊   ┊230┊        ],\n+┊   ┊231┊        holderIds: [1, 5],\n+┊   ┊232┊      },\n+┊   ┊233┊    ],\n+┊   ┊234┊  },\n+┊   ┊235┊  {\n+┊   ┊236┊    id: 4,\n+┊   ┊237┊    name: null,\n+┊   ┊238┊    picture: null,\n+┊   ┊239┊    allTimeMemberIds: [3, 4],\n+┊   ┊240┊    listingMemberIds: [3, 4],\n+┊   ┊241┊    adminIds: null,\n+┊   ┊242┊    ownerId: null,\n+┊   ┊243┊    messages: [\n+┊   ┊244┊      {\n+┊   ┊245┊        id: 1,\n+┊   ┊246┊        chatId: 4,\n+┊   ┊247┊        senderId: 3,\n+┊   ┊248┊        content: 'Look at my mukluks!',\n+┊   ┊249┊        createdAt: moment().subtract(4, 'days').unix(),\n+┊   ┊250┊        type: MessageType.TEXT,\n+┊   ┊251┊        recipients: [\n+┊   ┊252┊          {\n+┊   ┊253┊            userId: 4,\n+┊   ┊254┊            messageId: 1,\n+┊   ┊255┊            chatId: 4,\n+┊   ┊256┊            receivedAt: null,\n+┊   ┊257┊            readAt: null,\n+┊   ┊258┊          },\n+┊   ┊259┊        ],\n+┊   ┊260┊        holderIds: [3, 4],\n+┊   ┊261┊      },\n+┊   ┊262┊    ],\n+┊   ┊263┊  },\n+┊   ┊264┊  {\n+┊   ┊265┊    id: 5,\n+┊   ┊266┊    name: null,\n+┊   ┊267┊    picture: null,\n+┊   ┊268┊    allTimeMemberIds: [2, 5],\n+┊   ┊269┊    listingMemberIds: [2, 5],\n+┊   ┊270┊    adminIds: null,\n+┊   ┊271┊    ownerId: null,\n+┊   ┊272┊    messages: [\n+┊   ┊273┊      {\n+┊   ┊274┊        id: 1,\n+┊   ┊275┊        chatId: 5,\n+┊   ┊276┊        senderId: 2,\n+┊   ┊277┊        content: 'This is wicked good ice cream.',\n+┊   ┊278┊        createdAt: moment().subtract(2, 'weeks').unix(),\n+┊   ┊279┊        type: MessageType.TEXT,\n+┊   ┊280┊        recipients: [\n+┊   ┊281┊          {\n+┊   ┊282┊            userId: 5,\n+┊   ┊283┊            messageId: 1,\n+┊   ┊284┊            chatId: 5,\n+┊   ┊285┊            receivedAt: null,\n+┊   ┊286┊            readAt: null,\n+┊   ┊287┊          },\n+┊   ┊288┊        ],\n+┊   ┊289┊        holderIds: [2, 5],\n+┊   ┊290┊      },\n+┊   ┊291┊      {\n+┊   ┊292┊        id: 2,\n+┊   ┊293┊        chatId: 6,\n+┊   ┊294┊        senderId: 5,\n+┊   ┊295┊        content: 'Love it!',\n+┊   ┊296┊        createdAt: moment().subtract(2, 'weeks').add(10, 'minutes').unix(),\n+┊   ┊297┊        type: MessageType.TEXT,\n+┊   ┊298┊        recipients: [\n+┊   ┊299┊          {\n+┊   ┊300┊            userId: 2,\n+┊   ┊301┊            messageId: 2,\n+┊   ┊302┊            chatId: 5,\n+┊   ┊303┊            receivedAt: null,\n+┊   ┊304┊            readAt: null,\n+┊   ┊305┊          },\n+┊   ┊306┊        ],\n+┊   ┊307┊        holderIds: [5, 2],\n+┊   ┊308┊      },\n+┊   ┊309┊    ],\n+┊   ┊310┊  },\n+┊   ┊311┊  {\n+┊   ┊312┊    id: 6,\n+┊   ┊313┊    name: null,\n+┊   ┊314┊    picture: null,\n+┊   ┊315┊    allTimeMemberIds: [1, 6],\n+┊   ┊316┊    listingMemberIds: [1],\n+┊   ┊317┊    adminIds: null,\n+┊   ┊318┊    ownerId: null,\n+┊   ┊319┊    messages: [],\n+┊   ┊320┊  },\n+┊   ┊321┊  {\n+┊   ┊322┊    id: 7,\n+┊   ┊323┊    name: null,\n+┊   ┊324┊    picture: null,\n+┊   ┊325┊    allTimeMemberIds: [2, 1],\n+┊   ┊326┊    listingMemberIds: [2],\n+┊   ┊327┊    adminIds: null,\n+┊   ┊328┊    ownerId: null,\n+┊   ┊329┊    messages: [],\n+┊   ┊330┊  },\n+┊   ┊331┊  {\n+┊   ┊332┊    id: 8,\n+┊   ┊333┊    name: 'A user 0 group',\n+┊   ┊334┊    picture: 'https://randomuser.me/api/portraits/thumb/lego/1.jpg',\n+┊   ┊335┊    allTimeMemberIds: [1, 3, 4, 6],\n+┊   ┊336┊    listingMemberIds: [1, 3, 4, 6],\n+┊   ┊337┊    actualGroupMemberIds: [1, 4, 6],\n+┊   ┊338┊    adminIds: [1, 6],\n+┊   ┊339┊    ownerId: 1,\n+┊   ┊340┊    messages: [\n+┊   ┊341┊      {\n+┊   ┊342┊        id: 1,\n+┊   ┊343┊        chatId: 8,\n+┊   ┊344┊        senderId: 1,\n+┊   ┊345┊        content: 'I made a group',\n+┊   ┊346┊        createdAt: moment().subtract(2, 'weeks').unix(),\n+┊   ┊347┊        type: MessageType.TEXT,\n+┊   ┊348┊        recipients: [\n+┊   ┊349┊          {\n+┊   ┊350┊            userId: 3,\n+┊   ┊351┊            messageId: 1,\n+┊   ┊352┊            chatId: 8,\n+┊   ┊353┊            receivedAt: null,\n+┊   ┊354┊            readAt: null,\n+┊   ┊355┊          },\n+┊   ┊356┊          {\n+┊   ┊357┊            userId: 4,\n+┊   ┊358┊            messageId: 1,\n+┊   ┊359┊            chatId: 8,\n+┊   ┊360┊            receivedAt: moment().subtract(2, 'weeks').add(1, 'minutes').unix(),\n+┊   ┊361┊            readAt: moment().subtract(2, 'weeks').add(5, 'minutes').unix(),\n+┊   ┊362┊          },\n+┊   ┊363┊          {\n+┊   ┊364┊            userId: 6,\n+┊   ┊365┊            messageId: 1,\n+┊   ┊366┊            chatId: 8,\n+┊   ┊367┊            receivedAt: null,\n+┊   ┊368┊            readAt: null,\n+┊   ┊369┊          },\n+┊   ┊370┊        ],\n+┊   ┊371┊        holderIds: [1, 3, 4, 6],\n+┊   ┊372┊      },\n+┊   ┊373┊      {\n+┊   ┊374┊        id: 2,\n+┊   ┊375┊        chatId: 8,\n+┊   ┊376┊        senderId: 1,\n+┊   ┊377┊        content: 'Ops, user 3 was not supposed to be here',\n+┊   ┊378┊        createdAt: moment().subtract(2, 'weeks').add(2, 'minutes').unix(),\n+┊   ┊379┊        type: MessageType.TEXT,\n+┊   ┊380┊        recipients: [\n+┊   ┊381┊          {\n+┊   ┊382┊            userId: 4,\n+┊   ┊383┊            messageId: 2,\n+┊   ┊384┊            chatId: 8,\n+┊   ┊385┊            receivedAt: moment().subtract(2, 'weeks').add(3, 'minutes').unix(),\n+┊   ┊386┊            readAt: moment().subtract(2, 'weeks').add(5, 'minutes').unix(),\n+┊   ┊387┊          },\n+┊   ┊388┊          {\n+┊   ┊389┊            userId: 6,\n+┊   ┊390┊            messageId: 2,\n+┊   ┊391┊            chatId: 8,\n+┊   ┊392┊            receivedAt: null,\n+┊   ┊393┊            readAt: null,\n+┊   ┊394┊          },\n+┊   ┊395┊        ],\n+┊   ┊396┊        holderIds: [1, 4, 6],\n+┊   ┊397┊      },\n+┊   ┊398┊      {\n+┊   ┊399┊        id: 3,\n+┊   ┊400┊        chatId: 8,\n+┊   ┊401┊        senderId: 4,\n+┊   ┊402┊        content: 'Awesome!',\n+┊   ┊403┊        createdAt: moment().subtract(2, 'weeks').add(10, 'minutes').unix(),\n+┊   ┊404┊        type: MessageType.TEXT,\n+┊   ┊405┊        recipients: [\n+┊   ┊406┊          {\n+┊   ┊407┊            userId: 1,\n+┊   ┊408┊            messageId: 3,\n+┊   ┊409┊            chatId: 8,\n+┊   ┊410┊            receivedAt: null,\n+┊   ┊411┊            readAt: null,\n+┊   ┊412┊          },\n+┊   ┊413┊          {\n+┊   ┊414┊            userId: 6,\n+┊   ┊415┊            messageId: 3,\n+┊   ┊416┊            chatId: 8,\n+┊   ┊417┊            receivedAt: null,\n+┊   ┊418┊            readAt: null,\n+┊   ┊419┊          },\n+┊   ┊420┊        ],\n+┊   ┊421┊        holderIds: [1, 4, 6],\n+┊   ┊422┊      },\n+┊   ┊423┊    ],\n+┊   ┊424┊  },\n+┊   ┊425┊  {\n+┊   ┊426┊    id: 9,\n+┊   ┊427┊    name: 'A user 5 group',\n+┊   ┊428┊    picture: null,\n+┊   ┊429┊    allTimeMemberIds: [6, 3],\n+┊   ┊430┊    listingMemberIds: [6, 3],\n+┊   ┊431┊    actualGroupMemberIds: [6, 3],\n+┊   ┊432┊    adminIds: [6],\n+┊   ┊433┊    ownerId: 6,\n+┊   ┊434┊    messages: [],\n+┊   ┊435┊  },\n+┊   ┊436┊];\n+┊   ┊437┊\n+┊   ┊438┊export const db = {users, chats};\n```\n\n[}]: #\n\nIts' finally time to create our schema and our resolvers:\n\n[{]: <helper> (diffStep \"1.3\" module=\"server\")\n\n#### Step 1.3: Add resolvers and schema\n\n##### Changed schema&#x2F;resolvers.ts\n```diff\n@@ -1,6 +1,51 @@\n+┊  ┊ 1┊import { Chat, db, Message, Recipient, User } from \"../db\";\n ┊ 1┊ 2┊import { IResolvers } from \"graphql-tools/dist/Interfaces\";\n ┊ 2┊ 3┊\n+┊  ┊ 4┊let users = db.users;\n+┊  ┊ 5┊let chats = db.chats;\n+┊  ┊ 6┊const currentUser = 1;\n+┊  ┊ 7┊\n ┊ 3┊ 8┊export const resolvers: IResolvers = {\n ┊ 4┊ 9┊  Query: {\n+┊  ┊10┊    // Show all users for the moment.\n+┊  ┊11┊    users: (): User[] => users.filter(user => user.id !== currentUser),\n+┊  ┊12┊    chats: (): Chat[] => chats.filter(chat => chat.listingMemberIds.includes(currentUser)),\n+┊  ┊13┊    chat: (obj: any, {chatId}): Chat | null => chats.find(chat => chat.id === chatId) || null,\n+┊  ┊14┊  },\n+┊  ┊15┊  Chat: {\n+┊  ┊16┊    name: (chat: Chat): string => chat.name ? chat.name : users\n+┊  ┊17┊      .find(user => user.id === chat.allTimeMemberIds.find(userId => userId !== currentUser))!.name,\n+┊  ┊18┊    picture: (chat: Chat) => chat.name ? chat.picture : users\n+┊  ┊19┊      .find(user => user.id === chat.allTimeMemberIds.find(userId => userId !== currentUser))!.picture,\n+┊  ┊20┊    allTimeMembers: (chat: Chat): User[] => users.filter(user => chat.allTimeMemberIds.includes(user.id)),\n+┊  ┊21┊    listingMembers: (chat: Chat): User[] => users.filter(user => chat.listingMemberIds.includes(user.id)),\n+┊  ┊22┊    actualGroupMembers: (chat: Chat): User[] => users.filter(user => chat.actualGroupMemberIds && chat.actualGroupMemberIds.includes(user.id)),\n+┊  ┊23┊    admins: (chat: Chat): User[] => users.filter(user => chat.adminIds && chat.adminIds.includes(user.id)),\n+┊  ┊24┊    owner: (chat: Chat): User | null => users.find(user => chat.ownerId === user.id) || null,\n+┊  ┊25┊    messages: (chat: Chat, {amount = null}: {amount: number}): Message[] => {\n+┊  ┊26┊      const messages = chat.messages\n+┊  ┊27┊      .filter(message => message.holderIds.includes(currentUser))\n+┊  ┊28┊      .sort((a, b) => b.createdAt - a.createdAt) || <Message[]>[];\n+┊  ┊29┊      return (amount ? messages.slice(0, amount) : messages).reverse();\n+┊  ┊30┊    },\n+┊  ┊31┊    unreadMessages: (chat: Chat): number => chat.messages\n+┊  ┊32┊      .filter(message => message.holderIds.includes(currentUser) &&\n+┊  ┊33┊        message.recipients.find(recipient => recipient.userId === currentUser && !recipient.readAt))\n+┊  ┊34┊      .length,\n+┊  ┊35┊    isGroup: (chat: Chat): boolean => !!chat.name,\n+┊  ┊36┊  },\n+┊  ┊37┊  Message: {\n+┊  ┊38┊    chat: (message: Message): Chat | null => chats.find(chat => message.chatId === chat.id) || null,\n+┊  ┊39┊    sender: (message: Message): User | null => users.find(user => user.id === message.senderId) || null,\n+┊  ┊40┊    holders: (message: Message): User[] => users.filter(user => message.holderIds.includes(user.id)),\n+┊  ┊41┊    ownership: (message: Message): boolean => message.senderId === currentUser,\n+┊  ┊42┊  },\n+┊  ┊43┊  Recipient: {\n+┊  ┊44┊    user: (recipient: Recipient): User | null => users.find(user => recipient.userId === user.id) || null,\n+┊  ┊45┊    message: (recipient: Recipient): Message | null => {\n+┊  ┊46┊      const chat = chats.find(chat => recipient.chatId === chat.id);\n+┊  ┊47┊      return chat ? chat.messages.find(message => recipient.messageId === message.id) || null : null;\n+┊  ┊48┊    },\n+┊  ┊49┊    chat: (recipient: Recipient): Chat | null => chats.find(chat => recipient.chatId === chat.id) || null,\n ┊ 5┊50┊  },\n ┊ 6┊51┊};\n```\n\n##### Changed schema&#x2F;typeDefs.ts\n```diff\n@@ -1,4 +1,70 @@\n ┊ 1┊ 1┊import { ITypeDefinitions } from \"graphql-tools/dist/Interfaces\";\n ┊ 2┊ 2┊\n ┊ 3┊ 3┊export const typeDefs: ITypeDefinitions = `\n+┊  ┊ 4┊  type Query {\n+┊  ┊ 5┊    users: [User!]\n+┊  ┊ 6┊    chats: [Chat!]\n+┊  ┊ 7┊    chat(chatId: ID!): Chat\n+┊  ┊ 8┊  }\n+┊  ┊ 9┊\n+┊  ┊10┊  enum MessageType {\n+┊  ┊11┊    LOCATION\n+┊  ┊12┊    TEXT\n+┊  ┊13┊    PICTURE\n+┊  ┊14┊  }\n+┊  ┊15┊  \n+┊  ┊16┊  type Chat {\n+┊  ┊17┊    #May be a chat or a group\n+┊  ┊18┊    id: ID!\n+┊  ┊19┊    #Computed for chats\n+┊  ┊20┊    name: String\n+┊  ┊21┊    #Computed for chats\n+┊  ┊22┊    picture: String\n+┊  ┊23┊    #All members, current and past ones.\n+┊  ┊24┊    allTimeMembers: [User!]!\n+┊  ┊25┊    #Whoever gets the chat listed. For groups includes past members who still didn't delete the group.\n+┊  ┊26┊    listingMembers: [User!]!\n+┊  ┊27┊    #Actual members of the group (they are not the only ones who get the group listed). Null for chats.\n+┊  ┊28┊    actualGroupMembers: [User!]!\n+┊  ┊29┊    #Null for chats\n+┊  ┊30┊    admins: [User!]\n+┊  ┊31┊    #If null the group is read-only. Null for chats.\n+┊  ┊32┊    owner: User\n+┊  ┊33┊    messages(amount: Int): [Message]!\n+┊  ┊34┊    #Computed property\n+┊  ┊35┊    unreadMessages: Int!\n+┊  ┊36┊    #Computed property\n+┊  ┊37┊    isGroup: Boolean!\n+┊  ┊38┊  }\n+┊  ┊39┊\n+┊  ┊40┊  type Message {\n+┊  ┊41┊    id: ID!\n+┊  ┊42┊    sender: User!\n+┊  ┊43┊    chat: Chat!\n+┊  ┊44┊    content: String!\n+┊  ┊45┊    createdAt: String!\n+┊  ┊46┊    #FIXME: should return MessageType\n+┊  ┊47┊    type: Int!\n+┊  ┊48┊    #Whoever received the message\n+┊  ┊49┊    recipients: [Recipient!]!\n+┊  ┊50┊    #Whoever still holds a copy of the message. Cannot be null because the message gets deleted otherwise\n+┊  ┊51┊    holders: [User!]!\n+┊  ┊52┊    #Computed property\n+┊  ┊53┊    ownership: Boolean!\n+┊  ┊54┊  }\n+┊  ┊55┊  \n+┊  ┊56┊  type Recipient {\n+┊  ┊57┊    user: User!\n+┊  ┊58┊    message: Message!\n+┊  ┊59┊    chat: Chat!\n+┊  ┊60┊    receivedAt: String\n+┊  ┊61┊    readAt: String\n+┊  ┊62┊  }\n+┊  ┊63┊\n+┊  ┊64┊  type User {\n+┊  ┊65┊    id: ID!\n+┊  ┊66┊    name: String\n+┊  ┊67┊    picture: String\n+┊  ┊68┊    phone: String\n+┊  ┊69┊  }\n ┊ 4┊70┊`;\n```\n\n[}]: #\n\nOut basic server is already done and working. We still have no way to do any kind of mutation, but we already set up several queries to return a list of users or chats.\nIn particular we can choose if we want to return all the chats (and how many messages we want to return for each chat) or if we want to return a single chat. We can also choose which and how many properties we want to return for each query.\nWe can start the server by simply running:\n\n    $ npm start\n\n## Client\n\nNow we can concentrate on the client and bootstrap it using angular-cli.\nFirst you will need to install angular-cli globally with:\n\n    $ npm install -g @angular/cli\n\nThen we can create a new project from scratch:\n\n    $ ng new client --style scss\n\nTime to install a couple of packages:\n\n    $ npm install apollo-angular apollo-angular-link-http apollo-cache-inmemory apollo-client apollo-link graphql graphql-tag\n    $ npm install --save-dev @types/graphql\n\nWe will also need to add `esnext.asynciterable` to the libs:\n\n[{]: <helper> (diffStep \"1.1\" files=\"tsconfig.json\" module=\"client\")\n\n#### Step 1.1: Add angular-apollo to app module\n\n##### Changed tsconfig.json\n```diff\n@@ -8,13 +8,15 @@\n ┊ 8┊ 8┊    \"moduleResolution\": \"node\",\n ┊ 9┊ 9┊    \"emitDecoratorMetadata\": true,\n ┊10┊10┊    \"experimentalDecorators\": true,\n+┊  ┊11┊    \"downlevelIteration\": true,\n ┊11┊12┊    \"target\": \"es5\",\n ┊12┊13┊    \"typeRoots\": [\n ┊13┊14┊      \"node_modules/@types\"\n ┊14┊15┊    ],\n ┊15┊16┊    \"lib\": [\n ┊16┊17┊      \"es2017\",\n-┊17┊  ┊      \"dom\"\n+┊  ┊18┊      \"dom\",\n+┊  ┊19┊      \"esnext.asynciterable\"\n ┊18┊20┊    ]\n ┊19┊21┊  }\n ┊20┊22┊}\n```\n\n[}]: #\n\nWe also added the `downlevelIteration` option which is required to make sure that everything will be transpiled to ES5.\n\nTo get started using Apollo with Angular, we need to import two NgModules, `ApolloModule` and `HttpLinkModule`.\n\n- `ApolloModule` is the center of using GraphQL in your app! It includes all needed services that allows to use ApolloClient’s features.\n- `HttpLinkModule` makes it easy to fetch data in Angular.\n\n`HttpLinkModule` is optional, you can replace it with any other Link.\nIts biggest advantage of all is that it uses `HttpClient` internally so it’s possible to use it in `NativeScript` or in combination with any other `HttpClient` provider. By using `HttpLinkModule` you get Server-Side Rendering for free, without any additional work.\n\nTo get started, inject `Apollo` and `HttpLink` services and then create a client:\n\n[{]: <helper> (diffStep \"1.1\" files=\"app.module.ts\" module=\"client\")\n\n#### Step 1.1: Add angular-apollo to app module\n\n##### Changed src&#x2F;app&#x2F;app.module.ts\n```diff\n@@ -2,15 +2,33 @@\n ┊ 2┊ 2┊import { NgModule } from '@angular/core';\n ┊ 3┊ 3┊\n ┊ 4┊ 4┊import { AppComponent } from './app.component';\n+┊  ┊ 5┊import {HttpClientModule} from '@angular/common/http';\n+┊  ┊ 6┊import {HttpLink, HttpLinkModule, Options} from 'apollo-angular-link-http';\n+┊  ┊ 7┊import {Apollo, ApolloModule} from 'apollo-angular';\n+┊  ┊ 8┊import {InMemoryCache} from 'apollo-cache-inmemory';\n ┊ 5┊ 9┊\n ┊ 6┊10┊@NgModule({\n ┊ 7┊11┊  declarations: [\n ┊ 8┊12┊    AppComponent\n ┊ 9┊13┊  ],\n ┊10┊14┊  imports: [\n-┊11┊  ┊    BrowserModule\n+┊  ┊15┊    BrowserModule,\n+┊  ┊16┊    // Apollo\n+┊  ┊17┊    ApolloModule,\n+┊  ┊18┊    HttpLinkModule,\n+┊  ┊19┊    HttpClientModule,\n ┊12┊20┊  ],\n ┊13┊21┊  providers: [],\n ┊14┊22┊  bootstrap: [AppComponent]\n ┊15┊23┊})\n-┊16┊  ┊export class AppModule { }\n+┊  ┊24┊export class AppModule {\n+┊  ┊25┊  constructor(\n+┊  ┊26┊    apollo: Apollo,\n+┊  ┊27┊    httpLink: HttpLink,\n+┊  ┊28┊  ) {\n+┊  ┊29┊    apollo.create({\n+┊  ┊30┊      link: httpLink.create(<Options>{uri: 'http://localhost:3000/graphql'}),\n+┊  ┊31┊      cache: new InMemoryCache(),\n+┊  ┊32┊    });\n+┊  ┊33┊  }\n+┊  ┊34┊}\n```\n\n[}]: #\n\nWe're using the `InMemory` cache, but there are several options like `Redux`, `Hermes`, `ngrx`...\n\nThe `gql` template tag is what you use to define GraphQL queries in your Apollo apps. It parses your GraphQL query into the `GraphQL.js AST format` which may then be consumed by Apollo methods. Whenever Apollo is asking for a GraphQL query you will always want to wrap it in a `gql` template tag.\n\nYou can embed a GraphQL document containing only fragments inside of another GraphQL document using template string interpolation. This allows you to use fragments defined in one part of your codebase inside of a query defined in a completely different file.\n\n[{]: <helper> (diffStep \"1.2\" files=\"src/graphql\" module=\"client\")\n\n#### Step 1.2: Add chats service\n\n##### Added src&#x2F;graphql&#x2F;fragment.ts\n```diff\n@@ -0,0 +1,51 @@\n+┊  ┊ 1┊import gql from 'graphql-tag';\n+┊  ┊ 2┊import {DocumentNode} from 'graphql';\n+┊  ┊ 3┊\n+┊  ┊ 4┊export const fragments: {\n+┊  ┊ 5┊  [key: string]: DocumentNode\n+┊  ┊ 6┊} = {\n+┊  ┊ 7┊  chatWithoutMessages: gql`\n+┊  ┊ 8┊    fragment ChatWithoutMessages on Chat {\n+┊  ┊ 9┊      id\n+┊  ┊10┊      name\n+┊  ┊11┊      picture\n+┊  ┊12┊      allTimeMembers {\n+┊  ┊13┊        id\n+┊  ┊14┊      }\n+┊  ┊15┊      unreadMessages\n+┊  ┊16┊      isGroup\n+┊  ┊17┊    }\n+┊  ┊18┊  `,\n+┊  ┊19┊  message: gql`\n+┊  ┊20┊    fragment Message on Message {\n+┊  ┊21┊      id\n+┊  ┊22┊      chat {\n+┊  ┊23┊        id\n+┊  ┊24┊      }\n+┊  ┊25┊      sender {\n+┊  ┊26┊        id\n+┊  ┊27┊        name\n+┊  ┊28┊      }\n+┊  ┊29┊      content\n+┊  ┊30┊      createdAt\n+┊  ┊31┊      type\n+┊  ┊32┊      recipients {\n+┊  ┊33┊        user {\n+┊  ┊34┊          id\n+┊  ┊35┊        }\n+┊  ┊36┊        message {\n+┊  ┊37┊          id\n+┊  ┊38┊          chat {\n+┊  ┊39┊            id\n+┊  ┊40┊          }\n+┊  ┊41┊        }\n+┊  ┊42┊        chat {\n+┊  ┊43┊          id\n+┊  ┊44┊        }\n+┊  ┊45┊        receivedAt\n+┊  ┊46┊        readAt\n+┊  ┊47┊      }\n+┊  ┊48┊      ownership\n+┊  ┊49┊    }\n+┊  ┊50┊  `,\n+┊  ┊51┊};\n```\n\n##### Added src&#x2F;graphql&#x2F;getChats.query.ts\n```diff\n@@ -0,0 +1,17 @@\n+┊  ┊ 1┊import gql from 'graphql-tag';\n+┊  ┊ 2┊import {fragments} from './fragment';\n+┊  ┊ 3┊\n+┊  ┊ 4┊// We use the gql tag to parse our query string into a query document\n+┊  ┊ 5┊export const getChatsQuery = gql`\n+┊  ┊ 6┊  query GetChats($amount: Int) {\n+┊  ┊ 7┊    chats {\n+┊  ┊ 8┊      ...ChatWithoutMessages\n+┊  ┊ 9┊      messages(amount: $amount) {\n+┊  ┊10┊        ...Message\n+┊  ┊11┊      }\n+┊  ┊12┊    }\n+┊  ┊13┊  }\n+┊  ┊14┊\n+┊  ┊15┊  ${fragments['chatWithoutMessages']}\n+┊  ┊16┊  ${fragments['message']}\n+┊  ┊17┊`;\n```\n\n[}]: #\n\nLet's create a simple service to query the chats from our just created server:\n\n[{]: <helper> (diffStep \"1.2\" files=\"src/app/services\" module=\"client\")\n\n#### Step 1.2: Add chats service\n\n##### Added src&#x2F;app&#x2F;services&#x2F;chats.service.ts\n```diff\n@@ -0,0 +1,26 @@\n+┊  ┊ 1┊import {ApolloQueryResult, WatchQueryOptions} from 'apollo-client';\n+┊  ┊ 2┊import {map} from 'rxjs/operators';\n+┊  ┊ 3┊import {Apollo} from 'apollo-angular';\n+┊  ┊ 4┊import {Injectable} from '@angular/core';\n+┊  ┊ 5┊import {getChatsQuery} from '../../graphql/getChats.query';\n+┊  ┊ 6┊\n+┊  ┊ 7┊@Injectable()\n+┊  ┊ 8┊export class ChatsService {\n+┊  ┊ 9┊  messagesAmount = 3;\n+┊  ┊10┊\n+┊  ┊11┊  constructor(private apollo: Apollo) {}\n+┊  ┊12┊\n+┊  ┊13┊  getChats() {\n+┊  ┊14┊    const query = this.apollo.watchQuery<any>(<WatchQueryOptions>{\n+┊  ┊15┊      query: getChatsQuery,\n+┊  ┊16┊      variables: {\n+┊  ┊17┊        amount: this.messagesAmount,\n+┊  ┊18┊      },\n+┊  ┊19┊    });\n+┊  ┊20┊    const chats$ = query.valueChanges.pipe(\n+┊  ┊21┊      map((result: ApolloQueryResult<any>) => result.data.chats)\n+┊  ┊22┊    );\n+┊  ┊23┊\n+┊  ┊24┊    return {query, chats$};\n+┊  ┊25┊  }\n+┊  ┊26┊}\n```\n\n[}]: #\n\nWe just learned how to use Apollo to attach GraphQL query results to the Angular UI. The `watchQuery` method returns a `QueryRef` object which has the `valueChanges` property that is an Observable.\nThat information is stored in Apollo Client’s global cache, so if some other query fetches new information about the chats, this component will update to remain consistent.\nIt’s also possible to fetch data only once. The query method of Apollo service returns an Observable that also resolves with the same result as above.\n\n#### But what is a `QueryRef`?\n\nAs you know, `Apollo.query` method returns an Observable that emits a result, just once, but `Apollo.watchQuery` also does the same except it passes multiple results.\nSo why `Apollo.watchQuery` can not expose an Observable?\n\nIn `ApolloClient.watchQuery` returns an Observable, but not a standard one, it contains many useful methods (like `refetch()`) to manipulate the watched query.\nA normal Observable, has only one method, `subscribe()`.\n\nThe API of `QueryRef` is very simple. It has the same methods as the Apollo’s Observable we talked about. To subscribe to query results you have to access `valueChanges` property which exposes a clean RxJS Observable.\n\nWe will use Materials for the UI, so let's install it:\n\n    $ npm install @angular/cdk @angular/material hammerjs ng2-truncate\n\nLet's configure Material:\n\n[{]: <helper> (diffStep \"1.3\" files=\"src/index.ts, src/main.ts, src/styles.scss\" module=\"client\")\n\n#### Step 1.3: List the chats\n\n##### Changed src&#x2F;main.ts\n```diff\n@@ -4,6 +4,9 @@\n ┊ 4┊ 4┊import { AppModule } from './app/app.module';\n ┊ 5┊ 5┊import { environment } from './environments/environment';\n ┊ 6┊ 6┊\n+┊  ┊ 7┊// Material gestures\n+┊  ┊ 8┊import 'hammerjs';\n+┊  ┊ 9┊\n ┊ 7┊10┊if (environment.production) {\n ┊ 8┊11┊  enableProdMode();\n ┊ 9┊12┊}\n```\n\n##### Changed src&#x2F;styles.scss\n```diff\n@@ -1 +1,8 @@\n ┊1┊1┊/* You can add global styles to this file, and also import other style files */\n+┊ ┊2┊\n+┊ ┊3┊/* Meterial theme */\n+┊ ┊4┊@import \"~@angular/material/prebuilt-themes/indigo-pink.css\";\n+┊ ┊5┊\n+┊ ┊6┊body {\n+┊ ┊7┊  margin: 0;\n+┊ ┊8┊}\n```\n\n[}]: #\n\nWe're now creating a `shared` module where we will define our header component where we're going to project a different content from each component:\n\n[{]: <helper> (diffStep \"1.3\" files=\"src/app/shared/*\" module=\"client\")\n\n#### Step 1.3: List the chats\n\n##### Added src&#x2F;app&#x2F;shared&#x2F;components&#x2F;toolbar&#x2F;toolbar.component.scss\n```diff\n@@ -0,0 +1,13 @@\n+┊  ┊ 1┊:host {\n+┊  ┊ 2┊  display: block;\n+┊  ┊ 3┊  height: 8vh;\n+┊  ┊ 4┊}\n+┊  ┊ 5┊\n+┊  ┊ 6┊.mat-toolbar {\n+┊  ┊ 7┊  justify-content: space-between;\n+┊  ┊ 8┊  height: 100%;\n+┊  ┊ 9┊\n+┊  ┊10┊  .left-block {\n+┊  ┊11┊    display: flex;\n+┊  ┊12┊  }\n+┊  ┊13┊}\n```\n\n##### Added src&#x2F;app&#x2F;shared&#x2F;components&#x2F;toolbar&#x2F;toolbar.component.ts\n```diff\n@@ -0,0 +1,18 @@\n+┊  ┊ 1┊import {Component} from '@angular/core';\n+┊  ┊ 2┊\n+┊  ┊ 3┊@Component({\n+┊  ┊ 4┊  selector: 'app-toolbar',\n+┊  ┊ 5┊  template: `\n+┊  ┊ 6┊    <mat-toolbar>\n+┊  ┊ 7┊      <div class=\"left-block\">\n+┊  ┊ 8┊        <ng-content select=\".navigation\"></ng-content>\n+┊  ┊ 9┊        <ng-content select=\".title\"></ng-content>\n+┊  ┊10┊      </div>\n+┊  ┊11┊      <ng-content select=\".menu\"></ng-content>\n+┊  ┊12┊    </mat-toolbar>\n+┊  ┊13┊  `,\n+┊  ┊14┊  styleUrls: ['./toolbar.component.scss']\n+┊  ┊15┊})\n+┊  ┊16┊export class ToolbarComponent {\n+┊  ┊17┊\n+┊  ┊18┊}\n```\n\n##### Added src&#x2F;app&#x2F;shared&#x2F;shared.module.ts\n```diff\n@@ -0,0 +1,28 @@\n+┊  ┊ 1┊import {BrowserModule} from '@angular/platform-browser';\n+┊  ┊ 2┊import {NgModule} from '@angular/core';\n+┊  ┊ 3┊\n+┊  ┊ 4┊import {MatToolbarModule} from '@angular/material';\n+┊  ┊ 5┊import {ToolbarComponent} from './components/toolbar/toolbar.component';\n+┊  ┊ 6┊import {FormsModule} from '@angular/forms';\n+┊  ┊ 7┊import {BrowserAnimationsModule} from '@angular/platform-browser/animations';\n+┊  ┊ 8┊\n+┊  ┊ 9┊@NgModule({\n+┊  ┊10┊  declarations: [\n+┊  ┊11┊    ToolbarComponent,\n+┊  ┊12┊  ],\n+┊  ┊13┊  imports: [\n+┊  ┊14┊    BrowserModule,\n+┊  ┊15┊    // Material\n+┊  ┊16┊    MatToolbarModule,\n+┊  ┊17┊    // Animations\n+┊  ┊18┊    BrowserAnimationsModule,\n+┊  ┊19┊    // Forms\n+┊  ┊20┊    FormsModule,\n+┊  ┊21┊  ],\n+┊  ┊22┊  providers: [],\n+┊  ┊23┊  exports: [\n+┊  ┊24┊    ToolbarComponent,\n+┊  ┊25┊  ],\n+┊  ┊26┊})\n+┊  ┊27┊export class SharedModule {\n+┊  ┊28┊}\n```\n\n[}]: #\n\nNow we want to create the `chats-lister` module, with a container component called `ChatsComponent` and a couple of presentational components.\n\n[{]: <helper> (diffStep \"1.3\" files=\"src/app/chats-lister/*\" module=\"client\")\n\n#### Step 1.3: List the chats\n\n##### Added src&#x2F;app&#x2F;chats-lister&#x2F;chats-lister.module.ts\n```diff\n@@ -0,0 +1,49 @@\n+┊  ┊ 1┊import { BrowserModule } from '@angular/platform-browser';\n+┊  ┊ 2┊import { NgModule } from '@angular/core';\n+┊  ┊ 3┊\n+┊  ┊ 4┊import {BrowserAnimationsModule} from '@angular/platform-browser/animations';\n+┊  ┊ 5┊import {MatButtonModule, MatIconModule, MatListModule, MatMenuModule} from '@angular/material';\n+┊  ┊ 6┊import {RouterModule, Routes} from '@angular/router';\n+┊  ┊ 7┊import {FormsModule} from '@angular/forms';\n+┊  ┊ 8┊import {ChatsService} from '../services/chats.service';\n+┊  ┊ 9┊import {ChatItemComponent} from './components/chat-item/chat-item.component';\n+┊  ┊10┊import {ChatsComponent} from './containers/chats/chats.component';\n+┊  ┊11┊import {ChatsListComponent} from './components/chats-list/chats-list.component';\n+┊  ┊12┊import {TruncateModule} from 'ng2-truncate';\n+┊  ┊13┊import {SharedModule} from '../shared/shared.module';\n+┊  ┊14┊\n+┊  ┊15┊const routes: Routes = [\n+┊  ┊16┊  {path: '', redirectTo: 'chats', pathMatch: 'full'},\n+┊  ┊17┊  {path: 'chats', component: ChatsComponent},\n+┊  ┊18┊];\n+┊  ┊19┊\n+┊  ┊20┊@NgModule({\n+┊  ┊21┊  declarations: [\n+┊  ┊22┊    ChatsComponent,\n+┊  ┊23┊    ChatsListComponent,\n+┊  ┊24┊    ChatItemComponent,\n+┊  ┊25┊  ],\n+┊  ┊26┊  imports: [\n+┊  ┊27┊    BrowserModule,\n+┊  ┊28┊    // Material\n+┊  ┊29┊    MatMenuModule,\n+┊  ┊30┊    MatIconModule,\n+┊  ┊31┊    MatButtonModule,\n+┊  ┊32┊    MatListModule,\n+┊  ┊33┊    // Animations\n+┊  ┊34┊    BrowserAnimationsModule,\n+┊  ┊35┊    // Routing\n+┊  ┊36┊    RouterModule.forChild(routes),\n+┊  ┊37┊    // Forms\n+┊  ┊38┊    FormsModule,\n+┊  ┊39┊    // Truncate Pipe\n+┊  ┊40┊    TruncateModule,\n+┊  ┊41┊    // Feature modules\n+┊  ┊42┊    SharedModule,\n+┊  ┊43┊  ],\n+┊  ┊44┊  providers: [\n+┊  ┊45┊    ChatsService,\n+┊  ┊46┊  ],\n+┊  ┊47┊})\n+┊  ┊48┊export class ChatsListerModule {\n+┊  ┊49┊}\n```\n\n##### Added src&#x2F;app&#x2F;chats-lister&#x2F;components&#x2F;chat-item&#x2F;chat-item.component.scss\n```diff\n@@ -0,0 +1,17 @@\n+┊  ┊ 1┊:host {\n+┊  ┊ 2┊  display: block;\n+┊  ┊ 3┊  width: 100%;\n+┊  ┊ 4┊}\n+┊  ┊ 5┊\n+┊  ┊ 6┊.chat-row {\n+┊  ┊ 7┊  padding: 0;\n+┊  ┊ 8┊  display: flex;\n+┊  ┊ 9┊  width: 100%;\n+┊  ┊10┊  justify-content: space-between;\n+┊  ┊11┊  align-items: center;\n+┊  ┊12┊\n+┊  ┊13┊  .chat-recipient {\n+┊  ┊14┊    display: flex;\n+┊  ┊15┊    width: 60%;\n+┊  ┊16┊  }\n+┊  ┊17┊}\n```\n\n##### Added src&#x2F;app&#x2F;chats-lister&#x2F;components&#x2F;chat-item&#x2F;chat-item.component.ts\n```diff\n@@ -0,0 +1,20 @@\n+┊  ┊ 1┊import {Component, Input} from '@angular/core';\n+┊  ┊ 2┊\n+┊  ┊ 3┊@Component({\n+┊  ┊ 4┊  selector: 'app-chat-item',\n+┊  ┊ 5┊  template: `\n+┊  ┊ 6┊    <div class=\"chat-row\">\n+┊  ┊ 7┊        <div class=\"chat-recipient\">\n+┊  ┊ 8┊          <img *ngIf=\"chat.picture\" [src]=\"chat.picture\" width=\"48\" height=\"48\">\n+┊  ┊ 9┊          <div>{{ chat.name }} [id: {{ chat.id }}]</div>\n+┊  ┊10┊        </div>\n+┊  ┊11┊        <div class=\"chat-content\">{{ chat.messages[chat.messages.length - 1]?.content | truncate : 20 : '...' }}</div>\n+┊  ┊12┊    </div>\n+┊  ┊13┊  `,\n+┊  ┊14┊  styleUrls: ['chat-item.component.scss'],\n+┊  ┊15┊})\n+┊  ┊16┊export class ChatItemComponent {\n+┊  ┊17┊  // tslint:disable-next-line:no-input-rename\n+┊  ┊18┊  @Input('item')\n+┊  ┊19┊  chat: any;\n+┊  ┊20┊}\n```\n\n##### Added src&#x2F;app&#x2F;chats-lister&#x2F;components&#x2F;chats-list&#x2F;chats-list.component.scss\n```diff\n@@ -0,0 +1,3 @@\n+┊ ┊1┊:host {\n+┊ ┊2┊  display: block;\n+┊ ┊3┊}\n```\n\n##### Added src&#x2F;app&#x2F;chats-lister&#x2F;components&#x2F;chats-list&#x2F;chats-list.component.ts\n```diff\n@@ -0,0 +1,20 @@\n+┊  ┊ 1┊import {Component, Input} from '@angular/core';\n+┊  ┊ 2┊\n+┊  ┊ 3┊@Component({\n+┊  ┊ 4┊  selector: 'app-chats-list',\n+┊  ┊ 5┊  template: `\n+┊  ┊ 6┊    <mat-list>\n+┊  ┊ 7┊      <mat-list-item *ngFor=\"let chat of chats\">\n+┊  ┊ 8┊        <app-chat-item [item]=\"chat\"></app-chat-item>\n+┊  ┊ 9┊      </mat-list-item>\n+┊  ┊10┊    </mat-list>\n+┊  ┊11┊  `,\n+┊  ┊12┊  styleUrls: ['chats-list.component.scss'],\n+┊  ┊13┊})\n+┊  ┊14┊export class ChatsListComponent {\n+┊  ┊15┊  // tslint:disable-next-line:no-input-rename\n+┊  ┊16┊  @Input('items')\n+┊  ┊17┊  chats: any[];\n+┊  ┊18┊\n+┊  ┊19┊  constructor() {}\n+┊  ┊20┊}\n```\n\n##### Added src&#x2F;app&#x2F;chats-lister&#x2F;containers&#x2F;chats&#x2F;chats.component.scss\n```diff\n@@ -0,0 +1,5 @@\n+┊ ┊1┊.chat-button {\n+┊ ┊2┊  position: absolute;\n+┊ ┊3┊  bottom: 5vw;\n+┊ ┊4┊  right: 5vw;\n+┊ ┊5┊}\n```\n\n##### Added src&#x2F;app&#x2F;chats-lister&#x2F;containers&#x2F;chats&#x2F;chats.component.ts\n```diff\n@@ -0,0 +1,46 @@\n+┊  ┊ 1┊import {Component, OnInit} from '@angular/core';\n+┊  ┊ 2┊import {ChatsService} from '../../../services/chats.service';\n+┊  ┊ 3┊import {Observable} from 'rxjs';\n+┊  ┊ 4┊\n+┊  ┊ 5┊@Component({\n+┊  ┊ 6┊  template: `\n+┊  ┊ 7┊    <app-toolbar>\n+┊  ┊ 8┊      <div class=\"title\">Whatsapp Clone</div>\n+┊  ┊ 9┊      <button mat-icon-button [matMenuTriggerFor]=\"menu\" class=\"menu\">\n+┊  ┊10┊        <mat-icon>more_vert</mat-icon>\n+┊  ┊11┊      </button>\n+┊  ┊12┊    </app-toolbar>\n+┊  ┊13┊\n+┊  ┊14┊    <mat-menu #menu=\"matMenu\">\n+┊  ┊15┊      <button mat-menu-item>\n+┊  ┊16┊        <mat-icon>dialpad</mat-icon>\n+┊  ┊17┊        <span>Redial</span>\n+┊  ┊18┊      </button>\n+┊  ┊19┊      <button mat-menu-item disabled>\n+┊  ┊20┊        <mat-icon>voicemail</mat-icon>\n+┊  ┊21┊        <span>Check voicemail</span>\n+┊  ┊22┊      </button>\n+┊  ┊23┊      <button mat-menu-item>\n+┊  ┊24┊        <mat-icon>notifications_off</mat-icon>\n+┊  ┊25┊        <span>Disable alerts</span>\n+┊  ┊26┊      </button>\n+┊  ┊27┊    </mat-menu>\n+┊  ┊28┊\n+┊  ┊29┊    <app-chats-list [items]=\"chats$ | async\"></app-chats-list>\n+┊  ┊30┊\n+┊  ┊31┊    <button class=\"chat-button\" mat-fab color=\"primary\">\n+┊  ┊32┊      <mat-icon aria-label=\"Icon-button with a + icon\">add</mat-icon>\n+┊  ┊33┊    </button>\n+┊  ┊34┊  `,\n+┊  ┊35┊  styleUrls: ['./chats.component.scss'],\n+┊  ┊36┊})\n+┊  ┊37┊export class ChatsComponent implements OnInit {\n+┊  ┊38┊  chats$: Observable<any[]>;\n+┊  ┊39┊\n+┊  ┊40┊  constructor(private chatsService: ChatsService) {\n+┊  ┊41┊  }\n+┊  ┊42┊\n+┊  ┊43┊  ngOnInit() {\n+┊  ┊44┊    this.chats$ = this.chatsService.getChats().chats$;\n+┊  ┊45┊  }\n+┊  ┊46┊}\n```\n\n[}]: #\n\nFinally let's wire everything up to the main module:\n\n[{]: <helper> (diffStep \"1.3\" files=\"src/app/app.component.ts, src/app/app.module.ts\" module=\"client\")\n\n#### Step 1.3: List the chats\n\n##### Changed src&#x2F;app&#x2F;app.component.ts\n```diff\n@@ -2,7 +2,9 @@\n ┊ 2┊ 2┊\n ┊ 3┊ 3┊@Component({\n ┊ 4┊ 4┊  selector: 'app-root',\n-┊ 5┊  ┊  templateUrl: './app.component.html',\n+┊  ┊ 5┊  template: `\n+┊  ┊ 6┊    <router-outlet></router-outlet>\n+┊  ┊ 7┊  `,\n ┊ 6┊ 8┊  styleUrls: ['./app.component.scss']\n ┊ 7┊ 9┊})\n ┊ 8┊10┊export class AppComponent {\n```\n\n##### Changed src&#x2F;app&#x2F;app.module.ts\n```diff\n@@ -5,7 +5,10 @@\n ┊ 5┊ 5┊import {HttpClientModule} from '@angular/common/http';\n ┊ 6┊ 6┊import {HttpLink, HttpLinkModule, Options} from 'apollo-angular-link-http';\n ┊ 7┊ 7┊import {Apollo, ApolloModule} from 'apollo-angular';\n-┊ 8┊  ┊import {InMemoryCache} from 'apollo-cache-inmemory';\n+┊  ┊ 8┊import {defaultDataIdFromObject, InMemoryCache} from 'apollo-cache-inmemory';\n+┊  ┊ 9┊import {ChatsListerModule} from './chats-lister/chats-lister.module';\n+┊  ┊10┊import {RouterModule, Routes} from '@angular/router';\n+┊  ┊11┊const routes: Routes = [];\n ┊ 9┊12┊\n ┊10┊13┊@NgModule({\n ┊11┊14┊  declarations: [\n```\n```diff\n@@ -17,6 +20,10 @@\n ┊17┊20┊    ApolloModule,\n ┊18┊21┊    HttpLinkModule,\n ┊19┊22┊    HttpClientModule,\n+┊  ┊23┊    // Routing\n+┊  ┊24┊    RouterModule.forRoot(routes),\n+┊  ┊25┊    // Feature modules\n+┊  ┊26┊    ChatsListerModule,\n ┊20┊27┊  ],\n ┊21┊28┊  providers: [],\n ┊22┊29┊  bootstrap: [AppComponent]\n```\n\n[}]: #\n\nIf you will try to run the frontend you will notice that several messages seems like duplicated, why does it happen?\n\n`apollo-cache-inmemory` is the default cache implementation for Apollo Client 2.0. `InMemoryCache` is a normalized data store that supports all of Apollo Client 1.0's features without the dependency on Redux.\nThe `InMemoryCache` normalizes your data before saving it to the store by splitting the result into individual objects, creating a unique identifier for each object, and storing those objects in a flattened data structure. By default, `InMemoryCache` will attempt to use the commonly found primary keys of `id` and `_id` for the unique identifier if they exist along with `__typename` on an object.\nSince we use NoSQL-like structure in our backend, messages are stored as an array inside each chat so their incremental identifiers are not unique across different chats. We need to normalize them in a way that takes into account both the message id and the chat id:\n\n[{]: <helper> (diffStep \"1.4\" module=\"client\")\n\n#### Step 1.4: Better normalize messages\n\n##### Changed src&#x2F;app&#x2F;app.module.ts\n```diff\n@@ -35,7 +35,14 @@\n ┊35┊35┊  ) {\n ┊36┊36┊    apollo.create({\n ┊37┊37┊      link: httpLink.create(<Options>{uri: 'http://localhost:3000/graphql'}),\n-┊38┊  ┊      cache: new InMemoryCache(),\n+┊  ┊38┊      cache: new InMemoryCache({\n+┊  ┊39┊        dataIdFromObject: (object: any) => {\n+┊  ┊40┊          switch (object.__typename) {\n+┊  ┊41┊            case 'Message': return `${object.chat.id}:${object.id}`; // use `chatId` prefix and `messageId` as the primary key\n+┊  ┊42┊            default: return defaultDataIdFromObject(object); // fall back to default handling\n+┊  ┊43┊          }\n+┊  ┊44┊        }\n+┊  ┊45┊      }),\n ┊39┊46┊    });\n ┊40┊47┊  }\n ┊41┊48┊}\n```\n\n[}]: #\n\nThat way our application will work even if the backend is a NoSQL. What's even more interesting is that our application will keep working as well even when we will switch our backend to PostgreSQL."
          },
          {
            "manualTitle": "Step 6: graphql-code-generator",
            "stepRevision": "f1108527a6cb780ccb8bfc1599e9ddbfaa59cddc",
            "manualView": "## Server\n\nThe GraphQL codegen library can generate any code for any language — including type definitions, data models, query builder, resolvers, ORM code, complete full stack platforms.\nYou can create your own custom GraphQL codegen templates in 10 minutes, that fit exactly your needs. We will use it to generate `Typescript` typings.\n\nFirst, let's install `graphql-code-generator`  in our server and add it to the run scripts:\n\n    $ npm install graphql-code-generator\n\n[{]: <helper> (diffStep \"2.1\" module=\"server\")\n\n#### Step 2.1: Install graphql-code-generator\n\n##### Changed package.json\n```diff\n@@ -4,7 +4,8 @@\n ┊ 4┊ 4┊  \"private\": true,\n ┊ 5┊ 5┊  \"scripts\": {\n ┊ 6┊ 6┊    \"start\": \"npm run build:live\",\n-┊ 7┊  ┊    \"build:live\": \"nodemon --exec ./node_modules/.bin/ts-node -- ./index.ts\"\n+┊  ┊ 7┊    \"build:live\": \"nodemon --exec ./node_modules/.bin/ts-node -- ./index.ts\",\n+┊  ┊ 8┊    \"generator\": \"gql-gen --url http://localhost:3000/graphql --template ts --out ./types.d.ts\"\n ┊ 8┊ 9┊  },\n ┊ 9┊10┊  \"devDependencies\": {\n ┊10┊11┊    \"@types/body-parser\": \"1.17.0\",\n```\n```diff\n@@ -22,6 +23,7 @@\n ┊22┊23┊    \"cors\": \"2.8.4\",\n ┊23┊24┊    \"express\": \"4.16.3\",\n ┊24┊25┊    \"graphql\": \"0.13.2\",\n+┊  ┊26┊    \"graphql-code-generator\": \"0.9.1\",\n ┊25┊27┊    \"graphql-tools\": \"3.0.1\",\n ┊26┊28┊    \"moment\": \"2.22.1\"\n ┊27┊29┊  }\n```\n\n[}]: #\n\nNow let's run the generator (the server must be running in the background):\n\n    $ npm run generator\n\nPlease note that the server must be started before running the generator.\n\nThose are the types created with `npm run generator`:\n\n[{]: <helper> (diffStep \"2.2\" module=\"server\")\n\n#### Step 2.2: Create types with generator\n\n##### Changed package.json\n```diff\n@@ -5,7 +5,7 @@\n ┊ 5┊ 5┊  \"scripts\": {\n ┊ 6┊ 6┊    \"start\": \"npm run build:live\",\n ┊ 7┊ 7┊    \"build:live\": \"nodemon --exec ./node_modules/.bin/ts-node -- ./index.ts\",\n-┊ 8┊  ┊    \"generator\": \"gql-gen --url http://localhost:3000/graphql --template ts --out ./types.d.ts\"\n+┊  ┊ 8┊    \"generator\": \"gql-gen --schema http://localhost:3000/graphql --template ts --out ./types.d.ts\"\n ┊ 9┊ 9┊  },\n ┊10┊10┊  \"devDependencies\": {\n ┊11┊11┊    \"@types/body-parser\": \"1.17.0\",\n```\n```diff\n@@ -24,6 +24,7 @@\n ┊24┊24┊    \"express\": \"4.16.3\",\n ┊25┊25┊    \"graphql\": \"0.13.2\",\n ┊26┊26┊    \"graphql-code-generator\": \"0.9.1\",\n+┊  ┊27┊    \"graphql-codegen-typescript-template\": \"0.9.1\",\n ┊27┊28┊    \"graphql-tools\": \"3.0.1\",\n ┊28┊29┊    \"moment\": \"2.22.1\"\n ┊29┊30┊  }\n```\n\n##### Added types.d.ts\n```diff\n@@ -0,0 +1,60 @@\n+┊  ┊ 1┊/* tslint:disable */\n+┊  ┊ 2┊\n+┊  ┊ 3┊export interface Query {\n+┊  ┊ 4┊  users?: User[] | null;\n+┊  ┊ 5┊  chats?: Chat[] | null;\n+┊  ┊ 6┊  chat?: Chat | null;\n+┊  ┊ 7┊}\n+┊  ┊ 8┊\n+┊  ┊ 9┊export interface User {\n+┊  ┊10┊  id: string;\n+┊  ┊11┊  name?: string | null;\n+┊  ┊12┊  picture?: string | null;\n+┊  ┊13┊  phone?: string | null;\n+┊  ┊14┊}\n+┊  ┊15┊\n+┊  ┊16┊export interface Chat {\n+┊  ┊17┊  id: string /** May be a chat or a group */;\n+┊  ┊18┊  name?: string | null /** Computed for chats */;\n+┊  ┊19┊  picture?: string | null /** Computed for chats */;\n+┊  ┊20┊  allTimeMembers: User[] /** All members, current and past ones. */;\n+┊  ┊21┊  listingMembers: User[] /** Whoever gets the chat listed. For groups includes past members who still didn't delete the group. */;\n+┊  ┊22┊  actualGroupMembers: User[] /** Actual members of the group (they are not the only ones who get the group listed). Null for chats. */;\n+┊  ┊23┊  admins?: User[] | null /** Null for chats */;\n+┊  ┊24┊  owner?: User | null /** If null the group is read-only. Null for chats. */;\n+┊  ┊25┊  messages: (Message | null)[];\n+┊  ┊26┊  unreadMessages: number /** Computed property */;\n+┊  ┊27┊  isGroup: boolean /** Computed property */;\n+┊  ┊28┊}\n+┊  ┊29┊\n+┊  ┊30┊export interface Message {\n+┊  ┊31┊  id: string;\n+┊  ┊32┊  sender: User;\n+┊  ┊33┊  chat: Chat;\n+┊  ┊34┊  content: string;\n+┊  ┊35┊  createdAt: string;\n+┊  ┊36┊  type: number /** FIXME: should return MessageType */;\n+┊  ┊37┊  recipients: Recipient[] /** Whoever received the message */;\n+┊  ┊38┊  holders: User[] /** Whoever still holds a copy of the message. Cannot be null because the message gets deleted otherwise */;\n+┊  ┊39┊  ownership: boolean /** Computed property */;\n+┊  ┊40┊}\n+┊  ┊41┊\n+┊  ┊42┊export interface Recipient {\n+┊  ┊43┊  user: User;\n+┊  ┊44┊  message: Message;\n+┊  ┊45┊  chat: Chat;\n+┊  ┊46┊  receivedAt?: string | null;\n+┊  ┊47┊  readAt?: string | null;\n+┊  ┊48┊}\n+┊  ┊49┊export interface ChatQueryArgs {\n+┊  ┊50┊  chatId: string;\n+┊  ┊51┊}\n+┊  ┊52┊export interface MessagesChatArgs {\n+┊  ┊53┊  amount?: number | null;\n+┊  ┊54┊}\n+┊  ┊55┊\n+┊  ┊56┊export enum MessageType {\n+┊  ┊57┊  LOCATION = \"LOCATION\",\n+┊  ┊58┊  TEXT = \"TEXT\",\n+┊  ┊59┊  PICTURE = \"PICTURE\"\n+┊  ┊60┊}\n```\n\n[}]: #\n\nNow let's use them:\n\n[{]: <helper> (diffStep \"2.3\" module=\"server\")\n\n#### Step 2.3: Use our types\n\n##### Changed schema&#x2F;resolvers.ts\n```diff\n@@ -1,5 +1,6 @@\n ┊1┊1┊import { Chat, db, Message, Recipient, User } from \"../db\";\n ┊2┊2┊import { IResolvers } from \"graphql-tools/dist/Interfaces\";\n+┊ ┊3┊import { ChatQueryArgs } from \"../types\";\n ┊3┊4┊\n ┊4┊5┊let users = db.users;\n ┊5┊6┊let chats = db.chats;\n```\n```diff\n@@ -10,7 +11,7 @@\n ┊10┊11┊    // Show all users for the moment.\n ┊11┊12┊    users: (): User[] => users.filter(user => user.id !== currentUser),\n ┊12┊13┊    chats: (): Chat[] => chats.filter(chat => chat.listingMemberIds.includes(currentUser)),\n-┊13┊  ┊    chat: (obj: any, {chatId}): Chat | null => chats.find(chat => chat.id === chatId) || null,\n+┊  ┊14┊    chat: (obj: any, {chatId}: ChatQueryArgs): Chat | null => chats.find(chat => chat.id === Number(chatId)) || null,\n ┊14┊15┊  },\n ┊15┊16┊  Chat: {\n ┊16┊17┊    name: (chat: Chat): string => chat.name ? chat.name : users\n```\n\n[}]: #\n\nDon't worry, they will be much more useful when we will write our first mutation.\n\n## Client\n\nLet's do the same on the client:\n\n    $ npm install graphql-code-generator\n\nPlease note that the server must be started before running the generator.\n\n[{]: <helper> (diffStep \"2.1\" module=\"client\")\n\n#### Step 2.1: Install graphql-code-generator\n\n##### Changed package.json\n```diff\n@@ -7,7 +7,8 @@\n ┊ 7┊ 7┊    \"build\": \"ng build\",\n ┊ 8┊ 8┊    \"test\": \"ng test\",\n ┊ 9┊ 9┊    \"lint\": \"ng lint\",\n-┊10┊  ┊    \"e2e\": \"ng e2e\"\n+┊  ┊10┊    \"e2e\": \"ng e2e\",\n+┊  ┊11┊    \"generator\": \"gql-gen --url http://localhost:3000/graphql --template ts --out ./src/types.d.ts \\\"./src/graphql/**/*.ts\\\"\"\n ┊11┊12┊  },\n ┊12┊13┊  \"private\": true,\n ┊13┊14┊  \"dependencies\": {\n```\n```diff\n@@ -45,6 +46,7 @@\n ┊45┊46┊    \"@types/jasminewd2\": \"2.0.3\",\n ┊46┊47┊    \"@types/node\": \"8.9.5\",\n ┊47┊48┊    \"codelyzer\": \"4.2.1\",\n+┊  ┊49┊    \"graphql-code-generator\": \"0.9.1\",\n ┊48┊50┊    \"jasmine-core\": \"2.99.1\",\n ┊49┊51┊    \"jasmine-spec-reporter\": \"4.2.1\",\n ┊50┊52┊    \"karma\": \"1.7.1\",\n```\n\n[}]: #\n\nThose are our generated types:\n\n[{]: <helper> (diffStep \"2.2\" module=\"client\")\n\n#### Step 2.2: Run generator\n\n##### Changed package.json\n```diff\n@@ -8,7 +8,7 @@\n ┊ 8┊ 8┊    \"test\": \"ng test\",\n ┊ 9┊ 9┊    \"lint\": \"ng lint\",\n ┊10┊10┊    \"e2e\": \"ng e2e\",\n-┊11┊  ┊    \"generator\": \"gql-gen --url http://localhost:3000/graphql --template ts --out ./src/types.d.ts \\\"./src/graphql/**/*.ts\\\"\"\n+┊  ┊11┊    \"generator\": \"gql-gen --schema http://localhost:3000/graphql --template ts --out ./src/types.d.ts \\\"./src/graphql/**/*.ts\\\"\"\n ┊12┊12┊  },\n ┊13┊13┊  \"private\": true,\n ┊14┊14┊  \"dependencies\": {\n```\n```diff\n@@ -47,6 +47,7 @@\n ┊47┊47┊    \"@types/node\": \"8.9.5\",\n ┊48┊48┊    \"codelyzer\": \"4.2.1\",\n ┊49┊49┊    \"graphql-code-generator\": \"0.9.1\",\n+┊  ┊50┊    \"graphql-codegen-typescript-template\": \"0.9.1\",\n ┊50┊51┊    \"jasmine-core\": \"2.99.1\",\n ┊51┊52┊    \"jasmine-spec-reporter\": \"4.2.1\",\n ┊52┊53┊    \"karma\": \"1.7.1\",\n```\n\n##### Added src&#x2F;types.d.ts\n```diff\n@@ -0,0 +1,149 @@\n+┊   ┊  1┊/* tslint:disable */\n+┊   ┊  2┊\n+┊   ┊  3┊export interface Query {\n+┊   ┊  4┊  users?: User[] | null;\n+┊   ┊  5┊  chats?: Chat[] | null;\n+┊   ┊  6┊  chat?: Chat | null;\n+┊   ┊  7┊}\n+┊   ┊  8┊\n+┊   ┊  9┊export interface User {\n+┊   ┊ 10┊  id: string;\n+┊   ┊ 11┊  name?: string | null;\n+┊   ┊ 12┊  picture?: string | null;\n+┊   ┊ 13┊  phone?: string | null;\n+┊   ┊ 14┊}\n+┊   ┊ 15┊\n+┊   ┊ 16┊export interface Chat {\n+┊   ┊ 17┊  id: string /** May be a chat or a group */;\n+┊   ┊ 18┊  name?: string | null /** Computed for chats */;\n+┊   ┊ 19┊  picture?: string | null /** Computed for chats */;\n+┊   ┊ 20┊  allTimeMembers: User[] /** All members, current and past ones. */;\n+┊   ┊ 21┊  listingMembers: User[] /** Whoever gets the chat listed. For groups includes past members who still didn't delete the group. */;\n+┊   ┊ 22┊  actualGroupMembers: User[] /** Actual members of the group (they are not the only ones who get the group listed). Null for chats. */;\n+┊   ┊ 23┊  admins?: User[] | null /** Null for chats */;\n+┊   ┊ 24┊  owner?: User | null /** If null the group is read-only. Null for chats. */;\n+┊   ┊ 25┊  messages: (Message | null)[];\n+┊   ┊ 26┊  unreadMessages: number /** Computed property */;\n+┊   ┊ 27┊  isGroup: boolean /** Computed property */;\n+┊   ┊ 28┊}\n+┊   ┊ 29┊\n+┊   ┊ 30┊export interface Message {\n+┊   ┊ 31┊  id: string;\n+┊   ┊ 32┊  sender: User;\n+┊   ┊ 33┊  chat: Chat;\n+┊   ┊ 34┊  content: string;\n+┊   ┊ 35┊  createdAt: string;\n+┊   ┊ 36┊  type: number /** FIXME: should return MessageType */;\n+┊   ┊ 37┊  recipients: Recipient[] /** Whoever received the message */;\n+┊   ┊ 38┊  holders: User[] /** Whoever still holds a copy of the message. Cannot be null because the message gets deleted otherwise */;\n+┊   ┊ 39┊  ownership: boolean /** Computed property */;\n+┊   ┊ 40┊}\n+┊   ┊ 41┊\n+┊   ┊ 42┊export interface Recipient {\n+┊   ┊ 43┊  user: User;\n+┊   ┊ 44┊  message: Message;\n+┊   ┊ 45┊  chat: Chat;\n+┊   ┊ 46┊  receivedAt?: string | null;\n+┊   ┊ 47┊  readAt?: string | null;\n+┊   ┊ 48┊}\n+┊   ┊ 49┊export interface ChatQueryArgs {\n+┊   ┊ 50┊  chatId: string;\n+┊   ┊ 51┊}\n+┊   ┊ 52┊export interface MessagesChatArgs {\n+┊   ┊ 53┊  amount?: number | null;\n+┊   ┊ 54┊}\n+┊   ┊ 55┊\n+┊   ┊ 56┊export enum MessageType {\n+┊   ┊ 57┊  LOCATION = \"LOCATION\",\n+┊   ┊ 58┊  TEXT = \"TEXT\",\n+┊   ┊ 59┊  PICTURE = \"PICTURE\"\n+┊   ┊ 60┊}\n+┊   ┊ 61┊export namespace GetChats {\n+┊   ┊ 62┊  export type Variables = {\n+┊   ┊ 63┊    amount?: number | null;\n+┊   ┊ 64┊  };\n+┊   ┊ 65┊\n+┊   ┊ 66┊  export type Query = {\n+┊   ┊ 67┊    __typename?: \"Query\";\n+┊   ┊ 68┊    chats?: Chats[] | null;\n+┊   ┊ 69┊  };\n+┊   ┊ 70┊\n+┊   ┊ 71┊  export type Chats = {\n+┊   ┊ 72┊    __typename?: \"Chat\";\n+┊   ┊ 73┊    messages: (Messages | null)[];\n+┊   ┊ 74┊  } & ChatWithoutMessages.Fragment;\n+┊   ┊ 75┊\n+┊   ┊ 76┊  export type Messages = Message.Fragment;\n+┊   ┊ 77┊}\n+┊   ┊ 78┊\n+┊   ┊ 79┊export namespace ChatWithoutMessages {\n+┊   ┊ 80┊  export type Fragment = {\n+┊   ┊ 81┊    __typename?: \"Chat\";\n+┊   ┊ 82┊    id: string;\n+┊   ┊ 83┊    name?: string | null;\n+┊   ┊ 84┊    picture?: string | null;\n+┊   ┊ 85┊    allTimeMembers: AllTimeMembers[];\n+┊   ┊ 86┊    unreadMessages: number;\n+┊   ┊ 87┊    isGroup: boolean;\n+┊   ┊ 88┊  };\n+┊   ┊ 89┊\n+┊   ┊ 90┊  export type AllTimeMembers = {\n+┊   ┊ 91┊    __typename?: \"User\";\n+┊   ┊ 92┊    id: string;\n+┊   ┊ 93┊  };\n+┊   ┊ 94┊}\n+┊   ┊ 95┊\n+┊   ┊ 96┊export namespace Message {\n+┊   ┊ 97┊  export type Fragment = {\n+┊   ┊ 98┊    __typename?: \"Message\";\n+┊   ┊ 99┊    id: string;\n+┊   ┊100┊    chat: Chat;\n+┊   ┊101┊    sender: Sender;\n+┊   ┊102┊    content: string;\n+┊   ┊103┊    createdAt: string;\n+┊   ┊104┊    type: number;\n+┊   ┊105┊    recipients: Recipients[];\n+┊   ┊106┊    ownership: boolean;\n+┊   ┊107┊  };\n+┊   ┊108┊\n+┊   ┊109┊  export type Chat = {\n+┊   ┊110┊    __typename?: \"Chat\";\n+┊   ┊111┊    id: string;\n+┊   ┊112┊  };\n+┊   ┊113┊\n+┊   ┊114┊  export type Sender = {\n+┊   ┊115┊    __typename?: \"User\";\n+┊   ┊116┊    id: string;\n+┊   ┊117┊    name?: string | null;\n+┊   ┊118┊  };\n+┊   ┊119┊\n+┊   ┊120┊  export type Recipients = {\n+┊   ┊121┊    __typename?: \"Recipient\";\n+┊   ┊122┊    user: User;\n+┊   ┊123┊    message: Message;\n+┊   ┊124┊    chat: __Chat;\n+┊   ┊125┊    receivedAt?: string | null;\n+┊   ┊126┊    readAt?: string | null;\n+┊   ┊127┊  };\n+┊   ┊128┊\n+┊   ┊129┊  export type User = {\n+┊   ┊130┊    __typename?: \"User\";\n+┊   ┊131┊    id: string;\n+┊   ┊132┊  };\n+┊   ┊133┊\n+┊   ┊134┊  export type Message = {\n+┊   ┊135┊    __typename?: \"Message\";\n+┊   ┊136┊    id: string;\n+┊   ┊137┊    chat: _Chat;\n+┊   ┊138┊  };\n+┊   ┊139┊\n+┊   ┊140┊  export type _Chat = {\n+┊   ┊141┊    __typename?: \"Chat\";\n+┊   ┊142┊    id: string;\n+┊   ┊143┊  };\n+┊   ┊144┊\n+┊   ┊145┊  export type __Chat = {\n+┊   ┊146┊    __typename?: \"Chat\";\n+┊   ┊147┊    id: string;\n+┊   ┊148┊  };\n+┊   ┊149┊}\n```\n\n[}]: #\n\nLet's use them:\n\n[{]: <helper> (diffStep \"2.3\" module=\"client\")\n\n#### Step 2.3: Use the generated types\n\n##### Changed src&#x2F;app&#x2F;chats-lister&#x2F;components&#x2F;chat-item&#x2F;chat-item.component.ts\n```diff\n@@ -1,4 +1,5 @@\n ┊1┊1┊import {Component, Input} from '@angular/core';\n+┊ ┊2┊import {GetChats} from '../../../../types';\n ┊2┊3┊\n ┊3┊4┊@Component({\n ┊4┊5┊  selector: 'app-chat-item',\n```\n```diff\n@@ -16,5 +17,5 @@\n ┊16┊17┊export class ChatItemComponent {\n ┊17┊18┊  // tslint:disable-next-line:no-input-rename\n ┊18┊19┊  @Input('item')\n-┊19┊  ┊  chat: any;\n+┊  ┊20┊  chat: GetChats.Chats;\n ┊20┊21┊}\n```\n\n##### Changed src&#x2F;app&#x2F;chats-lister&#x2F;components&#x2F;chats-list&#x2F;chats-list.component.ts\n```diff\n@@ -1,4 +1,5 @@\n ┊1┊1┊import {Component, Input} from '@angular/core';\n+┊ ┊2┊import {GetChats} from '../../../../types';\n ┊2┊3┊\n ┊3┊4┊@Component({\n ┊4┊5┊  selector: 'app-chats-list',\n```\n```diff\n@@ -14,7 +15,7 @@\n ┊14┊15┊export class ChatsListComponent {\n ┊15┊16┊  // tslint:disable-next-line:no-input-rename\n ┊16┊17┊  @Input('items')\n-┊17┊  ┊  chats: any[];\n+┊  ┊18┊  chats: GetChats.Chats[];\n ┊18┊19┊\n ┊19┊20┊  constructor() {}\n ┊20┊21┊}\n```\n\n##### Changed src&#x2F;app&#x2F;chats-lister&#x2F;containers&#x2F;chats&#x2F;chats.component.ts\n```diff\n@@ -1,6 +1,7 @@\n ┊1┊1┊import {Component, OnInit} from '@angular/core';\n ┊2┊2┊import {ChatsService} from '../../../services/chats.service';\n ┊3┊3┊import {Observable} from 'rxjs';\n+┊ ┊4┊import {GetChats} from '../../../../types';\n ┊4┊5┊\n ┊5┊6┊@Component({\n ┊6┊7┊  template: `\n```\n```diff\n@@ -35,7 +36,7 @@\n ┊35┊36┊  styleUrls: ['./chats.component.scss'],\n ┊36┊37┊})\n ┊37┊38┊export class ChatsComponent implements OnInit {\n-┊38┊  ┊  chats$: Observable<any[]>;\n+┊  ┊39┊  chats$: Observable<GetChats.Chats[]>;\n ┊39┊40┊\n ┊40┊41┊  constructor(private chatsService: ChatsService) {\n ┊41┊42┊  }\n```\n\n##### Changed src&#x2F;app&#x2F;services&#x2F;chats.service.ts\n```diff\n@@ -3,6 +3,7 @@\n ┊3┊3┊import {Apollo} from 'apollo-angular';\n ┊4┊4┊import {Injectable} from '@angular/core';\n ┊5┊5┊import {getChatsQuery} from '../../graphql/getChats.query';\n+┊ ┊6┊import {GetChats} from '../../types';\n ┊6┊7┊\n ┊7┊8┊@Injectable()\n ┊8┊9┊export class ChatsService {\n```\n```diff\n@@ -11,14 +12,14 @@\n ┊11┊12┊  constructor(private apollo: Apollo) {}\n ┊12┊13┊\n ┊13┊14┊  getChats() {\n-┊14┊  ┊    const query = this.apollo.watchQuery<any>(<WatchQueryOptions>{\n+┊  ┊15┊    const query = this.apollo.watchQuery<GetChats.Query>(<WatchQueryOptions>{\n ┊15┊16┊      query: getChatsQuery,\n ┊16┊17┊      variables: {\n ┊17┊18┊        amount: this.messagesAmount,\n ┊18┊19┊      },\n ┊19┊20┊    });\n ┊20┊21┊    const chats$ = query.valueChanges.pipe(\n-┊21┊  ┊      map((result: ApolloQueryResult<any>) => result.data.chats)\n+┊  ┊22┊      map((result: ApolloQueryResult<GetChats.Query>) => result.data.chats)\n ┊22┊23┊    );\n ┊23┊24┊\n ┊24┊25┊    return {query, chats$};\n```\n\n[}]: #"
          },
          {
            "manualTitle": "Step 7: Testing",
            "stepRevision": "0b0a94523505b78a8bd01d484487403deaa76f18",
            "manualView": "## Client\n\nTesting is a very important part of each application and for the sake of showing different testing techniques we are going to show how to test a presentational component, a container component and a service.\n\nFirst let's start by importing `hammerjs` for the Material Gestures inside the test script.\n\n[{]: <helper> (diffStep \"3.1\" files=\"src/test.ts\" module=\"client\")\n\n#### Step 3.1: Testing\n\n##### Changed src&#x2F;test.ts\n```diff\n@@ -7,6 +7,9 @@\n ┊ 7┊ 7┊  platformBrowserDynamicTesting\n ┊ 8┊ 8┊} from '@angular/platform-browser-dynamic/testing';\n ┊ 9┊ 9┊\n+┊  ┊10┊// Material gestures\n+┊  ┊11┊import 'hammerjs';\n+┊  ┊12┊\n ┊10┊13┊declare const require: any;\n ┊11┊14┊\n ┊12┊15┊// First, initialize the Angular testing environment.\n```\n\n[}]: #\n\nLet's start with the simplest one: the presentational component.\nWe are not going to inject any service and we don't need to access our backend, so things are quite simple: we just need to pass our Chat object as an Input, detect the changes and use the query selector to match the UI content to the one we passed as input:\n\n[{]: <helper> (diffStep \"3.1\" files=\"src/app/chats-lister/components/chat-item/chat-item.component.spec.ts\" module=\"client\")\n\n#### Step 3.1: Testing\n\n##### Added src&#x2F;app&#x2F;chats-lister&#x2F;components&#x2F;chat-item&#x2F;chat-item.component.spec.ts\n```diff\n@@ -0,0 +1,107 @@\n+┊   ┊  1┊import { async, ComponentFixture, TestBed } from '@angular/core/testing';\n+┊   ┊  2┊\n+┊   ┊  3┊import { ChatItemComponent } from './chat-item.component';\n+┊   ┊  4┊import {DebugElement} from '@angular/core';\n+┊   ┊  5┊import {By} from '@angular/platform-browser';\n+┊   ┊  6┊import {TruncateModule} from 'ng2-truncate';\n+┊   ┊  7┊\n+┊   ┊  8┊describe('ChatItemComponent', () => {\n+┊   ┊  9┊  let component: ChatItemComponent;\n+┊   ┊ 10┊  let fixture: ComponentFixture<ChatItemComponent>;\n+┊   ┊ 11┊  let el: DebugElement;\n+┊   ┊ 12┊\n+┊   ┊ 13┊  const chat: any = {\n+┊   ┊ 14┊    id: '1',\n+┊   ┊ 15┊    __typename: 'Chat',\n+┊   ┊ 16┊    name: 'Niccolo\\' Belli',\n+┊   ┊ 17┊    picture: null,\n+┊   ┊ 18┊    allTimeMembers: [\n+┊   ┊ 19┊      {\n+┊   ┊ 20┊        id: '1',\n+┊   ┊ 21┊        __typename: 'User',\n+┊   ┊ 22┊      },\n+┊   ┊ 23┊      {\n+┊   ┊ 24┊        id: '2',\n+┊   ┊ 25┊        __typename: 'User',\n+┊   ┊ 26┊      }\n+┊   ┊ 27┊    ],\n+┊   ┊ 28┊    unreadMessages: 0,\n+┊   ┊ 29┊    isGroup: false,\n+┊   ┊ 30┊    messages: [\n+┊   ┊ 31┊      {\n+┊   ┊ 32┊        id: '1',\n+┊   ┊ 33┊        chat: {\n+┊   ┊ 34┊          id: '1',\n+┊   ┊ 35┊          __typename: 'Chat',\n+┊   ┊ 36┊        },\n+┊   ┊ 37┊        __typename: 'Message',\n+┊   ┊ 38┊        sender: {\n+┊   ┊ 39┊          id: '1',\n+┊   ┊ 40┊          __typename: 'User',\n+┊   ┊ 41┊          name: 'Niccolo\\' Belli',\n+┊   ┊ 42┊        },\n+┊   ┊ 43┊        content: 'Hello! How are you? A lot happened since last time',\n+┊   ┊ 44┊        createdAt: '1513435525',\n+┊   ┊ 45┊        type: 1,\n+┊   ┊ 46┊        recipients: [\n+┊   ┊ 47┊          {\n+┊   ┊ 48┊            user: {\n+┊   ┊ 49┊              id: '2',\n+┊   ┊ 50┊              __typename: 'User',\n+┊   ┊ 51┊            },\n+┊   ┊ 52┊            message: {\n+┊   ┊ 53┊              id: '1',\n+┊   ┊ 54┊              __typename: 'Message',\n+┊   ┊ 55┊              chat: {\n+┊   ┊ 56┊                id: '1',\n+┊   ┊ 57┊                __typename: 'Chat',\n+┊   ┊ 58┊              },\n+┊   ┊ 59┊            },\n+┊   ┊ 60┊            __typename: 'Recipient',\n+┊   ┊ 61┊            chat: {\n+┊   ┊ 62┊              id: '1',\n+┊   ┊ 63┊              __typename: 'Chat',\n+┊   ┊ 64┊            },\n+┊   ┊ 65┊            receivedAt: null,\n+┊   ┊ 66┊            readAt: null,\n+┊   ┊ 67┊          }\n+┊   ┊ 68┊        ],\n+┊   ┊ 69┊        ownership: true,\n+┊   ┊ 70┊      }\n+┊   ┊ 71┊    ],\n+┊   ┊ 72┊  };\n+┊   ┊ 73┊\n+┊   ┊ 74┊  beforeEach(async(() => {\n+┊   ┊ 75┊    TestBed.configureTestingModule({\n+┊   ┊ 76┊      declarations: [ ChatItemComponent ],\n+┊   ┊ 77┊      imports: [TruncateModule]\n+┊   ┊ 78┊    })\n+┊   ┊ 79┊    .compileComponents();\n+┊   ┊ 80┊  }));\n+┊   ┊ 81┊\n+┊   ┊ 82┊  beforeEach(() => {\n+┊   ┊ 83┊    fixture = TestBed.createComponent(ChatItemComponent);\n+┊   ┊ 84┊    component = fixture.componentInstance;\n+┊   ┊ 85┊    component.chat = chat;\n+┊   ┊ 86┊    fixture.detectChanges();\n+┊   ┊ 87┊    el = fixture.debugElement;\n+┊   ┊ 88┊  });\n+┊   ┊ 89┊\n+┊   ┊ 90┊  it('should create', () => {\n+┊   ┊ 91┊    expect(component).toBeTruthy();\n+┊   ┊ 92┊  });\n+┊   ┊ 93┊\n+┊   ┊ 94┊  it('should contain the chat name', () => {\n+┊   ┊ 95┊    expect(el.query(By.css('.chat-recipient > div:first-child')).nativeElement.textContent).toContain(chat.name);\n+┊   ┊ 96┊  });\n+┊   ┊ 97┊\n+┊   ┊ 98┊  it('should contain the first couple of characters of the message content', () => {\n+┊   ┊ 99┊    expect(el.query(By.css('.chat-content')).nativeElement.textContent)\n+┊   ┊100┊      .toContain(chat.messages[chat.messages.length - 1].content.slice(0, 20));\n+┊   ┊101┊  });\n+┊   ┊102┊\n+┊   ┊103┊  it('should not contain the latest characters of the message content', () => {\n+┊   ┊104┊    expect(el.query(By.css('.chat-content')).nativeElement.textContent)\n+┊   ┊105┊      .not.toContain(chat.messages[chat.messages.length - 1].content.slice(20));\n+┊   ┊106┊  });\n+┊   ┊107┊});\n```\n\n[}]: #\n\nTesting a service is a bit more complicated because we will need to mock our backend in order to get fake results instead of having to fire up the backend each time.\nWe are going to simply mock the HTTP calls, which is a well known practice in the REST API world. Since we are using HTTP to retrieve the data, it will work as well with Apollo client:\n\n[{]: <helper> (diffStep \"3.1\" files=\"src/app/services/chats.service.spec.ts\" module=\"client\")\n\n#### Step 3.1: Testing\n\n##### Added src&#x2F;app&#x2F;services&#x2F;chats.service.spec.ts\n```diff\n@@ -0,0 +1,356 @@\n+┊   ┊  1┊import { TestBed, inject } from '@angular/core/testing';\n+┊   ┊  2┊\n+┊   ┊  3┊import { ChatsService } from './chats.service';\n+┊   ┊  4┊import {Apollo} from 'apollo-angular';\n+┊   ┊  5┊import {HttpLink, HttpLinkModule, Options} from 'apollo-angular-link-http';\n+┊   ┊  6┊import {HttpClientTestingModule, HttpTestingController} from '@angular/common/http/testing';\n+┊   ┊  7┊import {defaultDataIdFromObject, InMemoryCache} from 'apollo-cache-inmemory';\n+┊   ┊  8┊\n+┊   ┊  9┊describe('ChatsService', () => {\n+┊   ┊ 10┊  let httpMock: HttpTestingController;\n+┊   ┊ 11┊  let httpLink: HttpLink;\n+┊   ┊ 12┊  let apollo: Apollo;\n+┊   ┊ 13┊\n+┊   ┊ 14┊  const chats: any = [\n+┊   ┊ 15┊    {\n+┊   ┊ 16┊      id: '1',\n+┊   ┊ 17┊      __typename: 'Chat',\n+┊   ┊ 18┊      name: 'Avery Stewart',\n+┊   ┊ 19┊      picture: 'https://randomuser.me/api/portraits/thumb/women/1.jpg',\n+┊   ┊ 20┊      allTimeMembers: [\n+┊   ┊ 21┊        {\n+┊   ┊ 22┊          id: '1',\n+┊   ┊ 23┊          __typename: 'User',\n+┊   ┊ 24┊        },\n+┊   ┊ 25┊        {\n+┊   ┊ 26┊          id: '3',\n+┊   ┊ 27┊          __typename: 'User',\n+┊   ┊ 28┊        }\n+┊   ┊ 29┊      ],\n+┊   ┊ 30┊      unreadMessages: 1,\n+┊   ┊ 31┊      isGroup: false,\n+┊   ┊ 32┊      messages: [\n+┊   ┊ 33┊        {\n+┊   ┊ 34┊          id: '1',\n+┊   ┊ 35┊          chat: {\n+┊   ┊ 36┊            id: '1',\n+┊   ┊ 37┊            __typename: 'Chat',\n+┊   ┊ 38┊          },\n+┊   ┊ 39┊          __typename: 'Message',\n+┊   ┊ 40┊          sender: {\n+┊   ┊ 41┊            id: '3',\n+┊   ┊ 42┊            __typename: 'User',\n+┊   ┊ 43┊            name: 'Avery Stewart'\n+┊   ┊ 44┊          },\n+┊   ┊ 45┊          content: 'Yep!',\n+┊   ┊ 46┊          createdAt: '1514035700',\n+┊   ┊ 47┊          type: 0,\n+┊   ┊ 48┊          recipients: [\n+┊   ┊ 49┊            {\n+┊   ┊ 50┊              user: {\n+┊   ┊ 51┊                id: '1',\n+┊   ┊ 52┊                __typename: 'User',\n+┊   ┊ 53┊              },\n+┊   ┊ 54┊              message: {\n+┊   ┊ 55┊                id: '1',\n+┊   ┊ 56┊                __typename: 'Message',\n+┊   ┊ 57┊                chat: {\n+┊   ┊ 58┊                  id: '1',\n+┊   ┊ 59┊                  __typename: 'Chat',\n+┊   ┊ 60┊                },\n+┊   ┊ 61┊              },\n+┊   ┊ 62┊              __typename: 'Recipient',\n+┊   ┊ 63┊              chat: {\n+┊   ┊ 64┊                id: '1',\n+┊   ┊ 65┊                __typename: 'Chat',\n+┊   ┊ 66┊              },\n+┊   ┊ 67┊              receivedAt: null,\n+┊   ┊ 68┊              readAt: null,\n+┊   ┊ 69┊            }\n+┊   ┊ 70┊          ],\n+┊   ┊ 71┊          ownership: false,\n+┊   ┊ 72┊        }\n+┊   ┊ 73┊      ],\n+┊   ┊ 74┊    },\n+┊   ┊ 75┊    {\n+┊   ┊ 76┊      id: '2',\n+┊   ┊ 77┊      __typename: 'Chat',\n+┊   ┊ 78┊      name: 'Katie Peterson',\n+┊   ┊ 79┊      picture: 'https://randomuser.me/api/portraits/thumb/women/2.jpg',\n+┊   ┊ 80┊      allTimeMembers: [\n+┊   ┊ 81┊        {\n+┊   ┊ 82┊          id: '1',\n+┊   ┊ 83┊          __typename: 'User',\n+┊   ┊ 84┊        },\n+┊   ┊ 85┊        {\n+┊   ┊ 86┊          id: '4',\n+┊   ┊ 87┊          __typename: 'User',\n+┊   ┊ 88┊        }\n+┊   ┊ 89┊      ],\n+┊   ┊ 90┊      unreadMessages: 0,\n+┊   ┊ 91┊      isGroup: false,\n+┊   ┊ 92┊      messages: [\n+┊   ┊ 93┊        {\n+┊   ┊ 94┊          id: '1',\n+┊   ┊ 95┊          chat: {\n+┊   ┊ 96┊            id: '2',\n+┊   ┊ 97┊            __typename: 'Chat',\n+┊   ┊ 98┊          },\n+┊   ┊ 99┊          __typename: 'Message',\n+┊   ┊100┊          sender: {\n+┊   ┊101┊            id: '1',\n+┊   ┊102┊            __typename: 'User',\n+┊   ┊103┊            name: 'Ethan Gonzalez'\n+┊   ┊104┊          },\n+┊   ┊105┊          content: 'Hey, it\\'s me',\n+┊   ┊106┊          createdAt: '1514031800',\n+┊   ┊107┊          type: 0,\n+┊   ┊108┊          recipients: [\n+┊   ┊109┊            {\n+┊   ┊110┊              user: {\n+┊   ┊111┊                id: '4',\n+┊   ┊112┊                __typename: 'User',\n+┊   ┊113┊              },\n+┊   ┊114┊              message: {\n+┊   ┊115┊                id: '1',\n+┊   ┊116┊                __typename: 'Message',\n+┊   ┊117┊                chat: {\n+┊   ┊118┊                  id: '2',\n+┊   ┊119┊                  __typename: 'Chat',\n+┊   ┊120┊                },\n+┊   ┊121┊              },\n+┊   ┊122┊              __typename: 'Recipient',\n+┊   ┊123┊              chat: {\n+┊   ┊124┊                id: '2',\n+┊   ┊125┊                __typename: 'Chat',\n+┊   ┊126┊              },\n+┊   ┊127┊              receivedAt: null,\n+┊   ┊128┊              readAt: null,\n+┊   ┊129┊            }\n+┊   ┊130┊          ],\n+┊   ┊131┊          ownership: true\n+┊   ┊132┊        }\n+┊   ┊133┊      ],\n+┊   ┊134┊    },\n+┊   ┊135┊    {\n+┊   ┊136┊      id: '3',\n+┊   ┊137┊      __typename: 'Chat',\n+┊   ┊138┊      name: 'Ray Edwards',\n+┊   ┊139┊      picture: 'https://randomuser.me/api/portraits/thumb/men/3.jpg',\n+┊   ┊140┊      allTimeMembers: [\n+┊   ┊141┊        {\n+┊   ┊142┊          id: '1',\n+┊   ┊143┊          __typename: 'User',\n+┊   ┊144┊        },\n+┊   ┊145┊        {\n+┊   ┊146┊          id: '5',\n+┊   ┊147┊          __typename: 'User',\n+┊   ┊148┊        }\n+┊   ┊149┊      ],\n+┊   ┊150┊      unreadMessages: 0,\n+┊   ┊151┊      isGroup: false,\n+┊   ┊152┊      messages: [\n+┊   ┊153┊        {\n+┊   ┊154┊          id: '1',\n+┊   ┊155┊          __typename: 'Message',\n+┊   ┊156┊          chat: {\n+┊   ┊157┊            id: '3',\n+┊   ┊158┊            __typename: 'Chat',\n+┊   ┊159┊          },\n+┊   ┊160┊          sender: {\n+┊   ┊161┊            id: '1',\n+┊   ┊162┊            __typename: 'User',\n+┊   ┊163┊            name: 'Ethan Gonzalez'\n+┊   ┊164┊          },\n+┊   ┊165┊          content: 'You still there?',\n+┊   ┊166┊          createdAt: '1514010200',\n+┊   ┊167┊          type: 0,\n+┊   ┊168┊          recipients: [\n+┊   ┊169┊            {\n+┊   ┊170┊              user: {\n+┊   ┊171┊                id: '5',\n+┊   ┊172┊                __typename: 'User',\n+┊   ┊173┊              },\n+┊   ┊174┊              message: {\n+┊   ┊175┊                id: '1',\n+┊   ┊176┊                __typename: 'Message',\n+┊   ┊177┊                chat: {\n+┊   ┊178┊                  id: '3',\n+┊   ┊179┊                  __typename: 'Chat',\n+┊   ┊180┊                },\n+┊   ┊181┊              },\n+┊   ┊182┊              __typename: 'Recipient',\n+┊   ┊183┊              chat: {\n+┊   ┊184┊                id: '3',\n+┊   ┊185┊                __typename: 'Chat',\n+┊   ┊186┊              },\n+┊   ┊187┊              receivedAt: null,\n+┊   ┊188┊              readAt: null\n+┊   ┊189┊            }\n+┊   ┊190┊          ],\n+┊   ┊191┊          ownership: true\n+┊   ┊192┊        }\n+┊   ┊193┊      ],\n+┊   ┊194┊    },\n+┊   ┊195┊    {\n+┊   ┊196┊      id: '6',\n+┊   ┊197┊      __typename: 'Chat',\n+┊   ┊198┊      name: 'Niccolò Belli',\n+┊   ┊199┊      picture: 'https://randomuser.me/api/portraits/thumb/men/4.jpg',\n+┊   ┊200┊      allTimeMembers: [\n+┊   ┊201┊        {\n+┊   ┊202┊          id: '1',\n+┊   ┊203┊          __typename: 'User',\n+┊   ┊204┊        },\n+┊   ┊205┊        {\n+┊   ┊206┊          id: '6',\n+┊   ┊207┊          __typename: 'User',\n+┊   ┊208┊        }\n+┊   ┊209┊      ],\n+┊   ┊210┊      unreadMessages: 0,\n+┊   ┊211┊      messages: [],\n+┊   ┊212┊      isGroup: false\n+┊   ┊213┊    },\n+┊   ┊214┊    {\n+┊   ┊215┊      id: '8',\n+┊   ┊216┊      __typename: 'Chat',\n+┊   ┊217┊      name: 'A user 0 group',\n+┊   ┊218┊      picture: 'https://randomuser.me/api/portraits/thumb/lego/1.jpg',\n+┊   ┊219┊      allTimeMembers: [\n+┊   ┊220┊        {\n+┊   ┊221┊          id: '1',\n+┊   ┊222┊          __typename: 'User',\n+┊   ┊223┊        },\n+┊   ┊224┊        {\n+┊   ┊225┊          id: '3',\n+┊   ┊226┊          __typename: 'User',\n+┊   ┊227┊        },\n+┊   ┊228┊        {\n+┊   ┊229┊          id: '4',\n+┊   ┊230┊          __typename: 'User',\n+┊   ┊231┊        },\n+┊   ┊232┊        {\n+┊   ┊233┊          id: '6',\n+┊   ┊234┊          __typename: 'User',\n+┊   ┊235┊        },\n+┊   ┊236┊      ],\n+┊   ┊237┊      unreadMessages: 1,\n+┊   ┊238┊      isGroup: true,\n+┊   ┊239┊      messages: [\n+┊   ┊240┊        {\n+┊   ┊241┊          id: '1',\n+┊   ┊242┊          __typename: 'Message',\n+┊   ┊243┊          chat: {\n+┊   ┊244┊            id: '8',\n+┊   ┊245┊            __typename: 'Chat',\n+┊   ┊246┊          },\n+┊   ┊247┊          sender: {\n+┊   ┊248┊            id: '4',\n+┊   ┊249┊            __typename: 'User',\n+┊   ┊250┊            name: 'Katie Peterson'\n+┊   ┊251┊          },\n+┊   ┊252┊          content: 'Awesome!',\n+┊   ┊253┊          createdAt: '1512830000',\n+┊   ┊254┊          type: 0,\n+┊   ┊255┊          recipients: [\n+┊   ┊256┊            {\n+┊   ┊257┊              user: {\n+┊   ┊258┊                id: '1',\n+┊   ┊259┊                __typename: 'User',\n+┊   ┊260┊              },\n+┊   ┊261┊              message: {\n+┊   ┊262┊                id: '1',\n+┊   ┊263┊                __typename: 'Message',\n+┊   ┊264┊                chat: {\n+┊   ┊265┊                  id: '8',\n+┊   ┊266┊                  __typename: 'Chat',\n+┊   ┊267┊                },\n+┊   ┊268┊              },\n+┊   ┊269┊              __typename: 'Recipient',\n+┊   ┊270┊              chat: {\n+┊   ┊271┊                id: '8',\n+┊   ┊272┊                __typename: 'Chat',\n+┊   ┊273┊              },\n+┊   ┊274┊              receivedAt: null,\n+┊   ┊275┊              readAt: null\n+┊   ┊276┊            },\n+┊   ┊277┊            {\n+┊   ┊278┊              user: {\n+┊   ┊279┊                id: '6',\n+┊   ┊280┊                __typename: 'User',\n+┊   ┊281┊              },\n+┊   ┊282┊              message: {\n+┊   ┊283┊                id: '1',\n+┊   ┊284┊                __typename: 'Message',\n+┊   ┊285┊                chat: {\n+┊   ┊286┊                  id: '8',\n+┊   ┊287┊                  __typename: 'Chat',\n+┊   ┊288┊                },\n+┊   ┊289┊              },\n+┊   ┊290┊              __typename: 'Recipient',\n+┊   ┊291┊              chat: {\n+┊   ┊292┊                id: '8',\n+┊   ┊293┊                __typename: 'Chat',\n+┊   ┊294┊              },\n+┊   ┊295┊              receivedAt: null,\n+┊   ┊296┊              readAt: null\n+┊   ┊297┊            }\n+┊   ┊298┊          ],\n+┊   ┊299┊          ownership: false\n+┊   ┊300┊        }\n+┊   ┊301┊      ],\n+┊   ┊302┊    },\n+┊   ┊303┊  ];\n+┊   ┊304┊\n+┊   ┊305┊  beforeEach(() => {\n+┊   ┊306┊    TestBed.configureTestingModule({\n+┊   ┊307┊      imports: [\n+┊   ┊308┊        HttpLinkModule,\n+┊   ┊309┊        // HttpClientModule,\n+┊   ┊310┊        HttpClientTestingModule,\n+┊   ┊311┊      ],\n+┊   ┊312┊      providers: [\n+┊   ┊313┊        ChatsService,\n+┊   ┊314┊        Apollo,\n+┊   ┊315┊      ]\n+┊   ┊316┊    });\n+┊   ┊317┊\n+┊   ┊318┊    httpMock = TestBed.get(HttpTestingController);\n+┊   ┊319┊    httpLink = TestBed.get(HttpLink);\n+┊   ┊320┊    apollo = TestBed.get(Apollo);\n+┊   ┊321┊\n+┊   ┊322┊    apollo.create({\n+┊   ┊323┊      link: httpLink.create(<Options>{ uri: 'http://localhost:3000/graphql' }),\n+┊   ┊324┊      cache: new InMemoryCache({\n+┊   ┊325┊        dataIdFromObject: (object: any) => {\n+┊   ┊326┊          switch (object.__typename) {\n+┊   ┊327┊            case 'Message': return `${object.chat.id}:${object.id}`; // use `chatId` prefix and `messageId` as the primary key\n+┊   ┊328┊            default: return defaultDataIdFromObject(object); // fall back to default handling\n+┊   ┊329┊          }\n+┊   ┊330┊        }\n+┊   ┊331┊      }),\n+┊   ┊332┊    });\n+┊   ┊333┊  });\n+┊   ┊334┊\n+┊   ┊335┊  it('should be created', inject([ChatsService], (service: ChatsService) => {\n+┊   ┊336┊    expect(service).toBeTruthy();\n+┊   ┊337┊  }));\n+┊   ┊338┊\n+┊   ┊339┊  it('should get chats', inject([ChatsService], (service: ChatsService) => {\n+┊   ┊340┊    service.getChats().chats$.subscribe(_chats => {\n+┊   ┊341┊      expect(_chats.length).toEqual(chats.length);\n+┊   ┊342┊      for (let i = 0; i < _chats.length; i++) {\n+┊   ┊343┊        expect(_chats[i]).toEqual(chats[i]);\n+┊   ┊344┊      }\n+┊   ┊345┊    });\n+┊   ┊346┊\n+┊   ┊347┊    const req = httpMock.expectOne('http://localhost:3000/graphql', 'call to api');\n+┊   ┊348┊    expect(req.request.method).toBe('POST');\n+┊   ┊349┊    req.flush({\n+┊   ┊350┊      data: {\n+┊   ┊351┊        chats\n+┊   ┊352┊      }\n+┊   ┊353┊    });\n+┊   ┊354┊    httpMock.verify();\n+┊   ┊355┊  }));\n+┊   ┊356┊});\n```\n\n[}]: #\n\nIn the last example we are going to test a container component, which makes use of several services and multiple other components:\n\n[{]: <helper> (diffStep \"3.1\" files=\"src/app/chats-lister/containers/chats/chats.component.spec.ts\" module=\"client\")\n\n#### Step 3.1: Testing\n\n##### Added src&#x2F;app&#x2F;chats-lister&#x2F;containers&#x2F;chats&#x2F;chats.component.spec.ts\n```diff\n@@ -0,0 +1,387 @@\n+┊   ┊  1┊import { async, ComponentFixture, TestBed } from '@angular/core/testing';\n+┊   ┊  2┊\n+┊   ┊  3┊import { ChatsComponent } from './chats.component';\n+┊   ┊  4┊import {DebugElement, NO_ERRORS_SCHEMA} from '@angular/core';\n+┊   ┊  5┊import {ChatsListComponent} from '../../components/chats-list/chats-list.component';\n+┊   ┊  6┊import {ChatItemComponent} from '../../components/chat-item/chat-item.component';\n+┊   ┊  7┊import {TruncateModule} from 'ng2-truncate';\n+┊   ┊  8┊import {MatButtonModule, MatIconModule, MatListModule, MatMenuModule} from '@angular/material';\n+┊   ┊  9┊import {ChatsService} from '../../../services/chats.service';\n+┊   ┊ 10┊import {Apollo} from 'apollo-angular';\n+┊   ┊ 11┊import {HttpClientTestingModule, HttpTestingController} from '@angular/common/http/testing';\n+┊   ┊ 12┊import {HttpLink, HttpLinkModule, Options} from 'apollo-angular-link-http';\n+┊   ┊ 13┊import {defaultDataIdFromObject, InMemoryCache} from 'apollo-cache-inmemory';\n+┊   ┊ 14┊import {By} from '@angular/platform-browser';\n+┊   ┊ 15┊import {RouterTestingModule} from '@angular/router/testing';\n+┊   ┊ 16┊\n+┊   ┊ 17┊describe('ChatsComponent', () => {\n+┊   ┊ 18┊  let component: ChatsComponent;\n+┊   ┊ 19┊  let fixture: ComponentFixture<ChatsComponent>;\n+┊   ┊ 20┊  let el: DebugElement;\n+┊   ┊ 21┊\n+┊   ┊ 22┊  let httpMock: HttpTestingController;\n+┊   ┊ 23┊  let httpLink: HttpLink;\n+┊   ┊ 24┊  let apollo: Apollo;\n+┊   ┊ 25┊\n+┊   ┊ 26┊  const chats: any = [\n+┊   ┊ 27┊    {\n+┊   ┊ 28┊      id: '1',\n+┊   ┊ 29┊      __typename: 'Chat',\n+┊   ┊ 30┊      name: 'Avery Stewart',\n+┊   ┊ 31┊      picture: 'https://randomuser.me/api/portraits/thumb/women/1.jpg',\n+┊   ┊ 32┊      allTimeMembers: [\n+┊   ┊ 33┊        {\n+┊   ┊ 34┊          id: '1',\n+┊   ┊ 35┊          __typename: 'User',\n+┊   ┊ 36┊        },\n+┊   ┊ 37┊        {\n+┊   ┊ 38┊          id: '3',\n+┊   ┊ 39┊          __typename: 'User',\n+┊   ┊ 40┊        }\n+┊   ┊ 41┊      ],\n+┊   ┊ 42┊      unreadMessages: 1,\n+┊   ┊ 43┊      isGroup: false,\n+┊   ┊ 44┊      messages: [\n+┊   ┊ 45┊        {\n+┊   ┊ 46┊          id: '1',\n+┊   ┊ 47┊          chat: {\n+┊   ┊ 48┊            id: '1',\n+┊   ┊ 49┊            __typename: 'Chat',\n+┊   ┊ 50┊          },\n+┊   ┊ 51┊          __typename: 'Message',\n+┊   ┊ 52┊          sender: {\n+┊   ┊ 53┊            id: '3',\n+┊   ┊ 54┊            __typename: 'User',\n+┊   ┊ 55┊            name: 'Avery Stewart'\n+┊   ┊ 56┊          },\n+┊   ┊ 57┊          content: 'Yep!',\n+┊   ┊ 58┊          createdAt: '1514035700',\n+┊   ┊ 59┊          type: 0,\n+┊   ┊ 60┊          recipients: [\n+┊   ┊ 61┊            {\n+┊   ┊ 62┊              user: {\n+┊   ┊ 63┊                id: '1',\n+┊   ┊ 64┊                __typename: 'User',\n+┊   ┊ 65┊              },\n+┊   ┊ 66┊              message: {\n+┊   ┊ 67┊                id: '1',\n+┊   ┊ 68┊                __typename: 'Message',\n+┊   ┊ 69┊                chat: {\n+┊   ┊ 70┊                  id: '1',\n+┊   ┊ 71┊                  __typename: 'Chat',\n+┊   ┊ 72┊                },\n+┊   ┊ 73┊              },\n+┊   ┊ 74┊              __typename: 'Recipient',\n+┊   ┊ 75┊              chat: {\n+┊   ┊ 76┊                id: '1',\n+┊   ┊ 77┊                __typename: 'Chat',\n+┊   ┊ 78┊              },\n+┊   ┊ 79┊              receivedAt: null,\n+┊   ┊ 80┊              readAt: null,\n+┊   ┊ 81┊            }\n+┊   ┊ 82┊          ],\n+┊   ┊ 83┊          ownership: false,\n+┊   ┊ 84┊        }\n+┊   ┊ 85┊      ],\n+┊   ┊ 86┊    },\n+┊   ┊ 87┊    {\n+┊   ┊ 88┊      id: '2',\n+┊   ┊ 89┊      __typename: 'Chat',\n+┊   ┊ 90┊      name: 'Katie Peterson',\n+┊   ┊ 91┊      picture: 'https://randomuser.me/api/portraits/thumb/women/2.jpg',\n+┊   ┊ 92┊      allTimeMembers: [\n+┊   ┊ 93┊        {\n+┊   ┊ 94┊          id: '1',\n+┊   ┊ 95┊          __typename: 'User',\n+┊   ┊ 96┊        },\n+┊   ┊ 97┊        {\n+┊   ┊ 98┊          id: '4',\n+┊   ┊ 99┊          __typename: 'User',\n+┊   ┊100┊        }\n+┊   ┊101┊      ],\n+┊   ┊102┊      unreadMessages: 0,\n+┊   ┊103┊      isGroup: false,\n+┊   ┊104┊      messages: [\n+┊   ┊105┊        {\n+┊   ┊106┊          id: '1',\n+┊   ┊107┊          chat: {\n+┊   ┊108┊            id: '2',\n+┊   ┊109┊            __typename: 'Chat',\n+┊   ┊110┊          },\n+┊   ┊111┊          __typename: 'Message',\n+┊   ┊112┊          sender: {\n+┊   ┊113┊            id: '1',\n+┊   ┊114┊            __typename: 'User',\n+┊   ┊115┊            name: 'Ethan Gonzalez'\n+┊   ┊116┊          },\n+┊   ┊117┊          content: 'Hey, it\\'s me',\n+┊   ┊118┊          createdAt: '1514031800',\n+┊   ┊119┊          type: 0,\n+┊   ┊120┊          recipients: [\n+┊   ┊121┊            {\n+┊   ┊122┊              user: {\n+┊   ┊123┊                id: '4',\n+┊   ┊124┊                __typename: 'User',\n+┊   ┊125┊              },\n+┊   ┊126┊              message: {\n+┊   ┊127┊                id: '1',\n+┊   ┊128┊                __typename: 'Message',\n+┊   ┊129┊                chat: {\n+┊   ┊130┊                  id: '2',\n+┊   ┊131┊                  __typename: 'Chat',\n+┊   ┊132┊                },\n+┊   ┊133┊              },\n+┊   ┊134┊              __typename: 'Recipient',\n+┊   ┊135┊              chat: {\n+┊   ┊136┊                id: '2',\n+┊   ┊137┊                __typename: 'Chat',\n+┊   ┊138┊              },\n+┊   ┊139┊              receivedAt: null,\n+┊   ┊140┊              readAt: null,\n+┊   ┊141┊            }\n+┊   ┊142┊          ],\n+┊   ┊143┊          ownership: true\n+┊   ┊144┊        }\n+┊   ┊145┊      ],\n+┊   ┊146┊    },\n+┊   ┊147┊    {\n+┊   ┊148┊      id: '3',\n+┊   ┊149┊      __typename: 'Chat',\n+┊   ┊150┊      name: 'Ray Edwards',\n+┊   ┊151┊      picture: 'https://randomuser.me/api/portraits/thumb/men/3.jpg',\n+┊   ┊152┊      allTimeMembers: [\n+┊   ┊153┊        {\n+┊   ┊154┊          id: '1',\n+┊   ┊155┊          __typename: 'User',\n+┊   ┊156┊        },\n+┊   ┊157┊        {\n+┊   ┊158┊          id: '5',\n+┊   ┊159┊          __typename: 'User',\n+┊   ┊160┊        }\n+┊   ┊161┊      ],\n+┊   ┊162┊      unreadMessages: 0,\n+┊   ┊163┊      isGroup: false,\n+┊   ┊164┊      messages: [\n+┊   ┊165┊        {\n+┊   ┊166┊          id: '1',\n+┊   ┊167┊          __typename: 'Message',\n+┊   ┊168┊          chat: {\n+┊   ┊169┊            id: '3',\n+┊   ┊170┊            __typename: 'Chat',\n+┊   ┊171┊          },\n+┊   ┊172┊          sender: {\n+┊   ┊173┊            id: '1',\n+┊   ┊174┊            __typename: 'User',\n+┊   ┊175┊            name: 'Ethan Gonzalez'\n+┊   ┊176┊          },\n+┊   ┊177┊          content: 'You still there?',\n+┊   ┊178┊          createdAt: '1514010200',\n+┊   ┊179┊          type: 0,\n+┊   ┊180┊          recipients: [\n+┊   ┊181┊            {\n+┊   ┊182┊              user: {\n+┊   ┊183┊                id: '5',\n+┊   ┊184┊                __typename: 'User',\n+┊   ┊185┊              },\n+┊   ┊186┊              message: {\n+┊   ┊187┊                id: '1',\n+┊   ┊188┊                __typename: 'Message',\n+┊   ┊189┊                chat: {\n+┊   ┊190┊                  id: '3',\n+┊   ┊191┊                  __typename: 'Chat',\n+┊   ┊192┊                },\n+┊   ┊193┊              },\n+┊   ┊194┊              __typename: 'Recipient',\n+┊   ┊195┊              chat: {\n+┊   ┊196┊                id: '3',\n+┊   ┊197┊                __typename: 'Chat',\n+┊   ┊198┊              },\n+┊   ┊199┊              receivedAt: null,\n+┊   ┊200┊              readAt: null\n+┊   ┊201┊            }\n+┊   ┊202┊          ],\n+┊   ┊203┊          ownership: true\n+┊   ┊204┊        }\n+┊   ┊205┊      ],\n+┊   ┊206┊    },\n+┊   ┊207┊    {\n+┊   ┊208┊      id: '6',\n+┊   ┊209┊      __typename: 'Chat',\n+┊   ┊210┊      name: 'Niccolò Belli',\n+┊   ┊211┊      picture: 'https://randomuser.me/api/portraits/thumb/men/4.jpg',\n+┊   ┊212┊      allTimeMembers: [\n+┊   ┊213┊        {\n+┊   ┊214┊          id: '1',\n+┊   ┊215┊          __typename: 'User',\n+┊   ┊216┊        },\n+┊   ┊217┊        {\n+┊   ┊218┊          id: '6',\n+┊   ┊219┊          __typename: 'User',\n+┊   ┊220┊        }\n+┊   ┊221┊      ],\n+┊   ┊222┊      unreadMessages: 0,\n+┊   ┊223┊      messages: [],\n+┊   ┊224┊      isGroup: false\n+┊   ┊225┊    },\n+┊   ┊226┊    {\n+┊   ┊227┊      id: '8',\n+┊   ┊228┊      __typename: 'Chat',\n+┊   ┊229┊      name: 'A user 0 group',\n+┊   ┊230┊      picture: 'https://randomuser.me/api/portraits/thumb/lego/1.jpg',\n+┊   ┊231┊      allTimeMembers: [\n+┊   ┊232┊        {\n+┊   ┊233┊          id: '1',\n+┊   ┊234┊          __typename: 'User',\n+┊   ┊235┊        },\n+┊   ┊236┊        {\n+┊   ┊237┊          id: '3',\n+┊   ┊238┊          __typename: 'User',\n+┊   ┊239┊        },\n+┊   ┊240┊        {\n+┊   ┊241┊          id: '4',\n+┊   ┊242┊          __typename: 'User',\n+┊   ┊243┊        },\n+┊   ┊244┊        {\n+┊   ┊245┊          id: '6',\n+┊   ┊246┊          __typename: 'User',\n+┊   ┊247┊        },\n+┊   ┊248┊      ],\n+┊   ┊249┊      unreadMessages: 1,\n+┊   ┊250┊      isGroup: true,\n+┊   ┊251┊      messages: [\n+┊   ┊252┊        {\n+┊   ┊253┊          id: '1',\n+┊   ┊254┊          __typename: 'Message',\n+┊   ┊255┊          chat: {\n+┊   ┊256┊            id: '8',\n+┊   ┊257┊            __typename: 'Chat',\n+┊   ┊258┊          },\n+┊   ┊259┊          sender: {\n+┊   ┊260┊            id: '4',\n+┊   ┊261┊            __typename: 'User',\n+┊   ┊262┊            name: 'Katie Peterson'\n+┊   ┊263┊          },\n+┊   ┊264┊          content: 'Awesome!',\n+┊   ┊265┊          createdAt: '1512830000',\n+┊   ┊266┊          type: 0,\n+┊   ┊267┊          recipients: [\n+┊   ┊268┊            {\n+┊   ┊269┊              user: {\n+┊   ┊270┊                id: '1',\n+┊   ┊271┊                __typename: 'User',\n+┊   ┊272┊              },\n+┊   ┊273┊              message: {\n+┊   ┊274┊                id: '1',\n+┊   ┊275┊                __typename: 'Message',\n+┊   ┊276┊                chat: {\n+┊   ┊277┊                  id: '8',\n+┊   ┊278┊                  __typename: 'Chat',\n+┊   ┊279┊                },\n+┊   ┊280┊              },\n+┊   ┊281┊              __typename: 'Recipient',\n+┊   ┊282┊              chat: {\n+┊   ┊283┊                id: '8',\n+┊   ┊284┊                __typename: 'Chat',\n+┊   ┊285┊              },\n+┊   ┊286┊              receivedAt: null,\n+┊   ┊287┊              readAt: null\n+┊   ┊288┊            },\n+┊   ┊289┊            {\n+┊   ┊290┊              user: {\n+┊   ┊291┊                id: '6',\n+┊   ┊292┊                __typename: 'User',\n+┊   ┊293┊              },\n+┊   ┊294┊              message: {\n+┊   ┊295┊                id: '1',\n+┊   ┊296┊                __typename: 'Message',\n+┊   ┊297┊                chat: {\n+┊   ┊298┊                  id: '8',\n+┊   ┊299┊                  __typename: 'Chat',\n+┊   ┊300┊                },\n+┊   ┊301┊              },\n+┊   ┊302┊              __typename: 'Recipient',\n+┊   ┊303┊              chat: {\n+┊   ┊304┊                id: '8',\n+┊   ┊305┊                __typename: 'Chat',\n+┊   ┊306┊              },\n+┊   ┊307┊              receivedAt: null,\n+┊   ┊308┊              readAt: null\n+┊   ┊309┊            }\n+┊   ┊310┊          ],\n+┊   ┊311┊          ownership: false\n+┊   ┊312┊        }\n+┊   ┊313┊      ],\n+┊   ┊314┊    },\n+┊   ┊315┊  ];\n+┊   ┊316┊\n+┊   ┊317┊  beforeEach(async(() => {\n+┊   ┊318┊    TestBed.configureTestingModule({\n+┊   ┊319┊      declarations: [\n+┊   ┊320┊        ChatsComponent,\n+┊   ┊321┊        ChatsListComponent,\n+┊   ┊322┊        ChatItemComponent\n+┊   ┊323┊      ],\n+┊   ┊324┊      imports: [\n+┊   ┊325┊        MatMenuModule,\n+┊   ┊326┊        MatIconModule,\n+┊   ┊327┊        MatButtonModule,\n+┊   ┊328┊        MatListModule,\n+┊   ┊329┊        TruncateModule,\n+┊   ┊330┊        HttpLinkModule,\n+┊   ┊331┊        HttpClientTestingModule,\n+┊   ┊332┊        RouterTestingModule\n+┊   ┊333┊      ],\n+┊   ┊334┊      providers: [\n+┊   ┊335┊        ChatsService,\n+┊   ┊336┊        Apollo,\n+┊   ┊337┊      ],\n+┊   ┊338┊      schemas: [NO_ERRORS_SCHEMA]\n+┊   ┊339┊    })\n+┊   ┊340┊      .compileComponents();\n+┊   ┊341┊\n+┊   ┊342┊    httpMock = TestBed.get(HttpTestingController);\n+┊   ┊343┊    httpLink = TestBed.get(HttpLink);\n+┊   ┊344┊    apollo = TestBed.get(Apollo);\n+┊   ┊345┊\n+┊   ┊346┊    apollo.create({\n+┊   ┊347┊      link: httpLink.create(<Options>{ uri: 'http://localhost:3000/graphql' }),\n+┊   ┊348┊      cache: new InMemoryCache({\n+┊   ┊349┊        dataIdFromObject: (object: any) => {\n+┊   ┊350┊          switch (object.__typename) {\n+┊   ┊351┊            case 'Message': return `${object.chat.id}:${object.id}`; // use `chatId` prefix and `messageId` as the primary key\n+┊   ┊352┊            default: return defaultDataIdFromObject(object); // fall back to default handling\n+┊   ┊353┊          }\n+┊   ┊354┊        }\n+┊   ┊355┊      }),\n+┊   ┊356┊    });\n+┊   ┊357┊  }));\n+┊   ┊358┊\n+┊   ┊359┊  beforeEach(() => {\n+┊   ┊360┊    fixture = TestBed.createComponent(ChatsComponent);\n+┊   ┊361┊    component = fixture.componentInstance;\n+┊   ┊362┊    fixture.detectChanges();\n+┊   ┊363┊    const req = httpMock.expectOne('http://localhost:3000/graphql', 'call to api');\n+┊   ┊364┊    req.flush({\n+┊   ┊365┊      data: {\n+┊   ┊366┊        chats\n+┊   ┊367┊      }\n+┊   ┊368┊    });\n+┊   ┊369┊  });\n+┊   ┊370┊\n+┊   ┊371┊  it('should create', () => {\n+┊   ┊372┊    expect(component).toBeTruthy();\n+┊   ┊373┊  });\n+┊   ┊374┊\n+┊   ┊375┊  it('should display the chats', () => {\n+┊   ┊376┊    fixture.whenStable().then(() => {\n+┊   ┊377┊      fixture.detectChanges();\n+┊   ┊378┊      el = fixture.debugElement;\n+┊   ┊379┊      for (let i = 0; i < chats.length; i++) {\n+┊   ┊380┊        expect(el.query(By.css(`app-chats-list > mat-list > mat-list-item:nth-child(${i + 1}) > div > app-chat-item > div > div > div`))\n+┊   ┊381┊          .nativeElement.textContent).toContain(chats[i].name);\n+┊   ┊382┊      }\n+┊   ┊383┊    });\n+┊   ┊384┊\n+┊   ┊385┊    httpMock.verify();\n+┊   ┊386┊  });\n+┊   ┊387┊});\n```\n\n[}]: #"
          },
          {
            "manualTitle": "Step 8: Chat viewer",
            "stepRevision": "f44e03b8e11bcb98ab948add04cc88036b7b5e76",
            "manualView": "We created a module which lists all of our chats, but we still need to show a particular chat.\nLet's create the `chat-viewer` module! We're going to create a container component called `ChatComponent` and a couple of presentational components.\n\n[{]: <helper> (diffStep \"4.1\" module=\"client\")\n\n#### Step 4.1: Chat Viewer\n\n##### Changed src&#x2F;app&#x2F;app.module.ts\n```diff\n@@ -8,6 +8,7 @@\n ┊ 8┊ 8┊import {defaultDataIdFromObject, InMemoryCache} from 'apollo-cache-inmemory';\n ┊ 9┊ 9┊import {ChatsListerModule} from './chats-lister/chats-lister.module';\n ┊10┊10┊import {RouterModule, Routes} from '@angular/router';\n+┊  ┊11┊import {ChatViewerModule} from './chat-viewer/chat-viewer.module';\n ┊11┊12┊const routes: Routes = [];\n ┊12┊13┊\n ┊13┊14┊@NgModule({\n```\n```diff\n@@ -24,6 +25,7 @@\n ┊24┊25┊    RouterModule.forRoot(routes),\n ┊25┊26┊    // Feature modules\n ┊26┊27┊    ChatsListerModule,\n+┊  ┊28┊    ChatViewerModule,\n ┊27┊29┊  ],\n ┊28┊30┊  providers: [],\n ┊29┊31┊  bootstrap: [AppComponent]\n```\n\n##### Added src&#x2F;app&#x2F;chat-viewer&#x2F;chat-viewer.module.ts\n```diff\n@@ -0,0 +1,53 @@\n+┊  ┊ 1┊import { BrowserModule } from '@angular/platform-browser';\n+┊  ┊ 2┊import { NgModule } from '@angular/core';\n+┊  ┊ 3┊\n+┊  ┊ 4┊import {BrowserAnimationsModule} from '@angular/platform-browser/animations';\n+┊  ┊ 5┊import {MatButtonModule, MatGridListModule, MatIconModule, MatListModule, MatMenuModule, MatToolbarModule} from '@angular/material';\n+┊  ┊ 6┊import {RouterModule, Routes} from '@angular/router';\n+┊  ┊ 7┊import {FormsModule} from '@angular/forms';\n+┊  ┊ 8┊import {ChatsService} from '../services/chats.service';\n+┊  ┊ 9┊import {ChatComponent} from './containers/chat/chat.component';\n+┊  ┊10┊import {MessagesListComponent} from './components/messages-list/messages-list.component';\n+┊  ┊11┊import {MessageItemComponent} from './components/message-item/message-item.component';\n+┊  ┊12┊import {NewMessageComponent} from './components/new-message/new-message.component';\n+┊  ┊13┊import {SharedModule} from '../shared/shared.module';\n+┊  ┊14┊\n+┊  ┊15┊const routes: Routes = [\n+┊  ┊16┊  {\n+┊  ┊17┊    path: 'chat', children: [\n+┊  ┊18┊      {path: ':id', component: ChatComponent},\n+┊  ┊19┊    ],\n+┊  ┊20┊  },\n+┊  ┊21┊];\n+┊  ┊22┊\n+┊  ┊23┊@NgModule({\n+┊  ┊24┊  declarations: [\n+┊  ┊25┊    ChatComponent,\n+┊  ┊26┊    MessagesListComponent,\n+┊  ┊27┊    MessageItemComponent,\n+┊  ┊28┊    NewMessageComponent,\n+┊  ┊29┊  ],\n+┊  ┊30┊  imports: [\n+┊  ┊31┊    BrowserModule,\n+┊  ┊32┊    // Material\n+┊  ┊33┊    MatToolbarModule,\n+┊  ┊34┊    MatMenuModule,\n+┊  ┊35┊    MatIconModule,\n+┊  ┊36┊    MatButtonModule,\n+┊  ┊37┊    MatListModule,\n+┊  ┊38┊    MatGridListModule,\n+┊  ┊39┊    // Animations\n+┊  ┊40┊    BrowserAnimationsModule,\n+┊  ┊41┊    // Routing\n+┊  ┊42┊    RouterModule.forChild(routes),\n+┊  ┊43┊    // Forms\n+┊  ┊44┊    FormsModule,\n+┊  ┊45┊    // Feature modules\n+┊  ┊46┊    SharedModule,\n+┊  ┊47┊  ],\n+┊  ┊48┊  providers: [\n+┊  ┊49┊    ChatsService,\n+┊  ┊50┊  ],\n+┊  ┊51┊})\n+┊  ┊52┊export class ChatViewerModule {\n+┊  ┊53┊}\n```\n\n##### Added src&#x2F;app&#x2F;chat-viewer&#x2F;components&#x2F;message-item&#x2F;message-item.component.scss\n```diff\n@@ -0,0 +1,18 @@\n+┊  ┊ 1┊:host {\n+┊  ┊ 2┊  display: flex;\n+┊  ┊ 3┊  width: 100%;\n+┊  ┊ 4┊}\n+┊  ┊ 5┊\n+┊  ┊ 6┊.message {\n+┊  ┊ 7┊  max-width: 75%;\n+┊  ┊ 8┊  background-color: lightgoldenrodyellow;\n+┊  ┊ 9┊\n+┊  ┊10┊  &.mine {\n+┊  ┊11┊    background-color: lightcyan;\n+┊  ┊12┊    margin-left: auto;\n+┊  ┊13┊  }\n+┊  ┊14┊\n+┊  ┊15┊  .message-sender {\n+┊  ┊16┊    font-size: small;\n+┊  ┊17┊  }\n+┊  ┊18┊}\n```\n\n##### Added src&#x2F;app&#x2F;chat-viewer&#x2F;components&#x2F;message-item&#x2F;message-item.component.ts\n```diff\n@@ -0,0 +1,21 @@\n+┊  ┊ 1┊import {Component, Input} from '@angular/core';\n+┊  ┊ 2┊\n+┊  ┊ 3┊@Component({\n+┊  ┊ 4┊  selector: 'app-message-item',\n+┊  ┊ 5┊  template: `\n+┊  ┊ 6┊    <div class=\"message\"\n+┊  ┊ 7┊         [ngClass]=\"{'mine': message.ownership}\">\n+┊  ┊ 8┊      <div *ngIf=\"isGroup && !message.ownership\" class=\"message-sender\">{{ message.sender.name }}</div>\n+┊  ┊ 9┊      <div>{{ message.content }}</div>\n+┊  ┊10┊    </div>\n+┊  ┊11┊  `,\n+┊  ┊12┊  styleUrls: ['message-item.component.scss'],\n+┊  ┊13┊})\n+┊  ┊14┊export class MessageItemComponent {\n+┊  ┊15┊  // tslint:disable-next-line:no-input-rename\n+┊  ┊16┊  @Input('item')\n+┊  ┊17┊  message: any;\n+┊  ┊18┊\n+┊  ┊19┊  @Input()\n+┊  ┊20┊  isGroup: boolean;\n+┊  ┊21┊}\n```\n\n##### Added src&#x2F;app&#x2F;chat-viewer&#x2F;components&#x2F;messages-list&#x2F;messages-list.component.scss\n```diff\n@@ -0,0 +1,12 @@\n+┊  ┊ 1┊:host {\n+┊  ┊ 2┊  display: block;\n+┊  ┊ 3┊  height: 100%;\n+┊  ┊ 4┊  overflow-y: scroll;\n+┊  ┊ 5┊  background-color: aliceblue;\n+┊  ┊ 6┊}\n+┊  ┊ 7┊\n+┊  ┊ 8┊/*\n+┊  ┊ 9┊:host::-webkit-scrollbar {\n+┊  ┊10┊  display: none;\n+┊  ┊11┊}\n+┊  ┊12┊*/\n```\n\n##### Added src&#x2F;app&#x2F;chat-viewer&#x2F;components&#x2F;messages-list&#x2F;messages-list.component.ts\n```diff\n@@ -0,0 +1,23 @@\n+┊  ┊ 1┊import {Component, Input} from '@angular/core';\n+┊  ┊ 2┊\n+┊  ┊ 3┊@Component({\n+┊  ┊ 4┊  selector: 'app-messages-list',\n+┊  ┊ 5┊  template: `\n+┊  ┊ 6┊    <mat-list>\n+┊  ┊ 7┊      <mat-list-item *ngFor=\"let message of messages\">\n+┊  ┊ 8┊        <app-message-item [item]=\"message\" [isGroup]=\"isGroup\"></app-message-item>\n+┊  ┊ 9┊      </mat-list-item>\n+┊  ┊10┊    </mat-list>\n+┊  ┊11┊  `,\n+┊  ┊12┊  styleUrls: ['messages-list.component.scss'],\n+┊  ┊13┊})\n+┊  ┊14┊export class MessagesListComponent {\n+┊  ┊15┊  // tslint:disable-next-line:no-input-rename\n+┊  ┊16┊  @Input('items')\n+┊  ┊17┊  messages: any[];\n+┊  ┊18┊\n+┊  ┊19┊  @Input()\n+┊  ┊20┊  isGroup: boolean;\n+┊  ┊21┊\n+┊  ┊22┊  constructor() {}\n+┊  ┊23┊}\n```\n\n##### Added src&#x2F;app&#x2F;chat-viewer&#x2F;components&#x2F;new-message&#x2F;new-message.component.scss\n```diff\n@@ -0,0 +1,13 @@\n+┊  ┊ 1┊:host {\n+┊  ┊ 2┊  display: flex;\n+┊  ┊ 3┊  height: 8vh;\n+┊  ┊ 4┊}\n+┊  ┊ 5┊\n+┊  ┊ 6┊input {\n+┊  ┊ 7┊  width: 100%;\n+┊  ┊ 8┊}\n+┊  ┊ 9┊\n+┊  ┊10┊button {\n+┊  ┊11┊  width: 8vh;\n+┊  ┊12┊  min-width: 56px;\n+┊  ┊13┊}\n```\n\n##### Added src&#x2F;app&#x2F;chat-viewer&#x2F;components&#x2F;new-message&#x2F;new-message.component.ts\n```diff\n@@ -0,0 +1,34 @@\n+┊  ┊ 1┊import {Component, EventEmitter, Input, Output} from '@angular/core';\n+┊  ┊ 2┊\n+┊  ┊ 3┊@Component({\n+┊  ┊ 4┊  selector: 'app-new-message',\n+┊  ┊ 5┊  template: `\n+┊  ┊ 6┊    <input type=\"text\" [(ngModel)]=\"message\" (keyup)=\"onInputKeyup($event)\"/>\n+┊  ┊ 7┊    <button mat-button (click)=\"emitMessage()\" [disabled]=\"disabled\">\n+┊  ┊ 8┊      <mat-icon aria-label=\"Icon-button with a send icon\">send</mat-icon>\n+┊  ┊ 9┊    </button>\n+┊  ┊10┊  `,\n+┊  ┊11┊  styleUrls: ['new-message.component.scss'],\n+┊  ┊12┊})\n+┊  ┊13┊export class NewMessageComponent {\n+┊  ┊14┊  @Input()\n+┊  ┊15┊  disabled: boolean;\n+┊  ┊16┊\n+┊  ┊17┊  @Output()\n+┊  ┊18┊  newMessage = new EventEmitter<string>();\n+┊  ┊19┊\n+┊  ┊20┊  message = '';\n+┊  ┊21┊\n+┊  ┊22┊  onInputKeyup({ keyCode }: KeyboardEvent) {\n+┊  ┊23┊    if (keyCode === 13) {\n+┊  ┊24┊      this.emitMessage();\n+┊  ┊25┊    }\n+┊  ┊26┊  }\n+┊  ┊27┊\n+┊  ┊28┊  emitMessage() {\n+┊  ┊29┊    if (this.message && !this.disabled) {\n+┊  ┊30┊      this.newMessage.emit(this.message);\n+┊  ┊31┊      this.message = '';\n+┊  ┊32┊    }\n+┊  ┊33┊  }\n+┊  ┊34┊}\n```\n\n##### Added src&#x2F;app&#x2F;chat-viewer&#x2F;containers&#x2F;chat&#x2F;chat.component.scss\n```diff\n@@ -0,0 +1,10 @@\n+┊  ┊ 1┊.container {\n+┊  ┊ 2┊  display: flex;\n+┊  ┊ 3┊  flex-flow: column;\n+┊  ┊ 4┊  justify-content: space-between;\n+┊  ┊ 5┊  height: calc(100vh - 8vh);\n+┊  ┊ 6┊\n+┊  ┊ 7┊  app-confirm-selection {\n+┊  ┊ 8┊    bottom: 10vh;\n+┊  ┊ 9┊  }\n+┊  ┊10┊}\n```\n\n##### Added src&#x2F;app&#x2F;chat-viewer&#x2F;containers&#x2F;chat&#x2F;chat.component.ts\n```diff\n@@ -0,0 +1,45 @@\n+┊  ┊ 1┊import {Component, OnInit} from '@angular/core';\n+┊  ┊ 2┊import {ActivatedRoute, Router} from '@angular/router';\n+┊  ┊ 3┊import {ChatsService} from '../../../services/chats.service';\n+┊  ┊ 4┊\n+┊  ┊ 5┊@Component({\n+┊  ┊ 6┊  template: `\n+┊  ┊ 7┊    <app-toolbar>\n+┊  ┊ 8┊      <button class=\"navigation\" mat-button (click)=\"goToChats()\">\n+┊  ┊ 9┊        <mat-icon aria-label=\"Icon-button with an arrow back icon\">arrow_back</mat-icon>\n+┊  ┊10┊      </button>\n+┊  ┊11┊      <div class=\"title\">{{ name }}</div>\n+┊  ┊12┊    </app-toolbar>\n+┊  ┊13┊    <div class=\"container\">\n+┊  ┊14┊      <app-messages-list [items]=\"messages\" [isGroup]=\"isGroup\"></app-messages-list>\n+┊  ┊15┊      <app-new-message></app-new-message>\n+┊  ┊16┊    </div>\n+┊  ┊17┊  `,\n+┊  ┊18┊  styleUrls: ['./chat.component.scss']\n+┊  ┊19┊})\n+┊  ┊20┊export class ChatComponent implements OnInit {\n+┊  ┊21┊  chatId: string;\n+┊  ┊22┊  messages: any[];\n+┊  ┊23┊  name: string;\n+┊  ┊24┊  isGroup: boolean;\n+┊  ┊25┊\n+┊  ┊26┊  constructor(private route: ActivatedRoute,\n+┊  ┊27┊              private router: Router,\n+┊  ┊28┊              private chatsService: ChatsService) {\n+┊  ┊29┊  }\n+┊  ┊30┊\n+┊  ┊31┊  ngOnInit() {\n+┊  ┊32┊    this.route.params.subscribe(({id: chatId}) => {\n+┊  ┊33┊      this.chatId = chatId;\n+┊  ┊34┊      this.chatsService.getChat(chatId).chat$.subscribe(chat => {\n+┊  ┊35┊        this.messages = chat.messages;\n+┊  ┊36┊        this.name = chat.name;\n+┊  ┊37┊        this.isGroup = chat.isGroup;\n+┊  ┊38┊      });\n+┊  ┊39┊    });\n+┊  ┊40┊  }\n+┊  ┊41┊\n+┊  ┊42┊  goToChats() {\n+┊  ┊43┊    this.router.navigate(['/chats']);\n+┊  ┊44┊  }\n+┊  ┊45┊}\n```\n\n##### Changed src&#x2F;app&#x2F;chats-lister&#x2F;components&#x2F;chat-item&#x2F;chat-item.component.ts\n```diff\n@@ -1,11 +1,11 @@\n-┊ 1┊  ┊import {Component, Input} from '@angular/core';\n+┊  ┊ 1┊import {Component, EventEmitter, Input, Output} from '@angular/core';\n ┊ 2┊ 2┊import {GetChats} from '../../../../types';\n ┊ 3┊ 3┊\n ┊ 4┊ 4┊@Component({\n ┊ 5┊ 5┊  selector: 'app-chat-item',\n ┊ 6┊ 6┊  template: `\n ┊ 7┊ 7┊    <div class=\"chat-row\">\n-┊ 8┊  ┊        <div class=\"chat-recipient\">\n+┊  ┊ 8┊        <div class=\"chat-recipient\" (click)=\"selectChat()\">\n ┊ 9┊ 9┊          <img *ngIf=\"chat.picture\" [src]=\"chat.picture\" width=\"48\" height=\"48\">\n ┊10┊10┊          <div>{{ chat.name }} [id: {{ chat.id }}]</div>\n ┊11┊11┊        </div>\n```\n```diff\n@@ -18,4 +18,11 @@\n ┊18┊18┊  // tslint:disable-next-line:no-input-rename\n ┊19┊19┊  @Input('item')\n ┊20┊20┊  chat: GetChats.Chats;\n+┊  ┊21┊\n+┊  ┊22┊  @Output()\n+┊  ┊23┊  select = new EventEmitter<string>();\n+┊  ┊24┊\n+┊  ┊25┊  selectChat() {\n+┊  ┊26┊    this.select.emit(this.chat.id);\n+┊  ┊27┊  }\n ┊21┊28┊}\n```\n\n##### Changed src&#x2F;app&#x2F;chats-lister&#x2F;components&#x2F;chats-list&#x2F;chats-list.component.ts\n```diff\n@@ -1,4 +1,4 @@\n-┊1┊ ┊import {Component, Input} from '@angular/core';\n+┊ ┊1┊import {Component, EventEmitter, Input, Output} from '@angular/core';\n ┊2┊2┊import {GetChats} from '../../../../types';\n ┊3┊3┊\n ┊4┊4┊@Component({\n```\n```diff\n@@ -6,7 +6,7 @@\n ┊ 6┊ 6┊  template: `\n ┊ 7┊ 7┊    <mat-list>\n ┊ 8┊ 8┊      <mat-list-item *ngFor=\"let chat of chats\">\n-┊ 9┊  ┊        <app-chat-item [item]=\"chat\"></app-chat-item>\n+┊  ┊ 9┊        <app-chat-item [item]=\"chat\" (select)=\"selectChat($event)\"></app-chat-item>\n ┊10┊10┊      </mat-list-item>\n ┊11┊11┊    </mat-list>\n ┊12┊12┊  `,\n```\n```diff\n@@ -17,5 +17,12 @@\n ┊17┊17┊  @Input('items')\n ┊18┊18┊  chats: GetChats.Chats[];\n ┊19┊19┊\n+┊  ┊20┊  @Output()\n+┊  ┊21┊  select = new EventEmitter<string>();\n+┊  ┊22┊\n ┊20┊23┊  constructor() {}\n+┊  ┊24┊\n+┊  ┊25┊  selectChat(id: string) {\n+┊  ┊26┊    this.select.emit(id);\n+┊  ┊27┊  }\n ┊21┊28┊}\n```\n\n##### Changed src&#x2F;app&#x2F;chats-lister&#x2F;containers&#x2F;chats&#x2F;chats.component.ts\n```diff\n@@ -2,6 +2,7 @@\n ┊2┊2┊import {ChatsService} from '../../../services/chats.service';\n ┊3┊3┊import {Observable} from 'rxjs';\n ┊4┊4┊import {GetChats} from '../../../../types';\n+┊ ┊5┊import {Router} from '@angular/router';\n ┊5┊6┊\n ┊6┊7┊@Component({\n ┊7┊8┊  template: `\n```\n```diff\n@@ -27,7 +28,7 @@\n ┊27┊28┊      </button>\n ┊28┊29┊    </mat-menu>\n ┊29┊30┊\n-┊30┊  ┊    <app-chats-list [items]=\"chats$ | async\"></app-chats-list>\n+┊  ┊31┊    <app-chats-list [items]=\"chats$ | async\" (select)=\"goToChat($event)\"></app-chats-list>\n ┊31┊32┊\n ┊32┊33┊    <button class=\"chat-button\" mat-fab color=\"primary\">\n ┊33┊34┊      <mat-icon aria-label=\"Icon-button with a + icon\">add</mat-icon>\n```\n```diff\n@@ -38,10 +39,15 @@\n ┊38┊39┊export class ChatsComponent implements OnInit {\n ┊39┊40┊  chats$: Observable<GetChats.Chats[]>;\n ┊40┊41┊\n-┊41┊  ┊  constructor(private chatsService: ChatsService) {\n+┊  ┊42┊  constructor(private chatsService: ChatsService,\n+┊  ┊43┊              private router: Router) {\n ┊42┊44┊  }\n ┊43┊45┊\n ┊44┊46┊  ngOnInit() {\n ┊45┊47┊    this.chats$ = this.chatsService.getChats().chats$;\n ┊46┊48┊  }\n+┊  ┊49┊\n+┊  ┊50┊  goToChat(chatId: string) {\n+┊  ┊51┊    this.router.navigate(['/chat', chatId]);\n+┊  ┊52┊  }\n ┊47┊53┊}\n```\n\n##### Changed src&#x2F;app&#x2F;services&#x2F;chats.service.ts\n```diff\n@@ -4,6 +4,7 @@\n ┊ 4┊ 4┊import {Injectable} from '@angular/core';\n ┊ 5┊ 5┊import {getChatsQuery} from '../../graphql/getChats.query';\n ┊ 6┊ 6┊import {GetChats} from '../../types';\n+┊  ┊ 7┊import {getChatQuery} from '../../graphql/getChat.query';\n ┊ 7┊ 8┊\n ┊ 8┊ 9┊@Injectable()\n ┊ 9┊10┊export class ChatsService {\n```\n```diff\n@@ -24,4 +25,19 @@\n ┊24┊25┊\n ┊25┊26┊    return {query, chats$};\n ┊26┊27┊  }\n+┊  ┊28┊\n+┊  ┊29┊  getChat(chatId: string) {\n+┊  ┊30┊    const query = this.apollo.watchQuery<any>({\n+┊  ┊31┊      query: getChatQuery,\n+┊  ┊32┊      variables: {\n+┊  ┊33┊        chatId: chatId,\n+┊  ┊34┊      }\n+┊  ┊35┊    });\n+┊  ┊36┊\n+┊  ┊37┊    const chat$ = query.valueChanges.pipe(\n+┊  ┊38┊      map((result: ApolloQueryResult<any>) => result.data.chat)\n+┊  ┊39┊    );\n+┊  ┊40┊\n+┊  ┊41┊    return {query, chat$};\n+┊  ┊42┊  }\n ┊27┊43┊}\n```\n\n##### Added src&#x2F;graphql&#x2F;getChat.query.ts\n```diff\n@@ -0,0 +1,17 @@\n+┊  ┊ 1┊import gql from 'graphql-tag';\n+┊  ┊ 2┊import {fragments} from './fragment';\n+┊  ┊ 3┊\n+┊  ┊ 4┊// We use the gql tag to parse our query string into a query document\n+┊  ┊ 5┊export const getChatQuery = gql`\n+┊  ┊ 6┊  query GetChat($chatId: ID!) {\n+┊  ┊ 7┊    chat(chatId: $chatId) {\n+┊  ┊ 8┊      ...ChatWithoutMessages\n+┊  ┊ 9┊      messages {\n+┊  ┊10┊        ...Message\n+┊  ┊11┊      }\n+┊  ┊12┊    }\n+┊  ┊13┊  }\n+┊  ┊14┊\n+┊  ┊15┊  ${fragments['chatWithoutMessages']}\n+┊  ┊16┊  ${fragments['message']}\n+┊  ┊17┊`;\n```\n\n[}]: #\n\nIt's time to generate our types:\n\n    $ npm run generator\n\nAnd use them:\n\n[{]: <helper> (diffStep \"4.2\" files=\"^\\(?!src/types.d.ts$\\).*\" module=\"client\")\n\n#### Step 4.2: Add generated types\n\n##### Changed src&#x2F;app&#x2F;chat-viewer&#x2F;components&#x2F;message-item&#x2F;message-item.component.ts\n```diff\n@@ -1,4 +1,5 @@\n ┊1┊1┊import {Component, Input} from '@angular/core';\n+┊ ┊2┊import {GetChat} from '../../../../types';\n ┊2┊3┊\n ┊3┊4┊@Component({\n ┊4┊5┊  selector: 'app-message-item',\n```\n```diff\n@@ -14,7 +15,7 @@\n ┊14┊15┊export class MessageItemComponent {\n ┊15┊16┊  // tslint:disable-next-line:no-input-rename\n ┊16┊17┊  @Input('item')\n-┊17┊  ┊  message: any;\n+┊  ┊18┊  message: GetChat.Messages;\n ┊18┊19┊\n ┊19┊20┊  @Input()\n ┊20┊21┊  isGroup: boolean;\n```\n\n##### Changed src&#x2F;app&#x2F;chat-viewer&#x2F;components&#x2F;messages-list&#x2F;messages-list.component.ts\n```diff\n@@ -1,4 +1,5 @@\n ┊1┊1┊import {Component, Input} from '@angular/core';\n+┊ ┊2┊import {GetChat} from '../../../../types';\n ┊2┊3┊\n ┊3┊4┊@Component({\n ┊4┊5┊  selector: 'app-messages-list',\n```\n```diff\n@@ -14,7 +15,7 @@\n ┊14┊15┊export class MessagesListComponent {\n ┊15┊16┊  // tslint:disable-next-line:no-input-rename\n ┊16┊17┊  @Input('items')\n-┊17┊  ┊  messages: any[];\n+┊  ┊18┊  messages: GetChat.Messages[];\n ┊18┊19┊\n ┊19┊20┊  @Input()\n ┊20┊21┊  isGroup: boolean;\n```\n\n##### Changed src&#x2F;app&#x2F;chat-viewer&#x2F;containers&#x2F;chat&#x2F;chat.component.ts\n```diff\n@@ -1,6 +1,7 @@\n ┊1┊1┊import {Component, OnInit} from '@angular/core';\n ┊2┊2┊import {ActivatedRoute, Router} from '@angular/router';\n ┊3┊3┊import {ChatsService} from '../../../services/chats.service';\n+┊ ┊4┊import {GetChat} from '../../../../types';\n ┊4┊5┊\n ┊5┊6┊@Component({\n ┊6┊7┊  template: `\n```\n```diff\n@@ -19,7 +20,7 @@\n ┊19┊20┊})\n ┊20┊21┊export class ChatComponent implements OnInit {\n ┊21┊22┊  chatId: string;\n-┊22┊  ┊  messages: any[];\n+┊  ┊23┊  messages: GetChat.Messages[];\n ┊23┊24┊  name: string;\n ┊24┊25┊  isGroup: boolean;\n ┊25┊26┊\n```\n\n##### Changed src&#x2F;app&#x2F;services&#x2F;chats.service.ts\n```diff\n@@ -3,7 +3,7 @@\n ┊3┊3┊import {Apollo} from 'apollo-angular';\n ┊4┊4┊import {Injectable} from '@angular/core';\n ┊5┊5┊import {getChatsQuery} from '../../graphql/getChats.query';\n-┊6┊ ┊import {GetChats} from '../../types';\n+┊ ┊6┊import {GetChat, GetChats} from '../../types';\n ┊7┊7┊import {getChatQuery} from '../../graphql/getChat.query';\n ┊8┊8┊\n ┊9┊9┊@Injectable()\n```\n```diff\n@@ -27,7 +27,7 @@\n ┊27┊27┊  }\n ┊28┊28┊\n ┊29┊29┊  getChat(chatId: string) {\n-┊30┊  ┊    const query = this.apollo.watchQuery<any>({\n+┊  ┊30┊    const query = this.apollo.watchQuery<GetChat.Query>({\n ┊31┊31┊      query: getChatQuery,\n ┊32┊32┊      variables: {\n ┊33┊33┊        chatId: chatId,\n```\n```diff\n@@ -35,7 +35,7 @@\n ┊35┊35┊    });\n ┊36┊36┊\n ┊37┊37┊    const chat$ = query.valueChanges.pipe(\n-┊38┊  ┊      map((result: ApolloQueryResult<any>) => result.data.chat)\n+┊  ┊38┊      map((result: ApolloQueryResult<GetChat.Query>) => result.data.chat)\n ┊39┊39┊    );\n ┊40┊40┊\n ┊41┊41┊    return {query, chat$};\n```\n\n[}]: #\n\nWe will also create some more tests for the newly created Chat container component:\n\n[{]: <helper> (diffStep \"4.3\" module=\"client\")\n\n#### Step 4.3: Testing\n\n##### Added src&#x2F;app&#x2F;chat-viewer&#x2F;containers&#x2F;chat&#x2F;chat.component.spec.ts\n```diff\n@@ -0,0 +1,170 @@\n+┊   ┊  1┊import { async, ComponentFixture, TestBed } from '@angular/core/testing';\n+┊   ┊  2┊\n+┊   ┊  3┊import { ChatComponent } from './chat.component';\n+┊   ┊  4┊import {DebugElement, NO_ERRORS_SCHEMA} from '@angular/core';\n+┊   ┊  5┊import {MatButtonModule, MatGridListModule, MatIconModule, MatListModule, MatMenuModule, MatToolbarModule} from '@angular/material';\n+┊   ┊  6┊import {ChatsService} from '../../../services/chats.service';\n+┊   ┊  7┊import {Apollo} from 'apollo-angular';\n+┊   ┊  8┊import {HttpClientTestingModule, HttpTestingController} from '@angular/common/http/testing';\n+┊   ┊  9┊import {HttpLink, HttpLinkModule, Options} from 'apollo-angular-link-http';\n+┊   ┊ 10┊import {defaultDataIdFromObject, InMemoryCache} from 'apollo-cache-inmemory';\n+┊   ┊ 11┊import {RouterTestingModule} from '@angular/router/testing';\n+┊   ┊ 12┊import {ActivatedRoute} from '@angular/router';\n+┊   ┊ 13┊import {of} from 'rxjs';\n+┊   ┊ 14┊import {By} from '@angular/platform-browser';\n+┊   ┊ 15┊import {FormsModule} from '@angular/forms';\n+┊   ┊ 16┊import {SharedModule} from '../../../shared/shared.module';\n+┊   ┊ 17┊import {NewMessageComponent} from '../../components/new-message/new-message.component';\n+┊   ┊ 18┊import {MessagesListComponent} from '../../components/messages-list/messages-list.component';\n+┊   ┊ 19┊import {MessageItemComponent} from '../../components/message-item/message-item.component';\n+┊   ┊ 20┊\n+┊   ┊ 21┊describe('ChatComponent', () => {\n+┊   ┊ 22┊  let component: ChatComponent;\n+┊   ┊ 23┊  let fixture: ComponentFixture<ChatComponent>;\n+┊   ┊ 24┊  let el: DebugElement;\n+┊   ┊ 25┊\n+┊   ┊ 26┊  let httpMock: HttpTestingController;\n+┊   ┊ 27┊  let httpLink: HttpLink;\n+┊   ┊ 28┊  let apollo: Apollo;\n+┊   ┊ 29┊\n+┊   ┊ 30┊  const chat: any = {\n+┊   ┊ 31┊    id: '1',\n+┊   ┊ 32┊    __typename: 'Chat',\n+┊   ┊ 33┊    name: 'Avery Stewart',\n+┊   ┊ 34┊    picture: 'https://randomuser.me/api/portraits/thumb/women/1.jpg',\n+┊   ┊ 35┊    allTimeMembers: [\n+┊   ┊ 36┊      {\n+┊   ┊ 37┊        id: '1',\n+┊   ┊ 38┊        __typename: 'User',\n+┊   ┊ 39┊      },\n+┊   ┊ 40┊      {\n+┊   ┊ 41┊        id: '3',\n+┊   ┊ 42┊        __typename: 'User',\n+┊   ┊ 43┊      }\n+┊   ┊ 44┊    ],\n+┊   ┊ 45┊    unreadMessages: 1,\n+┊   ┊ 46┊    isGroup: false,\n+┊   ┊ 47┊    messages: [\n+┊   ┊ 48┊      {\n+┊   ┊ 49┊        id: '1',\n+┊   ┊ 50┊        chat: {\n+┊   ┊ 51┊          id: '1',\n+┊   ┊ 52┊          __typename: 'Chat',\n+┊   ┊ 53┊        },\n+┊   ┊ 54┊        __typename: 'Message',\n+┊   ┊ 55┊        sender: {\n+┊   ┊ 56┊          id: '3',\n+┊   ┊ 57┊          __typename: 'User',\n+┊   ┊ 58┊          name: 'Avery Stewart'\n+┊   ┊ 59┊        },\n+┊   ┊ 60┊        content: 'Yep!',\n+┊   ┊ 61┊        createdAt: '1514035700',\n+┊   ┊ 62┊        type: 0,\n+┊   ┊ 63┊        recipients: [\n+┊   ┊ 64┊          {\n+┊   ┊ 65┊            user: {\n+┊   ┊ 66┊              id: '1',\n+┊   ┊ 67┊              __typename: 'User',\n+┊   ┊ 68┊            },\n+┊   ┊ 69┊            message: {\n+┊   ┊ 70┊              id: '1',\n+┊   ┊ 71┊              __typename: 'Message',\n+┊   ┊ 72┊              chat: {\n+┊   ┊ 73┊                id: '1',\n+┊   ┊ 74┊                __typename: 'Chat',\n+┊   ┊ 75┊              },\n+┊   ┊ 76┊            },\n+┊   ┊ 77┊            __typename: 'Recipient',\n+┊   ┊ 78┊            chat: {\n+┊   ┊ 79┊              id: '1',\n+┊   ┊ 80┊              __typename: 'Chat',\n+┊   ┊ 81┊            },\n+┊   ┊ 82┊            receivedAt: null,\n+┊   ┊ 83┊            readAt: null\n+┊   ┊ 84┊          }\n+┊   ┊ 85┊        ],\n+┊   ┊ 86┊        ownership: false\n+┊   ┊ 87┊      }\n+┊   ┊ 88┊    ],\n+┊   ┊ 89┊  };\n+┊   ┊ 90┊\n+┊   ┊ 91┊  beforeEach(async(() => {\n+┊   ┊ 92┊    TestBed.configureTestingModule({\n+┊   ┊ 93┊      declarations: [\n+┊   ┊ 94┊        ChatComponent,\n+┊   ┊ 95┊        MessagesListComponent,\n+┊   ┊ 96┊        MessageItemComponent,\n+┊   ┊ 97┊        NewMessageComponent,\n+┊   ┊ 98┊      ],\n+┊   ┊ 99┊      imports: [\n+┊   ┊100┊        MatToolbarModule,\n+┊   ┊101┊        MatMenuModule,\n+┊   ┊102┊        MatIconModule,\n+┊   ┊103┊        MatButtonModule,\n+┊   ┊104┊        MatListModule,\n+┊   ┊105┊        MatGridListModule,\n+┊   ┊106┊        FormsModule,\n+┊   ┊107┊        SharedModule,\n+┊   ┊108┊        HttpLinkModule,\n+┊   ┊109┊        HttpClientTestingModule,\n+┊   ┊110┊        RouterTestingModule\n+┊   ┊111┊      ],\n+┊   ┊112┊      providers: [\n+┊   ┊113┊        ChatsService,\n+┊   ┊114┊        Apollo,\n+┊   ┊115┊        {\n+┊   ┊116┊          provide: ActivatedRoute,\n+┊   ┊117┊          useValue: { params: of({ id: chat.id }) }\n+┊   ┊118┊        }\n+┊   ┊119┊      ],\n+┊   ┊120┊      schemas: [NO_ERRORS_SCHEMA]\n+┊   ┊121┊    })\n+┊   ┊122┊      .compileComponents();\n+┊   ┊123┊\n+┊   ┊124┊    httpMock = TestBed.get(HttpTestingController);\n+┊   ┊125┊    httpLink = TestBed.get(HttpLink);\n+┊   ┊126┊    apollo = TestBed.get(Apollo);\n+┊   ┊127┊\n+┊   ┊128┊    apollo.create({\n+┊   ┊129┊      link: httpLink.create(<Options>{ uri: 'http://localhost:3000/graphql' }),\n+┊   ┊130┊      cache: new InMemoryCache({\n+┊   ┊131┊        dataIdFromObject: (object: any) => {\n+┊   ┊132┊          switch (object.__typename) {\n+┊   ┊133┊            case 'Message': return `${object.chat.id}:${object.id}`; // use `chatId` prefix and `messageId` as the primary key\n+┊   ┊134┊            default: return defaultDataIdFromObject(object); // fall back to default handling\n+┊   ┊135┊          }\n+┊   ┊136┊        }\n+┊   ┊137┊      }),\n+┊   ┊138┊    });\n+┊   ┊139┊  }));\n+┊   ┊140┊\n+┊   ┊141┊  beforeEach(() => {\n+┊   ┊142┊    fixture = TestBed.createComponent(ChatComponent);\n+┊   ┊143┊    component = fixture.componentInstance;\n+┊   ┊144┊    fixture.detectChanges();\n+┊   ┊145┊    const req = httpMock.expectOne('http://localhost:3000/graphql', 'call to api');\n+┊   ┊146┊    req.flush({\n+┊   ┊147┊      data: {\n+┊   ┊148┊        chat\n+┊   ┊149┊      }\n+┊   ┊150┊    });\n+┊   ┊151┊  });\n+┊   ┊152┊\n+┊   ┊153┊  it('should create', () => {\n+┊   ┊154┊    expect(component).toBeTruthy();\n+┊   ┊155┊  });\n+┊   ┊156┊\n+┊   ┊157┊  it('should display the chat', () => {\n+┊   ┊158┊    fixture.whenStable().then(() => {\n+┊   ┊159┊      fixture.detectChanges();\n+┊   ┊160┊      el = fixture.debugElement;\n+┊   ┊161┊      expect(el.query(By.css(`app-toolbar > mat-toolbar > div > div`)).nativeElement.textContent).toContain(chat.name);\n+┊   ┊162┊      for (let i = 0; i < chat.messages.length; i++) {\n+┊   ┊163┊        expect(el.query(By.css(`app-messages-list > mat-list > mat-list-item:nth-child(${i + 1}) > div > app-message-item > div`))\n+┊   ┊164┊          .nativeElement.textContent).toContain(chat.messages[i].content);\n+┊   ┊165┊      }\n+┊   ┊166┊    });\n+┊   ┊167┊\n+┊   ┊168┊    httpMock.verify();\n+┊   ┊169┊  });\n+┊   ┊170┊});\n```\n\n[}]: #"
          },
          {
            "manualTitle": "Step 9: Mutations",
            "stepRevision": "a39d96f8239744f231c9107ebbd0e4bbb5428792",
            "manualView": "In addition to fetching data using queries, Apollo also helps you handle GraphQL mutations. In GraphQL, mutations are identical to queries in syntax, the only difference being that you use the keyword mutation instead of query to indicate that the root fields on this query are going to be performing writes to the backend.\nGraphQL mutations represent two things in one query string:\n\n1. The mutation field name with arguments, which represents the actual operation to be done on the server.\n2. The fields you want back from the result of the mutation to update the client.\n\nWhen we use mutations in Apollo, the result is typically integrated into the cache automatically based on the id of the result, which in turn updates the UI automatically, so we often don't need to explicitly handle the results. In order for the client to correctly do this, we need to ensure we select the necessary fields in the result. One good strategy can be to simply ask for any fields that might have been affected by the mutation. Alternatively, you can use fragments to share the fields between a query and a mutation that updates that query.\n\n## Server\n\nFinally we're going to create our mutations in the server:\n\n[{]: <helper> (diffStep \"3.1\" module=\"server\")\n\n#### Step 3.1: Add mutations\n\n##### Changed schema&#x2F;resolvers.ts\n```diff\n@@ -1,6 +1,7 @@\n-┊1┊ ┊import { Chat, db, Message, Recipient, User } from \"../db\";\n+┊ ┊1┊import { Chat, db, Message, MessageType, Recipient, User } from \"../db\";\n ┊2┊2┊import { IResolvers } from \"graphql-tools/dist/Interfaces\";\n ┊3┊3┊import { ChatQueryArgs } from \"../types\";\n+┊ ┊4┊import * as moment from \"moment\";\n ┊4┊5┊\n ┊5┊6┊let users = db.users;\n ┊6┊7┊let chats = db.chats;\n```\n```diff\n@@ -13,6 +14,276 @@\n ┊ 13┊ 14┊    chats: (): Chat[] => chats.filter(chat => chat.listingMemberIds.includes(currentUser)),\n ┊ 14┊ 15┊    chat: (obj: any, {chatId}: ChatQueryArgs): Chat | null => chats.find(chat => chat.id === Number(chatId)) || null,\n ┊ 15┊ 16┊  },\n+┊   ┊ 17┊  Mutation: {\n+┊   ┊ 18┊    addChat: (obj: any, {recipientId}: any): Chat => {\n+┊   ┊ 19┊      if (!users.find(user => user.id === recipientId)) {\n+┊   ┊ 20┊        throw new Error(`Recipient ${recipientId} doesn't exist.`);\n+┊   ┊ 21┊      }\n+┊   ┊ 22┊\n+┊   ┊ 23┊      const chat = chats.find(chat => !chat.name && chat.allTimeMemberIds.includes(currentUser) && chat.allTimeMemberIds.includes(recipientId));\n+┊   ┊ 24┊      if (chat) {\n+┊   ┊ 25┊        // Chat already exists. Both users are already in the allTimeMemberIds array\n+┊   ┊ 26┊        const chatId = chat.id;\n+┊   ┊ 27┊        if (!chat.listingMemberIds.includes(currentUser)) {\n+┊   ┊ 28┊          // The chat isn't listed for the current user. Add him to the memberIds\n+┊   ┊ 29┊          chat.listingMemberIds.push(currentUser);\n+┊   ┊ 30┊          chats.find(chat => chat.id === chatId)!.listingMemberIds.push(currentUser);\n+┊   ┊ 31┊          return chat;\n+┊   ┊ 32┊        } else {\n+┊   ┊ 33┊          throw new Error(`Chat already exists.`);\n+┊   ┊ 34┊        }\n+┊   ┊ 35┊      } else {\n+┊   ┊ 36┊        // Create the chat\n+┊   ┊ 37┊        const id = (chats.length && chats[chats.length - 1].id + 1) || 1;\n+┊   ┊ 38┊        const chat: Chat = {\n+┊   ┊ 39┊          id,\n+┊   ┊ 40┊          name: null,\n+┊   ┊ 41┊          picture: null,\n+┊   ┊ 42┊          adminIds: null,\n+┊   ┊ 43┊          ownerId: null,\n+┊   ┊ 44┊          allTimeMemberIds: [currentUser, recipientId],\n+┊   ┊ 45┊          // Chat will not be listed to the other user until the first message gets written\n+┊   ┊ 46┊          listingMemberIds: [currentUser],\n+┊   ┊ 47┊          actualGroupMemberIds: null,\n+┊   ┊ 48┊          messages: [],\n+┊   ┊ 49┊        };\n+┊   ┊ 50┊        chats.push(chat);\n+┊   ┊ 51┊        return chat;\n+┊   ┊ 52┊      }\n+┊   ┊ 53┊    },\n+┊   ┊ 54┊    addGroup: (obj: any, {recipientIds, groupName}: any): Chat => {\n+┊   ┊ 55┊      recipientIds.forEach((recipientId: any) => {\n+┊   ┊ 56┊        if (!users.find(user => user.id === recipientId)) {\n+┊   ┊ 57┊          throw new Error(`Recipient ${recipientId} doesn't exist.`);\n+┊   ┊ 58┊        }\n+┊   ┊ 59┊      });\n+┊   ┊ 60┊\n+┊   ┊ 61┊      const id = (chats.length && chats[chats.length - 1].id + 1) || 1;\n+┊   ┊ 62┊      const chat: Chat = {\n+┊   ┊ 63┊        id,\n+┊   ┊ 64┊        name: groupName,\n+┊   ┊ 65┊        picture: null,\n+┊   ┊ 66┊        adminIds: [currentUser],\n+┊   ┊ 67┊        ownerId: currentUser,\n+┊   ┊ 68┊        allTimeMemberIds: [currentUser, ...recipientIds],\n+┊   ┊ 69┊        listingMemberIds: [currentUser, ...recipientIds],\n+┊   ┊ 70┊        actualGroupMemberIds: [currentUser, ...recipientIds],\n+┊   ┊ 71┊        messages: [],\n+┊   ┊ 72┊      };\n+┊   ┊ 73┊      chats.push(chat);\n+┊   ┊ 74┊      return chat;\n+┊   ┊ 75┊    },\n+┊   ┊ 76┊    removeChat: (obj: any, {chatId}: any): number => {\n+┊   ┊ 77┊      const chat = chats.find(chat => chat.id === chatId);\n+┊   ┊ 78┊\n+┊   ┊ 79┊      if (!chat) {\n+┊   ┊ 80┊        throw new Error(`The chat ${chatId} doesn't exist.`);\n+┊   ┊ 81┊      }\n+┊   ┊ 82┊\n+┊   ┊ 83┊      if (!chat.name) {\n+┊   ┊ 84┊        // Chat\n+┊   ┊ 85┊        if (!chat.listingMemberIds.includes(currentUser)) {\n+┊   ┊ 86┊          throw new Error(`The user is not a member of the chat ${chatId}.`);\n+┊   ┊ 87┊        }\n+┊   ┊ 88┊\n+┊   ┊ 89┊        // Instead of chaining map and filter we can loop once using reduce\n+┊   ┊ 90┊        const messages = chat.messages.reduce<Message[]>((filtered, message) => {\n+┊   ┊ 91┊          // Remove the current user from the message holders\n+┊   ┊ 92┊          message.holderIds = message.holderIds.filter(holderId => holderId !== currentUser);\n+┊   ┊ 93┊\n+┊   ┊ 94┊          if (message.holderIds.length !== 0) {\n+┊   ┊ 95┊            filtered.push(message);\n+┊   ┊ 96┊          } // else discard the message\n+┊   ┊ 97┊\n+┊   ┊ 98┊          return filtered;\n+┊   ┊ 99┊        }, []);\n+┊   ┊100┊\n+┊   ┊101┊        // Remove the current user from who gets the chat listed. The chat will no longer appear in his list\n+┊   ┊102┊        const listingMemberIds = chat.listingMemberIds.filter(listingId => listingId !== currentUser);\n+┊   ┊103┊\n+┊   ┊104┊        // Check how many members are left\n+┊   ┊105┊        if (listingMemberIds.length === 0) {\n+┊   ┊106┊          // Delete the chat\n+┊   ┊107┊          chats = chats.filter(chat => chat.id !== chatId);\n+┊   ┊108┊        } else {\n+┊   ┊109┊          // Update the chat\n+┊   ┊110┊          chats = chats.map(chat => {\n+┊   ┊111┊            if (chat.id === chatId) {\n+┊   ┊112┊              chat = {...chat, listingMemberIds, messages};\n+┊   ┊113┊            }\n+┊   ┊114┊            return chat;\n+┊   ┊115┊          });\n+┊   ┊116┊        }\n+┊   ┊117┊        return chatId;\n+┊   ┊118┊      } else {\n+┊   ┊119┊        // Group\n+┊   ┊120┊        if (chat.ownerId !== currentUser) {\n+┊   ┊121┊          throw new Error(`Group ${chatId} is not owned by the user.`);\n+┊   ┊122┊        }\n+┊   ┊123┊\n+┊   ┊124┊        // Instead of chaining map and filter we can loop once using reduce\n+┊   ┊125┊        const messages = chat.messages.reduce<Message[]>((filtered, message) => {\n+┊   ┊126┊          // Remove the current user from the message holders\n+┊   ┊127┊          message.holderIds = message.holderIds.filter(holderId => holderId !== currentUser);\n+┊   ┊128┊\n+┊   ┊129┊          if (message.holderIds.length !== 0) {\n+┊   ┊130┊            filtered.push(message);\n+┊   ┊131┊          } // else discard the message\n+┊   ┊132┊\n+┊   ┊133┊          return filtered;\n+┊   ┊134┊        }, []);\n+┊   ┊135┊\n+┊   ┊136┊        // Remove the current user from who gets the group listed. The group will no longer appear in his list\n+┊   ┊137┊        const listingMemberIds = chat.listingMemberIds.filter(listingId => listingId !== currentUser);\n+┊   ┊138┊\n+┊   ┊139┊        // Check how many members (including previous ones who can still access old messages) are left\n+┊   ┊140┊        if (listingMemberIds.length === 0) {\n+┊   ┊141┊          // Remove the group\n+┊   ┊142┊          chats = chats.filter(chat => chat.id !== chatId);\n+┊   ┊143┊        } else {\n+┊   ┊144┊          // Update the group\n+┊   ┊145┊\n+┊   ┊146┊          // Remove the current user from the chat members. He is no longer a member of the group\n+┊   ┊147┊          const actualGroupMemberIds = chat.actualGroupMemberIds!.filter(memberId => memberId !== currentUser);\n+┊   ┊148┊          // Remove the current user from the chat admins\n+┊   ┊149┊          const adminIds = chat.adminIds!.filter(memberId => memberId !== currentUser);\n+┊   ┊150┊          // Set the owner id to be null. A null owner means the group is read-only\n+┊   ┊151┊          let ownerId: number | null = null;\n+┊   ┊152┊\n+┊   ┊153┊          // Check if there is any admin left\n+┊   ┊154┊          if (adminIds!.length) {\n+┊   ┊155┊            // Pick an admin as the new owner. The group is no longer read-only\n+┊   ┊156┊            ownerId = chat.adminIds![0];\n+┊   ┊157┊          }\n+┊   ┊158┊\n+┊   ┊159┊          chats = chats.map(chat => {\n+┊   ┊160┊            if (chat.id === chatId) {\n+┊   ┊161┊              chat = {...chat, messages, listingMemberIds, actualGroupMemberIds, adminIds, ownerId};\n+┊   ┊162┊            }\n+┊   ┊163┊            return chat;\n+┊   ┊164┊          });\n+┊   ┊165┊        }\n+┊   ┊166┊        return chatId;\n+┊   ┊167┊      }\n+┊   ┊168┊    },\n+┊   ┊169┊    addMessage: (obj: any, {chatId, content}: any): Message => {\n+┊   ┊170┊      if (content === null || content === '') {\n+┊   ┊171┊        throw new Error(`Cannot add empty or null messages.`);\n+┊   ┊172┊      }\n+┊   ┊173┊\n+┊   ┊174┊      let chat = chats.find(chat => chat.id === chatId);\n+┊   ┊175┊\n+┊   ┊176┊      if (!chat) {\n+┊   ┊177┊        throw new Error(`Cannot find chat ${chatId}.`);\n+┊   ┊178┊      }\n+┊   ┊179┊\n+┊   ┊180┊      let holderIds = chat.listingMemberIds;\n+┊   ┊181┊\n+┊   ┊182┊      if (!chat.name) {\n+┊   ┊183┊        // Chat\n+┊   ┊184┊        if (!chat.listingMemberIds.find(listingId => listingId === currentUser)) {\n+┊   ┊185┊          throw new Error(`The chat ${chatId} must be listed for the current user before adding a message.`);\n+┊   ┊186┊        }\n+┊   ┊187┊\n+┊   ┊188┊        const recipientId = chat.allTimeMemberIds.filter(userId => userId !== currentUser)[0];\n+┊   ┊189┊\n+┊   ┊190┊        if (!chat.listingMemberIds.find(listingId => listingId === recipientId)) {\n+┊   ┊191┊          // Chat is not listed for the recipient. Add him to the listingMemberIds\n+┊   ┊192┊          const listingMemberIds = chat.listingMemberIds.concat(recipientId);\n+┊   ┊193┊\n+┊   ┊194┊          chats = chats.map(chat => {\n+┊   ┊195┊            if (chat.id === chatId) {\n+┊   ┊196┊              chat = {...chat, listingMemberIds};\n+┊   ┊197┊            }\n+┊   ┊198┊            return chat;\n+┊   ┊199┊          });\n+┊   ┊200┊\n+┊   ┊201┊          holderIds = listingMemberIds;\n+┊   ┊202┊        }\n+┊   ┊203┊      } else {\n+┊   ┊204┊        // Group\n+┊   ┊205┊        if (!chat.actualGroupMemberIds!.find(memberId => memberId === currentUser)) {\n+┊   ┊206┊          throw new Error(`The user is not a member of the group ${chatId}. Cannot add message.`);\n+┊   ┊207┊        }\n+┊   ┊208┊\n+┊   ┊209┊        holderIds = chat.actualGroupMemberIds!;\n+┊   ┊210┊      }\n+┊   ┊211┊\n+┊   ┊212┊      const id = (chat.messages.length && chat.messages[chat.messages.length - 1].id + 1) || 1;\n+┊   ┊213┊\n+┊   ┊214┊      let recipients: Recipient[] = [];\n+┊   ┊215┊\n+┊   ┊216┊      holderIds.forEach(holderId => {\n+┊   ┊217┊        if (holderId !== currentUser) {\n+┊   ┊218┊          recipients.push({\n+┊   ┊219┊            userId: holderId,\n+┊   ┊220┊            messageId: id,\n+┊   ┊221┊            chatId: chatId,\n+┊   ┊222┊            receivedAt: null,\n+┊   ┊223┊            readAt: null,\n+┊   ┊224┊          });\n+┊   ┊225┊        }\n+┊   ┊226┊      });\n+┊   ┊227┊\n+┊   ┊228┊      const message: Message = {\n+┊   ┊229┊        id,\n+┊   ┊230┊        chatId,\n+┊   ┊231┊        senderId: currentUser,\n+┊   ┊232┊        content,\n+┊   ┊233┊        createdAt: moment().unix(),\n+┊   ┊234┊        type: MessageType.TEXT,\n+┊   ┊235┊        recipients,\n+┊   ┊236┊        holderIds,\n+┊   ┊237┊      };\n+┊   ┊238┊\n+┊   ┊239┊      chats = chats.map(chat => {\n+┊   ┊240┊        if (chat.id === chatId) {\n+┊   ┊241┊          chat = {...chat, messages: chat.messages.concat(message)}\n+┊   ┊242┊        }\n+┊   ┊243┊        return chat;\n+┊   ┊244┊      });\n+┊   ┊245┊\n+┊   ┊246┊      return message;\n+┊   ┊247┊    },\n+┊   ┊248┊    removeMessages: (obj: any, {chatId, messageIds, all}: any): number[] => {\n+┊   ┊249┊      const chat = chats.find(chat => chat.id === chatId);\n+┊   ┊250┊\n+┊   ┊251┊      if (!chat) {\n+┊   ┊252┊        throw new Error(`Cannot find chat ${chatId}.`);\n+┊   ┊253┊      }\n+┊   ┊254┊\n+┊   ┊255┊      if (!chat.listingMemberIds.find(listingId => listingId === currentUser)) {\n+┊   ┊256┊        throw new Error(`The chat/group ${chatId} is not listed for the current user, so there is nothing to delete.`);\n+┊   ┊257┊      }\n+┊   ┊258┊\n+┊   ┊259┊      if (all && messageIds) {\n+┊   ┊260┊        throw new Error(`Cannot specify both 'all' and 'messageIds'.`);\n+┊   ┊261┊      }\n+┊   ┊262┊\n+┊   ┊263┊      let deletedIds: number[] = [];\n+┊   ┊264┊      chats = chats.map(chat => {\n+┊   ┊265┊        if (chat.id === chatId) {\n+┊   ┊266┊          // Instead of chaining map and filter we can loop once using reduce\n+┊   ┊267┊          const messages = chat.messages.reduce<Message[]>((filtered, message) => {\n+┊   ┊268┊            if (all || messageIds!.includes(message.id)) {\n+┊   ┊269┊              deletedIds.push(message.id);\n+┊   ┊270┊              // Remove the current user from the message holders\n+┊   ┊271┊              message.holderIds = message.holderIds.filter(holderId => holderId !== currentUser);\n+┊   ┊272┊            }\n+┊   ┊273┊\n+┊   ┊274┊            if (message.holderIds.length !== 0) {\n+┊   ┊275┊              filtered.push(message);\n+┊   ┊276┊            } // else discard the message\n+┊   ┊277┊\n+┊   ┊278┊            return filtered;\n+┊   ┊279┊          }, []);\n+┊   ┊280┊          chat = {...chat, messages};\n+┊   ┊281┊        }\n+┊   ┊282┊        return chat;\n+┊   ┊283┊      });\n+┊   ┊284┊      return deletedIds;\n+┊   ┊285┊    },\n+┊   ┊286┊  },\n ┊ 16┊287┊  Chat: {\n ┊ 17┊288┊    name: (chat: Chat): string => chat.name ? chat.name : users\n ┊ 18┊289┊      .find(user => user.id === chat.allTimeMemberIds.find(userId => userId !== currentUser))!.name,\n```\n\n##### Changed schema&#x2F;typeDefs.ts\n```diff\n@@ -67,4 +67,20 @@\n ┊67┊67┊    picture: String\n ┊68┊68┊    phone: String\n ┊69┊69┊  }\n+┊  ┊70┊\n+┊  ┊71┊  type Mutation {\n+┊  ┊72┊    addChat(recipientId: ID!): Chat\n+┊  ┊73┊    addGroup(recipientIds: [ID!]!, groupName: String!): Chat\n+┊  ┊74┊    removeChat(chatId: ID!): ID\n+┊  ┊75┊    addMessage(chatId: ID!, content: String!): Message\n+┊  ┊76┊    removeMessages(chatId: ID!, messageIds: [ID], all: Boolean): [ID]\n+┊  ┊77┊    addMembers(groupId: ID!, userIds: [ID!]!): [ID]\n+┊  ┊78┊    removeMembers(groupId: ID!, userIds: [ID!]!): [ID]\n+┊  ┊79┊    addAdmins(groupId: ID!, userIds: [ID!]!): [ID]\n+┊  ┊80┊    removeAdmins(groupId: ID!, userIds: [ID!]!): [ID]\n+┊  ┊81┊    setGroupName(groupId: ID!): String\n+┊  ┊82┊    setGroupPicture(groupId: ID!): String\n+┊  ┊83┊    markAsReceived(chatId: ID!): Boolean\n+┊  ┊84┊    markAsRead(chatId: ID!): Boolean\n+┊  ┊85┊  }\n ┊70┊86┊`;\n```\n\n[}]: #\n\nLet me briefly explain what's going on here.\nFor each chat/group we store the `allTimeMemberIds`, `listingMemberIds` and `actualGroupMemberIds` properties in our NoSQL-like fake db.\nWhat's the difference between `allTimeMemberIds` and `listingMemberIds`? When a chat gets created only the user who created it will be able too see it, the chat will be displayed to the other user only once the first messaged gets sent. `allTimeMemberIds` is an array which always contain both the users, while `listingMemberIds` contains only the users which get the chat listed (initially the creator, later both users). `actualGroupMemberIds` is only used for groups.\nGroups, instead, get listed by all members immediately since the creation. So initially both `allTimeMemberIds`, `listingMemberIds` and `actualGroupMemberIds` are similar. Later users can leave the group or get deleted (so they will be removed from `actualGroupMemberIds`) but they will still be able to list the group in read-only mode, thus remaining in the `listingMemberIds`. Once they remove the group they will also be remove from the `listingMemberIds` array.\nThat's why we have to check for several different conditions before adding/deleting messages: it could be necessary to add the other peer to the `listingMemberIds` (for example if we are writing the first message of a chat) or it could be necessary to physically remove the messages instead of simply removing the current user from the `holderIds`. `holderIds` is a field in each message which states which user will currently display that specific message. In fact each user can delete a specific message without affecting what the others will see. Once there will be no more users in the `holderIds` array it will be safe to delete the message.\nEach message has also a `recipients` array containing the receiving date and the viewing date of that particular message for all the other users. That's necessary to implement the single, double and blue ticks used by the real Whatsapp.\n\nIt may seem a bit overwhelming at first, but you should keep in mind that the real Whatsapp has tons of features and also takes advantage of a local database to store messages, so it's easier for them to implement features like per-user messages: their source of truth is not the server because once downloaded the messages are kept in the client itself, so deleting messages doesn't affect anyone else. On the contrary our source of truth is the server, so our approach is more similar to Telegram instead. This is a better approach in my opinion because it allows us to show the messages for the same user on multiple clients, instead of having to rely on questionable approaches like Whatsapp Web.\nAlso we already implemented our mutations to take care of future use cases (like reading notifications) which we still didn't implement.\n\nI said we were going to take greater advantage of `graphql-code-generator` once we started writing our first mutation and I'm going to show you why. Let's run the generator first:\n\n    $ npm run generator\n\nThen let's use the generated types:\n\n[{]: <helper> (diffStep \"3.3\" module=\"server\")\n\n#### Step 3.3: Use generated types\n\n##### Changed schema&#x2F;resolvers.ts\n```diff\n@@ -1,6 +1,9 @@\n ┊1┊1┊import { Chat, db, Message, MessageType, Recipient, User } from \"../db\";\n ┊2┊2┊import { IResolvers } from \"graphql-tools/dist/Interfaces\";\n-┊3┊ ┊import { ChatQueryArgs } from \"../types\";\n+┊ ┊3┊import {\n+┊ ┊4┊  AddChatMutationArgs, AddGroupMutationArgs, AddMessageMutationArgs, ChatQueryArgs,\n+┊ ┊5┊  RemoveChatMutationArgs, RemoveMessagesMutationArgs\n+┊ ┊6┊} from \"../types\";\n ┊4┊7┊import * as moment from \"moment\";\n ┊5┊8┊\n ┊6┊9┊let users = db.users;\n```\n```diff\n@@ -15,12 +18,12 @@\n ┊15┊18┊    chat: (obj: any, {chatId}: ChatQueryArgs): Chat | null => chats.find(chat => chat.id === Number(chatId)) || null,\n ┊16┊19┊  },\n ┊17┊20┊  Mutation: {\n-┊18┊  ┊    addChat: (obj: any, {recipientId}: any): Chat => {\n-┊19┊  ┊      if (!users.find(user => user.id === recipientId)) {\n+┊  ┊21┊    addChat: (obj: any, {recipientId}: AddChatMutationArgs): Chat => {\n+┊  ┊22┊      if (!users.find(user => user.id === Number(recipientId))) {\n ┊20┊23┊        throw new Error(`Recipient ${recipientId} doesn't exist.`);\n ┊21┊24┊      }\n ┊22┊25┊\n-┊23┊  ┊      const chat = chats.find(chat => !chat.name && chat.allTimeMemberIds.includes(currentUser) && chat.allTimeMemberIds.includes(recipientId));\n+┊  ┊26┊      const chat = chats.find(chat => !chat.name && chat.allTimeMemberIds.includes(currentUser) && chat.allTimeMemberIds.includes(Number(recipientId)));\n ┊24┊27┊      if (chat) {\n ┊25┊28┊        // Chat already exists. Both users are already in the allTimeMemberIds array\n ┊26┊29┊        const chatId = chat.id;\n```\n```diff\n@@ -41,7 +44,7 @@\n ┊41┊44┊          picture: null,\n ┊42┊45┊          adminIds: null,\n ┊43┊46┊          ownerId: null,\n-┊44┊  ┊          allTimeMemberIds: [currentUser, recipientId],\n+┊  ┊47┊          allTimeMemberIds: [currentUser, Number(recipientId)],\n ┊45┊48┊          // Chat will not be listed to the other user until the first message gets written\n ┊46┊49┊          listingMemberIds: [currentUser],\n ┊47┊50┊          actualGroupMemberIds: null,\n```\n```diff\n@@ -51,9 +54,9 @@\n ┊51┊54┊        return chat;\n ┊52┊55┊      }\n ┊53┊56┊    },\n-┊54┊  ┊    addGroup: (obj: any, {recipientIds, groupName}: any): Chat => {\n-┊55┊  ┊      recipientIds.forEach((recipientId: any) => {\n-┊56┊  ┊        if (!users.find(user => user.id === recipientId)) {\n+┊  ┊57┊    addGroup: (obj: any, {recipientIds, groupName}: AddGroupMutationArgs): Chat => {\n+┊  ┊58┊      recipientIds.forEach(recipientId => {\n+┊  ┊59┊        if (!users.find(user => user.id === Number(recipientId))) {\n ┊57┊60┊          throw new Error(`Recipient ${recipientId} doesn't exist.`);\n ┊58┊61┊        }\n ┊59┊62┊      });\n```\n```diff\n@@ -65,16 +68,16 @@\n ┊65┊68┊        picture: null,\n ┊66┊69┊        adminIds: [currentUser],\n ┊67┊70┊        ownerId: currentUser,\n-┊68┊  ┊        allTimeMemberIds: [currentUser, ...recipientIds],\n-┊69┊  ┊        listingMemberIds: [currentUser, ...recipientIds],\n-┊70┊  ┊        actualGroupMemberIds: [currentUser, ...recipientIds],\n+┊  ┊71┊        allTimeMemberIds: [currentUser, ...recipientIds.map(id => Number(id))],\n+┊  ┊72┊        listingMemberIds: [currentUser, ...recipientIds.map(id => Number(id))],\n+┊  ┊73┊        actualGroupMemberIds: [currentUser, ...recipientIds.map(id => Number(id))],\n ┊71┊74┊        messages: [],\n ┊72┊75┊      };\n ┊73┊76┊      chats.push(chat);\n ┊74┊77┊      return chat;\n ┊75┊78┊    },\n-┊76┊  ┊    removeChat: (obj: any, {chatId}: any): number => {\n-┊77┊  ┊      const chat = chats.find(chat => chat.id === chatId);\n+┊  ┊79┊    removeChat: (obj: any, {chatId}: RemoveChatMutationArgs): number => {\n+┊  ┊80┊      const chat = chats.find(chat => chat.id === Number(chatId));\n ┊78┊81┊\n ┊79┊82┊      if (!chat) {\n ┊80┊83┊        throw new Error(`The chat ${chatId} doesn't exist.`);\n```\n```diff\n@@ -104,17 +107,17 @@\n ┊104┊107┊        // Check how many members are left\n ┊105┊108┊        if (listingMemberIds.length === 0) {\n ┊106┊109┊          // Delete the chat\n-┊107┊   ┊          chats = chats.filter(chat => chat.id !== chatId);\n+┊   ┊110┊          chats = chats.filter(chat => chat.id !== Number(chatId));\n ┊108┊111┊        } else {\n ┊109┊112┊          // Update the chat\n ┊110┊113┊          chats = chats.map(chat => {\n-┊111┊   ┊            if (chat.id === chatId) {\n+┊   ┊114┊            if (chat.id === Number(chatId)) {\n ┊112┊115┊              chat = {...chat, listingMemberIds, messages};\n ┊113┊116┊            }\n ┊114┊117┊            return chat;\n ┊115┊118┊          });\n ┊116┊119┊        }\n-┊117┊   ┊        return chatId;\n+┊   ┊120┊        return Number(chatId);\n ┊118┊121┊      } else {\n ┊119┊122┊        // Group\n ┊120┊123┊        if (chat.ownerId !== currentUser) {\n```\n```diff\n@@ -139,7 +142,7 @@\n ┊139┊142┊        // Check how many members (including previous ones who can still access old messages) are left\n ┊140┊143┊        if (listingMemberIds.length === 0) {\n ┊141┊144┊          // Remove the group\n-┊142┊   ┊          chats = chats.filter(chat => chat.id !== chatId);\n+┊   ┊145┊          chats = chats.filter(chat => chat.id !== Number(chatId));\n ┊143┊146┊        } else {\n ┊144┊147┊          // Update the group\n ┊145┊148┊\n```\n```diff\n@@ -157,21 +160,21 @@\n ┊157┊160┊          }\n ┊158┊161┊\n ┊159┊162┊          chats = chats.map(chat => {\n-┊160┊   ┊            if (chat.id === chatId) {\n+┊   ┊163┊            if (chat.id === Number(chatId)) {\n ┊161┊164┊              chat = {...chat, messages, listingMemberIds, actualGroupMemberIds, adminIds, ownerId};\n ┊162┊165┊            }\n ┊163┊166┊            return chat;\n ┊164┊167┊          });\n ┊165┊168┊        }\n-┊166┊   ┊        return chatId;\n+┊   ┊169┊        return Number(chatId);\n ┊167┊170┊      }\n ┊168┊171┊    },\n-┊169┊   ┊    addMessage: (obj: any, {chatId, content}: any): Message => {\n+┊   ┊172┊    addMessage: (obj: any, {chatId, content}: AddMessageMutationArgs): Message => {\n ┊170┊173┊      if (content === null || content === '') {\n ┊171┊174┊        throw new Error(`Cannot add empty or null messages.`);\n ┊172┊175┊      }\n ┊173┊176┊\n-┊174┊   ┊      let chat = chats.find(chat => chat.id === chatId);\n+┊   ┊177┊      let chat = chats.find(chat => chat.id === Number(chatId));\n ┊175┊178┊\n ┊176┊179┊      if (!chat) {\n ┊177┊180┊        throw new Error(`Cannot find chat ${chatId}.`);\n```\n```diff\n@@ -192,7 +195,7 @@\n ┊192┊195┊          const listingMemberIds = chat.listingMemberIds.concat(recipientId);\n ┊193┊196┊\n ┊194┊197┊          chats = chats.map(chat => {\n-┊195┊   ┊            if (chat.id === chatId) {\n+┊   ┊198┊            if (chat.id === Number(chatId)) {\n ┊196┊199┊              chat = {...chat, listingMemberIds};\n ┊197┊200┊            }\n ┊198┊201┊            return chat;\n```\n```diff\n@@ -218,7 +221,7 @@\n ┊218┊221┊          recipients.push({\n ┊219┊222┊            userId: holderId,\n ┊220┊223┊            messageId: id,\n-┊221┊   ┊            chatId: chatId,\n+┊   ┊224┊            chatId: Number(chatId),\n ┊222┊225┊            receivedAt: null,\n ┊223┊226┊            readAt: null,\n ┊224┊227┊          });\n```\n```diff\n@@ -227,7 +230,7 @@\n ┊227┊230┊\n ┊228┊231┊      const message: Message = {\n ┊229┊232┊        id,\n-┊230┊   ┊        chatId,\n+┊   ┊233┊        chatId: Number(chatId),\n ┊231┊234┊        senderId: currentUser,\n ┊232┊235┊        content,\n ┊233┊236┊        createdAt: moment().unix(),\n```\n```diff\n@@ -237,7 +240,7 @@\n ┊237┊240┊      };\n ┊238┊241┊\n ┊239┊242┊      chats = chats.map(chat => {\n-┊240┊   ┊        if (chat.id === chatId) {\n+┊   ┊243┊        if (chat.id === Number(chatId)) {\n ┊241┊244┊          chat = {...chat, messages: chat.messages.concat(message)}\n ┊242┊245┊        }\n ┊243┊246┊        return chat;\n```\n```diff\n@@ -245,8 +248,8 @@\n ┊245┊248┊\n ┊246┊249┊      return message;\n ┊247┊250┊    },\n-┊248┊   ┊    removeMessages: (obj: any, {chatId, messageIds, all}: any): number[] => {\n-┊249┊   ┊      const chat = chats.find(chat => chat.id === chatId);\n+┊   ┊251┊    removeMessages: (obj: any, {chatId, messageIds, all}: RemoveMessagesMutationArgs): number[] => {\n+┊   ┊252┊      const chat = chats.find(chat => chat.id === Number(chatId));\n ┊250┊253┊\n ┊251┊254┊      if (!chat) {\n ┊252┊255┊        throw new Error(`Cannot find chat ${chatId}.`);\n```\n```diff\n@@ -262,10 +265,10 @@\n ┊262┊265┊\n ┊263┊266┊      let deletedIds: number[] = [];\n ┊264┊267┊      chats = chats.map(chat => {\n-┊265┊   ┊        if (chat.id === chatId) {\n+┊   ┊268┊        if (chat.id === Number(chatId)) {\n ┊266┊269┊          // Instead of chaining map and filter we can loop once using reduce\n ┊267┊270┊          const messages = chat.messages.reduce<Message[]>((filtered, message) => {\n-┊268┊   ┊            if (all || messageIds!.includes(message.id)) {\n+┊   ┊271┊            if (all || messageIds!.includes(String(message.id))) {\n ┊269┊272┊              deletedIds.push(message.id);\n ┊270┊273┊              // Remove the current user from the message holders\n ┊271┊274┊              message.holderIds = message.holderIds.filter(holderId => holderId !== currentUser);\n```\n\n[}]: #\n\n## Client\n\nFor the client I'll only show you how to make use of the addMessage mutation in this chapters. The other mutations will require much more boilerplate so I left them for their own chapter.\n\nLet's start by wiring the addMessage mutation. We're going to write the GraphQL query and then use the generator to generate the types:\n\n[{]: <helper> (diffStep \"5.1\" files=\"^\\(?!src/types.d.ts$\\).*\" module=\"client\")\n\n#### Step 5.1: Create addMessage mutation and generate types\n\n##### Added src&#x2F;graphql&#x2F;addMessage.mutation.ts\n```diff\n@@ -0,0 +1,13 @@\n+┊  ┊ 1┊import gql from 'graphql-tag';\n+┊  ┊ 2┊import {fragments} from './fragment';\n+┊  ┊ 3┊\n+┊  ┊ 4┊// We use the gql tag to parse our query string into a query document\n+┊  ┊ 5┊export const addMessageMutation = gql`\n+┊  ┊ 6┊  mutation AddMessage($chatId: ID!, $content: String!) {\n+┊  ┊ 7┊    addMessage(chatId: $chatId, content: $content) {\n+┊  ┊ 8┊      ...Message\n+┊  ┊ 9┊    }\n+┊  ┊10┊  }\n+┊  ┊11┊\n+┊  ┊12┊  ${fragments['message']}\n+┊  ┊13┊`;\n```\n\n[}]: #\n\nRun the generator:\n\n    $ npm run generator\n\nNow let's use the just-created query:\n\n[{]: <helper> (diffStep \"5.2\" module=\"client\")\n\n#### Step 5.2: Modify chat component and service\n\n##### Changed src&#x2F;app&#x2F;chat-viewer&#x2F;containers&#x2F;chat&#x2F;chat.component.ts\n```diff\n@@ -13,7 +13,7 @@\n ┊13┊13┊    </app-toolbar>\n ┊14┊14┊    <div class=\"container\">\n ┊15┊15┊      <app-messages-list [items]=\"messages\" [isGroup]=\"isGroup\"></app-messages-list>\n-┊16┊  ┊      <app-new-message></app-new-message>\n+┊  ┊16┊      <app-new-message (newMessage)=\"addMessage($event)\"></app-new-message>\n ┊17┊17┊    </div>\n ┊18┊18┊  `,\n ┊19┊19┊  styleUrls: ['./chat.component.scss']\n```\n```diff\n@@ -43,4 +43,8 @@\n ┊43┊43┊  goToChats() {\n ┊44┊44┊    this.router.navigate(['/chats']);\n ┊45┊45┊  }\n+┊  ┊46┊\n+┊  ┊47┊  addMessage(content: string) {\n+┊  ┊48┊    this.chatsService.addMessage(this.chatId, content).subscribe();\n+┊  ┊49┊  }\n ┊46┊50┊}\n```\n\n##### Changed src&#x2F;app&#x2F;services&#x2F;chats.service.ts\n```diff\n@@ -3,8 +3,9 @@\n ┊ 3┊ 3┊import {Apollo} from 'apollo-angular';\n ┊ 4┊ 4┊import {Injectable} from '@angular/core';\n ┊ 5┊ 5┊import {getChatsQuery} from '../../graphql/getChats.query';\n-┊ 6┊  ┊import {GetChat, GetChats} from '../../types';\n+┊  ┊ 6┊import {AddMessage, GetChat, GetChats} from '../../types';\n ┊ 7┊ 7┊import {getChatQuery} from '../../graphql/getChat.query';\n+┊  ┊ 8┊import {addMessageMutation} from '../../graphql/addMessage.mutation';\n ┊ 8┊ 9┊\n ┊ 9┊10┊@Injectable()\n ┊10┊11┊export class ChatsService {\n```\n```diff\n@@ -40,4 +41,14 @@\n ┊40┊41┊\n ┊41┊42┊    return {query, chat$};\n ┊42┊43┊  }\n+┊  ┊44┊\n+┊  ┊45┊  addMessage(chatId: string, content: string) {\n+┊  ┊46┊    return this.apollo.mutate({\n+┊  ┊47┊      mutation: addMessageMutation,\n+┊  ┊48┊      variables: <AddMessage.Variables>{\n+┊  ┊49┊        chatId,\n+┊  ┊50┊        content,\n+┊  ┊51┊      },\n+┊  ┊52┊    });\n+┊  ┊53┊  }\n ┊43┊54┊}\n```\n\n[}]: #\n\nIt's that simple! You would be tempted to say that it doesn't work, but you should try to refresh the page first ;)"
          },
          {
            "manualTitle": "Step 10: Updating the store",
            "stepRevision": "1edfe891e6cbb61a13430387e74251c5fc0395c0",
            "manualView": "## Client\n\nDid you notice that after creating a new message you'll have to refresh the page in order to see it?\nHow to fix that? If you thought about re-querying the server you would be wrong! The best solution is to use the response provided by the server to update our Apollo local cache.\n\nApollo performs two important core tasks: Executing queries and mutations, and caching the results.\n\nThanks to Apollo’s store design, it’s possible for the results of a query or mutation to update your UI in all the right places. In many cases it’s possible for that to happen automatically, whereas in others you need to help the client out a little in doing so:\n\n[{]: <helper> (diffStep \"6.1\" module=\"client\")\n\n#### Step 6.1: Update the store\n\n##### Changed src&#x2F;app&#x2F;services&#x2F;chats.service.ts\n```diff\n@@ -1,4 +1,4 @@\n-┊1┊ ┊import {ApolloQueryResult, WatchQueryOptions} from 'apollo-client';\n+┊ ┊1┊import {ApolloQueryResult, MutationOptions, WatchQueryOptions} from 'apollo-client';\n ┊2┊2┊import {map} from 'rxjs/operators';\n ┊3┊3┊import {Apollo} from 'apollo-angular';\n ┊4┊4┊import {Injectable} from '@angular/core';\n```\n```diff\n@@ -43,12 +43,49 @@\n ┊43┊43┊  }\n ┊44┊44┊\n ┊45┊45┊  addMessage(chatId: string, content: string) {\n-┊46┊  ┊    return this.apollo.mutate({\n+┊  ┊46┊    return this.apollo.mutate(<MutationOptions>{\n ┊47┊47┊      mutation: addMessageMutation,\n ┊48┊48┊      variables: <AddMessage.Variables>{\n ┊49┊49┊        chatId,\n ┊50┊50┊        content,\n ┊51┊51┊      },\n+┊  ┊52┊      update: (store, { data: { addMessage } }: {data: AddMessage.Mutation}) => {\n+┊  ┊53┊        // Update the messages cache\n+┊  ┊54┊        {\n+┊  ┊55┊          // Read the data from our cache for this query.\n+┊  ┊56┊          const {chat}: GetChat.Query = store.readQuery({\n+┊  ┊57┊            query: getChatQuery, variables: {\n+┊  ┊58┊              chatId,\n+┊  ┊59┊            }\n+┊  ┊60┊          });\n+┊  ┊61┊          // Add our message from the mutation to the end.\n+┊  ┊62┊          chat.messages.push(addMessage);\n+┊  ┊63┊          // Write our data back to the cache.\n+┊  ┊64┊          store.writeQuery({ query: getChatQuery, data: {chat} });\n+┊  ┊65┊        }\n+┊  ┊66┊        // Update last message cache\n+┊  ┊67┊        {\n+┊  ┊68┊          // Read the data from our cache for this query.\n+┊  ┊69┊          const {chats}: GetChats.Query = store.readQuery({\n+┊  ┊70┊            query: getChatsQuery,\n+┊  ┊71┊            variables: <GetChats.Variables>{\n+┊  ┊72┊              amount: this.messagesAmount,\n+┊  ┊73┊            },\n+┊  ┊74┊          });\n+┊  ┊75┊          // Add our comment from the mutation to the end.\n+┊  ┊76┊          chats.find(chat => chat.id === chatId).messages.push(addMessage);\n+┊  ┊77┊          // Write our data back to the cache.\n+┊  ┊78┊          store.writeQuery({\n+┊  ┊79┊            query: getChatsQuery,\n+┊  ┊80┊            variables: <GetChats.Variables>{\n+┊  ┊81┊              amount: this.messagesAmount,\n+┊  ┊82┊            },\n+┊  ┊83┊            data: {\n+┊  ┊84┊              chats,\n+┊  ┊85┊            },\n+┊  ┊86┊          });\n+┊  ┊87┊        }\n+┊  ┊88┊      },\n ┊52┊89┊    });\n ┊53┊90┊  }\n ┊54┊91┊}\n```\n\n[}]: #\n\nNow you won't need to reload the page in order to see the new message. What's even more interesting is that the message you wrote would also be shown as the last message in the chats list, just hit the back button in the top-left corner to find out!\nThis is because we updated our store for both the `GetChat` and the `GetChats` query."
          },
          {
            "manualTitle": "Step 11: Messages and chats removal",
            "stepRevision": "4584fbc4c24ce912cff02b547a96db4b6d6bc253",
            "manualView": "## Client\n\nSince we're now familiar with the way mutations work, it's time to add messages and chats removal to our list of features!\nSince the most annoying part is going to be dealing with the user interface (because a multiple selection started by a press event is involved), I created an Angular directive to ease the process.\nLet's start by installing it:\n\n    $ npm install ngx-selectable-list\n\nNow let's import it:\n\n[{]: <helper> (diffStep \"7.1\" files=\"^\\(?!package.json$\\).*\" module=\"client\")\n\n#### Step 7.1: Add SelectableListModule\n\n##### Changed src&#x2F;app&#x2F;chats-lister&#x2F;chats-lister.module.ts\n```diff\n@@ -11,6 +11,7 @@\n ┊11┊11┊import {ChatsListComponent} from './components/chats-list/chats-list.component';\n ┊12┊12┊import {TruncateModule} from 'ng2-truncate';\n ┊13┊13┊import {SharedModule} from '../shared/shared.module';\n+┊  ┊14┊import {NgxSelectableListModule} from 'ngx-selectable-list';\n ┊14┊15┊\n ┊15┊16┊const routes: Routes = [\n ┊16┊17┊  {path: '', redirectTo: 'chats', pathMatch: 'full'},\n```\n```diff\n@@ -40,6 +41,7 @@\n ┊40┊41┊    TruncateModule,\n ┊41┊42┊    // Feature modules\n ┊42┊43┊    SharedModule,\n+┊  ┊44┊    NgxSelectableListModule,\n ┊43┊45┊  ],\n ┊44┊46┊  providers: [\n ┊45┊47┊    ChatsService,\n```\n\n[}]: #\n\nLet's create the mutations:\n\n[{]: <helper> (diffStep \"7.2\" files=\"src/graphql\" module=\"client\")\n\n#### Step 7.2: Remove messages and chats\n\n##### Added src&#x2F;graphql&#x2F;removeAllMessages.mutation.ts\n```diff\n@@ -0,0 +1,8 @@\n+┊ ┊1┊import gql from 'graphql-tag';\n+┊ ┊2┊\n+┊ ┊3┊// We use the gql tag to parse our query string into a query document\n+┊ ┊4┊export const removeAllMessagesMutation = gql`\n+┊ ┊5┊  mutation RemoveAllMessages($chatId: ID!, $all: Boolean) {\n+┊ ┊6┊    removeMessages(chatId: $chatId, all: $all)\n+┊ ┊7┊  }\n+┊ ┊8┊`;\n```\n\n##### Added src&#x2F;graphql&#x2F;removeChat.mutation.ts\n```diff\n@@ -0,0 +1,8 @@\n+┊ ┊1┊import gql from 'graphql-tag';\n+┊ ┊2┊\n+┊ ┊3┊// We use the gql tag to parse our query string into a query document\n+┊ ┊4┊export const removeChatMutation = gql`\n+┊ ┊5┊  mutation RemoveChat($chatId: ID!) {\n+┊ ┊6┊    removeChat(chatId: $chatId)\n+┊ ┊7┊  }\n+┊ ┊8┊`;\n```\n\n##### Added src&#x2F;graphql&#x2F;removeMessages.mutation.ts\n```diff\n@@ -0,0 +1,8 @@\n+┊ ┊1┊import gql from 'graphql-tag';\n+┊ ┊2┊\n+┊ ┊3┊// We use the gql tag to parse our query string into a query document\n+┊ ┊4┊export const removeMessagesMutation = gql`\n+┊ ┊5┊  mutation RemoveMessages($chatId: ID!, $messageIds: [ID]) {\n+┊ ┊6┊    removeMessages(chatId: $chatId, messageIds: $messageIds)\n+┊ ┊7┊  }\n+┊ ┊8┊`;\n```\n\n[}]: #\n\nNow let's update our service:\n\n[{]: <helper> (diffStep \"7.2\" files=\"chats.service.ts\" module=\"client\")\n\n#### Step 7.2: Remove messages and chats\n\n##### Changed src&#x2F;app&#x2F;services&#x2F;chats.service.ts\n```diff\n@@ -3,9 +3,13 @@\n ┊ 3┊ 3┊import {Apollo} from 'apollo-angular';\n ┊ 4┊ 4┊import {Injectable} from '@angular/core';\n ┊ 5┊ 5┊import {getChatsQuery} from '../../graphql/getChats.query';\n-┊ 6┊  ┊import {AddMessage, GetChat, GetChats} from '../../types';\n+┊  ┊ 6┊import {AddMessage, GetChat, GetChats, RemoveAllMessages, RemoveChat, RemoveMessages} from '../../types';\n ┊ 7┊ 7┊import {getChatQuery} from '../../graphql/getChat.query';\n ┊ 8┊ 8┊import {addMessageMutation} from '../../graphql/addMessage.mutation';\n+┊  ┊ 9┊import {removeChatMutation} from '../../graphql/removeChat.mutation';\n+┊  ┊10┊import {DocumentNode} from 'graphql';\n+┊  ┊11┊import {removeAllMessagesMutation} from '../../graphql/removeAllMessages.mutation';\n+┊  ┊12┊import {removeMessagesMutation} from '../../graphql/removeMessages.mutation';\n ┊ 9┊13┊\n ┊10┊14┊@Injectable()\n ┊11┊15┊export class ChatsService {\n```\n```diff\n@@ -88,4 +92,104 @@\n ┊ 88┊ 92┊      },\n ┊ 89┊ 93┊    });\n ┊ 90┊ 94┊  }\n+┊   ┊ 95┊\n+┊   ┊ 96┊  removeChat(chatId: string) {\n+┊   ┊ 97┊    return this.apollo.mutate({\n+┊   ┊ 98┊      mutation: removeChatMutation,\n+┊   ┊ 99┊      variables: <RemoveChat.Variables>{\n+┊   ┊100┊        chatId,\n+┊   ┊101┊      },\n+┊   ┊102┊      update: (store, { data: { removeChat } }) => {\n+┊   ┊103┊        // Read the data from our cache for this query.\n+┊   ┊104┊        const {chats}: GetChats.Query = store.readQuery({\n+┊   ┊105┊          query: getChatsQuery,\n+┊   ┊106┊          variables: <GetChats.Variables>{\n+┊   ┊107┊            amount: this.messagesAmount,\n+┊   ┊108┊          },\n+┊   ┊109┊        });\n+┊   ┊110┊        // Remove the chat (mutable)\n+┊   ┊111┊        for (const index of chats.keys()) {\n+┊   ┊112┊          if (chats[index].id === removeChat) {\n+┊   ┊113┊            chats.splice(index, 1);\n+┊   ┊114┊          }\n+┊   ┊115┊        }\n+┊   ┊116┊        // Write our data back to the cache.\n+┊   ┊117┊        store.writeQuery({\n+┊   ┊118┊          query: getChatsQuery,\n+┊   ┊119┊          variables: <GetChats.Variables>{\n+┊   ┊120┊            amount: this.messagesAmount,\n+┊   ┊121┊          },\n+┊   ┊122┊          data: {\n+┊   ┊123┊            chats,\n+┊   ┊124┊          },\n+┊   ┊125┊        });\n+┊   ┊126┊      },\n+┊   ┊127┊    });\n+┊   ┊128┊  }\n+┊   ┊129┊\n+┊   ┊130┊  removeMessages(chatId: string, messages: GetChat.Messages[], messageIdsOrAll: string[] | boolean) {\n+┊   ┊131┊    let variables: RemoveMessages.Variables | RemoveAllMessages.Variables;\n+┊   ┊132┊    let ids: string[] = [];\n+┊   ┊133┊    let mutation: DocumentNode;\n+┊   ┊134┊\n+┊   ┊135┊    if (typeof messageIdsOrAll === 'boolean') {\n+┊   ┊136┊      variables = {chatId, all: messageIdsOrAll} as RemoveAllMessages.Variables;\n+┊   ┊137┊      ids = messages.map(message => message.id);\n+┊   ┊138┊      mutation = removeAllMessagesMutation;\n+┊   ┊139┊    } else {\n+┊   ┊140┊      variables = {chatId, messageIds: messageIdsOrAll} as RemoveMessages.Variables;\n+┊   ┊141┊      ids = messageIdsOrAll;\n+┊   ┊142┊      mutation = removeMessagesMutation;\n+┊   ┊143┊    }\n+┊   ┊144┊\n+┊   ┊145┊    return this.apollo.mutate(<MutationOptions>{\n+┊   ┊146┊      mutation,\n+┊   ┊147┊      variables,\n+┊   ┊148┊      update: (store, { data: { removeMessages } }: {data: RemoveMessages.Mutation | RemoveAllMessages.Mutation}) => {\n+┊   ┊149┊        // Update the messages cache\n+┊   ┊150┊        {\n+┊   ┊151┊          // Read the data from our cache for this query.\n+┊   ┊152┊          const {chat}: GetChat.Query = store.readQuery({\n+┊   ┊153┊            query: getChatQuery, variables: {\n+┊   ┊154┊              chatId,\n+┊   ┊155┊            }\n+┊   ┊156┊          });\n+┊   ┊157┊          // Remove the messages (mutable)\n+┊   ┊158┊          removeMessages.forEach(messageId => {\n+┊   ┊159┊            for (const index of chat.messages.keys()) {\n+┊   ┊160┊              if (chat.messages[index].id === messageId) {\n+┊   ┊161┊                chat.messages.splice(index, 1);\n+┊   ┊162┊              }\n+┊   ┊163┊            }\n+┊   ┊164┊          });\n+┊   ┊165┊          // Write our data back to the cache.\n+┊   ┊166┊          store.writeQuery({ query: getChatQuery, data: {chat} });\n+┊   ┊167┊        }\n+┊   ┊168┊        // Update last message cache\n+┊   ┊169┊        {\n+┊   ┊170┊          // Read the data from our cache for this query.\n+┊   ┊171┊          const {chats}: GetChats.Query = store.readQuery({\n+┊   ┊172┊            query: getChatsQuery,\n+┊   ┊173┊            variables: <GetChats.Variables>{\n+┊   ┊174┊              amount: this.messagesAmount,\n+┊   ┊175┊            },\n+┊   ┊176┊          });\n+┊   ┊177┊          // Fix last message\n+┊   ┊178┊          chats.find(chat => chat.id === chatId).messages = messages\n+┊   ┊179┊            .filter(message => !ids.includes(message.id))\n+┊   ┊180┊            .sort((a, b) => Number(b.createdAt) - Number(a.createdAt)) || [];\n+┊   ┊181┊          // Write our data back to the cache.\n+┊   ┊182┊          store.writeQuery({\n+┊   ┊183┊            query: getChatsQuery,\n+┊   ┊184┊            variables: <GetChats.Variables>{\n+┊   ┊185┊              amount: this.messagesAmount,\n+┊   ┊186┊            },\n+┊   ┊187┊            data: {\n+┊   ┊188┊              chats,\n+┊   ┊189┊            },\n+┊   ┊190┊          });\n+┊   ┊191┊        }\n+┊   ┊192┊      },\n+┊   ┊193┊    });\n+┊   ┊194┊  }\n ┊ 91┊195┊}\n```\n\n[}]: #\n\nAs you can see every time that we remove a message we also have to update the last message in the chats list.\n\nFinally we can wire everything up into our components:\n\n[{]: <helper> (diffStep \"7.2\" files=\"src/app/chat-viewer, src/app/chats-lister, src/app/shared\" module=\"client\")\n\n#### Step 7.2: Remove messages and chats\n\n##### Changed src&#x2F;app&#x2F;chat-viewer&#x2F;chat-viewer.module.ts\n```diff\n@@ -11,6 +11,7 @@\n ┊11┊11┊import {MessageItemComponent} from './components/message-item/message-item.component';\n ┊12┊12┊import {NewMessageComponent} from './components/new-message/new-message.component';\n ┊13┊13┊import {SharedModule} from '../shared/shared.module';\n+┊  ┊14┊import {NgxSelectableListModule} from 'ngx-selectable-list';\n ┊14┊15┊\n ┊15┊16┊const routes: Routes = [\n ┊16┊17┊  {\n```\n```diff\n@@ -44,6 +45,7 @@\n ┊44┊45┊    FormsModule,\n ┊45┊46┊    // Feature modules\n ┊46┊47┊    SharedModule,\n+┊  ┊48┊    NgxSelectableListModule,\n ┊47┊49┊  ],\n ┊48┊50┊  providers: [\n ┊49┊51┊    ChatsService,\n```\n\n##### Changed src&#x2F;app&#x2F;chat-viewer&#x2F;components&#x2F;messages-list&#x2F;messages-list.component.ts\n```diff\n@@ -1,14 +1,17 @@\n ┊ 1┊ 1┊import {Component, Input} from '@angular/core';\n ┊ 2┊ 2┊import {GetChat} from '../../../../types';\n+┊  ┊ 3┊import {SelectableListDirective} from 'ngx-selectable-list';\n ┊ 3┊ 4┊\n ┊ 4┊ 5┊@Component({\n ┊ 5┊ 6┊  selector: 'app-messages-list',\n ┊ 6┊ 7┊  template: `\n ┊ 7┊ 8┊    <mat-list>\n ┊ 8┊ 9┊      <mat-list-item *ngFor=\"let message of messages\">\n-┊ 9┊  ┊        <app-message-item [item]=\"message\" [isGroup]=\"isGroup\"></app-message-item>\n+┊  ┊10┊        <app-message-item [item]=\"message\" [isGroup]=\"isGroup\"\n+┊  ┊11┊                          libSelectableItem></app-message-item>\n ┊10┊12┊      </mat-list-item>\n ┊11┊13┊    </mat-list>\n+┊  ┊14┊    <ng-content *ngIf=\"selectableListDirective.selecting\"></ng-content>\n ┊12┊15┊  `,\n ┊13┊16┊  styleUrls: ['messages-list.component.scss'],\n ┊14┊17┊})\n```\n```diff\n@@ -20,5 +23,5 @@\n ┊20┊23┊  @Input()\n ┊21┊24┊  isGroup: boolean;\n ┊22┊25┊\n-┊23┊  ┊  constructor() {}\n+┊  ┊26┊  constructor(public selectableListDirective: SelectableListDirective) {}\n ┊24┊27┊}\n```\n\n##### Changed src&#x2F;app&#x2F;chat-viewer&#x2F;containers&#x2F;chat&#x2F;chat.component.spec.ts\n```diff\n@@ -17,6 +17,7 @@\n ┊17┊17┊import {NewMessageComponent} from '../../components/new-message/new-message.component';\n ┊18┊18┊import {MessagesListComponent} from '../../components/messages-list/messages-list.component';\n ┊19┊19┊import {MessageItemComponent} from '../../components/message-item/message-item.component';\n+┊  ┊20┊import {NgxSelectableListModule} from 'ngx-selectable-list';\n ┊20┊21┊\n ┊21┊22┊describe('ChatComponent', () => {\n ┊22┊23┊  let component: ChatComponent;\n```\n```diff\n@@ -107,7 +108,8 @@\n ┊107┊108┊        SharedModule,\n ┊108┊109┊        HttpLinkModule,\n ┊109┊110┊        HttpClientTestingModule,\n-┊110┊   ┊        RouterTestingModule\n+┊   ┊111┊        RouterTestingModule,\n+┊   ┊112┊        NgxSelectableListModule,\n ┊111┊113┊      ],\n ┊112┊114┊      providers: [\n ┊113┊115┊        ChatsService,\n```\n\n##### Changed src&#x2F;app&#x2F;chat-viewer&#x2F;containers&#x2F;chat&#x2F;chat.component.ts\n```diff\n@@ -12,7 +12,10 @@\n ┊12┊12┊      <div class=\"title\">{{ name }}</div>\n ┊13┊13┊    </app-toolbar>\n ┊14┊14┊    <div class=\"container\">\n-┊15┊  ┊      <app-messages-list [items]=\"messages\" [isGroup]=\"isGroup\"></app-messages-list>\n+┊  ┊15┊      <app-messages-list [items]=\"messages\" [isGroup]=\"isGroup\"\n+┊  ┊16┊                         libSelectableList=\"multiple_press\" (multiple)=\"deleteMessages($event)\">\n+┊  ┊17┊        <app-confirm-selection #confirmSelection></app-confirm-selection>\n+┊  ┊18┊      </app-messages-list>\n ┊16┊19┊      <app-new-message (newMessage)=\"addMessage($event)\"></app-new-message>\n ┊17┊20┊    </div>\n ┊18┊21┊  `,\n```\n```diff\n@@ -47,4 +50,8 @@\n ┊47┊50┊  addMessage(content: string) {\n ┊48┊51┊    this.chatsService.addMessage(this.chatId, content).subscribe();\n ┊49┊52┊  }\n+┊  ┊53┊\n+┊  ┊54┊  deleteMessages(messageIds: string[]) {\n+┊  ┊55┊    this.chatsService.removeMessages(this.chatId, this.messages, messageIds).subscribe();\n+┊  ┊56┊  }\n ┊50┊57┊}\n```\n\n##### Changed src&#x2F;app&#x2F;chats-lister&#x2F;components&#x2F;chat-item&#x2F;chat-item.component.ts\n```diff\n@@ -5,7 +5,7 @@\n ┊ 5┊ 5┊  selector: 'app-chat-item',\n ┊ 6┊ 6┊  template: `\n ┊ 7┊ 7┊    <div class=\"chat-row\">\n-┊ 8┊  ┊        <div class=\"chat-recipient\" (click)=\"selectChat()\">\n+┊  ┊ 8┊        <div class=\"chat-recipient\">\n ┊ 9┊ 9┊          <img *ngIf=\"chat.picture\" [src]=\"chat.picture\" width=\"48\" height=\"48\">\n ┊10┊10┊          <div>{{ chat.name }} [id: {{ chat.id }}]</div>\n ┊11┊11┊        </div>\n```\n```diff\n@@ -18,11 +18,4 @@\n ┊18┊18┊  // tslint:disable-next-line:no-input-rename\n ┊19┊19┊  @Input('item')\n ┊20┊20┊  chat: GetChats.Chats;\n-┊21┊  ┊\n-┊22┊  ┊  @Output()\n-┊23┊  ┊  select = new EventEmitter<string>();\n-┊24┊  ┊\n-┊25┊  ┊  selectChat() {\n-┊26┊  ┊    this.select.emit(this.chat.id);\n-┊27┊  ┊  }\n ┊28┊21┊}\n```\n\n##### Changed src&#x2F;app&#x2F;chats-lister&#x2F;components&#x2F;chats-list&#x2F;chats-list.component.ts\n```diff\n@@ -1,14 +1,17 @@\n-┊ 1┊  ┊import {Component, EventEmitter, Input, Output} from '@angular/core';\n+┊  ┊ 1┊import {Component, Input} from '@angular/core';\n ┊ 2┊ 2┊import {GetChats} from '../../../../types';\n+┊  ┊ 3┊import {SelectableListDirective} from 'ngx-selectable-list';\n ┊ 3┊ 4┊\n ┊ 4┊ 5┊@Component({\n ┊ 5┊ 6┊  selector: 'app-chats-list',\n ┊ 6┊ 7┊  template: `\n ┊ 7┊ 8┊    <mat-list>\n ┊ 8┊ 9┊      <mat-list-item *ngFor=\"let chat of chats\">\n-┊ 9┊  ┊        <app-chat-item [item]=\"chat\" (select)=\"selectChat($event)\"></app-chat-item>\n+┊  ┊10┊        <app-chat-item [item]=\"chat\"\n+┊  ┊11┊                       libSelectableItem></app-chat-item>\n ┊10┊12┊      </mat-list-item>\n ┊11┊13┊    </mat-list>\n+┊  ┊14┊    <ng-content *ngIf=\"selectableListDirective.selecting\"></ng-content>\n ┊12┊15┊  `,\n ┊13┊16┊  styleUrls: ['chats-list.component.scss'],\n ┊14┊17┊})\n```\n```diff\n@@ -17,12 +20,5 @@\n ┊17┊20┊  @Input('items')\n ┊18┊21┊  chats: GetChats.Chats[];\n ┊19┊22┊\n-┊20┊  ┊  @Output()\n-┊21┊  ┊  select = new EventEmitter<string>();\n-┊22┊  ┊\n-┊23┊  ┊  constructor() {}\n-┊24┊  ┊\n-┊25┊  ┊  selectChat(id: string) {\n-┊26┊  ┊    this.select.emit(id);\n-┊27┊  ┊  }\n+┊  ┊23┊  constructor(public selectableListDirective: SelectableListDirective) {}\n ┊28┊24┊}\n```\n\n##### Changed src&#x2F;app&#x2F;chats-lister&#x2F;containers&#x2F;chats&#x2F;chats.component.spec.ts\n```diff\n@@ -13,6 +13,7 @@\n ┊13┊13┊import {defaultDataIdFromObject, InMemoryCache} from 'apollo-cache-inmemory';\n ┊14┊14┊import {By} from '@angular/platform-browser';\n ┊15┊15┊import {RouterTestingModule} from '@angular/router/testing';\n+┊  ┊16┊import {NgxSelectableListModule} from 'ngx-selectable-list';\n ┊16┊17┊\n ┊17┊18┊describe('ChatsComponent', () => {\n ┊18┊19┊  let component: ChatsComponent;\n```\n```diff\n@@ -329,7 +330,8 @@\n ┊329┊330┊        TruncateModule,\n ┊330┊331┊        HttpLinkModule,\n ┊331┊332┊        HttpClientTestingModule,\n-┊332┊   ┊        RouterTestingModule\n+┊   ┊333┊        RouterTestingModule,\n+┊   ┊334┊        NgxSelectableListModule,\n ┊333┊335┊      ],\n ┊334┊336┊      providers: [\n ┊335┊337┊        ChatsService,\n```\n\n##### Changed src&#x2F;app&#x2F;chats-lister&#x2F;containers&#x2F;chats&#x2F;chats.component.ts\n```diff\n@@ -28,9 +28,13 @@\n ┊28┊28┊      </button>\n ┊29┊29┊    </mat-menu>\n ┊30┊30┊\n-┊31┊  ┊    <app-chats-list [items]=\"chats$ | async\" (select)=\"goToChat($event)\"></app-chats-list>\n+┊  ┊31┊    <app-chats-list [items]=\"chats$ | async\"\n+┊  ┊32┊                    libSelectableList=\"both\"\n+┊  ┊33┊                    (single)=\"goToChat($event)\" (multiple)=\"deleteChats($event)\" (isSelecting)=\"isSelecting = $event\">\n+┊  ┊34┊      <app-confirm-selection #confirmSelection></app-confirm-selection>\n+┊  ┊35┊    </app-chats-list>\n ┊32┊36┊\n-┊33┊  ┊    <button class=\"chat-button\" mat-fab color=\"primary\">\n+┊  ┊37┊    <button *ngIf=\"!isSelecting\" class=\"chat-button\" mat-fab color=\"primary\">\n ┊34┊38┊      <mat-icon aria-label=\"Icon-button with a + icon\">add</mat-icon>\n ┊35┊39┊    </button>\n ┊36┊40┊  `,\n```\n```diff\n@@ -38,6 +42,7 @@\n ┊38┊42┊})\n ┊39┊43┊export class ChatsComponent implements OnInit {\n ┊40┊44┊  chats$: Observable<GetChats.Chats[]>;\n+┊  ┊45┊  isSelecting = false;\n ┊41┊46┊\n ┊42┊47┊  constructor(private chatsService: ChatsService,\n ┊43┊48┊              private router: Router) {\n```\n```diff\n@@ -50,4 +55,10 @@\n ┊50┊55┊  goToChat(chatId: string) {\n ┊51┊56┊    this.router.navigate(['/chat', chatId]);\n ┊52┊57┊  }\n+┊  ┊58┊\n+┊  ┊59┊  deleteChats(chatIds: string[]) {\n+┊  ┊60┊    chatIds.forEach(chatId => {\n+┊  ┊61┊      this.chatsService.removeChat(chatId).subscribe();\n+┊  ┊62┊    });\n+┊  ┊63┊  }\n ┊53┊64┊}\n```\n\n##### Added src&#x2F;app&#x2F;shared&#x2F;components&#x2F;confirm-selection&#x2F;confirm-selection.component.scss\n```diff\n@@ -0,0 +1,6 @@\n+┊ ┊1┊:host {\n+┊ ┊2┊  display: block;\n+┊ ┊3┊  position: absolute;\n+┊ ┊4┊  bottom: 5vw;\n+┊ ┊5┊  right: 5vw;\n+┊ ┊6┊}\n```\n\n##### Added src&#x2F;app&#x2F;shared&#x2F;components&#x2F;confirm-selection&#x2F;confirm-selection.component.ts\n```diff\n@@ -0,0 +1,21 @@\n+┊  ┊ 1┊import {Component, EventEmitter, Input, Output} from '@angular/core';\n+┊  ┊ 2┊\n+┊  ┊ 3┊@Component({\n+┊  ┊ 4┊  selector: 'app-confirm-selection',\n+┊  ┊ 5┊  template: `\n+┊  ┊ 6┊    <button mat-fab color=\"primary\" (click)=\"handleClick()\">\n+┊  ┊ 7┊      <mat-icon aria-label=\"Icon-button\">{{ icon }}</mat-icon>\n+┊  ┊ 8┊    </button>\n+┊  ┊ 9┊  `,\n+┊  ┊10┊  styleUrls: ['./confirm-selection.component.scss'],\n+┊  ┊11┊})\n+┊  ┊12┊export class ConfirmSelectionComponent {\n+┊  ┊13┊  @Input()\n+┊  ┊14┊  icon = 'delete';\n+┊  ┊15┊  @Output()\n+┊  ┊16┊  emitClick = new EventEmitter<null>();\n+┊  ┊17┊\n+┊  ┊18┊  handleClick() {\n+┊  ┊19┊    this.emitClick.emit();\n+┊  ┊20┊  }\n+┊  ┊21┊}\n```\n\n##### Changed src&#x2F;app&#x2F;shared&#x2F;shared.module.ts\n```diff\n@@ -1,19 +1,23 @@\n ┊ 1┊ 1┊import {BrowserModule} from '@angular/platform-browser';\n ┊ 2┊ 2┊import {NgModule} from '@angular/core';\n ┊ 3┊ 3┊\n-┊ 4┊  ┊import {MatToolbarModule} from '@angular/material';\n+┊  ┊ 4┊import {MatButtonModule, MatIconModule, MatToolbarModule} from '@angular/material';\n ┊ 5┊ 5┊import {ToolbarComponent} from './components/toolbar/toolbar.component';\n ┊ 6┊ 6┊import {FormsModule} from '@angular/forms';\n ┊ 7┊ 7┊import {BrowserAnimationsModule} from '@angular/platform-browser/animations';\n+┊  ┊ 8┊import {ConfirmSelectionComponent} from './components/confirm-selection/confirm-selection.component';\n ┊ 8┊ 9┊\n ┊ 9┊10┊@NgModule({\n ┊10┊11┊  declarations: [\n ┊11┊12┊    ToolbarComponent,\n+┊  ┊13┊    ConfirmSelectionComponent,\n ┊12┊14┊  ],\n ┊13┊15┊  imports: [\n ┊14┊16┊    BrowserModule,\n ┊15┊17┊    // Material\n ┊16┊18┊    MatToolbarModule,\n+┊  ┊19┊    MatIconModule,\n+┊  ┊20┊    MatButtonModule,\n ┊17┊21┊    // Animations\n ┊18┊22┊    BrowserAnimationsModule,\n ┊19┊23┊    // Forms\n```\n```diff\n@@ -22,6 +26,7 @@\n ┊22┊26┊  providers: [],\n ┊23┊27┊  exports: [\n ┊24┊28┊    ToolbarComponent,\n+┊  ┊29┊    ConfirmSelectionComponent,\n ┊25┊30┊  ],\n ┊26┊31┊})\n ┊27┊32┊export class SharedModule {\n```\n\n[}]: #\n\nWe also created a `ConfirmSelectionComponent` to use for content projection, since our selectable list directive will be able to listen to its events.\nThe selectable list directive supports much more different use cases, for info please read the documentation.\n\nAs you can see `ngx-selectable-list` takes care of most of the boilerplate, giving us the freedom to concentrate on the actual code."
          },
          {
            "manualTitle": "Step 12: Chats creation",
            "stepRevision": "57082efc72b5ef980e8832726b0f8c22d0b3f1ce",
            "manualView": "We still cannot create new chats or groups, so let's implement it.\nWe're going to create a `ChatsCreation` module, with a `NewChat` and a `NewGroup` containers, along with several presentational components.\nWe're going to make use of the selectable list directive once again, to ease selecting the users when we're creating a new group.\nYou should also notice that we are looking for existing chats before creating a new one: if it already exists we're are simply redirecting to that chat instead of creating a new one (the server wouldn't allow that anyway and it will simply\nreturn the chat id).\n\n[{]: <helper> (diffStep \"8.1\" files=\"src/graphql\" module=\"client\")\n\n#### Step 8.1: New chats and groups\n\n##### Added src&#x2F;graphql&#x2F;addChat.mutation.ts\n```diff\n@@ -0,0 +1,17 @@\n+┊  ┊ 1┊import gql from 'graphql-tag';\n+┊  ┊ 2┊import {fragments} from './fragment';\n+┊  ┊ 3┊\n+┊  ┊ 4┊// We use the gql tag to parse our query string into a query document\n+┊  ┊ 5┊export const addChatMutation = gql`\n+┊  ┊ 6┊  mutation AddChat($recipientId: ID!) {\n+┊  ┊ 7┊    addChat(recipientId: $recipientId) {\n+┊  ┊ 8┊      ...ChatWithoutMessages\n+┊  ┊ 9┊      messages {\n+┊  ┊10┊        ...Message\n+┊  ┊11┊      }\n+┊  ┊12┊    }\n+┊  ┊13┊  }\n+┊  ┊14┊\n+┊  ┊15┊  ${fragments['chatWithoutMessages']}\n+┊  ┊16┊  ${fragments['message']}\n+┊  ┊17┊`;\n```\n\n##### Added src&#x2F;graphql&#x2F;addGroup.mutation.ts\n```diff\n@@ -0,0 +1,17 @@\n+┊  ┊ 1┊import gql from 'graphql-tag';\n+┊  ┊ 2┊import {fragments} from './fragment';\n+┊  ┊ 3┊\n+┊  ┊ 4┊// We use the gql tag to parse our query string into a query document\n+┊  ┊ 5┊export const addGroupMutation = gql`\n+┊  ┊ 6┊  mutation AddGroup($recipientIds: [ID!]!, $groupName: String!) {\n+┊  ┊ 7┊    addGroup(recipientIds: $recipientIds, groupName: $groupName) {\n+┊  ┊ 8┊      ...ChatWithoutMessages\n+┊  ┊ 9┊      messages {\n+┊  ┊10┊        ...Message\n+┊  ┊11┊      }\n+┊  ┊12┊    }\n+┊  ┊13┊  }\n+┊  ┊14┊\n+┊  ┊15┊  ${fragments['chatWithoutMessages']}\n+┊  ┊16┊  ${fragments['message']}\n+┊  ┊17┊`;\n```\n\n##### Added src&#x2F;graphql&#x2F;getUsers.query.ts\n```diff\n@@ -0,0 +1,12 @@\n+┊  ┊ 1┊import gql from 'graphql-tag';\n+┊  ┊ 2┊\n+┊  ┊ 3┊// We use the gql tag to parse our query string into a query document\n+┊  ┊ 4┊export const getUsersQuery = gql`\n+┊  ┊ 5┊  query GetUsers {\n+┊  ┊ 6┊    users {\n+┊  ┊ 7┊      id,\n+┊  ┊ 8┊      name,\n+┊  ┊ 9┊      picture,\n+┊  ┊10┊    }\n+┊  ┊11┊  }\n+┊  ┊12┊`;\n```\n\n[}]: #\n\nAfter creating the mutations we should run the generator to create the corresponding types:\n\n    npm run generator\n\n[{]: <helper> (diffStep \"8.1\" files=\"src/app/app.module.ts, src/app/chats-creation, src/app/services\" module=\"client\")\n\n#### Step 8.1: New chats and groups\n\n##### Changed src&#x2F;app&#x2F;app.module.ts\n```diff\n@@ -9,6 +9,7 @@\n ┊ 9┊ 9┊import {ChatsListerModule} from './chats-lister/chats-lister.module';\n ┊10┊10┊import {RouterModule, Routes} from '@angular/router';\n ┊11┊11┊import {ChatViewerModule} from './chat-viewer/chat-viewer.module';\n+┊  ┊12┊import {ChatsCreationModule} from './chats-creation/chats-creation.module';\n ┊12┊13┊const routes: Routes = [];\n ┊13┊14┊\n ┊14┊15┊@NgModule({\n```\n```diff\n@@ -26,6 +27,7 @@\n ┊26┊27┊    // Feature modules\n ┊27┊28┊    ChatsListerModule,\n ┊28┊29┊    ChatViewerModule,\n+┊  ┊30┊    ChatsCreationModule,\n ┊29┊31┊  ],\n ┊30┊32┊  providers: [],\n ┊31┊33┊  bootstrap: [AppComponent]\n```\n\n##### Added src&#x2F;app&#x2F;chats-creation&#x2F;chats-creation.module.ts\n```diff\n@@ -0,0 +1,60 @@\n+┊  ┊ 1┊import { BrowserModule } from '@angular/platform-browser';\n+┊  ┊ 2┊import { NgModule } from '@angular/core';\n+┊  ┊ 3┊\n+┊  ┊ 4┊import {BrowserAnimationsModule} from '@angular/platform-browser/animations';\n+┊  ┊ 5┊import {\n+┊  ┊ 6┊  MatButtonModule, MatFormFieldModule, MatGridListModule, MatIconModule, MatInputModule, MatListModule, MatMenuModule,\n+┊  ┊ 7┊  MatToolbarModule\n+┊  ┊ 8┊} from '@angular/material';\n+┊  ┊ 9┊import {RouterModule, Routes} from '@angular/router';\n+┊  ┊10┊import {FormsModule} from '@angular/forms';\n+┊  ┊11┊import {ChatsService} from '../services/chats.service';\n+┊  ┊12┊import {UserItemComponent} from './components/user-item/user-item.component';\n+┊  ┊13┊import {UsersListComponent} from './components/users-list/users-list.component';\n+┊  ┊14┊import {NewGroupComponent} from './containers/new-group/new-group.component';\n+┊  ┊15┊import {NewChatComponent} from './containers/new-chat/new-chat.component';\n+┊  ┊16┊import {NewGroupDetailsComponent} from './components/new-group-details/new-group-details.component';\n+┊  ┊17┊import {SharedModule} from '../shared/shared.module';\n+┊  ┊18┊import {NgxSelectableListModule} from 'ngx-selectable-list';\n+┊  ┊19┊\n+┊  ┊20┊const routes: Routes = [\n+┊  ┊21┊  {path: 'new-chat', component: NewChatComponent},\n+┊  ┊22┊  {path: 'new-group', component: NewGroupComponent},\n+┊  ┊23┊];\n+┊  ┊24┊\n+┊  ┊25┊@NgModule({\n+┊  ┊26┊  declarations: [\n+┊  ┊27┊    NewChatComponent,\n+┊  ┊28┊    UsersListComponent,\n+┊  ┊29┊    NewGroupComponent,\n+┊  ┊30┊    UserItemComponent,\n+┊  ┊31┊    NewGroupDetailsComponent,\n+┊  ┊32┊  ],\n+┊  ┊33┊  imports: [\n+┊  ┊34┊    BrowserModule,\n+┊  ┊35┊    // Animations (for Material)\n+┊  ┊36┊    BrowserAnimationsModule,\n+┊  ┊37┊    // Material\n+┊  ┊38┊    MatToolbarModule,\n+┊  ┊39┊    MatMenuModule,\n+┊  ┊40┊    MatIconModule,\n+┊  ┊41┊    MatButtonModule,\n+┊  ┊42┊    MatListModule,\n+┊  ┊43┊    MatGridListModule,\n+┊  ┊44┊    MatInputModule,\n+┊  ┊45┊    MatFormFieldModule,\n+┊  ┊46┊    MatGridListModule,\n+┊  ┊47┊    // Routing\n+┊  ┊48┊    RouterModule.forChild(routes),\n+┊  ┊49┊    // Forms\n+┊  ┊50┊    FormsModule,\n+┊  ┊51┊    // Feature modules\n+┊  ┊52┊    NgxSelectableListModule,\n+┊  ┊53┊    SharedModule,\n+┊  ┊54┊  ],\n+┊  ┊55┊  providers: [\n+┊  ┊56┊    ChatsService,\n+┊  ┊57┊  ],\n+┊  ┊58┊})\n+┊  ┊59┊export class ChatsCreationModule {\n+┊  ┊60┊}\n```\n\n##### Added src&#x2F;app&#x2F;chats-creation&#x2F;components&#x2F;new-group-details&#x2F;new-group-details.component.scss\n```diff\n@@ -0,0 +1,25 @@\n+┊  ┊ 1┊:host {\n+┊  ┊ 2┊  display: block;\n+┊  ┊ 3┊}\n+┊  ┊ 4┊\n+┊  ┊ 5┊div {\n+┊  ┊ 6┊  padding: 16px;\n+┊  ┊ 7┊  mat-form-field {\n+┊  ┊ 8┊    width: 100%;\n+┊  ┊ 9┊  }\n+┊  ┊10┊}\n+┊  ┊11┊\n+┊  ┊12┊.new-group {\n+┊  ┊13┊  position: absolute;\n+┊  ┊14┊  bottom: 5vw;\n+┊  ┊15┊  right: 5vw;\n+┊  ┊16┊}\n+┊  ┊17┊\n+┊  ┊18┊.users {\n+┊  ┊19┊  display: flex;\n+┊  ┊20┊  flex-flow: row wrap;\n+┊  ┊21┊  img {\n+┊  ┊22┊    flex: 0 1 8vh;\n+┊  ┊23┊    height: 8vh;\n+┊  ┊24┊  }\n+┊  ┊25┊}\n```\n\n##### Added src&#x2F;app&#x2F;chats-creation&#x2F;components&#x2F;new-group-details&#x2F;new-group-details.component.ts\n```diff\n@@ -0,0 +1,34 @@\n+┊  ┊ 1┊import {Component, EventEmitter, Input, Output} from '@angular/core';\n+┊  ┊ 2┊import {GetUsers} from '../../../../types';\n+┊  ┊ 3┊\n+┊  ┊ 4┊@Component({\n+┊  ┊ 5┊  selector: 'app-new-group-details',\n+┊  ┊ 6┊  template: `\n+┊  ┊ 7┊    <div>\n+┊  ┊ 8┊      <mat-form-field>\n+┊  ┊ 9┊        <input matInput placeholder=\"Group name\" [(ngModel)]=\"groupName\">\n+┊  ┊10┊      </mat-form-field>\n+┊  ┊11┊    </div>\n+┊  ┊12┊    <button [disabled]=\"!groupName\" class=\"new-group\" mat-fab color=\"primary\" (click)=\"emitGroupDetails()\">\n+┊  ┊13┊      <mat-icon aria-label=\"Icon-button with a + icon\">arrow_forward</mat-icon>\n+┊  ┊14┊    </button>\n+┊  ┊15┊    <div>Members</div>\n+┊  ┊16┊    <div class=\"users\">\n+┊  ┊17┊      <img *ngFor=\"let user of users;\" [src]=\"user.picture\"/>\n+┊  ┊18┊    </div>\n+┊  ┊19┊  `,\n+┊  ┊20┊  styleUrls: ['new-group-details.component.scss'],\n+┊  ┊21┊})\n+┊  ┊22┊export class NewGroupDetailsComponent {\n+┊  ┊23┊  groupName: string;\n+┊  ┊24┊  @Input()\n+┊  ┊25┊  users: GetUsers.Users[];\n+┊  ┊26┊  @Output()\n+┊  ┊27┊  groupDetails = new EventEmitter<string>();\n+┊  ┊28┊\n+┊  ┊29┊  emitGroupDetails() {\n+┊  ┊30┊    if (this.groupDetails) {\n+┊  ┊31┊      this.groupDetails.emit(this.groupName);\n+┊  ┊32┊    }\n+┊  ┊33┊  }\n+┊  ┊34┊}\n```\n\n##### Added src&#x2F;app&#x2F;chats-creation&#x2F;components&#x2F;user-item&#x2F;user-item.component.scss\n```diff\n@@ -0,0 +1,28 @@\n+┊  ┊ 1┊:host {\n+┊  ┊ 2┊  display: block;\n+┊  ┊ 3┊  width: 100%;\n+┊  ┊ 4┊  height: 100%;\n+┊  ┊ 5┊}\n+┊  ┊ 6┊\n+┊  ┊ 7┊button {\n+┊  ┊ 8┊  padding: 0;\n+┊  ┊ 9┊  display: flex;\n+┊  ┊10┊  align-items: center;\n+┊  ┊11┊  height: 100%;\n+┊  ┊12┊  width: 100%;\n+┊  ┊13┊  border: none;\n+┊  ┊14┊\n+┊  ┊15┊  div:first-of-type {\n+┊  ┊16┊    display: flex;\n+┊  ┊17┊    justify-content: center;\n+┊  ┊18┊    align-items: center;\n+┊  ┊19┊\n+┊  ┊20┊    img {\n+┊  ┊21┊      max-width: 100%;\n+┊  ┊22┊    }\n+┊  ┊23┊  }\n+┊  ┊24┊\n+┊  ┊25┊  div:nth-of-type(2) {\n+┊  ┊26┊    padding-left: 16px;\n+┊  ┊27┊  }\n+┊  ┊28┊}\n```\n\n##### Added src&#x2F;app&#x2F;chats-creation&#x2F;components&#x2F;user-item&#x2F;user-item.component.ts\n```diff\n@@ -0,0 +1,20 @@\n+┊  ┊ 1┊import {Component, Input} from '@angular/core';\n+┊  ┊ 2┊import {GetUsers} from '../../../../types';\n+┊  ┊ 3┊\n+┊  ┊ 4┊@Component({\n+┊  ┊ 5┊  selector: 'app-user-item',\n+┊  ┊ 6┊  template: `\n+┊  ┊ 7┊    <button mat-menu-item>\n+┊  ┊ 8┊      <div>\n+┊  ┊ 9┊        <img [src]=\"user.picture\" *ngIf=\"user.picture\">\n+┊  ┊10┊      </div>\n+┊  ┊11┊      <div>{{ user.name }}</div>\n+┊  ┊12┊    </button>\n+┊  ┊13┊  `,\n+┊  ┊14┊  styleUrls: ['user-item.component.scss']\n+┊  ┊15┊})\n+┊  ┊16┊export class UserItemComponent {\n+┊  ┊17┊  // tslint:disable-next-line:no-input-rename\n+┊  ┊18┊  @Input('item')\n+┊  ┊19┊  user: GetUsers.Users;\n+┊  ┊20┊}\n```\n\n##### Added src&#x2F;app&#x2F;chats-creation&#x2F;components&#x2F;users-list&#x2F;users-list.component.scss\n```diff\n@@ -0,0 +1,3 @@\n+┊ ┊1┊:host {\n+┊ ┊2┊  display: block;\n+┊ ┊3┊}\n```\n\n##### Added src&#x2F;app&#x2F;chats-creation&#x2F;components&#x2F;users-list&#x2F;users-list.component.ts\n```diff\n@@ -0,0 +1,24 @@\n+┊  ┊ 1┊import {Component, Input} from '@angular/core';\n+┊  ┊ 2┊import {GetUsers} from '../../../../types';\n+┊  ┊ 3┊import {SelectableListDirective} from 'ngx-selectable-list';\n+┊  ┊ 4┊\n+┊  ┊ 5┊@Component({\n+┊  ┊ 6┊  selector: 'app-users-list',\n+┊  ┊ 7┊  template: `\n+┊  ┊ 8┊    <mat-list>\n+┊  ┊ 9┊      <mat-list-item *ngFor=\"let user of users\">\n+┊  ┊10┊        <app-user-item [item]=\"user\"\n+┊  ┊11┊                       libSelectableItem></app-user-item>\n+┊  ┊12┊      </mat-list-item>\n+┊  ┊13┊    </mat-list>\n+┊  ┊14┊    <ng-content *ngIf=\"selectableListDirective.selecting\"></ng-content>\n+┊  ┊15┊  `,\n+┊  ┊16┊  styleUrls: ['users-list.component.scss'],\n+┊  ┊17┊})\n+┊  ┊18┊export class UsersListComponent {\n+┊  ┊19┊  // tslint:disable-next-line:no-input-rename\n+┊  ┊20┊  @Input('items')\n+┊  ┊21┊  users: GetUsers.Users[];\n+┊  ┊22┊\n+┊  ┊23┊  constructor(public selectableListDirective: SelectableListDirective) {}\n+┊  ┊24┊}\n```\n\n##### Added src&#x2F;app&#x2F;chats-creation&#x2F;containers&#x2F;new-chat&#x2F;new-chat.component.scss\n```diff\n@@ -0,0 +1,23 @@\n+┊  ┊ 1┊.new-group {\n+┊  ┊ 2┊  display: flex;\n+┊  ┊ 3┊  height: 8vh;\n+┊  ┊ 4┊  align-items: center;\n+┊  ┊ 5┊\n+┊  ┊ 6┊  div:first-of-type {\n+┊  ┊ 7┊    height: 8vh;\n+┊  ┊ 8┊    width: 8vh;\n+┊  ┊ 9┊    display: flex;\n+┊  ┊10┊    justify-content: center;\n+┊  ┊11┊    align-items: center;\n+┊  ┊12┊\n+┊  ┊13┊    mat-icon {\n+┊  ┊14┊      height: 5vh;\n+┊  ┊15┊      width: 5vh;\n+┊  ┊16┊      font-size: 5vh;\n+┊  ┊17┊    }\n+┊  ┊18┊  }\n+┊  ┊19┊\n+┊  ┊20┊  div:nth-of-type(2) {\n+┊  ┊21┊    padding: 16px;\n+┊  ┊22┊  }\n+┊  ┊23┊}\n```\n\n##### Added src&#x2F;app&#x2F;chats-creation&#x2F;containers&#x2F;new-chat&#x2F;new-chat.component.ts\n```diff\n@@ -0,0 +1,59 @@\n+┊  ┊ 1┊import {Component, OnInit} from '@angular/core';\n+┊  ┊ 2┊import {Location} from '@angular/common';\n+┊  ┊ 3┊import {Router} from '@angular/router';\n+┊  ┊ 4┊import {AddChat, GetUsers} from '../../../../types';\n+┊  ┊ 5┊import {ChatsService} from '../../../services/chats.service';\n+┊  ┊ 6┊\n+┊  ┊ 7┊@Component({\n+┊  ┊ 8┊  template: `\n+┊  ┊ 9┊    <app-toolbar>\n+┊  ┊10┊      <button class=\"navigation\" mat-button (click)=\"goBack()\">\n+┊  ┊11┊        <mat-icon aria-label=\"Icon-button with an arrow back icon\">arrow_back</mat-icon>\n+┊  ┊12┊      </button>\n+┊  ┊13┊      <div class=\"title\">New chat</div>\n+┊  ┊14┊    </app-toolbar>\n+┊  ┊15┊\n+┊  ┊16┊    <div class=\"new-group\" (click)=\"goToNewGroup()\">\n+┊  ┊17┊      <div>\n+┊  ┊18┊        <mat-icon aria-label=\"Icon-button with a group add icon\">group_add</mat-icon>\n+┊  ┊19┊      </div>\n+┊  ┊20┊      <div>New group</div>\n+┊  ┊21┊    </div>\n+┊  ┊22┊\n+┊  ┊23┊    <app-users-list [items]=\"users\"\n+┊  ┊24┊                    libSelectableList=\"single\" (single)=\"addChat($event)\">\n+┊  ┊25┊    </app-users-list>\n+┊  ┊26┊  `,\n+┊  ┊27┊  styleUrls: ['new-chat.component.scss'],\n+┊  ┊28┊})\n+┊  ┊29┊export class NewChatComponent implements OnInit {\n+┊  ┊30┊  users: GetUsers.Users[];\n+┊  ┊31┊\n+┊  ┊32┊  constructor(private router: Router,\n+┊  ┊33┊              private location: Location,\n+┊  ┊34┊              private chatsService: ChatsService) {}\n+┊  ┊35┊\n+┊  ┊36┊  ngOnInit () {\n+┊  ┊37┊    this.chatsService.getUsers().users$.subscribe(users => this.users = users);\n+┊  ┊38┊  }\n+┊  ┊39┊\n+┊  ┊40┊  goBack() {\n+┊  ┊41┊    this.location.back();\n+┊  ┊42┊  }\n+┊  ┊43┊\n+┊  ┊44┊  goToNewGroup() {\n+┊  ┊45┊    this.router.navigate(['/new-group']);\n+┊  ┊46┊  }\n+┊  ┊47┊\n+┊  ┊48┊  addChat(recipientId: string) {\n+┊  ┊49┊    const chatId = this.chatsService.getChatId(recipientId);\n+┊  ┊50┊    if (chatId) {\n+┊  ┊51┊      // Chat is already listed for the current user\n+┊  ┊52┊      this.router.navigate(['/chat', chatId]);\n+┊  ┊53┊    } else {\n+┊  ┊54┊      this.chatsService.addChat(recipientId).subscribe(({data: {addChat: {id}}}: { data: AddChat.Mutation }) => {\n+┊  ┊55┊        this.router.navigate(['/chat', id]);\n+┊  ┊56┊      });\n+┊  ┊57┊    }\n+┊  ┊58┊  }\n+┊  ┊59┊}\n```\n\n##### Added src&#x2F;app&#x2F;chats-creation&#x2F;containers&#x2F;new-group&#x2F;new-group.component.scss\n\n\n##### Added src&#x2F;app&#x2F;chats-creation&#x2F;containers&#x2F;new-group&#x2F;new-group.component.ts\n```diff\n@@ -0,0 +1,60 @@\n+┊  ┊ 1┊import {Component, OnInit} from '@angular/core';\n+┊  ┊ 2┊import {Location} from '@angular/common';\n+┊  ┊ 3┊import {Router} from '@angular/router';\n+┊  ┊ 4┊import {AddGroup, GetUsers} from '../../../../types';\n+┊  ┊ 5┊import {ChatsService} from '../../../services/chats.service';\n+┊  ┊ 6┊\n+┊  ┊ 7┊@Component({\n+┊  ┊ 8┊  template: `\n+┊  ┊ 9┊    <app-toolbar>\n+┊  ┊10┊      <button class=\"navigation\" mat-button (click)=\"goBack()\">\n+┊  ┊11┊        <mat-icon aria-label=\"Icon-button with an arrow back icon\">arrow_back</mat-icon>\n+┊  ┊12┊      </button>\n+┊  ┊13┊      <div class=\"title\">New group</div>\n+┊  ┊14┊    </app-toolbar>\n+┊  ┊15┊\n+┊  ┊16┊    <app-users-list *ngIf=\"!recipientIds.length\" [items]=\"users\"\n+┊  ┊17┊                    libSelectableList=\"multiple_tap\" (multiple)=\"selectUsers($event)\">\n+┊  ┊18┊      <app-confirm-selection #confirmSelection icon=\"arrow_forward\"></app-confirm-selection>\n+┊  ┊19┊    </app-users-list>\n+┊  ┊20┊    <app-new-group-details *ngIf=\"recipientIds.length\" [users]=\"getSelectedUsers()\"\n+┊  ┊21┊                           (groupDetails)=\"addGroup($event)\"></app-new-group-details>\n+┊  ┊22┊  `,\n+┊  ┊23┊  styleUrls: ['new-group.component.scss'],\n+┊  ┊24┊})\n+┊  ┊25┊export class NewGroupComponent implements OnInit {\n+┊  ┊26┊  users: GetUsers.Users[];\n+┊  ┊27┊  recipientIds: string[] = [];\n+┊  ┊28┊\n+┊  ┊29┊  constructor(private router: Router,\n+┊  ┊30┊              private location: Location,\n+┊  ┊31┊              private chatsService: ChatsService) {}\n+┊  ┊32┊\n+┊  ┊33┊  ngOnInit () {\n+┊  ┊34┊    this.chatsService.getUsers().users$.subscribe(users => this.users = users);\n+┊  ┊35┊  }\n+┊  ┊36┊\n+┊  ┊37┊  goBack() {\n+┊  ┊38┊    if (this.recipientIds.length) {\n+┊  ┊39┊      this.recipientIds = [];\n+┊  ┊40┊    } else {\n+┊  ┊41┊      this.location.back();\n+┊  ┊42┊    }\n+┊  ┊43┊  }\n+┊  ┊44┊\n+┊  ┊45┊  selectUsers(recipientIds: string[]) {\n+┊  ┊46┊    this.recipientIds = recipientIds;\n+┊  ┊47┊  }\n+┊  ┊48┊\n+┊  ┊49┊  getSelectedUsers() {\n+┊  ┊50┊    return this.users.filter(user => this.recipientIds.includes(user.id));\n+┊  ┊51┊  }\n+┊  ┊52┊\n+┊  ┊53┊  addGroup(groupName: string) {\n+┊  ┊54┊    if (groupName && this.recipientIds.length) {\n+┊  ┊55┊      this.chatsService.addGroup(this.recipientIds, groupName).subscribe(({data: {addGroup: {id}}}: { data: AddGroup.Mutation }) => {\n+┊  ┊56┊        this.router.navigate(['/chat', id]);\n+┊  ┊57┊      });\n+┊  ┊58┊    }\n+┊  ┊59┊  }\n+┊  ┊60┊}\n```\n\n##### Changed src&#x2F;app&#x2F;services&#x2F;chats.service.ts\n```diff\n@@ -1,34 +1,44 @@\n ┊ 1┊ 1┊import {ApolloQueryResult, MutationOptions, WatchQueryOptions} from 'apollo-client';\n ┊ 2┊ 2┊import {map} from 'rxjs/operators';\n-┊ 3┊  ┊import {Apollo} from 'apollo-angular';\n+┊  ┊ 3┊import {Apollo, QueryRef} from 'apollo-angular';\n ┊ 4┊ 4┊import {Injectable} from '@angular/core';\n ┊ 5┊ 5┊import {getChatsQuery} from '../../graphql/getChats.query';\n-┊ 6┊  ┊import {AddMessage, GetChat, GetChats, RemoveAllMessages, RemoveChat, RemoveMessages} from '../../types';\n+┊  ┊ 6┊import {AddChat, AddGroup, AddMessage, GetChat, GetChats, GetUsers, RemoveAllMessages, RemoveChat, RemoveMessages} from '../../types';\n ┊ 7┊ 7┊import {getChatQuery} from '../../graphql/getChat.query';\n ┊ 8┊ 8┊import {addMessageMutation} from '../../graphql/addMessage.mutation';\n ┊ 9┊ 9┊import {removeChatMutation} from '../../graphql/removeChat.mutation';\n ┊10┊10┊import {DocumentNode} from 'graphql';\n ┊11┊11┊import {removeAllMessagesMutation} from '../../graphql/removeAllMessages.mutation';\n ┊12┊12┊import {removeMessagesMutation} from '../../graphql/removeMessages.mutation';\n+┊  ┊13┊import {getUsersQuery} from '../../graphql/getUsers.query';\n+┊  ┊14┊import {Observable} from 'rxjs';\n+┊  ┊15┊import {addChatMutation} from '../../graphql/addChat.mutation';\n+┊  ┊16┊import {addGroupMutation} from '../../graphql/addGroup.mutation';\n+┊  ┊17┊\n+┊  ┊18┊const currentUserId = '1';\n ┊13┊19┊\n ┊14┊20┊@Injectable()\n ┊15┊21┊export class ChatsService {\n ┊16┊22┊  messagesAmount = 3;\n+┊  ┊23┊  getChatsWq: QueryRef<GetChats.Query>;\n+┊  ┊24┊  chats$: Observable<GetChats.Chats[]>;\n+┊  ┊25┊  chats: GetChats.Chats[];\n ┊17┊26┊\n-┊18┊  ┊  constructor(private apollo: Apollo) {}\n-┊19┊  ┊\n-┊20┊  ┊  getChats() {\n-┊21┊  ┊    const query = this.apollo.watchQuery<GetChats.Query>(<WatchQueryOptions>{\n+┊  ┊27┊  constructor(private apollo: Apollo) {\n+┊  ┊28┊    this.getChatsWq = this.apollo.watchQuery<GetChats.Query>(<WatchQueryOptions>{\n ┊22┊29┊      query: getChatsQuery,\n ┊23┊30┊      variables: {\n ┊24┊31┊        amount: this.messagesAmount,\n ┊25┊32┊      },\n ┊26┊33┊    });\n-┊27┊  ┊    const chats$ = query.valueChanges.pipe(\n+┊  ┊34┊    this.chats$ = this.getChatsWq.valueChanges.pipe(\n ┊28┊35┊      map((result: ApolloQueryResult<GetChats.Query>) => result.data.chats)\n ┊29┊36┊    );\n+┊  ┊37┊    this.chats$.subscribe(chats => this.chats = chats);\n+┊  ┊38┊  }\n ┊30┊39┊\n-┊31┊  ┊    return {query, chats$};\n+┊  ┊40┊  getChats() {\n+┊  ┊41┊    return {query: this.getChatsWq, chats$: this.chats$};\n ┊32┊42┊  }\n ┊33┊43┊\n ┊34┊44┊  getChat(chatId: string) {\n```\n```diff\n@@ -192,4 +202,85 @@\n ┊192┊202┊      },\n ┊193┊203┊    });\n ┊194┊204┊  }\n+┊   ┊205┊\n+┊   ┊206┊  getUsers() {\n+┊   ┊207┊    const query = this.apollo.watchQuery<GetUsers.Query>(<WatchQueryOptions>{\n+┊   ┊208┊      query: getUsersQuery,\n+┊   ┊209┊    });\n+┊   ┊210┊    const users$ = query.valueChanges.pipe(\n+┊   ┊211┊      map((result: ApolloQueryResult<GetUsers.Query>) => result.data.users)\n+┊   ┊212┊    );\n+┊   ┊213┊\n+┊   ┊214┊    return {query, users$};\n+┊   ┊215┊  }\n+┊   ┊216┊\n+┊   ┊217┊  // Checks if the chat is listed for the current user and returns the id\n+┊   ┊218┊  getChatId(recipientId: string) {\n+┊   ┊219┊    const _chat = this.chats.find(chat => {\n+┊   ┊220┊      return !chat.isGroup && !!chat.allTimeMembers.find(user => user.id === currentUserId) &&\n+┊   ┊221┊        !!chat.allTimeMembers.find(user => user.id === recipientId);\n+┊   ┊222┊    });\n+┊   ┊223┊    return _chat ? _chat.id : false;\n+┊   ┊224┊  }\n+┊   ┊225┊\n+┊   ┊226┊  addChat(recipientId: string) {\n+┊   ┊227┊    return this.apollo.mutate({\n+┊   ┊228┊      mutation: addChatMutation,\n+┊   ┊229┊      variables: <AddChat.Variables>{\n+┊   ┊230┊        recipientId,\n+┊   ┊231┊      },\n+┊   ┊232┊      update: (store, { data: { addChat } }) => {\n+┊   ┊233┊        // Read the data from our cache for this query.\n+┊   ┊234┊        const {chats}: GetChats.Query = store.readQuery({\n+┊   ┊235┊          query: getChatsQuery,\n+┊   ┊236┊          variables: <GetChats.Variables>{\n+┊   ┊237┊            amount: this.messagesAmount,\n+┊   ┊238┊          },\n+┊   ┊239┊        });\n+┊   ┊240┊        // Add our comment from the mutation to the end.\n+┊   ┊241┊        chats.push(addChat);\n+┊   ┊242┊        // Write our data back to the cache.\n+┊   ┊243┊        store.writeQuery({\n+┊   ┊244┊          query: getChatsQuery,\n+┊   ┊245┊          variables: <GetChats.Variables>{\n+┊   ┊246┊            amount: this.messagesAmount,\n+┊   ┊247┊          },\n+┊   ┊248┊          data: {\n+┊   ┊249┊            chats,\n+┊   ┊250┊          },\n+┊   ┊251┊        });\n+┊   ┊252┊      },\n+┊   ┊253┊    });\n+┊   ┊254┊  }\n+┊   ┊255┊\n+┊   ┊256┊  addGroup(recipientIds: string[], groupName: string) {\n+┊   ┊257┊    return this.apollo.mutate({\n+┊   ┊258┊      mutation: addGroupMutation,\n+┊   ┊259┊      variables: <AddGroup.Variables>{\n+┊   ┊260┊        recipientIds,\n+┊   ┊261┊        groupName,\n+┊   ┊262┊      },\n+┊   ┊263┊      update: (store, { data: { addGroup } }) => {\n+┊   ┊264┊        // Read the data from our cache for this query.\n+┊   ┊265┊        const {chats}: GetChats.Query = store.readQuery({\n+┊   ┊266┊          query: getChatsQuery,\n+┊   ┊267┊          variables: <GetChats.Variables>{\n+┊   ┊268┊            amount: this.messagesAmount,\n+┊   ┊269┊          },\n+┊   ┊270┊        });\n+┊   ┊271┊        // Add our comment from the mutation to the end.\n+┊   ┊272┊        chats.push(addGroup);\n+┊   ┊273┊        // Write our data back to the cache.\n+┊   ┊274┊        store.writeQuery({\n+┊   ┊275┊          query: getChatsQuery,\n+┊   ┊276┊          variables: <GetChats.Variables>{\n+┊   ┊277┊            amount: this.messagesAmount,\n+┊   ┊278┊          },\n+┊   ┊279┊          data: {\n+┊   ┊280┊            chats,\n+┊   ┊281┊          },\n+┊   ┊282┊        });\n+┊   ┊283┊      },\n+┊   ┊284┊    });\n+┊   ┊285┊  }\n ┊195┊286┊}\n```\n\n[}]: #\n\nFinally we should update our tests:\n\n[{]: <helper> (diffStep \"8.1\" files=\"src/app/chat-viewer/containers/chat/chat.component.spec.ts\" module=\"client\")\n\n#### Step 8.1: New chats and groups\n\n##### Changed src&#x2F;app&#x2F;chat-viewer&#x2F;containers&#x2F;chat&#x2F;chat.component.spec.ts\n```diff\n@@ -144,7 +144,8 @@\n ┊144┊144┊    fixture = TestBed.createComponent(ChatComponent);\n ┊145┊145┊    component = fixture.componentInstance;\n ┊146┊146┊    fixture.detectChanges();\n-┊147┊   ┊    const req = httpMock.expectOne('http://localhost:3000/graphql', 'call to api');\n+┊   ┊147┊    httpMock.expectOne(httpReq => httpReq.body.operationName === 'GetChats', 'call to getChats api');\n+┊   ┊148┊    const req = httpMock.expectOne(httpReq => httpReq.body.operationName === 'GetChat', 'call to getChat api');\n ┊148┊149┊    req.flush({\n ┊149┊150┊      data: {\n ┊150┊151┊        chat\n```\n\n[}]: #"
          },
          {
            "manualTitle": "Step 13: Zero latency on slow 3g networks",
            "stepRevision": "db273fc21d1316b6264d55cfb2d672436634a655",
            "manualView": "## Client\n\nNow let's start our client in production mode:\n\n    $ ng serve --prod\n\nNow open the Chrome Developers Tools and, in the Network tab, select 'Slow 3G Network' and 'Disable cache'.\nNow refresh the page and look at the DOMContentLoaded time and at the transferred size. You'll notice that our bundle size is quite small and so the loads time.\nNow let's click on a specific chat. It will take some time to load the data. Now let's add a new message. Once again it will take some time to load the data. We could also create a new chat and the result would be the same. The whole app doesn't\nfeel as snappier as the real Whatsapp on a slow 3G Network.\n\"That's normal, it's a web application with a remote db while Whatsapp is a native app with a local database...\"\nThat's just an excuse, because we can do as good as Whatsapp thanks to Apollo!\n\nLet's install `moment`, we will soon need it:\n\n    $ npm install moment\n\nLet's start by making our UI optimistic. We can predict most of the response we will get from our server, except for a few things like `id` of newly created messages. But since we don't really need that id, we can simply generate a fake one\nwhich will be later overridden once we get the response from the server:\n\n[{]: <helper> (diffStep \"9.1\" files=\"^\\(?!package.json$\\).*\" module=\"client\")\n\n#### Step 9.1: Optimistic updates\n\n##### Changed src&#x2F;app&#x2F;chats-creation&#x2F;containers&#x2F;new-chat&#x2F;new-chat.component.ts\n```diff\n@@ -51,7 +51,7 @@\n ┊51┊51┊      // Chat is already listed for the current user\n ┊52┊52┊      this.router.navigate(['/chat', chatId]);\n ┊53┊53┊    } else {\n-┊54┊  ┊      this.chatsService.addChat(recipientId).subscribe(({data: {addChat: {id}}}: { data: AddChat.Mutation }) => {\n+┊  ┊54┊      this.chatsService.addChat(recipientId, this.users).subscribe(({data: {addChat: {id}}}: { data: AddChat.Mutation }) => {\n ┊55┊55┊        this.router.navigate(['/chat', id]);\n ┊56┊56┊      });\n ┊57┊57┊    }\n```\n\n##### Changed src&#x2F;app&#x2F;services&#x2F;chats.service.ts\n```diff\n@@ -14,8 +14,10 @@\n ┊14┊14┊import {Observable} from 'rxjs';\n ┊15┊15┊import {addChatMutation} from '../../graphql/addChat.mutation';\n ┊16┊16┊import {addGroupMutation} from '../../graphql/addGroup.mutation';\n+┊  ┊17┊import * as moment from 'moment';\n ┊17┊18┊\n ┊18┊19┊const currentUserId = '1';\n+┊  ┊20┊const currentUserName = 'Ethan Gonzalez';\n ┊19┊21┊\n ┊20┊22┊@Injectable()\n ┊21┊23┊export class ChatsService {\n```\n```diff\n@@ -37,6 +39,10 @@\n ┊37┊39┊    this.chats$.subscribe(chats => this.chats = chats);\n ┊38┊40┊  }\n ┊39┊41┊\n+┊  ┊42┊  static getRandomId() {\n+┊  ┊43┊    return String(Math.round(Math.random() * 1000000000000));\n+┊  ┊44┊  }\n+┊  ┊45┊\n ┊40┊46┊  getChats() {\n ┊41┊47┊    return {query: this.getChatsWq, chats$: this.chats$};\n ┊42┊48┊  }\n```\n```diff\n@@ -63,6 +69,24 @@\n ┊63┊69┊        chatId,\n ┊64┊70┊        content,\n ┊65┊71┊      },\n+┊  ┊72┊      optimisticResponse: {\n+┊  ┊73┊        __typename: 'Mutation',\n+┊  ┊74┊        addMessage: {\n+┊  ┊75┊          id: ChatsService.getRandomId(),\n+┊  ┊76┊          __typename: 'Message',\n+┊  ┊77┊          senderId: currentUserId,\n+┊  ┊78┊          sender: {\n+┊  ┊79┊            id: currentUserId,\n+┊  ┊80┊            __typename: 'User',\n+┊  ┊81┊            name: currentUserName,\n+┊  ┊82┊          },\n+┊  ┊83┊          content,\n+┊  ┊84┊          createdAt: moment().unix(),\n+┊  ┊85┊          type: 0,\n+┊  ┊86┊          recipients: [],\n+┊  ┊87┊          ownership: true,\n+┊  ┊88┊        },\n+┊  ┊89┊      },\n ┊66┊90┊      update: (store, { data: { addMessage } }: {data: AddMessage.Mutation}) => {\n ┊67┊91┊        // Update the messages cache\n ┊68┊92┊        {\n```\n```diff\n@@ -109,6 +133,10 @@\n ┊109┊133┊      variables: <RemoveChat.Variables>{\n ┊110┊134┊        chatId,\n ┊111┊135┊      },\n+┊   ┊136┊      optimisticResponse: {\n+┊   ┊137┊        __typename: 'Mutation',\n+┊   ┊138┊        removeChat: chatId,\n+┊   ┊139┊      },\n ┊112┊140┊      update: (store, { data: { removeChat } }) => {\n ┊113┊141┊        // Read the data from our cache for this query.\n ┊114┊142┊        const {chats}: GetChats.Query = store.readQuery({\n```\n```diff\n@@ -155,6 +183,10 @@\n ┊155┊183┊    return this.apollo.mutate(<MutationOptions>{\n ┊156┊184┊      mutation,\n ┊157┊185┊      variables,\n+┊   ┊186┊      optimisticResponse: {\n+┊   ┊187┊        __typename: 'Mutation',\n+┊   ┊188┊        removeMessages: ids,\n+┊   ┊189┊      },\n ┊158┊190┊      update: (store, { data: { removeMessages } }: {data: RemoveMessages.Mutation | RemoveAllMessages.Mutation}) => {\n ┊159┊191┊        // Update the messages cache\n ┊160┊192┊        {\n```\n```diff\n@@ -223,12 +255,34 @@\n ┊223┊255┊    return _chat ? _chat.id : false;\n ┊224┊256┊  }\n ┊225┊257┊\n-┊226┊   ┊  addChat(recipientId: string) {\n+┊   ┊258┊  addChat(recipientId: string, users: GetUsers.Users[]) {\n ┊227┊259┊    return this.apollo.mutate({\n ┊228┊260┊      mutation: addChatMutation,\n ┊229┊261┊      variables: <AddChat.Variables>{\n ┊230┊262┊        recipientId,\n ┊231┊263┊      },\n+┊   ┊264┊      optimisticResponse: {\n+┊   ┊265┊        __typename: 'Mutation',\n+┊   ┊266┊        addChat: {\n+┊   ┊267┊          id: ChatsService.getRandomId(),\n+┊   ┊268┊          __typename: 'Chat',\n+┊   ┊269┊          name: users.find(user => user.id === recipientId).name,\n+┊   ┊270┊          picture: users.find(user => user.id === recipientId).picture,\n+┊   ┊271┊          allTimeMembers: [\n+┊   ┊272┊            {\n+┊   ┊273┊              id: currentUserId,\n+┊   ┊274┊              __typename: 'User',\n+┊   ┊275┊            },\n+┊   ┊276┊            {\n+┊   ┊277┊              id: recipientId,\n+┊   ┊278┊              __typename: 'User',\n+┊   ┊279┊            }\n+┊   ┊280┊          ],\n+┊   ┊281┊          unreadMessages: 0,\n+┊   ┊282┊          messages: [],\n+┊   ┊283┊          isGroup: false,\n+┊   ┊284┊        },\n+┊   ┊285┊      },\n ┊232┊286┊      update: (store, { data: { addChat } }) => {\n ┊233┊287┊        // Read the data from our cache for this query.\n ┊234┊288┊        const {chats}: GetChats.Query = store.readQuery({\n```\n```diff\n@@ -260,6 +314,26 @@\n ┊260┊314┊        recipientIds,\n ┊261┊315┊        groupName,\n ┊262┊316┊      },\n+┊   ┊317┊      optimisticResponse: {\n+┊   ┊318┊        __typename: 'Mutation',\n+┊   ┊319┊        addGroup: {\n+┊   ┊320┊          id: ChatsService.getRandomId(),\n+┊   ┊321┊          __typename: 'Chat',\n+┊   ┊322┊          name: groupName,\n+┊   ┊323┊          picture: 'https://randomuser.me/api/portraits/thumb/lego/1.jpg',\n+┊   ┊324┊          userIds: [currentUserId, recipientIds],\n+┊   ┊325┊          allTimeMembers: [\n+┊   ┊326┊            {\n+┊   ┊327┊              id: currentUserId,\n+┊   ┊328┊              __typename: 'User',\n+┊   ┊329┊            },\n+┊   ┊330┊            ...recipientIds.map(id => ({id, __typename: 'User'})),\n+┊   ┊331┊          ],\n+┊   ┊332┊          unreadMessages: 0,\n+┊   ┊333┊          messages: [],\n+┊   ┊334┊          isGroup: true,\n+┊   ┊335┊        },\n+┊   ┊336┊      },\n ┊263┊337┊      update: (store, { data: { addGroup } }) => {\n ┊264┊338┊        // Read the data from our cache for this query.\n ┊265┊339┊        const {chats}: GetChats.Query = store.readQuery({\n```\n\n[}]: #\n\nWhen we open a specific chat we can also preload some data from our chats list cache while waiting for the server response. We will initially be able to show only the chat name, the last message or the last few messages and a few more informations instead of the whole content from the server, but that would be more than enough to entertain the user while waiting for the server response:\n\n[{]: <helper> (diffStep \"9.2\" module=\"client\")\n\n#### Step 9.2: Get chat data from chats cache while waiting for server response\n\n##### Changed src&#x2F;app&#x2F;services&#x2F;chats.service.ts\n```diff\n@@ -1,5 +1,5 @@\n ┊1┊1┊import {ApolloQueryResult, MutationOptions, WatchQueryOptions} from 'apollo-client';\n-┊2┊ ┊import {map} from 'rxjs/operators';\n+┊ ┊2┊import {concat, map} from 'rxjs/operators';\n ┊3┊3┊import {Apollo, QueryRef} from 'apollo-angular';\n ┊4┊4┊import {Injectable} from '@angular/core';\n ┊5┊5┊import {getChatsQuery} from '../../graphql/getChats.query';\n```\n```diff\n@@ -11,7 +11,7 @@\n ┊11┊11┊import {removeAllMessagesMutation} from '../../graphql/removeAllMessages.mutation';\n ┊12┊12┊import {removeMessagesMutation} from '../../graphql/removeMessages.mutation';\n ┊13┊13┊import {getUsersQuery} from '../../graphql/getUsers.query';\n-┊14┊  ┊import {Observable} from 'rxjs';\n+┊  ┊14┊import {Observable, AsyncSubject, of} from 'rxjs';\n ┊15┊15┊import {addChatMutation} from '../../graphql/addChat.mutation';\n ┊16┊16┊import {addGroupMutation} from '../../graphql/addGroup.mutation';\n ┊17┊17┊import * as moment from 'moment';\n```\n```diff\n@@ -25,6 +25,7 @@\n ┊25┊25┊  getChatsWq: QueryRef<GetChats.Query>;\n ┊26┊26┊  chats$: Observable<GetChats.Chats[]>;\n ┊27┊27┊  chats: GetChats.Chats[];\n+┊  ┊28┊  getChatWqSubject: AsyncSubject<QueryRef<GetChat.Query>>;\n ┊28┊29┊\n ┊29┊30┊  constructor(private apollo: Apollo) {\n ┊30┊31┊    this.getChatsWq = this.apollo.watchQuery<GetChats.Query>(<WatchQueryOptions>{\n```\n```diff\n@@ -48,18 +49,34 @@\n ┊48┊49┊  }\n ┊49┊50┊\n ┊50┊51┊  getChat(chatId: string) {\n+┊  ┊52┊    const _chat = this.chats && this.chats.find(chat => chat.id === chatId) || {\n+┊  ┊53┊      id: chatId,\n+┊  ┊54┊      name: '',\n+┊  ┊55┊      picture: null,\n+┊  ┊56┊      allTimeMembers: [],\n+┊  ┊57┊      unreadMessages: 0,\n+┊  ┊58┊      isGroup: false,\n+┊  ┊59┊      messages: [],\n+┊  ┊60┊    };\n+┊  ┊61┊    const chat$FromCache = of<GetChat.Chat>(_chat);\n+┊  ┊62┊\n ┊51┊63┊    const query = this.apollo.watchQuery<GetChat.Query>({\n ┊52┊64┊      query: getChatQuery,\n ┊53┊65┊      variables: {\n-┊54┊  ┊        chatId: chatId,\n+┊  ┊66┊        chatId,\n ┊55┊67┊      }\n ┊56┊68┊    });\n ┊57┊69┊\n-┊58┊  ┊    const chat$ = query.valueChanges.pipe(\n-┊59┊  ┊      map((result: ApolloQueryResult<GetChat.Query>) => result.data.chat)\n-┊60┊  ┊    );\n+┊  ┊70┊    const chat$ = chat$FromCache.pipe(\n+┊  ┊71┊      concat(query.valueChanges.pipe(\n+┊  ┊72┊        map((result: ApolloQueryResult<GetChat.Query>) => result.data.chat)\n+┊  ┊73┊      )));\n+┊  ┊74┊\n+┊  ┊75┊    this.getChatWqSubject = new AsyncSubject();\n+┊  ┊76┊    this.getChatWqSubject.next(query);\n+┊  ┊77┊    this.getChatWqSubject.complete();\n ┊61┊78┊\n-┊62┊  ┊    return {query, chat$};\n+┊  ┊79┊    return {query$: this.getChatWqSubject.asObservable(), chat$};\n ┊63┊80┊  }\n ┊64┊81┊\n ┊65┊82┊  addMessage(chatId: string, content: string) {\n```\n\n[}]: #\n\nNow let's deal with the most difficult part: what about chats creation? We cannot predict the `id` of the new chat and so we cannot navigate to the chat page because it contains the chat id in the url. We could simply navigate to the \"optimistic\" id, but then the user wouldn't be able to reach that url if he refreshes the page or bookmarks it. That's a problem we care about. How to solve it? We're going to create a landing page and we will later override the url once we get the response from the server!\n\n[{]: <helper> (diffStep \"9.3\" module=\"client\")\n\n#### Step 9.3: Landing page for new chats/groups\n\n##### Changed src&#x2F;app&#x2F;chat-viewer&#x2F;containers&#x2F;chat&#x2F;chat.component.spec.ts\n```diff\n@@ -116,7 +116,10 @@\n ┊116┊116┊        Apollo,\n ┊117┊117┊        {\n ┊118┊118┊          provide: ActivatedRoute,\n-┊119┊   ┊          useValue: { params: of({ id: chat.id }) }\n+┊   ┊119┊          useValue: {\n+┊   ┊120┊            params: of({ id: chat.id }),\n+┊   ┊121┊            queryParams: of({}),\n+┊   ┊122┊          }\n ┊120┊123┊        }\n ┊121┊124┊      ],\n ┊122┊125┊      schemas: [NO_ERRORS_SCHEMA]\n```\n\n##### Changed src&#x2F;app&#x2F;chat-viewer&#x2F;containers&#x2F;chat&#x2F;chat.component.ts\n```diff\n@@ -2,6 +2,8 @@\n ┊2┊2┊import {ActivatedRoute, Router} from '@angular/router';\n ┊3┊3┊import {ChatsService} from '../../../services/chats.service';\n ┊4┊4┊import {GetChat} from '../../../../types';\n+┊ ┊5┊import {combineLatest} from 'rxjs';\n+┊ ┊6┊import {Location} from '@angular/common';\n ┊5┊7┊\n ┊6┊8┊@Component({\n ┊7┊9┊  template: `\n```\n```diff\n@@ -26,21 +28,40 @@\n ┊26┊28┊  messages: GetChat.Messages[];\n ┊27┊29┊  name: string;\n ┊28┊30┊  isGroup: boolean;\n+┊  ┊31┊  optimisticUI: boolean;\n ┊29┊32┊\n ┊30┊33┊  constructor(private route: ActivatedRoute,\n ┊31┊34┊              private router: Router,\n+┊  ┊35┊              private location: Location,\n ┊32┊36┊              private chatsService: ChatsService) {\n ┊33┊37┊  }\n ┊34┊38┊\n ┊35┊39┊  ngOnInit() {\n-┊36┊  ┊    this.route.params.subscribe(({id: chatId}) => {\n-┊37┊  ┊      this.chatId = chatId;\n-┊38┊  ┊      this.chatsService.getChat(chatId).chat$.subscribe(chat => {\n-┊39┊  ┊        this.messages = chat.messages;\n-┊40┊  ┊        this.name = chat.name;\n-┊41┊  ┊        this.isGroup = chat.isGroup;\n+┊  ┊40┊    combineLatest(this.route.params, this.route.queryParams,\n+┊  ┊41┊      (params: { id: string }, queryParams: { oui?: boolean }) => ({params, queryParams}))\n+┊  ┊42┊      .subscribe(({params: {id: chatId}, queryParams: {oui}}) => {\n+┊  ┊43┊        this.chatId = chatId;\n+┊  ┊44┊\n+┊  ┊45┊        this.optimisticUI = oui;\n+┊  ┊46┊\n+┊  ┊47┊        if (this.optimisticUI) {\n+┊  ┊48┊          // We are using fake IDs generated by the Optimistic UI\n+┊  ┊49┊          this.chatsService.addChat$.subscribe(({data: {addChat, addGroup}}) => {\n+┊  ┊50┊            this.chatId = addChat ? addChat.id : addGroup.id;\n+┊  ┊51┊            console.log(`Switching from the Optimistic UI id ${chatId} to ${this.chatId}`);\n+┊  ┊52┊            // Rewrite the URL\n+┊  ┊53┊            this.location.go(`chat/${this.chatId}`);\n+┊  ┊54┊            // Optimistic UI no more\n+┊  ┊55┊            this.optimisticUI = false;\n+┊  ┊56┊          });\n+┊  ┊57┊        }\n+┊  ┊58┊\n+┊  ┊59┊        this.chatsService.getChat(chatId, this.optimisticUI).chat$.subscribe(chat => {\n+┊  ┊60┊          this.messages = chat.messages;\n+┊  ┊61┊          this.name = chat.name;\n+┊  ┊62┊          this.isGroup = chat.isGroup;\n+┊  ┊63┊        });\n ┊42┊64┊      });\n-┊43┊  ┊    });\n ┊44┊65┊  }\n ┊45┊66┊\n ┊46┊67┊  goToChats() {\n```\n\n##### Changed src&#x2F;app&#x2F;chats-creation&#x2F;containers&#x2F;new-chat&#x2F;new-chat.component.ts\n```diff\n@@ -51,9 +51,10 @@\n ┊51┊51┊      // Chat is already listed for the current user\n ┊52┊52┊      this.router.navigate(['/chat', chatId]);\n ┊53┊53┊    } else {\n-┊54┊  ┊      this.chatsService.addChat(recipientId, this.users).subscribe(({data: {addChat: {id}}}: { data: AddChat.Mutation }) => {\n-┊55┊  ┊        this.router.navigate(['/chat', id]);\n-┊56┊  ┊      });\n+┊  ┊54┊      // Generate id for Optimistic UI\n+┊  ┊55┊      const ouiId = ChatsService.getRandomId();\n+┊  ┊56┊      this.chatsService.addChat(recipientId, this.users, ouiId).subscribe();\n+┊  ┊57┊      this.router.navigate(['/chat', ouiId], {queryParams: {oui: true}, skipLocationChange: true});\n ┊57┊58┊    }\n ┊58┊59┊  }\n ┊59┊60┊}\n```\n\n##### Changed src&#x2F;app&#x2F;chats-creation&#x2F;containers&#x2F;new-group&#x2F;new-group.component.ts\n```diff\n@@ -52,9 +52,9 @@\n ┊52┊52┊\n ┊53┊53┊  addGroup(groupName: string) {\n ┊54┊54┊    if (groupName && this.recipientIds.length) {\n-┊55┊  ┊      this.chatsService.addGroup(this.recipientIds, groupName).subscribe(({data: {addGroup: {id}}}: { data: AddGroup.Mutation }) => {\n-┊56┊  ┊        this.router.navigate(['/chat', id]);\n-┊57┊  ┊      });\n+┊  ┊55┊      const ouiId = ChatsService.getRandomId();\n+┊  ┊56┊      this.chatsService.addGroup(this.recipientIds, groupName, ouiId).subscribe();\n+┊  ┊57┊      this.router.navigate(['/chat', ouiId], {queryParams: {oui: true}, skipLocationChange: true});\n ┊58┊58┊    }\n ┊59┊59┊  }\n ┊60┊60┊}\n```\n\n##### Changed src&#x2F;app&#x2F;services&#x2F;chats.service.ts\n```diff\n@@ -1,5 +1,5 @@\n ┊1┊1┊import {ApolloQueryResult, MutationOptions, WatchQueryOptions} from 'apollo-client';\n-┊2┊ ┊import {concat, map} from 'rxjs/operators';\n+┊ ┊2┊import {concat, map, share, switchMap} from 'rxjs/operators';\n ┊3┊3┊import {Apollo, QueryRef} from 'apollo-angular';\n ┊4┊4┊import {Injectable} from '@angular/core';\n ┊5┊5┊import {getChatsQuery} from '../../graphql/getChats.query';\n```\n```diff\n@@ -15,6 +15,7 @@\n ┊15┊15┊import {addChatMutation} from '../../graphql/addChat.mutation';\n ┊16┊16┊import {addGroupMutation} from '../../graphql/addGroup.mutation';\n ┊17┊17┊import * as moment from 'moment';\n+┊  ┊18┊import {FetchResult} from 'apollo-link';\n ┊18┊19┊\n ┊19┊20┊const currentUserId = '1';\n ┊20┊21┊const currentUserName = 'Ethan Gonzalez';\n```\n```diff\n@@ -26,6 +27,7 @@\n ┊26┊27┊  chats$: Observable<GetChats.Chats[]>;\n ┊27┊28┊  chats: GetChats.Chats[];\n ┊28┊29┊  getChatWqSubject: AsyncSubject<QueryRef<GetChat.Query>>;\n+┊  ┊30┊  addChat$: Observable<FetchResult<AddChat.Mutation | AddGroup.Mutation>>;\n ┊29┊31┊\n ┊30┊32┊  constructor(private apollo: Apollo) {\n ┊31┊33┊    this.getChatsWq = this.apollo.watchQuery<GetChats.Query>(<WatchQueryOptions>{\n```\n```diff\n@@ -48,7 +50,7 @@\n ┊48┊50┊    return {query: this.getChatsWq, chats$: this.chats$};\n ┊49┊51┊  }\n ┊50┊52┊\n-┊51┊  ┊  getChat(chatId: string) {\n+┊  ┊53┊  getChat(chatId: string, oui?: boolean) {\n ┊52┊54┊    const _chat = this.chats && this.chats.find(chat => chat.id === chatId) || {\n ┊53┊55┊      id: chatId,\n ┊54┊56┊      name: '',\n```\n```diff\n@@ -60,21 +62,39 @@\n ┊ 60┊ 62┊    };\n ┊ 61┊ 63┊    const chat$FromCache = of<GetChat.Chat>(_chat);\n ┊ 62┊ 64┊\n-┊ 63┊   ┊    const query = this.apollo.watchQuery<GetChat.Query>({\n-┊ 64┊   ┊      query: getChatQuery,\n-┊ 65┊   ┊      variables: {\n-┊ 66┊   ┊        chatId,\n-┊ 67┊   ┊      }\n-┊ 68┊   ┊    });\n-┊ 69┊   ┊\n-┊ 70┊   ┊    const chat$ = chat$FromCache.pipe(\n-┊ 71┊   ┊      concat(query.valueChanges.pipe(\n-┊ 72┊   ┊        map((result: ApolloQueryResult<GetChat.Query>) => result.data.chat)\n-┊ 73┊   ┊      )));\n+┊   ┊ 65┊    const getApolloWatchQuery = (id: string) => {\n+┊   ┊ 66┊      return this.apollo.watchQuery<GetChat.Query>({\n+┊   ┊ 67┊        query: getChatQuery,\n+┊   ┊ 68┊        variables: {\n+┊   ┊ 69┊          chatId: id,\n+┊   ┊ 70┊        }\n+┊   ┊ 71┊      });\n+┊   ┊ 72┊    };\n ┊ 74┊ 73┊\n+┊   ┊ 74┊    let chat$: Observable<GetChat.Chat>;\n ┊ 75┊ 75┊    this.getChatWqSubject = new AsyncSubject();\n-┊ 76┊   ┊    this.getChatWqSubject.next(query);\n-┊ 77┊   ┊    this.getChatWqSubject.complete();\n+┊   ┊ 76┊\n+┊   ┊ 77┊    if (oui) {\n+┊   ┊ 78┊      chat$ = chat$FromCache.pipe(\n+┊   ┊ 79┊        concat(this.addChat$.pipe(\n+┊   ┊ 80┊          switchMap(({ data: { addChat, addGroup } }) => {\n+┊   ┊ 81┊            const query = getApolloWatchQuery(addChat ? addChat.id : addGroup.id);\n+┊   ┊ 82┊            this.getChatWqSubject.next(query);\n+┊   ┊ 83┊            this.getChatWqSubject.complete();\n+┊   ┊ 84┊            return query.valueChanges.pipe(\n+┊   ┊ 85┊              map((result: ApolloQueryResult<GetChat.Query>) => result.data.chat)\n+┊   ┊ 86┊            );\n+┊   ┊ 87┊          }))\n+┊   ┊ 88┊        ));\n+┊   ┊ 89┊    } else {\n+┊   ┊ 90┊      const query = getApolloWatchQuery(chatId);\n+┊   ┊ 91┊      this.getChatWqSubject.next(query);\n+┊   ┊ 92┊      this.getChatWqSubject.complete();\n+┊   ┊ 93┊      chat$ = chat$FromCache.pipe(\n+┊   ┊ 94┊        concat(query.valueChanges.pipe(\n+┊   ┊ 95┊          map((result: ApolloQueryResult<GetChat.Query>) => result.data.chat)\n+┊   ┊ 96┊        )));\n+┊   ┊ 97┊    }\n ┊ 78┊ 98┊\n ┊ 79┊ 99┊    return {query$: this.getChatWqSubject.asObservable(), chat$};\n ┊ 80┊100┊  }\n```\n```diff\n@@ -272,8 +292,8 @@\n ┊272┊292┊    return _chat ? _chat.id : false;\n ┊273┊293┊  }\n ┊274┊294┊\n-┊275┊   ┊  addChat(recipientId: string, users: GetUsers.Users[]) {\n-┊276┊   ┊    return this.apollo.mutate({\n+┊   ┊295┊  addChat(recipientId: string, users: GetUsers.Users[], ouiId: string) {\n+┊   ┊296┊    this.addChat$ = this.apollo.mutate({\n ┊277┊297┊      mutation: addChatMutation,\n ┊278┊298┊      variables: <AddChat.Variables>{\n ┊279┊299┊        recipientId,\n```\n```diff\n@@ -281,7 +301,7 @@\n ┊281┊301┊      optimisticResponse: {\n ┊282┊302┊        __typename: 'Mutation',\n ┊283┊303┊        addChat: {\n-┊284┊   ┊          id: ChatsService.getRandomId(),\n+┊   ┊304┊          id: ouiId,\n ┊285┊305┊          __typename: 'Chat',\n ┊286┊306┊          name: users.find(user => user.id === recipientId).name,\n ┊287┊307┊          picture: users.find(user => user.id === recipientId).picture,\n```\n```diff\n@@ -321,11 +341,12 @@\n ┊321┊341┊          },\n ┊322┊342┊        });\n ┊323┊343┊      },\n-┊324┊   ┊    });\n+┊   ┊344┊    }).pipe(share());\n+┊   ┊345┊    return this.addChat$;\n ┊325┊346┊  }\n ┊326┊347┊\n-┊327┊   ┊  addGroup(recipientIds: string[], groupName: string) {\n-┊328┊   ┊    return this.apollo.mutate({\n+┊   ┊348┊  addGroup(recipientIds: string[], groupName: string, ouiId: string) {\n+┊   ┊349┊    this.addChat$ = this.apollo.mutate({\n ┊329┊350┊      mutation: addGroupMutation,\n ┊330┊351┊      variables: <AddGroup.Variables>{\n ┊331┊352┊        recipientIds,\n```\n```diff\n@@ -334,7 +355,7 @@\n ┊334┊355┊      optimisticResponse: {\n ┊335┊356┊        __typename: 'Mutation',\n ┊336┊357┊        addGroup: {\n-┊337┊   ┊          id: ChatsService.getRandomId(),\n+┊   ┊358┊          id: ouiId,\n ┊338┊359┊          __typename: 'Chat',\n ┊339┊360┊          name: groupName,\n ┊340┊361┊          picture: 'https://randomuser.me/api/portraits/thumb/lego/1.jpg',\n```\n```diff\n@@ -372,6 +393,7 @@\n ┊372┊393┊          },\n ┊373┊394┊        });\n ┊374┊395┊      },\n-┊375┊   ┊    });\n+┊   ┊396┊    }).pipe(share());\n+┊   ┊397┊    return this.addChat$;\n ┊376┊398┊  }\n ┊377┊399┊}\n```\n\n[}]: #"
          },
          {
            "manualTitle": "Step 14: Authentication",
            "stepRevision": "a35c0a7c78e96333e22f7f9e2be2960079660d00",
            "manualView": "## Server\n\nAuthentication is an hot topic in the GraphQL world and there are some projects which aim at authenticating through GraphQL.\nSince often you will be required to use a specific auth framework (because of a feature you need or because of an existing authorization infrastructure) I will show you how to use a classic REST API framework within your GraphQL application.\nThis approach is completely fine and in line with the official GraphQL best practices.\nWe will use `Passport` for the authentication and `BasicAuth` as the auth mechanism:\n\n    npm install bcrypt-nodejs passport passport-http\n    npm install --save-dev @types/bcrypt-nodejs @types/passport @types/passport-http\n\n`BasicAuth` basically involves to send username e password in an Authorization Header together with each request and is fully supported by any browser (meaning that we will be able to use `Graphiql` simply by proving username and password in the login window provided by the browser itself).\nIt's the most simple auth mechanism but it's completely fine for our needs. Later we could decide to use something more complicated like `JWT`, but it's outside of the scope of this tutorial.\n\n[{]: <helper> (diffStep \"4.1\" files=\"index.ts\" module=\"server\")\n\n#### Step 4.1: Authentication\n\n##### Changed index.ts\n```diff\n@@ -3,6 +3,47 @@\n ┊ 3┊ 3┊import * as cors from 'cors';\n ┊ 4┊ 4┊import * as express from 'express';\n ┊ 5┊ 5┊import { graphiqlExpress, graphqlExpress } from \"apollo-server-express\";\n+┊  ┊ 6┊import * as passport from \"passport\";\n+┊  ┊ 7┊import * as basicStrategy from 'passport-http';\n+┊  ┊ 8┊import * as bcrypt from 'bcrypt-nodejs';\n+┊  ┊ 9┊import { db, User } from \"./db\";\n+┊  ┊10┊\n+┊  ┊11┊let users = db.users;\n+┊  ┊12┊\n+┊  ┊13┊function generateHash(password: string) {\n+┊  ┊14┊  return bcrypt.hashSync(password, bcrypt.genSaltSync(8));\n+┊  ┊15┊}\n+┊  ┊16┊\n+┊  ┊17┊function validPassword(password: string, localPassword: string) {\n+┊  ┊18┊  return bcrypt.compareSync(password, localPassword);\n+┊  ┊19┊}\n+┊  ┊20┊\n+┊  ┊21┊passport.use('basic-signin', new basicStrategy.BasicStrategy(\n+┊  ┊22┊  function (username, password, done) {\n+┊  ┊23┊    const user = users.find(user => user.username == username);\n+┊  ┊24┊    if (user && validPassword(password, user.password)) {\n+┊  ┊25┊      return done(null, user);\n+┊  ┊26┊    }\n+┊  ┊27┊    return done(null, false);\n+┊  ┊28┊  }\n+┊  ┊29┊));\n+┊  ┊30┊\n+┊  ┊31┊passport.use('basic-signup', new basicStrategy.BasicStrategy({passReqToCallback: true},\n+┊  ┊32┊  function (req: any, username: any, password: any, done: any) {\n+┊  ┊33┊    const userExists = !!users.find(user => user.username === username);\n+┊  ┊34┊    if (!userExists && password && req.body.name) {\n+┊  ┊35┊      const user: User = {\n+┊  ┊36┊        id: (users.length && users[users.length - 1].id + 1) || 1,\n+┊  ┊37┊        username,\n+┊  ┊38┊        password: generateHash(password),\n+┊  ┊39┊        name: req.body.name,\n+┊  ┊40┊      };\n+┊  ┊41┊      users.push(user);\n+┊  ┊42┊      return done(null, user);\n+┊  ┊43┊    }\n+┊  ┊44┊    return done(null, false);\n+┊  ┊45┊  }\n+┊  ┊46┊));\n ┊ 6┊47┊\n ┊ 7┊48┊const PORT = 3000;\n ┊ 8┊49┊\n```\n```diff\n@@ -10,10 +51,25 @@\n ┊10┊51┊\n ┊11┊52┊app.use(cors());\n ┊12┊53┊app.use(bodyParser.json());\n+┊  ┊54┊app.use(passport.initialize());\n+┊  ┊55┊\n+┊  ┊56┊app.post('/signup',\n+┊  ┊57┊  passport.authenticate('basic-signup', {session: false}),\n+┊  ┊58┊  function (req, res) {\n+┊  ┊59┊    res.json(req.user);\n+┊  ┊60┊  });\n+┊  ┊61┊\n+┊  ┊62┊app.use(passport.authenticate('basic-signin', {session: false}));\n+┊  ┊63┊\n+┊  ┊64┊app.post('/signin', function (req, res) {\n+┊  ┊65┊  res.json(req.user);\n+┊  ┊66┊});\n ┊13┊67┊\n ┊14┊68┊app.use('/graphql', graphqlExpress(req => ({\n ┊15┊69┊  schema: schema,\n-┊16┊  ┊  context: req,\n+┊  ┊70┊  context: {\n+┊  ┊71┊    user: req!['user'],\n+┊  ┊72┊  },\n ┊17┊73┊})));\n ┊18┊74┊\n ┊19┊75┊app.use('/graphiql', graphiqlExpress({\n```\n\n[}]: #\n\nWe are going to store hashes instead of plain passwords, that's why we're using `bcrypt-nodejs`.\nWith `passport.use('basic-signin')` and `passport.use('basic-signup')` we define how the auth framework deals with our database (well, our JSON file for the moment).\n`app.post('/signup')` is the endpoint for creating new accounts, so we left it out of the authentication middleware (`app.use(passport.authenticate('basic-signin')`).\nWhat's of particular interest is that we're passing the user object to the GraphQL context.\n\n[{]: <helper> (diffStep \"4.1\" files=\"schema/resolvers.ts\" module=\"server\")\n\n#### Step 4.1: Authentication\n\n##### Changed schema&#x2F;resolvers.ts\n```diff\n@@ -8,29 +8,28 @@\n ┊ 8┊ 8┊\n ┊ 9┊ 9┊let users = db.users;\n ┊10┊10┊let chats = db.chats;\n-┊11┊  ┊const currentUser = 1;\n ┊12┊11┊\n ┊13┊12┊export const resolvers: IResolvers = {\n ┊14┊13┊  Query: {\n ┊15┊14┊    // Show all users for the moment.\n-┊16┊  ┊    users: (): User[] => users.filter(user => user.id !== currentUser),\n-┊17┊  ┊    chats: (): Chat[] => chats.filter(chat => chat.listingMemberIds.includes(currentUser)),\n+┊  ┊15┊    users: (obj: any, args: any, {user: currentUser}: {user: User}): User[] => users.filter(user => user.id !== currentUser.id),\n+┊  ┊16┊    chats: (obj: any, args: any, {user: currentUser}: {user: User}): Chat[] => chats.filter(chat => chat.listingMemberIds.includes(currentUser.id)),\n ┊18┊17┊    chat: (obj: any, {chatId}: ChatQueryArgs): Chat | null => chats.find(chat => chat.id === Number(chatId)) || null,\n ┊19┊18┊  },\n ┊20┊19┊  Mutation: {\n-┊21┊  ┊    addChat: (obj: any, {recipientId}: AddChatMutationArgs): Chat => {\n+┊  ┊20┊    addChat: (obj: any, {recipientId}: AddChatMutationArgs, {user: currentUser}: {user: User}): Chat => {\n ┊22┊21┊      if (!users.find(user => user.id === Number(recipientId))) {\n ┊23┊22┊        throw new Error(`Recipient ${recipientId} doesn't exist.`);\n ┊24┊23┊      }\n ┊25┊24┊\n-┊26┊  ┊      const chat = chats.find(chat => !chat.name && chat.allTimeMemberIds.includes(currentUser) && chat.allTimeMemberIds.includes(Number(recipientId)));\n+┊  ┊25┊      const chat = chats.find(chat => !chat.name && chat.allTimeMemberIds.includes(currentUser.id) && chat.allTimeMemberIds.includes(Number(recipientId)));\n ┊27┊26┊      if (chat) {\n ┊28┊27┊        // Chat already exists. Both users are already in the allTimeMemberIds array\n ┊29┊28┊        const chatId = chat.id;\n-┊30┊  ┊        if (!chat.listingMemberIds.includes(currentUser)) {\n+┊  ┊29┊        if (!chat.listingMemberIds.includes(currentUser.id)) {\n ┊31┊30┊          // The chat isn't listed for the current user. Add him to the memberIds\n-┊32┊  ┊          chat.listingMemberIds.push(currentUser);\n-┊33┊  ┊          chats.find(chat => chat.id === chatId)!.listingMemberIds.push(currentUser);\n+┊  ┊31┊          chat.listingMemberIds.push(currentUser.id);\n+┊  ┊32┊          chats.find(chat => chat.id === chatId)!.listingMemberIds.push(currentUser.id);\n ┊34┊33┊          return chat;\n ┊35┊34┊        } else {\n ┊36┊35┊          throw new Error(`Chat already exists.`);\n```\n```diff\n@@ -44,9 +43,9 @@\n ┊44┊43┊          picture: null,\n ┊45┊44┊          adminIds: null,\n ┊46┊45┊          ownerId: null,\n-┊47┊  ┊          allTimeMemberIds: [currentUser, Number(recipientId)],\n+┊  ┊46┊          allTimeMemberIds: [currentUser.id, Number(recipientId)],\n ┊48┊47┊          // Chat will not be listed to the other user until the first message gets written\n-┊49┊  ┊          listingMemberIds: [currentUser],\n+┊  ┊48┊          listingMemberIds: [currentUser.id],\n ┊50┊49┊          actualGroupMemberIds: null,\n ┊51┊50┊          messages: [],\n ┊52┊51┊        };\n```\n```diff\n@@ -54,7 +53,7 @@\n ┊54┊53┊        return chat;\n ┊55┊54┊      }\n ┊56┊55┊    },\n-┊57┊  ┊    addGroup: (obj: any, {recipientIds, groupName}: AddGroupMutationArgs): Chat => {\n+┊  ┊56┊    addGroup: (obj: any, {recipientIds, groupName}: AddGroupMutationArgs, {user: currentUser}: {user: User}): Chat => {\n ┊58┊57┊      recipientIds.forEach(recipientId => {\n ┊59┊58┊        if (!users.find(user => user.id === Number(recipientId))) {\n ┊60┊59┊          throw new Error(`Recipient ${recipientId} doesn't exist.`);\n```\n```diff\n@@ -66,17 +65,17 @@\n ┊66┊65┊        id,\n ┊67┊66┊        name: groupName,\n ┊68┊67┊        picture: null,\n-┊69┊  ┊        adminIds: [currentUser],\n-┊70┊  ┊        ownerId: currentUser,\n-┊71┊  ┊        allTimeMemberIds: [currentUser, ...recipientIds.map(id => Number(id))],\n-┊72┊  ┊        listingMemberIds: [currentUser, ...recipientIds.map(id => Number(id))],\n-┊73┊  ┊        actualGroupMemberIds: [currentUser, ...recipientIds.map(id => Number(id))],\n+┊  ┊68┊        adminIds: [currentUser.id],\n+┊  ┊69┊        ownerId: currentUser.id,\n+┊  ┊70┊        allTimeMemberIds: [currentUser.id, ...recipientIds.map(id => Number(id))],\n+┊  ┊71┊        listingMemberIds: [currentUser.id, ...recipientIds.map(id => Number(id))],\n+┊  ┊72┊        actualGroupMemberIds: [currentUser.id, ...recipientIds.map(id => Number(id))],\n ┊74┊73┊        messages: [],\n ┊75┊74┊      };\n ┊76┊75┊      chats.push(chat);\n ┊77┊76┊      return chat;\n ┊78┊77┊    },\n-┊79┊  ┊    removeChat: (obj: any, {chatId}: RemoveChatMutationArgs): number => {\n+┊  ┊78┊    removeChat: (obj: any, {chatId}: RemoveChatMutationArgs, {user: currentUser}: {user: User}): number => {\n ┊80┊79┊      const chat = chats.find(chat => chat.id === Number(chatId));\n ┊81┊80┊\n ┊82┊81┊      if (!chat) {\n```\n```diff\n@@ -85,14 +84,14 @@\n ┊85┊84┊\n ┊86┊85┊      if (!chat.name) {\n ┊87┊86┊        // Chat\n-┊88┊  ┊        if (!chat.listingMemberIds.includes(currentUser)) {\n+┊  ┊87┊        if (!chat.listingMemberIds.includes(currentUser.id)) {\n ┊89┊88┊          throw new Error(`The user is not a member of the chat ${chatId}.`);\n ┊90┊89┊        }\n ┊91┊90┊\n ┊92┊91┊        // Instead of chaining map and filter we can loop once using reduce\n ┊93┊92┊        const messages = chat.messages.reduce<Message[]>((filtered, message) => {\n ┊94┊93┊          // Remove the current user from the message holders\n-┊95┊  ┊          message.holderIds = message.holderIds.filter(holderId => holderId !== currentUser);\n+┊  ┊94┊          message.holderIds = message.holderIds.filter(holderId => holderId !== currentUser.id);\n ┊96┊95┊\n ┊97┊96┊          if (message.holderIds.length !== 0) {\n ┊98┊97┊            filtered.push(message);\n```\n```diff\n@@ -102,7 +101,7 @@\n ┊102┊101┊        }, []);\n ┊103┊102┊\n ┊104┊103┊        // Remove the current user from who gets the chat listed. The chat will no longer appear in his list\n-┊105┊   ┊        const listingMemberIds = chat.listingMemberIds.filter(listingId => listingId !== currentUser);\n+┊   ┊104┊        const listingMemberIds = chat.listingMemberIds.filter(listingId => listingId !== currentUser.id);\n ┊106┊105┊\n ┊107┊106┊        // Check how many members are left\n ┊108┊107┊        if (listingMemberIds.length === 0) {\n```\n```diff\n@@ -120,14 +119,14 @@\n ┊120┊119┊        return Number(chatId);\n ┊121┊120┊      } else {\n ┊122┊121┊        // Group\n-┊123┊   ┊        if (chat.ownerId !== currentUser) {\n+┊   ┊122┊        if (chat.ownerId !== currentUser.id) {\n ┊124┊123┊          throw new Error(`Group ${chatId} is not owned by the user.`);\n ┊125┊124┊        }\n ┊126┊125┊\n ┊127┊126┊        // Instead of chaining map and filter we can loop once using reduce\n ┊128┊127┊        const messages = chat.messages.reduce<Message[]>((filtered, message) => {\n ┊129┊128┊          // Remove the current user from the message holders\n-┊130┊   ┊          message.holderIds = message.holderIds.filter(holderId => holderId !== currentUser);\n+┊   ┊129┊          message.holderIds = message.holderIds.filter(holderId => holderId !== currentUser.id);\n ┊131┊130┊\n ┊132┊131┊          if (message.holderIds.length !== 0) {\n ┊133┊132┊            filtered.push(message);\n```\n```diff\n@@ -137,7 +136,7 @@\n ┊137┊136┊        }, []);\n ┊138┊137┊\n ┊139┊138┊        // Remove the current user from who gets the group listed. The group will no longer appear in his list\n-┊140┊   ┊        const listingMemberIds = chat.listingMemberIds.filter(listingId => listingId !== currentUser);\n+┊   ┊139┊        const listingMemberIds = chat.listingMemberIds.filter(listingId => listingId !== currentUser.id);\n ┊141┊140┊\n ┊142┊141┊        // Check how many members (including previous ones who can still access old messages) are left\n ┊143┊142┊        if (listingMemberIds.length === 0) {\n```\n```diff\n@@ -147,9 +146,9 @@\n ┊147┊146┊          // Update the group\n ┊148┊147┊\n ┊149┊148┊          // Remove the current user from the chat members. He is no longer a member of the group\n-┊150┊   ┊          const actualGroupMemberIds = chat.actualGroupMemberIds!.filter(memberId => memberId !== currentUser);\n+┊   ┊149┊          const actualGroupMemberIds = chat.actualGroupMemberIds!.filter(memberId => memberId !== currentUser.id);\n ┊151┊150┊          // Remove the current user from the chat admins\n-┊152┊   ┊          const adminIds = chat.adminIds!.filter(memberId => memberId !== currentUser);\n+┊   ┊151┊          const adminIds = chat.adminIds!.filter(memberId => memberId !== currentUser.id);\n ┊153┊152┊          // Set the owner id to be null. A null owner means the group is read-only\n ┊154┊153┊          let ownerId: number | null = null;\n ┊155┊154┊\n```\n```diff\n@@ -169,7 +168,7 @@\n ┊169┊168┊        return Number(chatId);\n ┊170┊169┊      }\n ┊171┊170┊    },\n-┊172┊   ┊    addMessage: (obj: any, {chatId, content}: AddMessageMutationArgs): Message => {\n+┊   ┊171┊    addMessage: (obj: any, {chatId, content}: AddMessageMutationArgs, {user: currentUser}: {user: User}): Message => {\n ┊173┊172┊      if (content === null || content === '') {\n ┊174┊173┊        throw new Error(`Cannot add empty or null messages.`);\n ┊175┊174┊      }\n```\n```diff\n@@ -184,11 +183,11 @@\n ┊184┊183┊\n ┊185┊184┊      if (!chat.name) {\n ┊186┊185┊        // Chat\n-┊187┊   ┊        if (!chat.listingMemberIds.find(listingId => listingId === currentUser)) {\n+┊   ┊186┊        if (!chat.listingMemberIds.find(listingId => listingId === currentUser.id)) {\n ┊188┊187┊          throw new Error(`The chat ${chatId} must be listed for the current user before adding a message.`);\n ┊189┊188┊        }\n ┊190┊189┊\n-┊191┊   ┊        const recipientId = chat.allTimeMemberIds.filter(userId => userId !== currentUser)[0];\n+┊   ┊190┊        const recipientId = chat.allTimeMemberIds.filter(userId => userId !== currentUser.id)[0];\n ┊192┊191┊\n ┊193┊192┊        if (!chat.listingMemberIds.find(listingId => listingId === recipientId)) {\n ┊194┊193┊          // Chat is not listed for the recipient. Add him to the listingMemberIds\n```\n```diff\n@@ -205,7 +204,7 @@\n ┊205┊204┊        }\n ┊206┊205┊      } else {\n ┊207┊206┊        // Group\n-┊208┊   ┊        if (!chat.actualGroupMemberIds!.find(memberId => memberId === currentUser)) {\n+┊   ┊207┊        if (!chat.actualGroupMemberIds!.find(memberId => memberId === currentUser.id)) {\n ┊209┊208┊          throw new Error(`The user is not a member of the group ${chatId}. Cannot add message.`);\n ┊210┊209┊        }\n ┊211┊210┊\n```\n```diff\n@@ -217,7 +216,7 @@\n ┊217┊216┊      let recipients: Recipient[] = [];\n ┊218┊217┊\n ┊219┊218┊      holderIds.forEach(holderId => {\n-┊220┊   ┊        if (holderId !== currentUser) {\n+┊   ┊219┊        if (holderId !== currentUser.id) {\n ┊221┊220┊          recipients.push({\n ┊222┊221┊            userId: holderId,\n ┊223┊222┊            messageId: id,\n```\n```diff\n@@ -231,7 +230,7 @@\n ┊231┊230┊      const message: Message = {\n ┊232┊231┊        id,\n ┊233┊232┊        chatId: Number(chatId),\n-┊234┊   ┊        senderId: currentUser,\n+┊   ┊233┊        senderId: currentUser.id,\n ┊235┊234┊        content,\n ┊236┊235┊        createdAt: moment().unix(),\n ┊237┊236┊        type: MessageType.TEXT,\n```\n```diff\n@@ -248,14 +247,14 @@\n ┊248┊247┊\n ┊249┊248┊      return message;\n ┊250┊249┊    },\n-┊251┊   ┊    removeMessages: (obj: any, {chatId, messageIds, all}: RemoveMessagesMutationArgs): number[] => {\n+┊   ┊250┊    removeMessages: (obj: any, {chatId, messageIds, all}: RemoveMessagesMutationArgs, {user: currentUser}: {user: User}): number[] => {\n ┊252┊251┊      const chat = chats.find(chat => chat.id === Number(chatId));\n ┊253┊252┊\n ┊254┊253┊      if (!chat) {\n ┊255┊254┊        throw new Error(`Cannot find chat ${chatId}.`);\n ┊256┊255┊      }\n ┊257┊256┊\n-┊258┊   ┊      if (!chat.listingMemberIds.find(listingId => listingId === currentUser)) {\n+┊   ┊257┊      if (!chat.listingMemberIds.find(listingId => listingId === currentUser.id)) {\n ┊259┊258┊        throw new Error(`The chat/group ${chatId} is not listed for the current user, so there is nothing to delete.`);\n ┊260┊259┊      }\n ┊261┊260┊\n```\n```diff\n@@ -271,7 +270,7 @@\n ┊271┊270┊            if (all || messageIds!.includes(String(message.id))) {\n ┊272┊271┊              deletedIds.push(message.id);\n ┊273┊272┊              // Remove the current user from the message holders\n-┊274┊   ┊              message.holderIds = message.holderIds.filter(holderId => holderId !== currentUser);\n+┊   ┊273┊              message.holderIds = message.holderIds.filter(holderId => holderId !== currentUser.id);\n ┊275┊274┊            }\n ┊276┊275┊\n ┊277┊276┊            if (message.holderIds.length !== 0) {\n```\n```diff\n@@ -288,24 +287,24 @@\n ┊288┊287┊    },\n ┊289┊288┊  },\n ┊290┊289┊  Chat: {\n-┊291┊   ┊    name: (chat: Chat): string => chat.name ? chat.name : users\n-┊292┊   ┊      .find(user => user.id === chat.allTimeMemberIds.find(userId => userId !== currentUser))!.name,\n-┊293┊   ┊    picture: (chat: Chat) => chat.name ? chat.picture : users\n-┊294┊   ┊      .find(user => user.id === chat.allTimeMemberIds.find(userId => userId !== currentUser))!.picture,\n+┊   ┊290┊    name: (chat: Chat, args: any, {user: currentUser}: {user: User}): string => chat.name ? chat.name : users\n+┊   ┊291┊      .find(user => user.id === chat.allTimeMemberIds.find(userId => userId !== currentUser.id))!.name,\n+┊   ┊292┊    picture: (chat: Chat, args: any, {user: currentUser}: {user: User}) => chat.name ? chat.picture : users\n+┊   ┊293┊      .find(user => user.id === chat.allTimeMemberIds.find(userId => userId !== currentUser.id))!.picture,\n ┊295┊294┊    allTimeMembers: (chat: Chat): User[] => users.filter(user => chat.allTimeMemberIds.includes(user.id)),\n ┊296┊295┊    listingMembers: (chat: Chat): User[] => users.filter(user => chat.listingMemberIds.includes(user.id)),\n ┊297┊296┊    actualGroupMembers: (chat: Chat): User[] => users.filter(user => chat.actualGroupMemberIds && chat.actualGroupMemberIds.includes(user.id)),\n ┊298┊297┊    admins: (chat: Chat): User[] => users.filter(user => chat.adminIds && chat.adminIds.includes(user.id)),\n ┊299┊298┊    owner: (chat: Chat): User | null => users.find(user => chat.ownerId === user.id) || null,\n-┊300┊   ┊    messages: (chat: Chat, {amount = null}: {amount: number}): Message[] => {\n+┊   ┊299┊    messages: (chat: Chat, {amount = null}: {amount: number}, {user: currentUser}: {user: User}): Message[] => {\n ┊301┊300┊      const messages = chat.messages\n-┊302┊   ┊      .filter(message => message.holderIds.includes(currentUser))\n+┊   ┊301┊      .filter(message => message.holderIds.includes(currentUser.id))\n ┊303┊302┊      .sort((a, b) => b.createdAt - a.createdAt) || <Message[]>[];\n ┊304┊303┊      return (amount ? messages.slice(0, amount) : messages).reverse();\n ┊305┊304┊    },\n-┊306┊   ┊    unreadMessages: (chat: Chat): number => chat.messages\n-┊307┊   ┊      .filter(message => message.holderIds.includes(currentUser) &&\n-┊308┊   ┊        message.recipients.find(recipient => recipient.userId === currentUser && !recipient.readAt))\n+┊   ┊305┊    unreadMessages: (chat: Chat, args: any, {user: currentUser}: {user: User}): number => chat.messages\n+┊   ┊306┊      .filter(message => message.holderIds.includes(currentUser.id) &&\n+┊   ┊307┊        message.recipients.find(recipient => recipient.userId === currentUser.id && !recipient.readAt))\n ┊309┊308┊      .length,\n ┊310┊309┊    isGroup: (chat: Chat): boolean => !!chat.name,\n ┊311┊310┊  },\n```\n```diff\n@@ -313,7 +312,7 @@\n ┊313┊312┊    chat: (message: Message): Chat | null => chats.find(chat => message.chatId === chat.id) || null,\n ┊314┊313┊    sender: (message: Message): User | null => users.find(user => user.id === message.senderId) || null,\n ┊315┊314┊    holders: (message: Message): User[] => users.filter(user => message.holderIds.includes(user.id)),\n-┊316┊   ┊    ownership: (message: Message): boolean => message.senderId === currentUser,\n+┊   ┊315┊    ownership: (message: Message, args: any, {user: currentUser}: {user: User}): boolean => message.senderId === currentUser.id,\n ┊317┊316┊  },\n ┊318┊317┊  Recipient: {\n ┊319┊318┊    user: (recipient: Recipient): User | null => users.find(user => recipient.userId === user.id) || null,\n```\n\n[}]: #\n\nIn the resolvers we're basically making use of the user object taken from the context.\n\n## Client\n\nLet's start installing `@angular/flex-layout`, because we will use it later:\n\n    $ npm install @angular/flex-layout\n\nFirst of all we need to create an HTTP Interceptor, which will intercept every HTTP request and will add authentication headers.\nFor the moment we still don't have those headers, but we are going to store them in the LocalStorage later.\nWe are also creating an AuthGuard, which we will use to stop the user from reaching unauthorized Routes.\nThe AuthGuard will simply look for the presence of the Authentication Header, but will not guarantee that the header is authentic.\nThis is no problem, because client side AuthGuards are not safe by design and the real authentication will be done server side anyway.\nAuthGuards are here just to redirect the user to the Login page.\nThe service we are going to create will contain some auth methods we are going to use across the app.\n\n[{]: <helper> (diffStep \"10.1\" files=\"src/app/login/services\" module=\"client\")\n\n#### Step 10.1: Authentication\n\n##### Added src&#x2F;app&#x2F;login&#x2F;services&#x2F;auth.guard.ts\n```diff\n@@ -0,0 +1,18 @@\n+┊  ┊ 1┊import {Injectable} from '@angular/core';\n+┊  ┊ 2┊import {CanActivate, Router} from '@angular/router';\n+┊  ┊ 3┊import {LoginService} from './login.service';\n+┊  ┊ 4┊\n+┊  ┊ 5┊@Injectable()\n+┊  ┊ 6┊export class AuthGuard implements CanActivate {\n+┊  ┊ 7┊  constructor(private router: Router,\n+┊  ┊ 8┊              private loginService: LoginService) {}\n+┊  ┊ 9┊\n+┊  ┊10┊  canActivate() {\n+┊  ┊11┊    if (this.loginService.getAuthHeader()) {\n+┊  ┊12┊      return true;\n+┊  ┊13┊    } else {\n+┊  ┊14┊      this.router.navigate(['/login']);\n+┊  ┊15┊      return false;\n+┊  ┊16┊    }\n+┊  ┊17┊  }\n+┊  ┊18┊}\n```\n\n##### Added src&#x2F;app&#x2F;login&#x2F;services&#x2F;auth.interceptor.ts\n```diff\n@@ -0,0 +1,20 @@\n+┊  ┊ 1┊import {Injectable} from '@angular/core';\n+┊  ┊ 2┊import {HttpEvent, HttpHandler, HttpInterceptor, HttpRequest} from '@angular/common/http';\n+┊  ┊ 3┊import {Observable} from 'rxjs';\n+┊  ┊ 4┊import {LoginService} from './login.service';\n+┊  ┊ 5┊\n+┊  ┊ 6┊@Injectable()\n+┊  ┊ 7┊export class AuthInterceptor implements HttpInterceptor {\n+┊  ┊ 8┊  constructor(private loginService: LoginService) {}\n+┊  ┊ 9┊  intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n+┊  ┊10┊    const auth = this.loginService.getAuthHeader();\n+┊  ┊11┊    if (auth) {\n+┊  ┊12┊      request = request.clone({\n+┊  ┊13┊        setHeaders: {\n+┊  ┊14┊          Authorization: auth,\n+┊  ┊15┊        }\n+┊  ┊16┊      });\n+┊  ┊17┊    }\n+┊  ┊18┊    return next.handle(request);\n+┊  ┊19┊  }\n+┊  ┊20┊}\n```\n\n##### Added src&#x2F;app&#x2F;login&#x2F;services&#x2F;login.service.ts\n```diff\n@@ -0,0 +1,24 @@\n+┊  ┊ 1┊import { Injectable } from '@angular/core';\n+┊  ┊ 2┊import {User} from '../../../types';\n+┊  ┊ 3┊\n+┊  ┊ 4┊@Injectable()\n+┊  ┊ 5┊export class LoginService {\n+┊  ┊ 6┊\n+┊  ┊ 7┊  constructor() { }\n+┊  ┊ 8┊\n+┊  ┊ 9┊  storeAuthHeader(auth: string) {\n+┊  ┊10┊    localStorage.setItem('Authorization', auth);\n+┊  ┊11┊  }\n+┊  ┊12┊\n+┊  ┊13┊  getAuthHeader(): string {\n+┊  ┊14┊    return localStorage.getItem('Authorization');\n+┊  ┊15┊  }\n+┊  ┊16┊\n+┊  ┊17┊  storeUser(user: User) {\n+┊  ┊18┊    localStorage.setItem('user', JSON.stringify(user));\n+┊  ┊19┊  }\n+┊  ┊20┊\n+┊  ┊21┊  getUser(): User {\n+┊  ┊22┊    return JSON.parse(localStorage.getItem('user'));\n+┊  ┊23┊  }\n+┊  ┊24┊}\n```\n\n[}]: #\n\nNow it's time to create a SignIn/SignUp component. Since we use Passport in the server we are going to make REST calls for the authentication, instead of using GraphQL.\nSince we use Basic Auth we will simply combine the username and the password together to create the authentication header.\nWe will also store the response from the server, which will contain the user information like the ID, etc. which we are going to need later.\n\n[{]: <helper> (diffStep \"10.1\" files=\"src/app/login/containers, src/app/login/login.module.ts\" module=\"client\")\n\n#### Step 10.1: Authentication\n\n##### Added src&#x2F;app&#x2F;login&#x2F;containers&#x2F;login.component.scss\n```diff\n@@ -0,0 +1,18 @@\n+┊  ┊ 1┊:host {\n+┊  ┊ 2┊  display: block;\n+┊  ┊ 3┊}\n+┊  ┊ 4┊\n+┊  ┊ 5┊form:first-of-type {\n+┊  ┊ 6┊  margin-top: 24px;\n+┊  ┊ 7┊  margin-bottom: 48px;\n+┊  ┊ 8┊}\n+┊  ┊ 9┊\n+┊  ┊10┊label {\n+┊  ┊11┊  display: block;\n+┊  ┊12┊  margin-top: 4px;\n+┊  ┊13┊  margin-bottom: 4px;\n+┊  ┊14┊}\n+┊  ┊15┊\n+┊  ┊16┊.error {\n+┊  ┊17┊  color: red;\n+┊  ┊18┊}\n```\n\n##### Added src&#x2F;app&#x2F;login&#x2F;containers&#x2F;login.component.ts\n```diff\n@@ -0,0 +1,133 @@\n+┊   ┊  1┊import {Component} from '@angular/core';\n+┊   ┊  2┊import {HttpClient} from '@angular/common/http';\n+┊   ┊  3┊import {FormBuilder, Validators} from '@angular/forms';\n+┊   ┊  4┊// import {matchOtherValidator} from '@moebius/ng-validators';\n+┊   ┊  5┊import {Router} from '@angular/router';\n+┊   ┊  6┊import {User} from '../../../types';\n+┊   ┊  7┊import {LoginService} from '../services/login.service';\n+┊   ┊  8┊\n+┊   ┊  9┊@Component({\n+┊   ┊ 10┊  selector: 'app-login',\n+┊   ┊ 11┊  template: `\n+┊   ┊ 12┊    <form (ngSubmit)=\"signIn()\" [formGroup]=\"signInForm\" novalidate>\n+┊   ┊ 13┊      <fieldset fxLayout=\"column\" fxLayoutGap=\"17px\">\n+┊   ┊ 14┊        <legend>Sign in</legend>\n+┊   ┊ 15┊        <div>\n+┊   ┊ 16┊          <label>Username</label>\n+┊   ┊ 17┊          <input formControlName=\"username\" autocomplete=\"username\" type=\"text\">\n+┊   ┊ 18┊        </div>\n+┊   ┊ 19┊        <div class=\"error\" *ngIf=\"signInForm.get('username').hasError('required') && signInForm.get('username').touched\">\n+┊   ┊ 20┊          Username is required\n+┊   ┊ 21┊        </div>\n+┊   ┊ 22┊\n+┊   ┊ 23┊        <div>\n+┊   ┊ 24┊          <label>Password</label>\n+┊   ┊ 25┊          <input formControlName=\"password\" autocomplete=\"current-password\" type=\"password\">\n+┊   ┊ 26┊        </div>\n+┊   ┊ 27┊        <div class=\"error\" *ngIf=\"signInForm.get('password').hasError('required') && signInForm.get('password').touched\">\n+┊   ┊ 28┊          Password is required\n+┊   ┊ 29┊        </div>\n+┊   ┊ 30┊\n+┊   ┊ 31┊        <button type=\"submit\" [disabled]=\"signInForm.invalid\">Sign in</button>\n+┊   ┊ 32┊      </fieldset>\n+┊   ┊ 33┊    </form>\n+┊   ┊ 34┊\n+┊   ┊ 35┊    <form (ngSubmit)=\"signUp()\" [formGroup]=\"signUpForm\" novalidate>\n+┊   ┊ 36┊      <fieldset fxLayout=\"column\" fxLayoutGap=\"17px\">\n+┊   ┊ 37┊        <legend>Sign up</legend>\n+┊   ┊ 38┊        <div>\n+┊   ┊ 39┊          <label>Name</label>\n+┊   ┊ 40┊          <input formControlName=\"name\" type=\"text\">\n+┊   ┊ 41┊        </div>\n+┊   ┊ 42┊\n+┊   ┊ 43┊        <div>\n+┊   ┊ 44┊          <label>Username</label>\n+┊   ┊ 45┊          <input formControlName=\"username\" autocomplete=\"username\" type=\"text\">\n+┊   ┊ 46┊        </div>\n+┊   ┊ 47┊        <div class=\"error\" *ngIf=\"signUpForm.get('username').hasError('required') && signUpForm.get('username').touched\">\n+┊   ┊ 48┊          Username is required\n+┊   ┊ 49┊        </div>\n+┊   ┊ 50┊\n+┊   ┊ 51┊        <div>\n+┊   ┊ 52┊          <label>Password</label>\n+┊   ┊ 53┊          <input formControlName=\"newPassword\" autocomplete=\"new-password\" type=\"password\">\n+┊   ┊ 54┊        </div>\n+┊   ┊ 55┊        <div class=\"error\" *ngIf=\"signUpForm.get('newPassword').hasError('required') && signUpForm.get('newPassword').touched\">\n+┊   ┊ 56┊          Password is required\n+┊   ┊ 57┊        </div>\n+┊   ┊ 58┊\n+┊   ┊ 59┊        <div>\n+┊   ┊ 60┊          <label>Password</label>\n+┊   ┊ 61┊          <input formControlName=\"confirmPassword\" type=\"password\">\n+┊   ┊ 62┊        </div>\n+┊   ┊ 63┊        <div class=\"error\" *ngIf=\"signUpForm.get('confirmPassword').hasError('required') && signUpForm.get('confirmPassword').touched\">\n+┊   ┊ 64┊          Passwords must match\n+┊   ┊ 65┊        </div>\n+┊   ┊ 66┊\n+┊   ┊ 67┊        <button type=\"submit\" [disabled]=\"signUpForm.invalid\">Sign up</button>\n+┊   ┊ 68┊      </fieldset>\n+┊   ┊ 69┊    </form>\n+┊   ┊ 70┊  `,\n+┊   ┊ 71┊  styleUrls: ['./login.component.scss'],\n+┊   ┊ 72┊})\n+┊   ┊ 73┊export class LoginComponent {\n+┊   ┊ 74┊  signInForm = this.fb.group({\n+┊   ┊ 75┊    username: [null, [\n+┊   ┊ 76┊      Validators.required,\n+┊   ┊ 77┊    ]],\n+┊   ┊ 78┊    password: [null, [\n+┊   ┊ 79┊      Validators.required,\n+┊   ┊ 80┊    ]],\n+┊   ┊ 81┊  });\n+┊   ┊ 82┊\n+┊   ┊ 83┊  signUpForm = this.fb.group({\n+┊   ┊ 84┊    name: [null, [\n+┊   ┊ 85┊      Validators.required,\n+┊   ┊ 86┊    ]],\n+┊   ┊ 87┊    username: [null, [\n+┊   ┊ 88┊      Validators.required,\n+┊   ┊ 89┊    ]],\n+┊   ┊ 90┊    newPassword: [null, [\n+┊   ┊ 91┊      Validators.required,\n+┊   ┊ 92┊    ]],\n+┊   ┊ 93┊    confirmPassword: [null, [\n+┊   ┊ 94┊      Validators.required,\n+┊   ┊ 95┊      // matchOtherValidator('newPassword'),\n+┊   ┊ 96┊    ]],\n+┊   ┊ 97┊  });\n+┊   ┊ 98┊\n+┊   ┊ 99┊  constructor(private http: HttpClient,\n+┊   ┊100┊              private fb: FormBuilder,\n+┊   ┊101┊              private router: Router,\n+┊   ┊102┊              private loginService: LoginService) {}\n+┊   ┊103┊\n+┊   ┊104┊  signIn() {\n+┊   ┊105┊    const {username, password} = this.signInForm.value;\n+┊   ┊106┊    const auth = `Basic ${btoa(`${username}:${password}`)}`;\n+┊   ┊107┊    this.http.post('http://localhost:3000/signin', null, {\n+┊   ┊108┊      headers: {\n+┊   ┊109┊        Authorization: auth,\n+┊   ┊110┊      }\n+┊   ┊111┊    }).subscribe((user: User) => {\n+┊   ┊112┊      this.loginService.storeAuthHeader(auth);\n+┊   ┊113┊      this.loginService.storeUser(user);\n+┊   ┊114┊      this.router.navigate(['/chats']);\n+┊   ┊115┊    }, err => console.error(err));\n+┊   ┊116┊  }\n+┊   ┊117┊\n+┊   ┊118┊  signUp() {\n+┊   ┊119┊    const {username, newPassword: password, name} = this.signInForm.value;\n+┊   ┊120┊    const auth = `Basic ${btoa(`${username}:${password}`)}`;\n+┊   ┊121┊    this.http.post('http://localhost:3000/signup', {\n+┊   ┊122┊      name,\n+┊   ┊123┊    }, {\n+┊   ┊124┊      headers: {\n+┊   ┊125┊        Authorization: auth,\n+┊   ┊126┊      }\n+┊   ┊127┊    }).subscribe((user: User) => {\n+┊   ┊128┊      this.loginService.storeAuthHeader(auth);\n+┊   ┊129┊      this.loginService.storeUser(user);\n+┊   ┊130┊      this.router.navigate(['/chats']);\n+┊   ┊131┊    }, err => console.error(err));\n+┊   ┊132┊  }\n+┊   ┊133┊}\n```\n\n##### Added src&#x2F;app&#x2F;login&#x2F;login.module.ts\n```diff\n@@ -0,0 +1,52 @@\n+┊  ┊ 1┊import {RouterModule, Routes} from '@angular/router';\n+┊  ┊ 2┊import {NgModule} from '@angular/core';\n+┊  ┊ 3┊import {TruncateModule} from 'ng2-truncate';\n+┊  ┊ 4┊import {MatButtonModule, MatIconModule, MatListModule, MatMenuModule} from '@angular/material';\n+┊  ┊ 5┊import {SharedModule} from '../shared/shared.module';\n+┊  ┊ 6┊import {BrowserModule} from '@angular/platform-browser';\n+┊  ┊ 7┊import {FormsModule, ReactiveFormsModule} from '@angular/forms';\n+┊  ┊ 8┊import {BrowserAnimationsModule} from '@angular/platform-browser/animations';\n+┊  ┊ 9┊import {LoginComponent} from './containers/login.component';\n+┊  ┊10┊import {FlexLayoutModule} from '@angular/flex-layout';\n+┊  ┊11┊import {AuthInterceptor} from './services/auth.interceptor';\n+┊  ┊12┊import {AuthGuard} from './services/auth.guard';\n+┊  ┊13┊import {LoginService} from './services/login.service';\n+┊  ┊14┊\n+┊  ┊15┊\n+┊  ┊16┊const routes: Routes = [\n+┊  ┊17┊  {path: 'login', component: LoginComponent},\n+┊  ┊18┊];\n+┊  ┊19┊\n+┊  ┊20┊@NgModule({\n+┊  ┊21┊  declarations: [\n+┊  ┊22┊    LoginComponent,\n+┊  ┊23┊  ],\n+┊  ┊24┊  imports: [\n+┊  ┊25┊    BrowserModule,\n+┊  ┊26┊    // Material\n+┊  ┊27┊    MatMenuModule,\n+┊  ┊28┊    MatIconModule,\n+┊  ┊29┊    MatButtonModule,\n+┊  ┊30┊    MatListModule,\n+┊  ┊31┊    // Animations\n+┊  ┊32┊    BrowserAnimationsModule,\n+┊  ┊33┊    // Flex layout\n+┊  ┊34┊    FlexLayoutModule,\n+┊  ┊35┊    // Routing\n+┊  ┊36┊    RouterModule.forChild(routes),\n+┊  ┊37┊    // Forms\n+┊  ┊38┊    FormsModule,\n+┊  ┊39┊    ReactiveFormsModule,\n+┊  ┊40┊    // Truncate Pipe\n+┊  ┊41┊    TruncateModule,\n+┊  ┊42┊    // Feature modules\n+┊  ┊43┊    SharedModule,\n+┊  ┊44┊  ],\n+┊  ┊45┊  providers: [\n+┊  ┊46┊    LoginService,\n+┊  ┊47┊    AuthInterceptor,\n+┊  ┊48┊    AuthGuard,\n+┊  ┊49┊  ],\n+┊  ┊50┊})\n+┊  ┊51┊export class LoginModule {\n+┊  ┊52┊}\n```\n\n[}]: #\n\nNow it's time use the Interceptor we just created:\n\n[{]: <helper> (diffStep \"10.1\" files=\"src/app/app.module.ts\" module=\"client\")\n\n#### Step 10.1: Authentication\n\n##### Changed src&#x2F;app&#x2F;app.module.ts\n```diff\n@@ -2,7 +2,7 @@\n ┊2┊2┊import { NgModule } from '@angular/core';\n ┊3┊3┊\n ┊4┊4┊import { AppComponent } from './app.component';\n-┊5┊ ┊import {HttpClientModule} from '@angular/common/http';\n+┊ ┊5┊import {HTTP_INTERCEPTORS, HttpClientModule} from '@angular/common/http';\n ┊6┊6┊import {HttpLink, HttpLinkModule, Options} from 'apollo-angular-link-http';\n ┊7┊7┊import {Apollo, ApolloModule} from 'apollo-angular';\n ┊8┊8┊import {defaultDataIdFromObject, InMemoryCache} from 'apollo-cache-inmemory';\n```\n```diff\n@@ -10,6 +10,8 @@\n ┊10┊10┊import {RouterModule, Routes} from '@angular/router';\n ┊11┊11┊import {ChatViewerModule} from './chat-viewer/chat-viewer.module';\n ┊12┊12┊import {ChatsCreationModule} from './chats-creation/chats-creation.module';\n+┊  ┊13┊import {LoginModule} from './login/login.module';\n+┊  ┊14┊import {AuthInterceptor} from './login/services/auth.interceptor';\n ┊13┊15┊const routes: Routes = [];\n ┊14┊16┊\n ┊15┊17┊@NgModule({\n```\n```diff\n@@ -28,8 +30,15 @@\n ┊28┊30┊    ChatsListerModule,\n ┊29┊31┊    ChatViewerModule,\n ┊30┊32┊    ChatsCreationModule,\n+┊  ┊33┊    LoginModule,\n+┊  ┊34┊  ],\n+┊  ┊35┊  providers: [\n+┊  ┊36┊    {\n+┊  ┊37┊      provide: HTTP_INTERCEPTORS,\n+┊  ┊38┊      useClass: AuthInterceptor,\n+┊  ┊39┊      multi: true,\n+┊  ┊40┊    },\n ┊31┊41┊  ],\n-┊32┊  ┊  providers: [],\n ┊33┊42┊  bootstrap: [AppComponent]\n ┊34┊43┊})\n ┊35┊44┊export class AppModule {\n```\n\n[}]: #\n\nAs well as the AuthGuard:\n\n[{]: <helper> (diffStep \"10.1\" files=\"src/app/chat-viewer/chat-viewer.module.ts, src/app/chats-creation/chats-creation.module.ts, src/app/chats-lister/chats-lister.module.ts\" module=\"client\")\n\n#### Step 10.1: Authentication\n\n##### Changed src&#x2F;app&#x2F;chat-viewer&#x2F;chat-viewer.module.ts\n```diff\n@@ -12,11 +12,12 @@\n ┊12┊12┊import {NewMessageComponent} from './components/new-message/new-message.component';\n ┊13┊13┊import {SharedModule} from '../shared/shared.module';\n ┊14┊14┊import {NgxSelectableListModule} from 'ngx-selectable-list';\n+┊  ┊15┊import {AuthGuard} from '../login/services/auth.guard';\n ┊15┊16┊\n ┊16┊17┊const routes: Routes = [\n ┊17┊18┊  {\n ┊18┊19┊    path: 'chat', children: [\n-┊19┊  ┊      {path: ':id', component: ChatComponent},\n+┊  ┊20┊      {path: ':id', canActivate: [AuthGuard], component: ChatComponent},\n ┊20┊21┊    ],\n ┊21┊22┊  },\n ┊22┊23┊];\n```\n\n##### Changed src&#x2F;app&#x2F;chats-creation&#x2F;chats-creation.module.ts\n```diff\n@@ -16,10 +16,11 @@\n ┊16┊16┊import {NewGroupDetailsComponent} from './components/new-group-details/new-group-details.component';\n ┊17┊17┊import {SharedModule} from '../shared/shared.module';\n ┊18┊18┊import {NgxSelectableListModule} from 'ngx-selectable-list';\n+┊  ┊19┊import {AuthGuard} from '../login/services/auth.guard';\n ┊19┊20┊\n ┊20┊21┊const routes: Routes = [\n-┊21┊  ┊  {path: 'new-chat', component: NewChatComponent},\n-┊22┊  ┊  {path: 'new-group', component: NewGroupComponent},\n+┊  ┊22┊  {path: 'new-chat', canActivate: [AuthGuard], component: NewChatComponent},\n+┊  ┊23┊  {path: 'new-group', canActivate: [AuthGuard], component: NewGroupComponent},\n ┊23┊24┊];\n ┊24┊25┊\n ┊25┊26┊@NgModule({\n```\n\n##### Changed src&#x2F;app&#x2F;chats-lister&#x2F;chats-lister.module.ts\n```diff\n@@ -12,10 +12,11 @@\n ┊12┊12┊import {TruncateModule} from 'ng2-truncate';\n ┊13┊13┊import {SharedModule} from '../shared/shared.module';\n ┊14┊14┊import {NgxSelectableListModule} from 'ngx-selectable-list';\n+┊  ┊15┊import {AuthGuard} from '../login/services/auth.guard';\n ┊15┊16┊\n ┊16┊17┊const routes: Routes = [\n ┊17┊18┊  {path: '', redirectTo: 'chats', pathMatch: 'full'},\n-┊18┊  ┊  {path: 'chats', component: ChatsComponent},\n+┊  ┊19┊  {path: 'chats', canActivate: [AuthGuard], component: ChatsComponent},\n ┊19┊20┊];\n ┊20┊21┊\n ┊21┊22┊@NgModule({\n```\n\n[}]: #\n\nLast but not the least we need to fix our main service in order to not use the hardcoded user anymore. Instead we will use our Login service to read the user info from the LocalStorage.\n\n[{]: <helper> (diffStep \"10.1\" files=\"src/app/services/chats.service.ts\" module=\"client\")\n\n#### Step 10.1: Authentication\n\n##### Changed src&#x2F;app&#x2F;services&#x2F;chats.service.ts\n```diff\n@@ -16,9 +16,7 @@\n ┊16┊16┊import {addGroupMutation} from '../../graphql/addGroup.mutation';\n ┊17┊17┊import * as moment from 'moment';\n ┊18┊18┊import {FetchResult} from 'apollo-link';\n-┊19┊  ┊\n-┊20┊  ┊const currentUserId = '1';\n-┊21┊  ┊const currentUserName = 'Ethan Gonzalez';\n+┊  ┊19┊import {LoginService} from '../login/services/login.service';\n ┊22┊20┊\n ┊23┊21┊@Injectable()\n ┊24┊22┊export class ChatsService {\n```\n```diff\n@@ -29,7 +27,8 @@\n ┊29┊27┊  getChatWqSubject: AsyncSubject<QueryRef<GetChat.Query>>;\n ┊30┊28┊  addChat$: Observable<FetchResult<AddChat.Mutation | AddGroup.Mutation>>;\n ┊31┊29┊\n-┊32┊  ┊  constructor(private apollo: Apollo) {\n+┊  ┊30┊  constructor(private apollo: Apollo,\n+┊  ┊31┊              private loginService: LoginService) {\n ┊33┊32┊    this.getChatsWq = this.apollo.watchQuery<GetChats.Query>(<WatchQueryOptions>{\n ┊34┊33┊      query: getChatsQuery,\n ┊35┊34┊      variables: {\n```\n```diff\n@@ -111,11 +110,11 @@\n ┊111┊110┊        addMessage: {\n ┊112┊111┊          id: ChatsService.getRandomId(),\n ┊113┊112┊          __typename: 'Message',\n-┊114┊   ┊          senderId: currentUserId,\n+┊   ┊113┊          senderId: this.loginService.getUser().id,\n ┊115┊114┊          sender: {\n-┊116┊   ┊            id: currentUserId,\n+┊   ┊115┊            id: this.loginService.getUser().id,\n ┊117┊116┊            __typename: 'User',\n-┊118┊   ┊            name: currentUserName,\n+┊   ┊117┊            name: this.loginService.getUser().name,\n ┊119┊118┊          },\n ┊120┊119┊          content,\n ┊121┊120┊          createdAt: moment().unix(),\n```\n```diff\n@@ -286,7 +285,7 @@\n ┊286┊285┊  // Checks if the chat is listed for the current user and returns the id\n ┊287┊286┊  getChatId(recipientId: string) {\n ┊288┊287┊    const _chat = this.chats.find(chat => {\n-┊289┊   ┊      return !chat.isGroup && !!chat.allTimeMembers.find(user => user.id === currentUserId) &&\n+┊   ┊288┊      return !chat.isGroup && !!chat.allTimeMembers.find(user => user.id === this.loginService.getUser().id) &&\n ┊290┊289┊        !!chat.allTimeMembers.find(user => user.id === recipientId);\n ┊291┊290┊    });\n ┊292┊291┊    return _chat ? _chat.id : false;\n```\n```diff\n@@ -307,7 +306,7 @@\n ┊307┊306┊          picture: users.find(user => user.id === recipientId).picture,\n ┊308┊307┊          allTimeMembers: [\n ┊309┊308┊            {\n-┊310┊   ┊              id: currentUserId,\n+┊   ┊309┊              id: this.loginService.getUser().id,\n ┊311┊310┊              __typename: 'User',\n ┊312┊311┊            },\n ┊313┊312┊            {\n```\n```diff\n@@ -359,10 +358,10 @@\n ┊359┊358┊          __typename: 'Chat',\n ┊360┊359┊          name: groupName,\n ┊361┊360┊          picture: 'https://randomuser.me/api/portraits/thumb/lego/1.jpg',\n-┊362┊   ┊          userIds: [currentUserId, recipientIds],\n+┊   ┊361┊          userIds: [this.loginService.getUser().id, recipientIds],\n ┊363┊362┊          allTimeMembers: [\n ┊364┊363┊            {\n-┊365┊   ┊              id: currentUserId,\n+┊   ┊364┊              id: this.loginService.getUser().id,\n ┊366┊365┊              __typename: 'User',\n ┊367┊366┊            },\n ┊368┊367┊            ...recipientIds.map(id => ({id, __typename: 'User'})),\n```\n\n[}]: #\n\nWe also need to fix our tests:\n\n[{]: <helper> (diffStep \"10.1\" files=\"src/app/chat-viewer/containers/chat/chat.component.spec.ts, src/app/chats-lister/containers/chats/chats.component.spec.ts, src/app/services/chats.service.spec.ts\" module=\"client\")\n\n#### Step 10.1: Authentication\n\n##### Changed src&#x2F;app&#x2F;chat-viewer&#x2F;containers&#x2F;chat&#x2F;chat.component.spec.ts\n```diff\n@@ -18,6 +18,7 @@\n ┊18┊18┊import {MessagesListComponent} from '../../components/messages-list/messages-list.component';\n ┊19┊19┊import {MessageItemComponent} from '../../components/message-item/message-item.component';\n ┊20┊20┊import {NgxSelectableListModule} from 'ngx-selectable-list';\n+┊  ┊21┊import {LoginService} from '../../../login/services/login.service';\n ┊21┊22┊\n ┊22┊23┊describe('ChatComponent', () => {\n ┊23┊24┊  let component: ChatComponent;\n```\n```diff\n@@ -120,7 +121,8 @@\n ┊120┊121┊            params: of({ id: chat.id }),\n ┊121┊122┊            queryParams: of({}),\n ┊122┊123┊          }\n-┊123┊   ┊        }\n+┊   ┊124┊        },\n+┊   ┊125┊        LoginService,\n ┊124┊126┊      ],\n ┊125┊127┊      schemas: [NO_ERRORS_SCHEMA]\n ┊126┊128┊    })\n```\n\n##### Changed src&#x2F;app&#x2F;chats-lister&#x2F;containers&#x2F;chats&#x2F;chats.component.spec.ts\n```diff\n@@ -14,6 +14,7 @@\n ┊14┊14┊import {By} from '@angular/platform-browser';\n ┊15┊15┊import {RouterTestingModule} from '@angular/router/testing';\n ┊16┊16┊import {NgxSelectableListModule} from 'ngx-selectable-list';\n+┊  ┊17┊import {LoginService} from '../../../login/services/login.service';\n ┊17┊18┊\n ┊18┊19┊describe('ChatsComponent', () => {\n ┊19┊20┊  let component: ChatsComponent;\n```\n```diff\n@@ -336,6 +337,7 @@\n ┊336┊337┊      providers: [\n ┊337┊338┊        ChatsService,\n ┊338┊339┊        Apollo,\n+┊   ┊340┊        LoginService,\n ┊339┊341┊      ],\n ┊340┊342┊      schemas: [NO_ERRORS_SCHEMA]\n ┊341┊343┊    })\n```\n\n##### Changed src&#x2F;app&#x2F;services&#x2F;chats.service.spec.ts\n```diff\n@@ -5,6 +5,7 @@\n ┊ 5┊ 5┊import {HttpLink, HttpLinkModule, Options} from 'apollo-angular-link-http';\n ┊ 6┊ 6┊import {HttpClientTestingModule, HttpTestingController} from '@angular/common/http/testing';\n ┊ 7┊ 7┊import {defaultDataIdFromObject, InMemoryCache} from 'apollo-cache-inmemory';\n+┊  ┊ 8┊import {LoginService} from '../login/services/login.service';\n ┊ 8┊ 9┊\n ┊ 9┊10┊describe('ChatsService', () => {\n ┊10┊11┊  let httpMock: HttpTestingController;\n```\n```diff\n@@ -312,6 +313,7 @@\n ┊312┊313┊      providers: [\n ┊313┊314┊        ChatsService,\n ┊314┊315┊        Apollo,\n+┊   ┊316┊        LoginService,\n ┊315┊317┊      ]\n ┊316┊318┊    });\n ┊317┊319┊\n```\n\n[}]: #"
          },
          {
            "manualTitle": "Step 15: Subscriptions",
            "stepRevision": "a708db2a7c7dc2853bca2678b64389821efe4b95",
            "manualView": "## Server\n\nIn order to use WebSockets we will need to install a couple of packages:\n\n    npm install graphql-subscriptions subscriptions-transport-ws\n\nOur GraphQL server will use WebSockets only for subscriptions, while using HTTP for everything else. That means that we will have to add subscriptions on a specific path.\nWe're using `connectionParams` for the authentication over WebSockets, that means that we won't be using the `Passport` framework at all. Instead we will use the `onConnect` hook to manually validate the parameters provided by the user to either validate the WebSocket connection or throw an error.\nWe will also return the user object we retrieved from the db, to let the resolvers know who is the current user.\n\n[{]: <helper> (diffStep \"5.1\" files=\"index.ts\" module=\"server\")\n\n#### Step 5.1: Subscriptions\n\n##### Changed index.ts\n```diff\n@@ -7,6 +7,9 @@\n ┊ 7┊ 7┊import * as basicStrategy from 'passport-http';\n ┊ 8┊ 8┊import * as bcrypt from 'bcrypt-nodejs';\n ┊ 9┊ 9┊import { db, User } from \"./db\";\n+┊  ┊10┊import { createServer } from \"http\";\n+┊  ┊11┊import { SubscriptionServer } from \"subscriptions-transport-ws\";\n+┊  ┊12┊import { execute, subscribe } from \"graphql\";\n ┊10┊13┊\n ┊11┊14┊let users = db.users;\n ┊12┊15┊\n```\n```diff\n@@ -76,4 +79,36 @@\n ┊ 76┊ 79┊  endpointURL: '/graphql',\n ┊ 77┊ 80┊}));\n ┊ 78┊ 81┊\n-┊ 79┊   ┊app.listen(PORT);\n+┊   ┊ 82┊// Wrap the Express server\n+┊   ┊ 83┊const ws = createServer(app);\n+┊   ┊ 84┊ws.listen(PORT, () => {\n+┊   ┊ 85┊  console.log(`Apollo Server is now running on http://localhost:${PORT}`);\n+┊   ┊ 86┊  // Set up the WebSocket for handling GraphQL subscriptions\n+┊   ┊ 87┊  new SubscriptionServer({\n+┊   ┊ 88┊    onConnect: (connectionParams: any, webSocket: any) => {\n+┊   ┊ 89┊      if (connectionParams.authToken) {\n+┊   ┊ 90┊        // create a buffer and tell it the data coming in is base64\n+┊   ┊ 91┊        const buf = new Buffer(connectionParams.authToken.split(' ')[1], 'base64');\n+┊   ┊ 92┊        // read it back out as a string\n+┊   ┊ 93┊        const [username, password]: string[] = buf.toString().split(':');\n+┊   ┊ 94┊        if (username && password) {\n+┊   ┊ 95┊          const user = users.find(user => user.username == username);\n+┊   ┊ 96┊\n+┊   ┊ 97┊          if (user && validPassword(password, user.password)) {\n+┊   ┊ 98┊            // Set context for the WebSocket\n+┊   ┊ 99┊            return {user};\n+┊   ┊100┊          } else {\n+┊   ┊101┊            throw new Error('Wrong credentials!');\n+┊   ┊102┊          }\n+┊   ┊103┊        }\n+┊   ┊104┊      }\n+┊   ┊105┊      throw new Error('Missing auth token!');\n+┊   ┊106┊    },\n+┊   ┊107┊    execute,\n+┊   ┊108┊    subscribe,\n+┊   ┊109┊    schema\n+┊   ┊110┊  }, {\n+┊   ┊111┊    server: ws,\n+┊   ┊112┊    path: '/subscriptions',\n+┊   ┊113┊  });\n+┊   ┊114┊});\n```\n\n[}]: #\n\nWe will use the `PubSub` implementation from `graphql-subscriptions`, and we will connect it to `subscribe` executor of `graphql`, and publish the data using `subscriptions-transport-ws` (a WebSocket server and client library for GraphQL that can be used directly in a JavaScript app or wired up to a fully-featured GraphQL client like Apollo).\n\nThe process of setting up a GraphQL subscriptions server consist of the following steps:\n\n1. Declaring subscriptions in the GraphQL schema\n2. Setup a PubSub instance that our server will publish new events to\n3. Hook together `PubSub` event and GraphQL subscription.\n4. Setting up `SubscriptionsServer`, a transport between the server and the clients\n\n[{]: <helper> (diffStep \"5.1\" files=\"schema/typeDefs.ts\" module=\"server\")\n\n#### Step 5.1: Subscriptions\n\n##### Changed schema&#x2F;typeDefs.ts\n```diff\n@@ -7,6 +7,11 @@\n ┊ 7┊ 7┊    chat(chatId: ID!): Chat\n ┊ 8┊ 8┊  }\n ┊ 9┊ 9┊\n+┊  ┊10┊  type Subscription {\n+┊  ┊11┊    messageAdded(chatId: ID): Message\n+┊  ┊12┊    chatAdded: Chat\n+┊  ┊13┊  }\n+┊  ┊14┊\n ┊10┊15┊  enum MessageType {\n ┊11┊16┊    LOCATION\n ┊12┊17┊    TEXT\n```\n\n[}]: #\n\nWe created two subscriptions: one to notify for new chats and one to notify for new messages.\n\n[{]: <helper> (diffStep \"5.1\" files=\"schema/resolvers.ts\" module=\"server\")\n\n#### Step 5.1: Subscriptions\n\n##### Changed schema&#x2F;resolvers.ts\n```diff\n@@ -1,14 +1,17 @@\n ┊ 1┊ 1┊import { Chat, db, Message, MessageType, Recipient, User } from \"../db\";\n ┊ 2┊ 2┊import { IResolvers } from \"graphql-tools/dist/Interfaces\";\n ┊ 3┊ 3┊import {\n-┊ 4┊  ┊  AddChatMutationArgs, AddGroupMutationArgs, AddMessageMutationArgs, ChatQueryArgs,\n+┊  ┊ 4┊  AddChatMutationArgs, AddGroupMutationArgs, AddMessageMutationArgs, ChatQueryArgs, MessageAddedSubscriptionArgs,\n ┊ 5┊ 5┊  RemoveChatMutationArgs, RemoveMessagesMutationArgs\n ┊ 6┊ 6┊} from \"../types\";\n ┊ 7┊ 7┊import * as moment from \"moment\";\n+┊  ┊ 8┊import { PubSub, withFilter } from \"graphql-subscriptions\";\n ┊ 8┊ 9┊\n ┊ 9┊10┊let users = db.users;\n ┊10┊11┊let chats = db.chats;\n ┊11┊12┊\n+┊  ┊13┊export const pubsub = new PubSub();\n+┊  ┊14┊\n ┊12┊15┊export const resolvers: IResolvers = {\n ┊13┊16┊  Query: {\n ┊14┊17┊    // Show all users for the moment.\n```\n```diff\n@@ -50,6 +53,7 @@\n ┊50┊53┊          messages: [],\n ┊51┊54┊        };\n ┊52┊55┊        chats.push(chat);\n+┊  ┊56┊\n ┊53┊57┊        return chat;\n ┊54┊58┊      }\n ┊55┊59┊    },\n```\n```diff\n@@ -73,6 +77,12 @@\n ┊73┊77┊        messages: [],\n ┊74┊78┊      };\n ┊75┊79┊      chats.push(chat);\n+┊  ┊80┊\n+┊  ┊81┊      pubsub.publish('chatAdded', {\n+┊  ┊82┊        creatorId: currentUser.id,\n+┊  ┊83┊        chatAdded: chat,\n+┊  ┊84┊      });\n+┊  ┊85┊\n ┊76┊86┊      return chat;\n ┊77┊87┊    },\n ┊78┊88┊    removeChat: (obj: any, {chatId}: RemoveChatMutationArgs, {user: currentUser}: {user: User}): number => {\n```\n```diff\n@@ -201,6 +211,11 @@\n ┊201┊211┊          });\n ┊202┊212┊\n ┊203┊213┊          holderIds = listingMemberIds;\n+┊   ┊214┊\n+┊   ┊215┊          pubsub.publish('chatAdded', {\n+┊   ┊216┊            creatorId: currentUser.id,\n+┊   ┊217┊            chatAdded: chat,\n+┊   ┊218┊          });\n ┊204┊219┊        }\n ┊205┊220┊      } else {\n ┊206┊221┊        // Group\n```\n```diff\n@@ -245,6 +260,10 @@\n ┊245┊260┊        return chat;\n ┊246┊261┊      });\n ┊247┊262┊\n+┊   ┊263┊      pubsub.publish('messageAdded', {\n+┊   ┊264┊        messageAdded: message,\n+┊   ┊265┊      });\n+┊   ┊266┊\n ┊248┊267┊      return message;\n ┊249┊268┊    },\n ┊250┊269┊    removeMessages: (obj: any, {chatId, messageIds, all}: RemoveMessagesMutationArgs, {user: currentUser}: {user: User}): number[] => {\n```\n```diff\n@@ -286,6 +305,21 @@\n ┊286┊305┊      return deletedIds;\n ┊287┊306┊    },\n ┊288┊307┊  },\n+┊   ┊308┊  Subscription: {\n+┊   ┊309┊    messageAdded: {\n+┊   ┊310┊      subscribe: withFilter(() => pubsub.asyncIterator('messageAdded'),\n+┊   ┊311┊        ({messageAdded}: {messageAdded: Message & {chat: {id: number}}}, {chatId}: MessageAddedSubscriptionArgs, {user: currentUser}: { user: User }) => {\n+┊   ┊312┊          return (!chatId || messageAdded.chat.id === Number(chatId)) &&\n+┊   ┊313┊            !!messageAdded.recipients.find((recipient: Recipient) => recipient.userId === currentUser.id);\n+┊   ┊314┊        }),\n+┊   ┊315┊    },\n+┊   ┊316┊    chatAdded: {\n+┊   ┊317┊      subscribe: withFilter(() => pubsub.asyncIterator('chatAdded'),\n+┊   ┊318┊        ({creatorId, chatAdded}: {creatorId: string, chatAdded: Chat}, variables: any, {user: currentUser}: { user: User }) => {\n+┊   ┊319┊          return Number(creatorId) !== currentUser.id && !chatAdded.listingMemberIds.includes(currentUser.id);\n+┊   ┊320┊        }),\n+┊   ┊321┊    }\n+┊   ┊322┊  },\n ┊289┊323┊  Chat: {\n ┊290┊324┊    name: (chat: Chat, args: any, {user: currentUser}: {user: User}): string => chat.name ? chat.name : users\n ┊291┊325┊      .find(user => user.id === chat.allTimeMemberIds.find(userId => userId !== currentUser.id))!.name,\n```\n\n[}]: #\n\nWe will publish a message to the `messageAdded` subscription every time that a user sends a message, then we will filter them according to the current user (we don't want to send someone else's messages).\nThe `chatAdded` subscription is similar: we will publish each time that a group gets created, but not when chats get created. This is because when a user creates a chat the chat doesn't appear to the other peer until he writes the first message. That's why we also publish when new messages get added (we first look if the other peer already gets the chat listed).\n\n## Client\n\nIn order to use WebSockets we will need to install a couple of dependencies:\n\n    $ npm install apollo-link-ws apollo-utilities subscriptions-transport-ws\n\nFirst let's create the queries for the GraphQL Subscriptions:\n\n[{]: <helper> (diffStep \"11.1\" files=\"src/graphql\" module=\"client\")\n\n#### Step 11.1: Subscriptions\n\n##### Added src&#x2F;graphql&#x2F;chatAdded.subscription.ts\n```diff\n@@ -0,0 +1,17 @@\n+┊  ┊ 1┊import gql from 'graphql-tag';\n+┊  ┊ 2┊import {fragments} from './fragment';\n+┊  ┊ 3┊\n+┊  ┊ 4┊// We use the gql tag to parse our query string into a query document\n+┊  ┊ 5┊export const chatAddedSubscription = gql`\n+┊  ┊ 6┊  subscription chatAdded {\n+┊  ┊ 7┊    chatAdded {\n+┊  ┊ 8┊      ...ChatWithoutMessages\n+┊  ┊ 9┊      messages {\n+┊  ┊10┊        ...Message\n+┊  ┊11┊      }\n+┊  ┊12┊    }\n+┊  ┊13┊  }\n+┊  ┊14┊\n+┊  ┊15┊  ${fragments['chatWithoutMessages']}\n+┊  ┊16┊  ${fragments['message']}\n+┊  ┊17┊`;\n```\n\n##### Added src&#x2F;graphql&#x2F;messageAdded.subscription.ts\n```diff\n@@ -0,0 +1,16 @@\n+┊  ┊ 1┊import gql from 'graphql-tag';\n+┊  ┊ 2┊import {fragments} from './fragment';\n+┊  ┊ 3┊\n+┊  ┊ 4┊// We use the gql tag to parse our query string into a query document\n+┊  ┊ 5┊export const messageAddedSubscription = gql`\n+┊  ┊ 6┊  subscription messageAdded($chatId: ID) {\n+┊  ┊ 7┊    messageAdded(chatId: $chatId) {\n+┊  ┊ 8┊      ...Message\n+┊  ┊ 9┊      chat {\n+┊  ┊10┊        id,\n+┊  ┊11┊      },\n+┊  ┊12┊    }\n+┊  ┊13┊  }\n+┊  ┊14┊\n+┊  ┊15┊  ${fragments['message']}\n+┊  ┊16┊`;\n```\n\n[}]: #\n\nThen we need to run `graphql-code-generator` to generate the types:\n\n    $ npm run generator\n\nNow we can update the chats service to update the getChats query every time that we receive a new chat from the subscription.\nWith GraphQL subscriptions your client will be alerted on push from the server and you should choose the pattern that fits your application the most:\n\n- Use it as a notification and run any logic you want when it fires, for example alerting the user or refetching data\n- Use the data sent along with the notification and merge it directly into the store (existing queries are automatically notified)\n\nWith subscribeToMore, you can easily do the latter. We will manipulate the store to add the newly created chat.\n\nWe will do to do the same for the newMessage subscription, but this time we will have to update two different queries in the store: getChats and getChat.\n\n[{]: <helper> (diffStep \"11.1\" files=\"src/app/services/chats.service.ts\" module=\"client\")\n\n#### Step 11.1: Subscriptions\n\n##### Changed src&#x2F;app&#x2F;services&#x2F;chats.service.ts\n```diff\n@@ -3,7 +3,10 @@\n ┊ 3┊ 3┊import {Apollo, QueryRef} from 'apollo-angular';\n ┊ 4┊ 4┊import {Injectable} from '@angular/core';\n ┊ 5┊ 5┊import {getChatsQuery} from '../../graphql/getChats.query';\n-┊ 6┊  ┊import {AddChat, AddGroup, AddMessage, GetChat, GetChats, GetUsers, RemoveAllMessages, RemoveChat, RemoveMessages} from '../../types';\n+┊  ┊ 6┊import {\n+┊  ┊ 7┊  AddChat, AddGroup, AddMessage, GetChat, GetChats, GetUsers, MessageAdded, RemoveAllMessages, RemoveChat,\n+┊  ┊ 8┊  RemoveMessages\n+┊  ┊ 9┊} from '../../types';\n ┊ 7┊10┊import {getChatQuery} from '../../graphql/getChat.query';\n ┊ 8┊11┊import {addMessageMutation} from '../../graphql/addMessage.mutation';\n ┊ 9┊12┊import {removeChatMutation} from '../../graphql/removeChat.mutation';\n```\n```diff\n@@ -17,6 +20,8 @@\n ┊17┊20┊import * as moment from 'moment';\n ┊18┊21┊import {FetchResult} from 'apollo-link';\n ┊19┊22┊import {LoginService} from '../login/services/login.service';\n+┊  ┊23┊import {chatAddedSubscription} from '../../graphql/chatAdded.subscription';\n+┊  ┊24┊import {messageAddedSubscription} from '../../graphql/messageAdded.subscription';\n ┊20┊25┊\n ┊21┊26┊@Injectable()\n ┊22┊27┊export class ChatsService {\n```\n```diff\n@@ -35,6 +40,55 @@\n ┊35┊40┊        amount: this.messagesAmount,\n ┊36┊41┊      },\n ┊37┊42┊    });\n+┊  ┊43┊\n+┊  ┊44┊    this.getChatsWq.subscribeToMore({\n+┊  ┊45┊      document: chatAddedSubscription,\n+┊  ┊46┊      updateQuery: (prev: GetChats.Query, { subscriptionData }) => {\n+┊  ┊47┊        if (!subscriptionData.data) {\n+┊  ┊48┊          return prev;\n+┊  ┊49┊        }\n+┊  ┊50┊\n+┊  ┊51┊        const newChat: GetChats.Chats = subscriptionData.data.chatAdded;\n+┊  ┊52┊\n+┊  ┊53┊        return Object.assign({}, prev, {\n+┊  ┊54┊          chats: [...prev.chats, newChat]\n+┊  ┊55┊        });\n+┊  ┊56┊      }\n+┊  ┊57┊    });\n+┊  ┊58┊\n+┊  ┊59┊    this.getChatsWq.subscribeToMore({\n+┊  ┊60┊      document: messageAddedSubscription,\n+┊  ┊61┊      updateQuery: (prev: GetChats.Query, { subscriptionData }) => {\n+┊  ┊62┊        if (!subscriptionData.data) {\n+┊  ┊63┊          return prev;\n+┊  ┊64┊        }\n+┊  ┊65┊\n+┊  ┊66┊        const newMessage: MessageAdded.MessageAdded = subscriptionData.data.messageAdded;\n+┊  ┊67┊\n+┊  ┊68┊        // We need to update the cache for both Chat and Chats. The following updates the cache for Chat.\n+┊  ┊69┊        try {\n+┊  ┊70┊          // Read the data from our cache for this query.\n+┊  ┊71┊          const {chat}: GetChat.Query = this.apollo.getClient().readQuery({\n+┊  ┊72┊            query: getChatQuery, variables: {\n+┊  ┊73┊              chatId: newMessage.chat.id,\n+┊  ┊74┊            }\n+┊  ┊75┊          });\n+┊  ┊76┊\n+┊  ┊77┊          // Add our message from the mutation to the end.\n+┊  ┊78┊          chat.messages.push(newMessage);\n+┊  ┊79┊          // Write our data back to the cache.\n+┊  ┊80┊          this.apollo.getClient().writeQuery({ query: getChatQuery, data: {chat} });\n+┊  ┊81┊        } catch {\n+┊  ┊82┊          console.error('The chat we received an update for does not exist in the store');\n+┊  ┊83┊        }\n+┊  ┊84┊\n+┊  ┊85┊        return Object.assign({}, prev, {\n+┊  ┊86┊          chats: [...prev.chats.map(_chat =>\n+┊  ┊87┊            _chat.id === newMessage.chat.id ? {..._chat, messages: [..._chat.messages, newMessage]} : _chat)]\n+┊  ┊88┊        });\n+┊  ┊89┊      }\n+┊  ┊90┊    });\n+┊  ┊91┊\n ┊38┊92┊    this.chats$ = this.getChatsWq.valueChanges.pipe(\n ┊39┊93┊      map((result: ApolloQueryResult<GetChats.Query>) => result.data.chats)\n ┊40┊94┊    );\n```\n```diff\n@@ -110,6 +164,10 @@\n ┊110┊164┊        addMessage: {\n ┊111┊165┊          id: ChatsService.getRandomId(),\n ┊112┊166┊          __typename: 'Message',\n+┊   ┊167┊          chat: {\n+┊   ┊168┊            id: chatId,\n+┊   ┊169┊            __typename: 'Chat',\n+┊   ┊170┊          },\n ┊113┊171┊          senderId: this.loginService.getUser().id,\n ┊114┊172┊          sender: {\n ┊115┊173┊            id: this.loginService.getUser().id,\n```\n\n[}]: #\n\nWe can finally configure the WebSocket in the app module. Please notice that the WebSocket has its own authentication instead of using the HttpInterceptor, in fact we use `connectionParams` to send the authorization.\nAll queries will go through HTTP except the Subscriptions, which will use the WebSocket.\n\n[{]: <helper> (diffStep \"11.1\" files=\"src/app/app.module.ts\" module=\"client\")\n\n#### Step 11.1: Subscriptions\n\n##### Changed src&#x2F;app&#x2F;app.module.ts\n```diff\n@@ -12,6 +12,11 @@\n ┊12┊12┊import {ChatsCreationModule} from './chats-creation/chats-creation.module';\n ┊13┊13┊import {LoginModule} from './login/login.module';\n ┊14┊14┊import {AuthInterceptor} from './login/services/auth.interceptor';\n+┊  ┊15┊import {getMainDefinition} from 'apollo-utilities';\n+┊  ┊16┊import {OperationDefinitionNode} from 'graphql';\n+┊  ┊17┊import {split} from 'apollo-link';\n+┊  ┊18┊import {WebSocketLink} from 'apollo-link-ws';\n+┊  ┊19┊import {LoginService} from './login/services/login.service';\n ┊15┊20┊const routes: Routes = [];\n ┊16┊21┊\n ┊17┊22┊@NgModule({\n```\n```diff\n@@ -45,9 +50,30 @@\n ┊45┊50┊  constructor(\n ┊46┊51┊    apollo: Apollo,\n ┊47┊52┊    httpLink: HttpLink,\n+┊  ┊53┊    loginService: LoginService,\n ┊48┊54┊  ) {\n+┊  ┊55┊    const subscriptionLink = new WebSocketLink({\n+┊  ┊56┊      uri:\n+┊  ┊57┊        'ws://localhost:3000/subscriptions',\n+┊  ┊58┊      options: {\n+┊  ┊59┊        reconnect: true,\n+┊  ┊60┊        connectionParams: () => ({\n+┊  ┊61┊          authToken: loginService.getAuthHeader() || null\n+┊  ┊62┊        })\n+┊  ┊63┊      }\n+┊  ┊64┊    });\n+┊  ┊65┊\n+┊  ┊66┊    const link = split(\n+┊  ┊67┊      ({ query }) => {\n+┊  ┊68┊        const { kind, operation } = <OperationDefinitionNode>getMainDefinition(<any>query);\n+┊  ┊69┊        return kind === 'OperationDefinition' && operation === 'subscription';\n+┊  ┊70┊      },\n+┊  ┊71┊      subscriptionLink,\n+┊  ┊72┊      httpLink.create(<Options>{uri: 'http://localhost:3000/graphql'})\n+┊  ┊73┊    );\n+┊  ┊74┊\n ┊49┊75┊    apollo.create({\n-┊50┊  ┊      link: httpLink.create(<Options>{uri: 'http://localhost:3000/graphql'}),\n+┊  ┊76┊      link,\n ┊51┊77┊      cache: new InMemoryCache({\n ┊52┊78┊        dataIdFromObject: (object: any) => {\n ┊53┊79┊          switch (object.__typename) {\n```\n\n[}]: #\n\nFinally, let's fix the tests:\n\n[{]: <helper> (diffStep \"11.1\" files=\"src/app/chat-viewer/containers/chat/chat.component.spec.ts, src/app/chats-lister/containers/chats/chats.component.spec.ts, src/app/services/chats.service.spec.ts\" module=\"client\")\n\n#### Step 11.1: Subscriptions\n\n##### Changed src&#x2F;app&#x2F;chat-viewer&#x2F;containers&#x2F;chat&#x2F;chat.component.spec.ts\n```diff\n@@ -149,6 +149,8 @@\n ┊149┊149┊    fixture = TestBed.createComponent(ChatComponent);\n ┊150┊150┊    component = fixture.componentInstance;\n ┊151┊151┊    fixture.detectChanges();\n+┊   ┊152┊    httpMock.expectOne(httpReq => httpReq.body.operationName === 'chatAdded', 'call to chatAdded api');\n+┊   ┊153┊    httpMock.expectOne(httpReq => httpReq.body.operationName === 'messageAdded', 'call to messageAdded api');\n ┊152┊154┊    httpMock.expectOne(httpReq => httpReq.body.operationName === 'GetChats', 'call to getChats api');\n ┊153┊155┊    const req = httpMock.expectOne(httpReq => httpReq.body.operationName === 'GetChat', 'call to getChat api');\n ┊154┊156┊    req.flush({\n```\n\n##### Changed src&#x2F;app&#x2F;chats-lister&#x2F;containers&#x2F;chats&#x2F;chats.component.spec.ts\n```diff\n@@ -364,7 +364,9 @@\n ┊364┊364┊    fixture = TestBed.createComponent(ChatsComponent);\n ┊365┊365┊    component = fixture.componentInstance;\n ┊366┊366┊    fixture.detectChanges();\n-┊367┊   ┊    const req = httpMock.expectOne('http://localhost:3000/graphql', 'call to api');\n+┊   ┊367┊    httpMock.expectOne(httpReq => httpReq.body.operationName === 'chatAdded', 'call to chatAdded api');\n+┊   ┊368┊    httpMock.expectOne(httpReq => httpReq.body.operationName === 'messageAdded', 'call to messageAdded api');\n+┊   ┊369┊    const req = httpMock.expectOne(httpReq => httpReq.body.operationName === 'GetChats', 'call to getChats api');\n ┊368┊370┊    req.flush({\n ┊369┊371┊      data: {\n ┊370┊372┊        chats\n```\n\n##### Changed src&#x2F;app&#x2F;services&#x2F;chats.service.spec.ts\n```diff\n@@ -346,7 +346,9 @@\n ┊346┊346┊      }\n ┊347┊347┊    });\n ┊348┊348┊\n-┊349┊   ┊    const req = httpMock.expectOne('http://localhost:3000/graphql', 'call to api');\n+┊   ┊349┊    httpMock.expectOne(httpReq => httpReq.body.operationName === 'chatAdded', 'call to chatAdded api');\n+┊   ┊350┊    httpMock.expectOne(httpReq => httpReq.body.operationName === 'messageAdded', 'call to messageAdded api');\n+┊   ┊351┊    const req = httpMock.expectOne(httpReq => httpReq.body.operationName === 'GetChats', 'call to getChats api');\n ┊350┊352┊    expect(req.request.method).toBe('POST');\n ┊351┊353┊    req.flush({\n ┊352┊354┊      data: {\n```\n\n[}]: #"
          },
          {
            "manualTitle": "Step 16: TypeORM with PostgreSQL",
            "stepRevision": "b18e5d766b19cc773340b6bd35aa85ccc930ad1d",
            "manualView": "## Server\n\nFirst of all you will have to install PostgreSQL on your operating system. Since there so many options (different Linux distributions, MacOS X, Windows...) I will assume that you already know how to install a software in your OS and take that part for granted.\n\nThen you will have to install a couple of packages:\n\n    npm install pg reflect-metadata typeorm\n    npm install --save-dev @types/pg\n\nWe aren't going to use plain SQL, instead we will use an Object-relational mapping framework (ORM) called `TypeORM`.\n`TypeORM` takes advantage of Typescript classes and type declarations in order to infer the db structure.\n\nWe will need to enable support for experimental decorators, emit type metadata for decorators and disable strict property initialization:\n\n[{]: <helper> (diffStep \"6.1\" files=\"tsconfig.json\" module=\"server\")\n\n#### Step 6.1: TypeORM with PostgreSQL\n\n##### Changed tsconfig.json\n```diff\n@@ -22,11 +22,11 @@\n ┊22┊22┊    // \"isolatedModules\": true,               /* Transpile each file as a separate module (similar to 'ts.transpileModule'). */\n ┊23┊23┊\n ┊24┊24┊    /* Strict Type-Checking Options */\n-┊25┊  ┊    \"strict\": true,                            /* Enable all strict type-checking options. */\n+┊  ┊25┊    \"strict\": true,                           /* Enable all strict type-checking options. */\n ┊26┊26┊    // \"noImplicitAny\": true,                 /* Raise error on expressions and declarations with an implied 'any' type. */\n ┊27┊27┊    // \"strictNullChecks\": true,              /* Enable strict null checks. */\n ┊28┊28┊    // See https://github.com/DefinitelyTyped/DefinitelyTyped/issues/21359\n-┊29┊  ┊    \"strictFunctionTypes\": false              /* Enable strict checking of function types. */\n+┊  ┊29┊    \"strictFunctionTypes\": false,             /* Enable strict checking of function types. */\n ┊30┊30┊    // \"noImplicitThis\": true,                /* Raise error on 'this' expressions with an implied 'any' type. */\n ┊31┊31┊    // \"alwaysStrict\": true,                  /* Parse in strict mode and emit \"use strict\" for each source file. */\n ┊32┊32┊\n```\n```diff\n@@ -53,7 +53,8 @@\n ┊53┊53┊    // \"inlineSources\": true,                 /* Emit the source alongside the sourcemaps within a single file; requires '--inlineSourceMap' or '--sourceMap' to be set. */\n ┊54┊54┊\n ┊55┊55┊    /* Experimental Options */\n-┊56┊  ┊    // \"experimentalDecorators\": true,        /* Enables experimental support for ES7 decorators. */\n-┊57┊  ┊    // \"emitDecoratorMetadata\": true,         /* Enables experimental support for emitting type metadata for decorators. */\n+┊  ┊56┊    \"experimentalDecorators\": true,           /* Enables experimental support for ES7 decorators. */\n+┊  ┊57┊    \"emitDecoratorMetadata\": true,            /* Enables experimental support for emitting type metadata for decorators. */\n+┊  ┊58┊    \"strictPropertyInitialization\": false\n ┊58┊59┊  }\n ┊59┊60┊}🚫↵\n```\n\n[}]: #\n\nThe next step is to create Entities. An Entity is a class that maps to a database table. You can create a entity by defining a new class and mark it with @Entity():\n\n[{]: <helper> (diffStep \"6.1\" files=\"entity\" module=\"server\")\n\n#### Step 6.1: TypeORM with PostgreSQL\n\n##### Added entity&#x2F;Chat.ts\n```diff\n@@ -0,0 +1,79 @@\n+┊  ┊ 1┊import { Entity, Column, PrimaryGeneratedColumn, OneToMany, JoinTable, ManyToMany, ManyToOne } from \"typeorm\";\n+┊  ┊ 2┊import { Message } from \"./Message\";\n+┊  ┊ 3┊import { User } from \"./User\";\n+┊  ┊ 4┊import { Recipient } from \"./Recipient\";\n+┊  ┊ 5┊\n+┊  ┊ 6┊interface ChatConstructor {\n+┊  ┊ 7┊  name?: string;\n+┊  ┊ 8┊  picture?: string;\n+┊  ┊ 9┊  allTimeMembers?: User[];\n+┊  ┊10┊  listingMembers?: User[];\n+┊  ┊11┊  actualGroupMembers?: User[];\n+┊  ┊12┊  admins?: User[];\n+┊  ┊13┊  owner?: User;\n+┊  ┊14┊  messages?: Message[];\n+┊  ┊15┊}\n+┊  ┊16┊\n+┊  ┊17┊@Entity()\n+┊  ┊18┊export class Chat {\n+┊  ┊19┊  @PrimaryGeneratedColumn()\n+┊  ┊20┊  id: number;\n+┊  ┊21┊\n+┊  ┊22┊  @Column({nullable: true})\n+┊  ┊23┊  name: string;\n+┊  ┊24┊\n+┊  ┊25┊  @Column({nullable: true})\n+┊  ┊26┊  picture: string;\n+┊  ┊27┊\n+┊  ┊28┊  @ManyToMany(type => User, user => user.allTimeMemberChats, {cascade: [\"insert\", \"update\"], eager: false})\n+┊  ┊29┊  @JoinTable()\n+┊  ┊30┊  allTimeMembers: User[];\n+┊  ┊31┊\n+┊  ┊32┊  @ManyToMany(type => User, user => user.listingMemberChats, {cascade: [\"insert\", \"update\"], eager: false})\n+┊  ┊33┊  @JoinTable()\n+┊  ┊34┊  listingMembers: User[];\n+┊  ┊35┊\n+┊  ┊36┊  @ManyToMany(type => User, user => user.actualGroupMemberChats, {cascade: [\"insert\", \"update\"], eager: false})\n+┊  ┊37┊  @JoinTable()\n+┊  ┊38┊  actualGroupMembers?: User[];\n+┊  ┊39┊\n+┊  ┊40┊  @ManyToMany(type => User, user => user.adminChats, {cascade: [\"insert\", \"update\"], eager: false})\n+┊  ┊41┊  @JoinTable()\n+┊  ┊42┊  admins?: User[];\n+┊  ┊43┊\n+┊  ┊44┊  @ManyToOne(type => User, user => user.ownerChats, {cascade: [\"insert\", \"update\"], eager: false})\n+┊  ┊45┊  owner?: User | null;\n+┊  ┊46┊\n+┊  ┊47┊  @OneToMany(type => Message, message => message.chat, {cascade: [\"insert\", \"update\"], eager: true})\n+┊  ┊48┊  messages: Message[];\n+┊  ┊49┊\n+┊  ┊50┊  @OneToMany(type => Recipient, recipient => recipient.chat)\n+┊  ┊51┊  recipients: Recipient[];\n+┊  ┊52┊\n+┊  ┊53┊  constructor({name, picture, allTimeMembers, listingMembers, actualGroupMembers, admins, owner, messages}: ChatConstructor = {}) {\n+┊  ┊54┊    if (name) {\n+┊  ┊55┊      this.name = name;\n+┊  ┊56┊    }\n+┊  ┊57┊    if (picture) {\n+┊  ┊58┊      this.picture = picture;\n+┊  ┊59┊    }\n+┊  ┊60┊    if (allTimeMembers) {\n+┊  ┊61┊      this.allTimeMembers = allTimeMembers;\n+┊  ┊62┊    }\n+┊  ┊63┊    if (listingMembers) {\n+┊  ┊64┊      this.listingMembers = listingMembers;\n+┊  ┊65┊    }\n+┊  ┊66┊    if (actualGroupMembers) {\n+┊  ┊67┊      this.actualGroupMembers = actualGroupMembers;\n+┊  ┊68┊    }\n+┊  ┊69┊    if (admins) {\n+┊  ┊70┊      this.admins = admins;\n+┊  ┊71┊    }\n+┊  ┊72┊    if (owner) {\n+┊  ┊73┊      this.owner = owner;\n+┊  ┊74┊    }\n+┊  ┊75┊    if (messages) {\n+┊  ┊76┊      this.messages = messages;\n+┊  ┊77┊    }\n+┊  ┊78┊  }\n+┊  ┊79┊}\n```\n\n##### Added entity&#x2F;Message.ts\n```diff\n@@ -0,0 +1,70 @@\n+┊  ┊ 1┊import {\n+┊  ┊ 2┊  Entity, Column, PrimaryGeneratedColumn, OneToMany, ManyToOne, ManyToMany, JoinTable, CreateDateColumn\n+┊  ┊ 3┊} from \"typeorm\";\n+┊  ┊ 4┊import { Chat } from \"./Chat\";\n+┊  ┊ 5┊import { User } from \"./User\";\n+┊  ┊ 6┊import { Recipient } from \"./Recipient\";\n+┊  ┊ 7┊import { MessageType } from \"../db\";\n+┊  ┊ 8┊\n+┊  ┊ 9┊interface MessageConstructor {\n+┊  ┊10┊  sender?: User;\n+┊  ┊11┊  content?: string;\n+┊  ┊12┊  createdAt?: Date,\n+┊  ┊13┊  type?: MessageType;\n+┊  ┊14┊  recipients?: Recipient[];\n+┊  ┊15┊  holders?: User[];\n+┊  ┊16┊  chat?: Chat;\n+┊  ┊17┊}\n+┊  ┊18┊\n+┊  ┊19┊@Entity()\n+┊  ┊20┊export class Message {\n+┊  ┊21┊  @PrimaryGeneratedColumn()\n+┊  ┊22┊  id: number;\n+┊  ┊23┊\n+┊  ┊24┊  @ManyToOne(type => User, user => user.senderMessages, {eager: true})\n+┊  ┊25┊  sender: User;\n+┊  ┊26┊\n+┊  ┊27┊  @Column()\n+┊  ┊28┊  content: string;\n+┊  ┊29┊\n+┊  ┊30┊  @CreateDateColumn({nullable: true})\n+┊  ┊31┊  createdAt: Date;\n+┊  ┊32┊\n+┊  ┊33┊  @Column()\n+┊  ┊34┊  type: number;\n+┊  ┊35┊\n+┊  ┊36┊  @OneToMany(type => Recipient, recipient => recipient.message, {cascade: [\"insert\", \"update\"], eager: true})\n+┊  ┊37┊  recipients: Recipient[];\n+┊  ┊38┊\n+┊  ┊39┊  @ManyToMany(type => User, user => user.holderMessages, {cascade: [\"insert\", \"update\"], eager: true})\n+┊  ┊40┊  @JoinTable()\n+┊  ┊41┊  holders: User[];\n+┊  ┊42┊\n+┊  ┊43┊  @ManyToOne(type => Chat, chat => chat.messages)\n+┊  ┊44┊  chat: Chat;\n+┊  ┊45┊\n+┊  ┊46┊  constructor({sender, content, createdAt, type, recipients, holders, chat}: MessageConstructor = {}) {\n+┊  ┊47┊    if (sender) {\n+┊  ┊48┊      this.sender = sender;\n+┊  ┊49┊    }\n+┊  ┊50┊    if (content) {\n+┊  ┊51┊      this.content = content;\n+┊  ┊52┊    }\n+┊  ┊53┊    if (createdAt) {\n+┊  ┊54┊      this.createdAt = createdAt;\n+┊  ┊55┊    }\n+┊  ┊56┊    if (type) {\n+┊  ┊57┊      this.type = type;\n+┊  ┊58┊    }\n+┊  ┊59┊    if (recipients) {\n+┊  ┊60┊      recipients.forEach(recipient => recipient.message = this);\n+┊  ┊61┊      this.recipients = recipients;\n+┊  ┊62┊    }\n+┊  ┊63┊    if (holders) {\n+┊  ┊64┊      this.holders = holders;\n+┊  ┊65┊    }\n+┊  ┊66┊    if (chat) {\n+┊  ┊67┊      this.chat = chat;\n+┊  ┊68┊    }\n+┊  ┊69┊  }\n+┊  ┊70┊}\n```\n\n##### Added entity&#x2F;Recipient.ts\n```diff\n@@ -0,0 +1,44 @@\n+┊  ┊ 1┊import { Entity, ManyToOne, Column } from \"typeorm\";\n+┊  ┊ 2┊import { Message } from \"./Message\";\n+┊  ┊ 3┊import { User } from \"./User\";\n+┊  ┊ 4┊import { Chat } from \"./Chat\";\n+┊  ┊ 5┊\n+┊  ┊ 6┊interface RecipientConstructor {\n+┊  ┊ 7┊  user?: User;\n+┊  ┊ 8┊  message?: Message;\n+┊  ┊ 9┊  receivedAt?: Date;\n+┊  ┊10┊  readAt?: Date;\n+┊  ┊11┊}\n+┊  ┊12┊\n+┊  ┊13┊@Entity()\n+┊  ┊14┊export class Recipient {\n+┊  ┊15┊  @ManyToOne(type => User, user => user.recipients, { primary: true })\n+┊  ┊16┊  user: User;\n+┊  ┊17┊\n+┊  ┊18┊  @ManyToOne(type => Message, message => message.recipients, { primary: true })\n+┊  ┊19┊  message: Message;\n+┊  ┊20┊\n+┊  ┊21┊  @ManyToOne(type => Chat, chat => chat.recipients)\n+┊  ┊22┊  chat: Chat;\n+┊  ┊23┊\n+┊  ┊24┊  @Column({nullable: true})\n+┊  ┊25┊  receivedAt: Date;\n+┊  ┊26┊\n+┊  ┊27┊  @Column({nullable: true})\n+┊  ┊28┊  readAt: Date;\n+┊  ┊29┊\n+┊  ┊30┊  constructor({user, message, receivedAt, readAt}: RecipientConstructor = {}) {\n+┊  ┊31┊    if (user) {\n+┊  ┊32┊      this.user = user;\n+┊  ┊33┊    }\n+┊  ┊34┊    if (message) {\n+┊  ┊35┊      this.message = message;\n+┊  ┊36┊    }\n+┊  ┊37┊    if (receivedAt) {\n+┊  ┊38┊      this.receivedAt = receivedAt;\n+┊  ┊39┊    }\n+┊  ┊40┊    if (readAt) {\n+┊  ┊41┊      this.readAt = readAt;\n+┊  ┊42┊    }\n+┊  ┊43┊  }\n+┊  ┊44┊}\n```\n\n##### Added entity&#x2F;User.ts\n```diff\n@@ -0,0 +1,75 @@\n+┊  ┊ 1┊import { Entity, Column, PrimaryGeneratedColumn, ManyToMany, OneToMany } from \"typeorm\";\n+┊  ┊ 2┊import { Chat } from \"./Chat\";\n+┊  ┊ 3┊import { Message } from \"./Message\";\n+┊  ┊ 4┊import { Recipient } from \"./Recipient\";\n+┊  ┊ 5┊\n+┊  ┊ 6┊interface UserConstructor {\n+┊  ┊ 7┊  username?: string;\n+┊  ┊ 8┊  password?: string;\n+┊  ┊ 9┊  name?: string;\n+┊  ┊10┊  picture?: string;\n+┊  ┊11┊  phone?: string;\n+┊  ┊12┊}\n+┊  ┊13┊\n+┊  ┊14┊@Entity()\n+┊  ┊15┊export class User {\n+┊  ┊16┊  @PrimaryGeneratedColumn()\n+┊  ┊17┊  id: number;\n+┊  ┊18┊\n+┊  ┊19┊  @Column()\n+┊  ┊20┊  username: string;\n+┊  ┊21┊\n+┊  ┊22┊  @Column()\n+┊  ┊23┊  password: string;\n+┊  ┊24┊\n+┊  ┊25┊  @Column()\n+┊  ┊26┊  name: string;\n+┊  ┊27┊\n+┊  ┊28┊  @Column({nullable: true})\n+┊  ┊29┊  picture: string;\n+┊  ┊30┊\n+┊  ┊31┊  @Column({nullable: true})\n+┊  ┊32┊  phone?: string;\n+┊  ┊33┊\n+┊  ┊34┊  @ManyToMany(type => Chat, chat => chat.allTimeMembers)\n+┊  ┊35┊  allTimeMemberChats: Chat[];\n+┊  ┊36┊\n+┊  ┊37┊  @ManyToMany(type => Chat, chat => chat.listingMembers)\n+┊  ┊38┊  listingMemberChats: Chat[];\n+┊  ┊39┊\n+┊  ┊40┊  @ManyToMany(type => Chat, chat => chat.actualGroupMembers)\n+┊  ┊41┊  actualGroupMemberChats: Chat[];\n+┊  ┊42┊\n+┊  ┊43┊  @ManyToMany(type => Chat, chat => chat.admins)\n+┊  ┊44┊  adminChats: Chat[];\n+┊  ┊45┊\n+┊  ┊46┊  @ManyToMany(type => Message, message => message.holders)\n+┊  ┊47┊  holderMessages: Message[];\n+┊  ┊48┊\n+┊  ┊49┊  @OneToMany(type => Chat, chat => chat.owner)\n+┊  ┊50┊  ownerChats: Chat[];\n+┊  ┊51┊\n+┊  ┊52┊  @OneToMany(type => Message, message => message.sender)\n+┊  ┊53┊  senderMessages: Message[];\n+┊  ┊54┊\n+┊  ┊55┊  @OneToMany(type => Recipient, recipient => recipient.user)\n+┊  ┊56┊  recipients: Recipient[];\n+┊  ┊57┊\n+┊  ┊58┊  constructor({username, password, name, picture, phone}: UserConstructor = {}) {\n+┊  ┊59┊    if (username) {\n+┊  ┊60┊      this.username = username;\n+┊  ┊61┊    }\n+┊  ┊62┊    if (password) {\n+┊  ┊63┊      this.password = password;\n+┊  ┊64┊    }\n+┊  ┊65┊    if (name) {\n+┊  ┊66┊      this.name = name;\n+┊  ┊67┊    }\n+┊  ┊68┊    if (picture) {\n+┊  ┊69┊      this.picture = picture;\n+┊  ┊70┊    }\n+┊  ┊71┊    if (phone) {\n+┊  ┊72┊      this.phone = phone;\n+┊  ┊73┊    }\n+┊  ┊74┊  }\n+┊  ┊75┊}\n```\n\n[}]: #\n\nBasic entities consist of columns and relations. Each entity MUST have a primary column.\n\nEach entity must be registered in your connection options:\n\n[{]: <helper> (diffStep \"6.1\" files=\"ormconfig.json\" module=\"server\")\n\n#### Step 6.1: TypeORM with PostgreSQL\n\n##### Added ormconfig.json\n```diff\n@@ -0,0 +1,24 @@\n+┊  ┊ 1┊{\n+┊  ┊ 2┊   \"type\": \"postgres\",\n+┊  ┊ 3┊   \"host\": \"localhost\",\n+┊  ┊ 4┊   \"port\": 5432,\n+┊  ┊ 5┊   \"username\": \"test\",\n+┊  ┊ 6┊   \"password\": \"\",\n+┊  ┊ 7┊   \"database\": \"test\",\n+┊  ┊ 8┊   \"synchronize\": true,\n+┊  ┊ 9┊   \"logging\": false,\n+┊  ┊10┊   \"entities\": [\n+┊  ┊11┊      \"entity/**/*.ts\"\n+┊  ┊12┊   ],\n+┊  ┊13┊   \"migrations\": [\n+┊  ┊14┊      \"migration/**/*.ts\"\n+┊  ┊15┊   ],\n+┊  ┊16┊   \"subscribers\": [\n+┊  ┊17┊      \"subscriber/**/*.ts\"\n+┊  ┊18┊   ],\n+┊  ┊19┊   \"cli\": {\n+┊  ┊20┊      \"entitiesDir\": \"entity\",\n+┊  ┊21┊      \"migrationsDir\": \"migration\",\n+┊  ┊22┊      \"subscribersDir\": \"subscriber\"\n+┊  ┊23┊   }\n+┊  ┊24┊}🚫↵\n```\n\n[}]: #\n\nSince database table consist of columns your entities must consist of columns too. Each entity class property you marked with @Column will be mapped to a database table column.\nEach entity must have at least one primary column. There are several types of primary columns, but in our case `@PrimaryGeneratedColumn()` creates a primary column which value will be automatically generated with an auto-increment value.\n`@CreateDateColumn` is a special column that is automatically set to the entity's insertion date. You don't need set this column - it will be automatically set.\nFor the Recipient Entity we use a composite primary key that consists of two foreign keys.\n\nThe next thing to do is to create a connection with the database before firing up the web server:\n\n[{]: <helper> (diffStep \"6.1\" files=\"index.ts\" module=\"server\")\n\n#### Step 6.1: TypeORM with PostgreSQL\n\n##### Changed index.ts\n```diff\n@@ -1,3 +1,5 @@\n+┊ ┊1┊// For TypeORM\n+┊ ┊2┊import \"reflect-metadata\";\n ┊1┊3┊import { schema } from \"./schema\";\n ┊2┊4┊import * as bodyParser from \"body-parser\";\n ┊3┊5┊import * as cors from 'cors';\n```\n```diff\n@@ -6,12 +8,12 @@\n ┊ 6┊ 8┊import * as passport from \"passport\";\n ┊ 7┊ 9┊import * as basicStrategy from 'passport-http';\n ┊ 8┊10┊import * as bcrypt from 'bcrypt-nodejs';\n-┊ 9┊  ┊import { db, User } from \"./db\";\n ┊10┊11┊import { createServer } from \"http\";\n ┊11┊12┊import { SubscriptionServer } from \"subscriptions-transport-ws\";\n ┊12┊13┊import { execute, subscribe } from \"graphql\";\n-┊13┊  ┊\n-┊14┊  ┊let users = db.users;\n+┊  ┊14┊import { createConnection } from \"typeorm\";\n+┊  ┊15┊import { User } from \"./entity/User\";\n+┊  ┊16┊import { addSampleData } from \"./db\";\n ┊15┊17┊\n ┊16┊18┊function generateHash(password: string) {\n ┊17┊19┊  return bcrypt.hashSync(password, bcrypt.genSaltSync(8));\n```\n```diff\n@@ -21,94 +23,97 @@\n ┊ 21┊ 23┊  return bcrypt.compareSync(password, localPassword);\n ┊ 22┊ 24┊}\n ┊ 23┊ 25┊\n-┊ 24┊   ┊passport.use('basic-signin', new basicStrategy.BasicStrategy(\n-┊ 25┊   ┊  function (username, password, done) {\n-┊ 26┊   ┊    const user = users.find(user => user.username == username);\n-┊ 27┊   ┊    if (user && validPassword(password, user.password)) {\n-┊ 28┊   ┊      return done(null, user);\n+┊   ┊ 26┊createConnection().then(async connection => {\n+┊   ┊ 27┊  await addSampleData(connection);\n+┊   ┊ 28┊\n+┊   ┊ 29┊  passport.use('basic-signin', new basicStrategy.BasicStrategy(\n+┊   ┊ 30┊    async function (username, password, done) {\n+┊   ┊ 31┊      const user = await connection.getRepository(User).findOne({where: { username }});\n+┊   ┊ 32┊      if (user && validPassword(password, user.password)) {\n+┊   ┊ 33┊        return done(null, user);\n+┊   ┊ 34┊      }\n+┊   ┊ 35┊      return done(null, false);\n ┊ 29┊ 36┊    }\n-┊ 30┊   ┊    return done(null, false);\n-┊ 31┊   ┊  }\n-┊ 32┊   ┊));\n+┊   ┊ 37┊  ));\n ┊ 33┊ 38┊\n-┊ 34┊   ┊passport.use('basic-signup', new basicStrategy.BasicStrategy({passReqToCallback: true},\n-┊ 35┊   ┊  function (req: any, username: any, password: any, done: any) {\n-┊ 36┊   ┊    const userExists = !!users.find(user => user.username === username);\n-┊ 37┊   ┊    if (!userExists && password && req.body.name) {\n-┊ 38┊   ┊      const user: User = {\n-┊ 39┊   ┊        id: (users.length && users[users.length - 1].id + 1) || 1,\n-┊ 40┊   ┊        username,\n-┊ 41┊   ┊        password: generateHash(password),\n-┊ 42┊   ┊        name: req.body.name,\n-┊ 43┊   ┊      };\n-┊ 44┊   ┊      users.push(user);\n-┊ 45┊   ┊      return done(null, user);\n+┊   ┊ 39┊  passport.use('basic-signup', new basicStrategy.BasicStrategy({passReqToCallback: true},\n+┊   ┊ 40┊    async function (req: any, username: any, password: any, done: any) {\n+┊   ┊ 41┊      const userExists = !!(await connection.getRepository(User).findOne({where: { username }}));\n+┊   ┊ 42┊      if (!userExists && password && req.body.name) {\n+┊   ┊ 43┊        const user = await connection.manager.save(new User({\n+┊   ┊ 44┊          username,\n+┊   ┊ 45┊          password: generateHash(password),\n+┊   ┊ 46┊          name: req.body.name,\n+┊   ┊ 47┊        }));\n+┊   ┊ 48┊        return done(null, user);\n+┊   ┊ 49┊      }\n+┊   ┊ 50┊      return done(null, false);\n ┊ 46┊ 51┊    }\n-┊ 47┊   ┊    return done(null, false);\n-┊ 48┊   ┊  }\n-┊ 49┊   ┊));\n+┊   ┊ 52┊  ));\n ┊ 50┊ 53┊\n-┊ 51┊   ┊const PORT = 3000;\n+┊   ┊ 54┊  const PORT = 3000;\n ┊ 52┊ 55┊\n-┊ 53┊   ┊const app = express();\n+┊   ┊ 56┊  const app = express();\n ┊ 54┊ 57┊\n-┊ 55┊   ┊app.use(cors());\n-┊ 56┊   ┊app.use(bodyParser.json());\n-┊ 57┊   ┊app.use(passport.initialize());\n+┊   ┊ 58┊  app.use(cors());\n+┊   ┊ 59┊  app.use(bodyParser.json());\n+┊   ┊ 60┊  app.use(passport.initialize());\n ┊ 58┊ 61┊\n-┊ 59┊   ┊app.post('/signup',\n-┊ 60┊   ┊  passport.authenticate('basic-signup', {session: false}),\n-┊ 61┊   ┊  function (req, res) {\n-┊ 62┊   ┊    res.json(req.user);\n-┊ 63┊   ┊  });\n+┊   ┊ 62┊  app.post('/signup',\n+┊   ┊ 63┊    passport.authenticate('basic-signup', {session: false}),\n+┊   ┊ 64┊    function (req, res) {\n+┊   ┊ 65┊      res.json(req.user);\n+┊   ┊ 66┊    });\n ┊ 64┊ 67┊\n-┊ 65┊   ┊app.use(passport.authenticate('basic-signin', {session: false}));\n+┊   ┊ 68┊  app.use(passport.authenticate('basic-signin', {session: false}));\n ┊ 66┊ 69┊\n-┊ 67┊   ┊app.post('/signin', function (req, res) {\n-┊ 68┊   ┊  res.json(req.user);\n-┊ 69┊   ┊});\n+┊   ┊ 70┊  app.post('/signin', function (req, res) {\n+┊   ┊ 71┊    res.json(req.user);\n+┊   ┊ 72┊  });\n ┊ 70┊ 73┊\n-┊ 71┊   ┊app.use('/graphql', graphqlExpress(req => ({\n-┊ 72┊   ┊  schema: schema,\n-┊ 73┊   ┊  context: {\n-┊ 74┊   ┊    user: req!['user'],\n-┊ 75┊   ┊  },\n-┊ 76┊   ┊})));\n+┊   ┊ 74┊  app.use('/graphql', graphqlExpress(req => ({\n+┊   ┊ 75┊    schema: schema,\n+┊   ┊ 76┊    context: {\n+┊   ┊ 77┊      user: req!['user'],\n+┊   ┊ 78┊      connection,\n+┊   ┊ 79┊    },\n+┊   ┊ 80┊  })));\n ┊ 77┊ 81┊\n-┊ 78┊   ┊app.use('/graphiql', graphiqlExpress({\n-┊ 79┊   ┊  endpointURL: '/graphql',\n-┊ 80┊   ┊}));\n+┊   ┊ 82┊  app.use('/graphiql', graphiqlExpress({\n+┊   ┊ 83┊    endpointURL: '/graphql',\n+┊   ┊ 84┊  }));\n ┊ 81┊ 85┊\n ┊ 82┊ 86┊// Wrap the Express server\n-┊ 83┊   ┊const ws = createServer(app);\n-┊ 84┊   ┊ws.listen(PORT, () => {\n-┊ 85┊   ┊  console.log(`Apollo Server is now running on http://localhost:${PORT}`);\n-┊ 86┊   ┊  // Set up the WebSocket for handling GraphQL subscriptions\n-┊ 87┊   ┊  new SubscriptionServer({\n-┊ 88┊   ┊    onConnect: (connectionParams: any, webSocket: any) => {\n-┊ 89┊   ┊      if (connectionParams.authToken) {\n-┊ 90┊   ┊        // create a buffer and tell it the data coming in is base64\n-┊ 91┊   ┊        const buf = new Buffer(connectionParams.authToken.split(' ')[1], 'base64');\n-┊ 92┊   ┊        // read it back out as a string\n-┊ 93┊   ┊        const [username, password]: string[] = buf.toString().split(':');\n-┊ 94┊   ┊        if (username && password) {\n-┊ 95┊   ┊          const user = users.find(user => user.username == username);\n+┊   ┊ 87┊  const ws = createServer(app);\n+┊   ┊ 88┊  ws.listen(PORT, () => {\n+┊   ┊ 89┊    console.log(`Apollo Server is now running on http://localhost:${PORT}`);\n+┊   ┊ 90┊    // Set up the WebSocket for handling GraphQL subscriptions\n+┊   ┊ 91┊    new SubscriptionServer({\n+┊   ┊ 92┊      onConnect: async (connectionParams: any, webSocket: any) => {\n+┊   ┊ 93┊        if (connectionParams.authToken) {\n+┊   ┊ 94┊          // Create a buffer and tell it the data coming in is base64\n+┊   ┊ 95┊          const buf = new Buffer(connectionParams.authToken.split(' ')[1], 'base64');\n+┊   ┊ 96┊          // Read it back out as a string\n+┊   ┊ 97┊          const [username, password]: string[] = buf.toString().split(':');\n+┊   ┊ 98┊          if (username && password) {\n+┊   ┊ 99┊            const user = await connection.getRepository(User).findOne({where: { username }});\n ┊ 96┊100┊\n-┊ 97┊   ┊          if (user && validPassword(password, user.password)) {\n-┊ 98┊   ┊            // Set context for the WebSocket\n-┊ 99┊   ┊            return {user};\n-┊100┊   ┊          } else {\n-┊101┊   ┊            throw new Error('Wrong credentials!');\n+┊   ┊101┊            if (user && validPassword(password, user.password)) {\n+┊   ┊102┊              // Set context for the WebSocket\n+┊   ┊103┊              return {user, connection};\n+┊   ┊104┊            } else {\n+┊   ┊105┊              throw new Error('Wrong credentials!');\n+┊   ┊106┊            }\n ┊102┊107┊          }\n ┊103┊108┊        }\n-┊104┊   ┊      }\n-┊105┊   ┊      throw new Error('Missing auth token!');\n-┊106┊   ┊    },\n-┊107┊   ┊    execute,\n-┊108┊   ┊    subscribe,\n-┊109┊   ┊    schema\n-┊110┊   ┊  }, {\n-┊111┊   ┊    server: ws,\n-┊112┊   ┊    path: '/subscriptions',\n+┊   ┊109┊        throw new Error('Missing auth token!');\n+┊   ┊110┊      },\n+┊   ┊111┊      execute,\n+┊   ┊112┊      subscribe,\n+┊   ┊113┊      schema\n+┊   ┊114┊    }, {\n+┊   ┊115┊      server: ws,\n+┊   ┊116┊      path: '/subscriptions',\n+┊   ┊117┊    });\n ┊113┊118┊  });\n ┊114┊119┊});\n```\n\n[}]: #\n\nWe will also remove our fake db and replace it with some real data:\n\n[{]: <helper> (diffStep \"6.1\" files=\"db.ts\" module=\"server\")\n\n#### Step 6.1: TypeORM with PostgreSQL\n\n##### Changed db.ts\n```diff\n@@ -1,4 +1,11 @@\n+┊  ┊ 1┊// For TypeORM\n+┊  ┊ 2┊import \"reflect-metadata\";\n+┊  ┊ 3┊import { Chat } from \"./entity/Chat\";\n+┊  ┊ 4┊import { Recipient } from \"./entity/Recipient\";\n ┊ 1┊ 5┊import * as moment from 'moment';\n+┊  ┊ 6┊import { Message } from \"./entity/Message\";\n+┊  ┊ 7┊import { User } from \"./entity/User\";\n+┊  ┊ 8┊import { Connection } from \"typeorm\";\n ┊ 2┊ 9┊\n ┊ 3┊10┊export enum MessageType {\n ┊ 4┊11┊  PICTURE,\n```\n```diff\n@@ -6,433 +13,280 @@\n ┊  6┊ 13┊  LOCATION,\n ┊  7┊ 14┊}\n ┊  8┊ 15┊\n-┊  9┊   ┊export interface User {\n-┊ 10┊   ┊  id: number,\n-┊ 11┊   ┊  username: string,\n-┊ 12┊   ┊  password: string,\n-┊ 13┊   ┊  name: string,\n-┊ 14┊   ┊  picture?: string | null,\n-┊ 15┊   ┊  phone?: string | null,\n-┊ 16┊   ┊}\n-┊ 17┊   ┊\n-┊ 18┊   ┊export interface Chat {\n-┊ 19┊   ┊  id: number,\n-┊ 20┊   ┊  name?: string | null,\n-┊ 21┊   ┊  picture?: string | null,\n-┊ 22┊   ┊  // All members, current and past ones.\n-┊ 23┊   ┊  allTimeMemberIds: number[],\n-┊ 24┊   ┊  // Whoever gets the chat listed. For groups includes past members who still didn't delete the group.\n-┊ 25┊   ┊  listingMemberIds: number[],\n-┊ 26┊   ┊  // Actual members of the group (they are not the only ones who get the group listed). Null for chats.\n-┊ 27┊   ┊  actualGroupMemberIds?: number[] | null,\n-┊ 28┊   ┊  adminIds?: number[] | null,\n-┊ 29┊   ┊  ownerId?: number | null,\n-┊ 30┊   ┊  messages: Message[],\n-┊ 31┊   ┊}\n-┊ 32┊   ┊\n-┊ 33┊   ┊export interface Message {\n-┊ 34┊   ┊  id: number,\n-┊ 35┊   ┊  chatId: number,\n-┊ 36┊   ┊  senderId: number,\n-┊ 37┊   ┊  content: string,\n-┊ 38┊   ┊  createdAt: number,\n-┊ 39┊   ┊  type: MessageType,\n-┊ 40┊   ┊  recipients: Recipient[],\n-┊ 41┊   ┊  holderIds: number[],\n-┊ 42┊   ┊}\n-┊ 43┊   ┊\n-┊ 44┊   ┊export interface Recipient {\n-┊ 45┊   ┊  userId: number,\n-┊ 46┊   ┊  messageId: number,\n-┊ 47┊   ┊  chatId: number,\n-┊ 48┊   ┊  receivedAt: number | null,\n-┊ 49┊   ┊  readAt: number | null,\n-┊ 50┊   ┊}\n-┊ 51┊   ┊\n-┊ 52┊   ┊const users: User[] = [\n-┊ 53┊   ┊  {\n-┊ 54┊   ┊    id: 1,\n+┊   ┊ 16┊export async function addSampleData(connection: Connection) {\n+┊   ┊ 17┊  const user1 = new User({\n ┊ 55┊ 18┊    username: 'ethan',\n ┊ 56┊ 19┊    password: '$2a$08$NO9tkFLCoSqX1c5wk3s7z.JfxaVMKA.m7zUDdDwEquo4rvzimQeJm', // 111\n ┊ 57┊ 20┊    name: 'Ethan Gonzalez',\n ┊ 58┊ 21┊    picture: 'https://randomuser.me/api/portraits/thumb/men/1.jpg',\n ┊ 59┊ 22┊    phone: '+391234567890',\n-┊ 60┊   ┊  },\n-┊ 61┊   ┊  {\n-┊ 62┊   ┊    id: 2,\n+┊   ┊ 23┊  });\n+┊   ┊ 24┊  await connection.manager.save(user1);\n+┊   ┊ 25┊\n+┊   ┊ 26┊  const user2 = new User({\n ┊ 63┊ 27┊    username: 'bryan',\n ┊ 64┊ 28┊    password: '$2a$08$xE4FuCi/ifxjL2S8CzKAmuKLwv18ktksSN.F3XYEnpmcKtpbpeZgO', // 222\n ┊ 65┊ 29┊    name: 'Bryan Wallace',\n ┊ 66┊ 30┊    picture: 'https://randomuser.me/api/portraits/thumb/men/2.jpg',\n ┊ 67┊ 31┊    phone: '+391234567891',\n-┊ 68┊   ┊  },\n-┊ 69┊   ┊  {\n-┊ 70┊   ┊    id: 3,\n+┊   ┊ 32┊  });\n+┊   ┊ 33┊  await connection.manager.save(user2);\n+┊   ┊ 34┊\n+┊   ┊ 35┊  const user3 = new User({\n ┊ 71┊ 36┊    username: 'avery',\n ┊ 72┊ 37┊    password: '$2a$08$UHgH7J8G6z1mGQn2qx2kdeWv0jvgHItyAsL9hpEUI3KJmhVW5Q1d.', // 333\n ┊ 73┊ 38┊    name: 'Avery Stewart',\n ┊ 74┊ 39┊    picture: 'https://randomuser.me/api/portraits/thumb/women/1.jpg',\n ┊ 75┊ 40┊    phone: '+391234567892',\n-┊ 76┊   ┊  },\n-┊ 77┊   ┊  {\n-┊ 78┊   ┊    id: 4,\n+┊   ┊ 41┊  });\n+┊   ┊ 42┊  await connection.manager.save(user3);\n+┊   ┊ 43┊\n+┊   ┊ 44┊  const user4 = new User({\n ┊ 79┊ 45┊    username: 'katie',\n ┊ 80┊ 46┊    password: '$2a$08$wR1k5Q3T9FC7fUgB7Gdb9Os/GV7dGBBf4PLlWT7HERMFhmFDt47xi', // 444\n ┊ 81┊ 47┊    name: 'Katie Peterson',\n ┊ 82┊ 48┊    picture: 'https://randomuser.me/api/portraits/thumb/women/2.jpg',\n ┊ 83┊ 49┊    phone: '+391234567893',\n-┊ 84┊   ┊  },\n-┊ 85┊   ┊  {\n-┊ 86┊   ┊    id: 5,\n+┊   ┊ 50┊  });\n+┊   ┊ 51┊  await connection.manager.save(user4);\n+┊   ┊ 52┊\n+┊   ┊ 53┊  const user5 = new User({\n ┊ 87┊ 54┊    username: 'ray',\n ┊ 88┊ 55┊    password: '$2a$08$6.mbXqsDX82ZZ7q5d8Osb..JrGSsNp4R3IKj7mxgF6YGT0OmMw242', // 555\n ┊ 89┊ 56┊    name: 'Ray Edwards',\n ┊ 90┊ 57┊    picture: 'https://randomuser.me/api/portraits/thumb/men/3.jpg',\n ┊ 91┊ 58┊    phone: '+391234567894',\n-┊ 92┊   ┊  },\n-┊ 93┊   ┊  {\n-┊ 94┊   ┊    id: 6,\n+┊   ┊ 59┊  });\n+┊   ┊ 60┊  await connection.manager.save(user5);\n+┊   ┊ 61┊\n+┊   ┊ 62┊  const user6 = new User({\n ┊ 95┊ 63┊    username: 'niko',\n ┊ 96┊ 64┊    password: '$2a$08$fL5lZR.Rwf9FWWe8XwwlceiPBBim8n9aFtaem.INQhiKT4.Ux3Uq.', // 666\n ┊ 97┊ 65┊    name: 'Niccolò Belli',\n ┊ 98┊ 66┊    picture: 'https://randomuser.me/api/portraits/thumb/men/4.jpg',\n ┊ 99┊ 67┊    phone: '+391234567895',\n-┊100┊   ┊  },\n-┊101┊   ┊  {\n-┊102┊   ┊    id: 7,\n+┊   ┊ 68┊  });\n+┊   ┊ 69┊  await connection.manager.save(user6);\n+┊   ┊ 70┊\n+┊   ┊ 71┊  const user7 = new User({\n ┊103┊ 72┊    username: 'mario',\n ┊104┊ 73┊    password: '$2a$08$nDHDmWcVxDnH5DDT3HMMC.psqcnu6wBiOgkmJUy9IH..qxa3R6YrO', // 777\n ┊105┊ 74┊    name: 'Mario Rossi',\n ┊106┊ 75┊    picture: 'https://randomuser.me/api/portraits/thumb/men/5.jpg',\n ┊107┊ 76┊    phone: '+391234567896',\n-┊108┊   ┊  },\n-┊109┊   ┊];\n+┊   ┊ 77┊  });\n+┊   ┊ 78┊  await connection.manager.save(user7);\n+┊   ┊ 79┊\n+┊   ┊ 80┊\n ┊110┊ 81┊\n-┊111┊   ┊const chats: Chat[] = [\n-┊112┊   ┊  {\n-┊113┊   ┊    id: 1,\n-┊114┊   ┊    name: null,\n-┊115┊   ┊    picture: null,\n-┊116┊   ┊    allTimeMemberIds: [1, 3],\n-┊117┊   ┊    listingMemberIds: [1, 3],\n-┊118┊   ┊    adminIds: null,\n-┊119┊   ┊    ownerId: null,\n+┊   ┊ 82┊\n+┊   ┊ 83┊  await connection.manager.save(new Chat({\n+┊   ┊ 84┊    allTimeMembers: [user1, user3],\n+┊   ┊ 85┊    listingMembers: [user1, user3],\n ┊120┊ 86┊    messages: [\n-┊121┊   ┊      {\n-┊122┊   ┊        id: 1,\n-┊123┊   ┊        chatId: 1,\n-┊124┊   ┊        senderId: 1,\n+┊   ┊ 87┊      new Message({\n+┊   ┊ 88┊        sender: user1,\n ┊125┊ 89┊        content: 'You on your way?',\n-┊126┊   ┊        createdAt: moment().subtract(1, 'hours').unix(),\n+┊   ┊ 90┊        createdAt: moment().subtract(1, 'hours').toDate(),\n ┊127┊ 91┊        type: MessageType.TEXT,\n+┊   ┊ 92┊        holders: [user1, user3],\n ┊128┊ 93┊        recipients: [\n-┊129┊   ┊          {\n-┊130┊   ┊            userId: 3,\n-┊131┊   ┊            messageId: 1,\n-┊132┊   ┊            chatId: 1,\n-┊133┊   ┊            receivedAt: null,\n-┊134┊   ┊            readAt: null,\n-┊135┊   ┊          },\n+┊   ┊ 94┊          new Recipient({\n+┊   ┊ 95┊            user: user3,\n+┊   ┊ 96┊          }),\n ┊136┊ 97┊        ],\n-┊137┊   ┊        holderIds: [1, 3],\n-┊138┊   ┊      },\n-┊139┊   ┊      {\n-┊140┊   ┊        id: 2,\n-┊141┊   ┊        chatId: 1,\n-┊142┊   ┊        senderId: 3,\n+┊   ┊ 98┊      }),\n+┊   ┊ 99┊      new Message({\n+┊   ┊100┊        sender: user3,\n ┊143┊101┊        content: 'Yep!',\n-┊144┊   ┊        createdAt: moment().subtract(1, 'hours').add(5, 'minutes').unix(),\n+┊   ┊102┊        createdAt: moment().subtract(1, 'hours').add(5, 'minutes').toDate(),\n ┊145┊103┊        type: MessageType.TEXT,\n+┊   ┊104┊        holders: [user1, user3],\n ┊146┊105┊        recipients: [\n-┊147┊   ┊          {\n-┊148┊   ┊            userId: 1,\n-┊149┊   ┊            messageId: 2,\n-┊150┊   ┊            chatId: 1,\n-┊151┊   ┊            receivedAt: null,\n-┊152┊   ┊            readAt: null,\n-┊153┊   ┊          },\n+┊   ┊106┊          new Recipient({\n+┊   ┊107┊            user: user1,\n+┊   ┊108┊          }),\n ┊154┊109┊        ],\n-┊155┊   ┊        holderIds: [3, 1],\n-┊156┊   ┊      },\n+┊   ┊110┊      }),\n ┊157┊111┊    ],\n-┊158┊   ┊  },\n-┊159┊   ┊  {\n-┊160┊   ┊    id: 2,\n-┊161┊   ┊    name: null,\n-┊162┊   ┊    picture: null,\n-┊163┊   ┊    allTimeMemberIds: [1, 4],\n-┊164┊   ┊    listingMemberIds: [1, 4],\n-┊165┊   ┊    adminIds: null,\n-┊166┊   ┊    ownerId: null,\n+┊   ┊112┊  }));\n+┊   ┊113┊\n+┊   ┊114┊  await connection.manager.save(new Chat({\n+┊   ┊115┊    allTimeMembers: [user1, user4],\n+┊   ┊116┊    listingMembers: [user1, user4],\n ┊167┊117┊    messages: [\n-┊168┊   ┊      {\n-┊169┊   ┊        id: 1,\n-┊170┊   ┊        chatId: 2,\n-┊171┊   ┊        senderId: 1,\n+┊   ┊118┊      new Message({\n+┊   ┊119┊        sender: user1,\n ┊172┊120┊        content: 'Hey, it\\'s me',\n-┊173┊   ┊        createdAt: moment().subtract(2, 'hours').unix(),\n+┊   ┊121┊        createdAt: moment().subtract(2, 'hours').toDate(),\n ┊174┊122┊        type: MessageType.TEXT,\n+┊   ┊123┊        holders: [user1, user4],\n ┊175┊124┊        recipients: [\n-┊176┊   ┊          {\n-┊177┊   ┊            userId: 4,\n-┊178┊   ┊            messageId: 1,\n-┊179┊   ┊            chatId: 2,\n-┊180┊   ┊            receivedAt: null,\n-┊181┊   ┊            readAt: null,\n-┊182┊   ┊          },\n+┊   ┊125┊          new Recipient({\n+┊   ┊126┊            user: user4,\n+┊   ┊127┊          }),\n ┊183┊128┊        ],\n-┊184┊   ┊        holderIds: [1, 4],\n-┊185┊   ┊      },\n+┊   ┊129┊      }),\n ┊186┊130┊    ],\n-┊187┊   ┊  },\n-┊188┊   ┊  {\n-┊189┊   ┊    id: 3,\n-┊190┊   ┊    name: null,\n-┊191┊   ┊    picture: null,\n-┊192┊   ┊    allTimeMemberIds: [1, 5],\n-┊193┊   ┊    listingMemberIds: [1, 5],\n-┊194┊   ┊    adminIds: null,\n-┊195┊   ┊    ownerId: null,\n+┊   ┊131┊  }));\n+┊   ┊132┊\n+┊   ┊133┊  await connection.manager.save(new Chat({\n+┊   ┊134┊    allTimeMembers: [user1, user5],\n+┊   ┊135┊    listingMembers: [user1, user5],\n ┊196┊136┊    messages: [\n-┊197┊   ┊      {\n-┊198┊   ┊        id: 1,\n-┊199┊   ┊        chatId: 3,\n-┊200┊   ┊        senderId: 1,\n+┊   ┊137┊      new Message({\n+┊   ┊138┊        sender: user1,\n ┊201┊139┊        content: 'I should buy a boat',\n-┊202┊   ┊        createdAt: moment().subtract(1, 'days').unix(),\n+┊   ┊140┊        createdAt: moment().subtract(1, 'days').toDate(),\n ┊203┊141┊        type: MessageType.TEXT,\n+┊   ┊142┊        holders: [user1, user5],\n ┊204┊143┊        recipients: [\n-┊205┊   ┊          {\n-┊206┊   ┊            userId: 5,\n-┊207┊   ┊            messageId: 1,\n-┊208┊   ┊            chatId: 3,\n-┊209┊   ┊            receivedAt: null,\n-┊210┊   ┊            readAt: null,\n-┊211┊   ┊          },\n+┊   ┊144┊          new Recipient({\n+┊   ┊145┊            user: user5,\n+┊   ┊146┊          }),\n ┊212┊147┊        ],\n-┊213┊   ┊        holderIds: [1, 5],\n-┊214┊   ┊      },\n-┊215┊   ┊      {\n-┊216┊   ┊        id: 2,\n-┊217┊   ┊        chatId: 3,\n-┊218┊   ┊        senderId: 1,\n+┊   ┊148┊      }),\n+┊   ┊149┊      new Message({\n+┊   ┊150┊        sender: user1,\n ┊219┊151┊        content: 'You still there?',\n-┊220┊   ┊        createdAt: moment().subtract(1, 'days').add(16, 'hours').unix(),\n+┊   ┊152┊        createdAt: moment().subtract(1, 'days').add(16, 'hours').toDate(),\n ┊221┊153┊        type: MessageType.TEXT,\n+┊   ┊154┊        holders: [user1, user5],\n ┊222┊155┊        recipients: [\n-┊223┊   ┊          {\n-┊224┊   ┊            userId: 5,\n-┊225┊   ┊            messageId: 2,\n-┊226┊   ┊            chatId: 3,\n-┊227┊   ┊            receivedAt: null,\n-┊228┊   ┊            readAt: null,\n-┊229┊   ┊          },\n+┊   ┊156┊          new Recipient({\n+┊   ┊157┊            user: user5,\n+┊   ┊158┊          }),\n ┊230┊159┊        ],\n-┊231┊   ┊        holderIds: [1, 5],\n-┊232┊   ┊      },\n+┊   ┊160┊      }),\n ┊233┊161┊    ],\n-┊234┊   ┊  },\n-┊235┊   ┊  {\n-┊236┊   ┊    id: 4,\n-┊237┊   ┊    name: null,\n-┊238┊   ┊    picture: null,\n-┊239┊   ┊    allTimeMemberIds: [3, 4],\n-┊240┊   ┊    listingMemberIds: [3, 4],\n-┊241┊   ┊    adminIds: null,\n-┊242┊   ┊    ownerId: null,\n+┊   ┊162┊  }));\n+┊   ┊163┊\n+┊   ┊164┊  await connection.manager.save(new Chat({\n+┊   ┊165┊    allTimeMembers: [user3, user4],\n+┊   ┊166┊    listingMembers: [user3, user4],\n ┊243┊167┊    messages: [\n-┊244┊   ┊      {\n-┊245┊   ┊        id: 1,\n-┊246┊   ┊        chatId: 4,\n-┊247┊   ┊        senderId: 3,\n+┊   ┊168┊      new Message({\n+┊   ┊169┊        sender: user3,\n ┊248┊170┊        content: 'Look at my mukluks!',\n-┊249┊   ┊        createdAt: moment().subtract(4, 'days').unix(),\n+┊   ┊171┊        createdAt: moment().subtract(4, 'days').toDate(),\n ┊250┊172┊        type: MessageType.TEXT,\n+┊   ┊173┊        holders: [user3, user4],\n ┊251┊174┊        recipients: [\n-┊252┊   ┊          {\n-┊253┊   ┊            userId: 4,\n-┊254┊   ┊            messageId: 1,\n-┊255┊   ┊            chatId: 4,\n-┊256┊   ┊            receivedAt: null,\n-┊257┊   ┊            readAt: null,\n-┊258┊   ┊          },\n+┊   ┊175┊          new Recipient({\n+┊   ┊176┊            user: user4,\n+┊   ┊177┊          }),\n ┊259┊178┊        ],\n-┊260┊   ┊        holderIds: [3, 4],\n-┊261┊   ┊      },\n+┊   ┊179┊      }),\n ┊262┊180┊    ],\n-┊263┊   ┊  },\n-┊264┊   ┊  {\n-┊265┊   ┊    id: 5,\n-┊266┊   ┊    name: null,\n-┊267┊   ┊    picture: null,\n-┊268┊   ┊    allTimeMemberIds: [2, 5],\n-┊269┊   ┊    listingMemberIds: [2, 5],\n-┊270┊   ┊    adminIds: null,\n-┊271┊   ┊    ownerId: null,\n+┊   ┊181┊  }));\n+┊   ┊182┊\n+┊   ┊183┊  await connection.manager.save(new Chat({\n+┊   ┊184┊    allTimeMembers: [user2, user5],\n+┊   ┊185┊    listingMembers: [user2, user5],\n ┊272┊186┊    messages: [\n-┊273┊   ┊      {\n-┊274┊   ┊        id: 1,\n-┊275┊   ┊        chatId: 5,\n-┊276┊   ┊        senderId: 2,\n+┊   ┊187┊      new Message({\n+┊   ┊188┊        sender: user2,\n ┊277┊189┊        content: 'This is wicked good ice cream.',\n-┊278┊   ┊        createdAt: moment().subtract(2, 'weeks').unix(),\n+┊   ┊190┊        createdAt: moment().subtract(2, 'weeks').toDate(),\n ┊279┊191┊        type: MessageType.TEXT,\n+┊   ┊192┊        holders: [user2, user5],\n ┊280┊193┊        recipients: [\n-┊281┊   ┊          {\n-┊282┊   ┊            userId: 5,\n-┊283┊   ┊            messageId: 1,\n-┊284┊   ┊            chatId: 5,\n-┊285┊   ┊            receivedAt: null,\n-┊286┊   ┊            readAt: null,\n-┊287┊   ┊          },\n+┊   ┊194┊          new Recipient({\n+┊   ┊195┊            user: user5,\n+┊   ┊196┊          }),\n ┊288┊197┊        ],\n-┊289┊   ┊        holderIds: [2, 5],\n-┊290┊   ┊      },\n-┊291┊   ┊      {\n-┊292┊   ┊        id: 2,\n-┊293┊   ┊        chatId: 6,\n-┊294┊   ┊        senderId: 5,\n+┊   ┊198┊      }),\n+┊   ┊199┊      new Message({\n+┊   ┊200┊        sender: user5,\n ┊295┊201┊        content: 'Love it!',\n-┊296┊   ┊        createdAt: moment().subtract(2, 'weeks').add(10, 'minutes').unix(),\n+┊   ┊202┊        createdAt: moment().subtract(2, 'weeks').add(10, 'minutes').toDate(),\n ┊297┊203┊        type: MessageType.TEXT,\n+┊   ┊204┊        holders: [user2, user5],\n ┊298┊205┊        recipients: [\n-┊299┊   ┊          {\n-┊300┊   ┊            userId: 2,\n-┊301┊   ┊            messageId: 2,\n-┊302┊   ┊            chatId: 5,\n-┊303┊   ┊            receivedAt: null,\n-┊304┊   ┊            readAt: null,\n-┊305┊   ┊          },\n+┊   ┊206┊          new Recipient({\n+┊   ┊207┊            user: user2,\n+┊   ┊208┊          }),\n ┊306┊209┊        ],\n-┊307┊   ┊        holderIds: [5, 2],\n-┊308┊   ┊      },\n+┊   ┊210┊      }),\n ┊309┊211┊    ],\n-┊310┊   ┊  },\n-┊311┊   ┊  {\n-┊312┊   ┊    id: 6,\n-┊313┊   ┊    name: null,\n-┊314┊   ┊    picture: null,\n-┊315┊   ┊    allTimeMemberIds: [1, 6],\n-┊316┊   ┊    listingMemberIds: [1],\n-┊317┊   ┊    adminIds: null,\n-┊318┊   ┊    ownerId: null,\n-┊319┊   ┊    messages: [],\n-┊320┊   ┊  },\n-┊321┊   ┊  {\n-┊322┊   ┊    id: 7,\n-┊323┊   ┊    name: null,\n-┊324┊   ┊    picture: null,\n-┊325┊   ┊    allTimeMemberIds: [2, 1],\n-┊326┊   ┊    listingMemberIds: [2],\n-┊327┊   ┊    adminIds: null,\n-┊328┊   ┊    ownerId: null,\n-┊329┊   ┊    messages: [],\n-┊330┊   ┊  },\n-┊331┊   ┊  {\n-┊332┊   ┊    id: 8,\n-┊333┊   ┊    name: 'A user 0 group',\n+┊   ┊212┊  }));\n+┊   ┊213┊\n+┊   ┊214┊  await connection.manager.save(new Chat({\n+┊   ┊215┊    allTimeMembers: [user1, user6],\n+┊   ┊216┊    listingMembers: [user1],\n+┊   ┊217┊  }));\n+┊   ┊218┊\n+┊   ┊219┊  await connection.manager.save(new Chat({\n+┊   ┊220┊    allTimeMembers: [user2, user1],\n+┊   ┊221┊    listingMembers: [user2],\n+┊   ┊222┊  }));\n+┊   ┊223┊\n+┊   ┊224┊  await connection.manager.save(new Chat({\n+┊   ┊225┊    name: 'Ethan\\'s group',\n ┊334┊226┊    picture: 'https://randomuser.me/api/portraits/thumb/lego/1.jpg',\n-┊335┊   ┊    allTimeMemberIds: [1, 3, 4, 6],\n-┊336┊   ┊    listingMemberIds: [1, 3, 4, 6],\n-┊337┊   ┊    actualGroupMemberIds: [1, 4, 6],\n-┊338┊   ┊    adminIds: [1, 6],\n-┊339┊   ┊    ownerId: 1,\n+┊   ┊227┊    allTimeMembers: [user1, user3, user4, user6],\n+┊   ┊228┊    listingMembers: [user1, user3, user4, user6],\n+┊   ┊229┊    actualGroupMembers: [user1, user4, user6],\n+┊   ┊230┊    admins: [user1, user6],\n+┊   ┊231┊    owner: user1,\n ┊340┊232┊    messages: [\n-┊341┊   ┊      {\n-┊342┊   ┊        id: 1,\n-┊343┊   ┊        chatId: 8,\n-┊344┊   ┊        senderId: 1,\n+┊   ┊233┊      new Message({\n+┊   ┊234┊        sender: user1,\n ┊345┊235┊        content: 'I made a group',\n-┊346┊   ┊        createdAt: moment().subtract(2, 'weeks').unix(),\n+┊   ┊236┊        createdAt: moment().subtract(2, 'weeks').toDate(),\n ┊347┊237┊        type: MessageType.TEXT,\n+┊   ┊238┊        holders: [user1, user3, user4, user6],\n ┊348┊239┊        recipients: [\n-┊349┊   ┊          {\n-┊350┊   ┊            userId: 3,\n-┊351┊   ┊            messageId: 1,\n-┊352┊   ┊            chatId: 8,\n-┊353┊   ┊            receivedAt: null,\n-┊354┊   ┊            readAt: null,\n-┊355┊   ┊          },\n-┊356┊   ┊          {\n-┊357┊   ┊            userId: 4,\n-┊358┊   ┊            messageId: 1,\n-┊359┊   ┊            chatId: 8,\n-┊360┊   ┊            receivedAt: moment().subtract(2, 'weeks').add(1, 'minutes').unix(),\n-┊361┊   ┊            readAt: moment().subtract(2, 'weeks').add(5, 'minutes').unix(),\n-┊362┊   ┊          },\n-┊363┊   ┊          {\n-┊364┊   ┊            userId: 6,\n-┊365┊   ┊            messageId: 1,\n-┊366┊   ┊            chatId: 8,\n-┊367┊   ┊            receivedAt: null,\n-┊368┊   ┊            readAt: null,\n-┊369┊   ┊          },\n+┊   ┊240┊          new Recipient({\n+┊   ┊241┊            user: user3,\n+┊   ┊242┊          }),\n+┊   ┊243┊          new Recipient({\n+┊   ┊244┊            user: user4,\n+┊   ┊245┊          }),\n+┊   ┊246┊          new Recipient({\n+┊   ┊247┊            user: user6,\n+┊   ┊248┊          }),\n ┊370┊249┊        ],\n-┊371┊   ┊        holderIds: [1, 3, 4, 6],\n-┊372┊   ┊      },\n-┊373┊   ┊      {\n-┊374┊   ┊        id: 2,\n-┊375┊   ┊        chatId: 8,\n-┊376┊   ┊        senderId: 1,\n-┊377┊   ┊        content: 'Ops, user 3 was not supposed to be here',\n-┊378┊   ┊        createdAt: moment().subtract(2, 'weeks').add(2, 'minutes').unix(),\n+┊   ┊250┊      }),\n+┊   ┊251┊      new Message({\n+┊   ┊252┊        sender: user1,\n+┊   ┊253┊        content: 'Ops, Avery was not supposed to be here',\n+┊   ┊254┊        createdAt: moment().subtract(2, 'weeks').add(2, 'minutes').toDate(),\n ┊379┊255┊        type: MessageType.TEXT,\n+┊   ┊256┊        holders: [user1, user4, user6],\n ┊380┊257┊        recipients: [\n-┊381┊   ┊          {\n-┊382┊   ┊            userId: 4,\n-┊383┊   ┊            messageId: 2,\n-┊384┊   ┊            chatId: 8,\n-┊385┊   ┊            receivedAt: moment().subtract(2, 'weeks').add(3, 'minutes').unix(),\n-┊386┊   ┊            readAt: moment().subtract(2, 'weeks').add(5, 'minutes').unix(),\n-┊387┊   ┊          },\n-┊388┊   ┊          {\n-┊389┊   ┊            userId: 6,\n-┊390┊   ┊            messageId: 2,\n-┊391┊   ┊            chatId: 8,\n-┊392┊   ┊            receivedAt: null,\n-┊393┊   ┊            readAt: null,\n-┊394┊   ┊          },\n+┊   ┊258┊          new Recipient({\n+┊   ┊259┊            user: user4,\n+┊   ┊260┊          }),\n+┊   ┊261┊          new Recipient({\n+┊   ┊262┊            user: user6,\n+┊   ┊263┊          }),\n ┊395┊264┊        ],\n-┊396┊   ┊        holderIds: [1, 4, 6],\n-┊397┊   ┊      },\n-┊398┊   ┊      {\n-┊399┊   ┊        id: 3,\n-┊400┊   ┊        chatId: 8,\n-┊401┊   ┊        senderId: 4,\n+┊   ┊265┊      }),\n+┊   ┊266┊      new Message({\n+┊   ┊267┊        sender: user4,\n ┊402┊268┊        content: 'Awesome!',\n-┊403┊   ┊        createdAt: moment().subtract(2, 'weeks').add(10, 'minutes').unix(),\n+┊   ┊269┊        createdAt: moment().subtract(2, 'weeks').add(10, 'minutes').toDate(),\n ┊404┊270┊        type: MessageType.TEXT,\n+┊   ┊271┊        holders: [user1, user4, user6],\n ┊405┊272┊        recipients: [\n-┊406┊   ┊          {\n-┊407┊   ┊            userId: 1,\n-┊408┊   ┊            messageId: 3,\n-┊409┊   ┊            chatId: 8,\n-┊410┊   ┊            receivedAt: null,\n-┊411┊   ┊            readAt: null,\n-┊412┊   ┊          },\n-┊413┊   ┊          {\n-┊414┊   ┊            userId: 6,\n-┊415┊   ┊            messageId: 3,\n-┊416┊   ┊            chatId: 8,\n-┊417┊   ┊            receivedAt: null,\n-┊418┊   ┊            readAt: null,\n-┊419┊   ┊          },\n+┊   ┊273┊          new Recipient({\n+┊   ┊274┊            user: user1,\n+┊   ┊275┊          }),\n+┊   ┊276┊          new Recipient({\n+┊   ┊277┊            user: user6,\n+┊   ┊278┊          }),\n ┊420┊279┊        ],\n-┊421┊   ┊        holderIds: [1, 4, 6],\n-┊422┊   ┊      },\n+┊   ┊280┊      }),\n ┊423┊281┊    ],\n-┊424┊   ┊  },\n-┊425┊   ┊  {\n-┊426┊   ┊    id: 9,\n-┊427┊   ┊    name: 'A user 5 group',\n-┊428┊   ┊    picture: null,\n-┊429┊   ┊    allTimeMemberIds: [6, 3],\n-┊430┊   ┊    listingMemberIds: [6, 3],\n-┊431┊   ┊    actualGroupMemberIds: [6, 3],\n-┊432┊   ┊    adminIds: [6],\n-┊433┊   ┊    ownerId: 6,\n-┊434┊   ┊    messages: [],\n-┊435┊   ┊  },\n-┊436┊   ┊];\n+┊   ┊282┊  }));\n ┊437┊283┊\n-┊438┊   ┊export const db = {users, chats};\n+┊   ┊284┊  await connection.manager.save(new Chat({\n+┊   ┊285┊    name: 'Ray\\'s group',\n+┊   ┊286┊    allTimeMembers: [user3, user6],\n+┊   ┊287┊    listingMembers: [user3, user6],\n+┊   ┊288┊    actualGroupMembers: [user3, user6],\n+┊   ┊289┊    admins: [user6],\n+┊   ┊290┊    owner: user6,\n+┊   ┊291┊  }));\n+┊   ┊292┊}\n```\n\n[}]: #\n\nIt's time to deal with resolvers:\n\n[{]: <helper> (diffStep \"6.1\" files=\"schema/resolvers.ts\" module=\"server\")\n\n#### Step 6.1: TypeORM with PostgreSQL\n\n##### Changed schema&#x2F;resolvers.ts\n```diff\n@@ -1,4 +1,4 @@\n-┊1┊ ┊import { Chat, db, Message, MessageType, Recipient, User } from \"../db\";\n+┊ ┊1┊import { MessageType } from \"../db\";\n ┊2┊2┊import { IResolvers } from \"graphql-tools/dist/Interfaces\";\n ┊3┊3┊import {\n ┊4┊4┊  AddChatMutationArgs, AddGroupMutationArgs, AddMessageMutationArgs, ChatQueryArgs, MessageAddedSubscriptionArgs,\n```\n```diff\n@@ -6,87 +6,123 @@\n ┊  6┊  6┊} from \"../types\";\n ┊  7┊  7┊import * as moment from \"moment\";\n ┊  8┊  8┊import { PubSub, withFilter } from \"graphql-subscriptions\";\n-┊  9┊   ┊\n-┊ 10┊   ┊let users = db.users;\n-┊ 11┊   ┊let chats = db.chats;\n+┊   ┊  9┊import { User } from \"../entity/User\";\n+┊   ┊ 10┊import { Chat } from \"../entity/Chat\";\n+┊   ┊ 11┊import { Message } from \"../entity/Message\";\n+┊   ┊ 12┊import { Recipient } from \"../entity/Recipient\";\n+┊   ┊ 13┊import { Connection } from \"typeorm\";\n ┊ 12┊ 14┊\n ┊ 13┊ 15┊export const pubsub = new PubSub();\n ┊ 14┊ 16┊\n ┊ 15┊ 17┊export const resolvers: IResolvers = {\n ┊ 16┊ 18┊  Query: {\n ┊ 17┊ 19┊    // Show all users for the moment.\n-┊ 18┊   ┊    users: (obj: any, args: any, {user: currentUser}: {user: User}): User[] => users.filter(user => user.id !== currentUser.id),\n-┊ 19┊   ┊    chats: (obj: any, args: any, {user: currentUser}: {user: User}): Chat[] => chats.filter(chat => chat.listingMemberIds.includes(currentUser.id)),\n-┊ 20┊   ┊    chat: (obj: any, {chatId}: ChatQueryArgs): Chat | null => chats.find(chat => chat.id === Number(chatId)) || null,\n+┊   ┊ 20┊    users: async (obj: any, args: any, {user: currentUser, connection}: { user: User, connection: Connection }): Promise<User[]> => {\n+┊   ┊ 21┊      return await connection\n+┊   ┊ 22┊        .createQueryBuilder(User, \"user\")\n+┊   ┊ 23┊        .where('user.id != :id', {id: currentUser.id})\n+┊   ┊ 24┊        .getMany();\n+┊   ┊ 25┊    },\n+┊   ┊ 26┊    chats: async (obj: any, args: any, {user: currentUser, connection}: { user: User, connection: Connection }): Promise<any[]> => {\n+┊   ┊ 27┊      return await connection\n+┊   ┊ 28┊        .createQueryBuilder(Chat, \"chat\")\n+┊   ┊ 29┊        .leftJoin('chat.listingMembers', 'listingMembers')\n+┊   ┊ 30┊        .where('listingMembers.id = :id', {id: currentUser.id})\n+┊   ┊ 31┊        .getMany();\n+┊   ┊ 32┊    },\n+┊   ┊ 33┊    chat: async (obj: any, {chatId}: ChatQueryArgs, {connection}: { user: User, connection: Connection }): Promise<any> => {\n+┊   ┊ 34┊      return await connection\n+┊   ┊ 35┊        .createQueryBuilder(Chat, \"chat\")\n+┊   ┊ 36┊        .whereInIds(chatId)\n+┊   ┊ 37┊        .getOne();\n+┊   ┊ 38┊    },\n ┊ 21┊ 39┊  },\n ┊ 22┊ 40┊  Mutation: {\n-┊ 23┊   ┊    addChat: (obj: any, {recipientId}: AddChatMutationArgs, {user: currentUser}: {user: User}): Chat => {\n-┊ 24┊   ┊      if (!users.find(user => user.id === Number(recipientId))) {\n+┊   ┊ 41┊    addChat: async (obj: any, {recipientId}: AddChatMutationArgs, {user: currentUser, connection}: { user: User, connection: Connection }): Promise<Chat | null> => {\n+┊   ┊ 42┊      const recipient = await connection\n+┊   ┊ 43┊        .createQueryBuilder(User, \"user\")\n+┊   ┊ 44┊        .whereInIds(recipientId)\n+┊   ┊ 45┊        .getOne();\n+┊   ┊ 46┊\n+┊   ┊ 47┊      if (!recipient) {\n ┊ 25┊ 48┊        throw new Error(`Recipient ${recipientId} doesn't exist.`);\n ┊ 26┊ 49┊      }\n ┊ 27┊ 50┊\n-┊ 28┊   ┊      const chat = chats.find(chat => !chat.name && chat.allTimeMemberIds.includes(currentUser.id) && chat.allTimeMemberIds.includes(Number(recipientId)));\n+┊   ┊ 51┊      let chat = await connection\n+┊   ┊ 52┊        .createQueryBuilder(Chat, \"chat\")\n+┊   ┊ 53┊        .where('chat.name IS NULL')\n+┊   ┊ 54┊        .innerJoin('chat.allTimeMembers', 'allTimeMembers1', 'allTimeMembers1.id = :currentUserId', {currentUserId: currentUser.id})\n+┊   ┊ 55┊        .innerJoin('chat.allTimeMembers', 'allTimeMembers2', 'allTimeMembers2.id = :recipientId', {recipientId})\n+┊   ┊ 56┊        .innerJoinAndSelect('chat.listingMembers', 'listingMembers')\n+┊   ┊ 57┊        .getOne();\n+┊   ┊ 58┊\n ┊ 29┊ 59┊      if (chat) {\n-┊ 30┊   ┊        // Chat already exists. Both users are already in the allTimeMemberIds array\n-┊ 31┊   ┊        const chatId = chat.id;\n-┊ 32┊   ┊        if (!chat.listingMemberIds.includes(currentUser.id)) {\n+┊   ┊ 60┊        // Chat already exists. Both users are already in the userIds array\n+┊   ┊ 61┊        const listingMembers = await connection\n+┊   ┊ 62┊          .createQueryBuilder(User, \"user\")\n+┊   ┊ 63┊          .innerJoin('user.listingMemberChats', 'listingMemberChats', 'listingMemberChats.id = :chatId', {chatId: chat.id})\n+┊   ┊ 64┊          .getMany();\n+┊   ┊ 65┊\n+┊   ┊ 66┊        if (!listingMembers.find(user => user.id === currentUser.id)) {\n ┊ 33┊ 67┊          // The chat isn't listed for the current user. Add him to the memberIds\n-┊ 34┊   ┊          chat.listingMemberIds.push(currentUser.id);\n-┊ 35┊   ┊          chats.find(chat => chat.id === chatId)!.listingMemberIds.push(currentUser.id);\n-┊ 36┊   ┊          return chat;\n+┊   ┊ 68┊          chat.listingMembers.push(currentUser);\n+┊   ┊ 69┊          chat = await connection.getRepository(Chat).save(chat);\n+┊   ┊ 70┊\n+┊   ┊ 71┊          return chat || null;\n ┊ 37┊ 72┊        } else {\n ┊ 38┊ 73┊          throw new Error(`Chat already exists.`);\n ┊ 39┊ 74┊        }\n ┊ 40┊ 75┊      } else {\n ┊ 41┊ 76┊        // Create the chat\n-┊ 42┊   ┊        const id = (chats.length && chats[chats.length - 1].id + 1) || 1;\n-┊ 43┊   ┊        const chat: Chat = {\n-┊ 44┊   ┊          id,\n-┊ 45┊   ┊          name: null,\n-┊ 46┊   ┊          picture: null,\n-┊ 47┊   ┊          adminIds: null,\n-┊ 48┊   ┊          ownerId: null,\n-┊ 49┊   ┊          allTimeMemberIds: [currentUser.id, Number(recipientId)],\n+┊   ┊ 77┊        chat = await connection.getRepository(Chat).save(new Chat({\n+┊   ┊ 78┊          allTimeMembers: [currentUser, recipient],\n ┊ 50┊ 79┊          // Chat will not be listed to the other user until the first message gets written\n-┊ 51┊   ┊          listingMemberIds: [currentUser.id],\n-┊ 52┊   ┊          actualGroupMemberIds: null,\n-┊ 53┊   ┊          messages: [],\n-┊ 54┊   ┊        };\n-┊ 55┊   ┊        chats.push(chat);\n+┊   ┊ 80┊          listingMembers: [currentUser],\n+┊   ┊ 81┊        }));\n ┊ 56┊ 82┊\n-┊ 57┊   ┊        return chat;\n+┊   ┊ 83┊        return chat || null;\n ┊ 58┊ 84┊      }\n ┊ 59┊ 85┊    },\n-┊ 60┊   ┊    addGroup: (obj: any, {recipientIds, groupName}: AddGroupMutationArgs, {user: currentUser}: {user: User}): Chat => {\n-┊ 61┊   ┊      recipientIds.forEach(recipientId => {\n-┊ 62┊   ┊        if (!users.find(user => user.id === Number(recipientId))) {\n+┊   ┊ 86┊    addGroup: async (obj: any, {recipientIds, groupName}: AddGroupMutationArgs, {user: currentUser, connection}: { user: User, connection: Connection }): Promise<Chat | null> => {\n+┊   ┊ 87┊      let recipients: User[] = [];\n+┊   ┊ 88┊      for (let recipientId of recipientIds) {\n+┊   ┊ 89┊        const recipient = await connection\n+┊   ┊ 90┊          .createQueryBuilder(User, \"user\")\n+┊   ┊ 91┊          .whereInIds(recipientId)\n+┊   ┊ 92┊          .getOne();\n+┊   ┊ 93┊        if (!recipient) {\n ┊ 63┊ 94┊          throw new Error(`Recipient ${recipientId} doesn't exist.`);\n ┊ 64┊ 95┊        }\n-┊ 65┊   ┊      });\n+┊   ┊ 96┊        recipients.push(recipient);\n+┊   ┊ 97┊      }\n ┊ 66┊ 98┊\n-┊ 67┊   ┊      const id = (chats.length && chats[chats.length - 1].id + 1) || 1;\n-┊ 68┊   ┊      const chat: Chat = {\n-┊ 69┊   ┊        id,\n+┊   ┊ 99┊      const chat = await connection.getRepository(Chat).save(new Chat({\n ┊ 70┊100┊        name: groupName,\n-┊ 71┊   ┊        picture: null,\n-┊ 72┊   ┊        adminIds: [currentUser.id],\n-┊ 73┊   ┊        ownerId: currentUser.id,\n-┊ 74┊   ┊        allTimeMemberIds: [currentUser.id, ...recipientIds.map(id => Number(id))],\n-┊ 75┊   ┊        listingMemberIds: [currentUser.id, ...recipientIds.map(id => Number(id))],\n-┊ 76┊   ┊        actualGroupMemberIds: [currentUser.id, ...recipientIds.map(id => Number(id))],\n-┊ 77┊   ┊        messages: [],\n-┊ 78┊   ┊      };\n-┊ 79┊   ┊      chats.push(chat);\n+┊   ┊101┊        admins: [currentUser],\n+┊   ┊102┊        owner: currentUser,\n+┊   ┊103┊        allTimeMembers: [...recipients, currentUser],\n+┊   ┊104┊        listingMembers: [...recipients, currentUser],\n+┊   ┊105┊        actualGroupMembers: [...recipients, currentUser],\n+┊   ┊106┊      }));\n ┊ 80┊107┊\n ┊ 81┊108┊      pubsub.publish('chatAdded', {\n ┊ 82┊109┊        creatorId: currentUser.id,\n ┊ 83┊110┊        chatAdded: chat,\n ┊ 84┊111┊      });\n ┊ 85┊112┊\n-┊ 86┊   ┊      return chat;\n+┊   ┊113┊      return chat || null;\n ┊ 87┊114┊    },\n-┊ 88┊   ┊    removeChat: (obj: any, {chatId}: RemoveChatMutationArgs, {user: currentUser}: {user: User}): number => {\n-┊ 89┊   ┊      const chat = chats.find(chat => chat.id === Number(chatId));\n+┊   ┊115┊    removeChat: async (obj: any, {chatId}: RemoveChatMutationArgs, {user: currentUser, connection}: { user: User, connection: Connection }) => {\n+┊   ┊116┊      const chat = await connection\n+┊   ┊117┊        .createQueryBuilder(Chat, \"chat\")\n+┊   ┊118┊        .whereInIds(Number(chatId))\n+┊   ┊119┊        .innerJoinAndSelect('chat.listingMembers', 'listingMembers')\n+┊   ┊120┊        .leftJoinAndSelect('chat.actualGroupMembers', 'actualGroupMembers')\n+┊   ┊121┊        .leftJoinAndSelect('chat.admins', 'admins')\n+┊   ┊122┊        .leftJoinAndSelect('chat.owner', 'owner')\n+┊   ┊123┊        .leftJoinAndSelect('chat.messages', 'messages')\n+┊   ┊124┊        .leftJoinAndSelect('messages.holders', 'holders')\n+┊   ┊125┊        .getOne();\n ┊ 90┊126┊\n ┊ 91┊127┊      if (!chat) {\n ┊ 92┊128┊        throw new Error(`The chat ${chatId} doesn't exist.`);\n```\n```diff\n@@ -94,186 +130,188 @@\n ┊ 94┊130┊\n ┊ 95┊131┊      if (!chat.name) {\n ┊ 96┊132┊        // Chat\n-┊ 97┊   ┊        if (!chat.listingMemberIds.includes(currentUser.id)) {\n-┊ 98┊   ┊          throw new Error(`The user is not a member of the chat ${chatId}.`);\n+┊   ┊133┊        if (!chat.listingMembers.find(user => user.id === currentUser.id)) {\n+┊   ┊134┊          throw new Error(`The user is not a listing member of the chat ${chatId}.`);\n ┊ 99┊135┊        }\n ┊100┊136┊\n ┊101┊137┊        // Instead of chaining map and filter we can loop once using reduce\n-┊102┊   ┊        const messages = chat.messages.reduce<Message[]>((filtered, message) => {\n-┊103┊   ┊          // Remove the current user from the message holders\n-┊104┊   ┊          message.holderIds = message.holderIds.filter(holderId => holderId !== currentUser.id);\n+┊   ┊138┊        chat.messages = await chat.messages.reduce<Promise<Message[]>>(async (filtered$, message) => {\n+┊   ┊139┊          const filtered = await filtered$;\n ┊105┊140┊\n-┊106┊   ┊          if (message.holderIds.length !== 0) {\n+┊   ┊141┊          message.holders = message.holders.filter(user => user.id !== currentUser.id);\n+┊   ┊142┊\n+┊   ┊143┊          if (message.holders.length !== 0) {\n+┊   ┊144┊            // Remove the current user from the message holders\n+┊   ┊145┊            await connection.getRepository(Message).save(message);\n ┊107┊146┊            filtered.push(message);\n-┊108┊   ┊          } // else discard the message\n+┊   ┊147┊          } else {\n+┊   ┊148┊            // Simply remove the message\n+┊   ┊149┊            const recipients = await connection\n+┊   ┊150┊              .createQueryBuilder(Recipient, \"recipient\")\n+┊   ┊151┊              .innerJoinAndSelect('recipient.message', 'message', 'message.id = :messageId', {messageId: message.id})\n+┊   ┊152┊              .innerJoinAndSelect('recipient.user', 'user')\n+┊   ┊153┊              .getMany();\n+┊   ┊154┊            for (let recipient of recipients) {\n+┊   ┊155┊              await connection.getRepository(Recipient).remove(recipient);\n+┊   ┊156┊            }\n+┊   ┊157┊            await connection.getRepository(Message).remove(message);\n+┊   ┊158┊          }\n ┊109┊159┊\n ┊110┊160┊          return filtered;\n-┊111┊   ┊        }, []);\n+┊   ┊161┊        }, Promise.resolve([]));\n ┊112┊162┊\n ┊113┊163┊        // Remove the current user from who gets the chat listed. The chat will no longer appear in his list\n-┊114┊   ┊        const listingMemberIds = chat.listingMemberIds.filter(listingId => listingId !== currentUser.id);\n+┊   ┊164┊        chat.listingMembers = chat.listingMembers.filter(user => user.id !== currentUser.id);\n ┊115┊165┊\n ┊116┊166┊        // Check how many members are left\n-┊117┊   ┊        if (listingMemberIds.length === 0) {\n+┊   ┊167┊        if (chat.listingMembers.length === 0) {\n ┊118┊168┊          // Delete the chat\n-┊119┊   ┊          chats = chats.filter(chat => chat.id !== Number(chatId));\n+┊   ┊169┊          await connection.getRepository(Chat).remove(chat);\n ┊120┊170┊        } else {\n ┊121┊171┊          // Update the chat\n-┊122┊   ┊          chats = chats.map(chat => {\n-┊123┊   ┊            if (chat.id === Number(chatId)) {\n-┊124┊   ┊              chat = {...chat, listingMemberIds, messages};\n-┊125┊   ┊            }\n-┊126┊   ┊            return chat;\n-┊127┊   ┊          });\n+┊   ┊172┊          await connection.getRepository(Chat).save(chat);\n ┊128┊173┊        }\n-┊129┊   ┊        return Number(chatId);\n+┊   ┊174┊        return chatId;\n ┊130┊175┊      } else {\n ┊131┊176┊        // Group\n-┊132┊   ┊        if (chat.ownerId !== currentUser.id) {\n-┊133┊   ┊          throw new Error(`Group ${chatId} is not owned by the user.`);\n-┊134┊   ┊        }\n ┊135┊177┊\n ┊136┊178┊        // Instead of chaining map and filter we can loop once using reduce\n-┊137┊   ┊        const messages = chat.messages.reduce<Message[]>((filtered, message) => {\n-┊138┊   ┊          // Remove the current user from the message holders\n-┊139┊   ┊          message.holderIds = message.holderIds.filter(holderId => holderId !== currentUser.id);\n+┊   ┊179┊        chat.messages = await chat.messages.reduce<Promise<Message[]>>(async (filtered$, message) => {\n+┊   ┊180┊          const filtered = await filtered$;\n+┊   ┊181┊\n+┊   ┊182┊          message.holders = message.holders.filter(user => user.id !== currentUser.id);\n ┊140┊183┊\n-┊141┊   ┊          if (message.holderIds.length !== 0) {\n+┊   ┊184┊          if (message.holders.length !== 0) {\n+┊   ┊185┊            // Remove the current user from the message holders\n+┊   ┊186┊            await connection.getRepository(Message).save(message);\n ┊142┊187┊            filtered.push(message);\n-┊143┊   ┊          } // else discard the message\n+┊   ┊188┊          } else {\n+┊   ┊189┊            // Simply remove the message\n+┊   ┊190┊            const recipients = await connection\n+┊   ┊191┊              .createQueryBuilder(Recipient, \"recipient\")\n+┊   ┊192┊              .innerJoinAndSelect('recipient.message', 'message', 'message.id = :messageId', {messageId: message.id})\n+┊   ┊193┊              .innerJoinAndSelect('recipient.user', 'user')\n+┊   ┊194┊              .getMany();\n+┊   ┊195┊            for (let recipient of recipients) {\n+┊   ┊196┊              await connection.getRepository(Recipient).remove(recipient);\n+┊   ┊197┊            }\n+┊   ┊198┊            await connection.getRepository(Message).remove(message);\n+┊   ┊199┊          }\n ┊144┊200┊\n ┊145┊201┊          return filtered;\n-┊146┊   ┊        }, []);\n+┊   ┊202┊        }, Promise.resolve([]));\n ┊147┊203┊\n ┊148┊204┊        // Remove the current user from who gets the group listed. The group will no longer appear in his list\n-┊149┊   ┊        const listingMemberIds = chat.listingMemberIds.filter(listingId => listingId !== currentUser.id);\n+┊   ┊205┊        chat.listingMembers = chat.listingMembers.filter(user => user.id !== currentUser.id);\n ┊150┊206┊\n ┊151┊207┊        // Check how many members (including previous ones who can still access old messages) are left\n-┊152┊   ┊        if (listingMemberIds.length === 0) {\n+┊   ┊208┊        if (chat.listingMembers.length === 0) {\n ┊153┊209┊          // Remove the group\n-┊154┊   ┊          chats = chats.filter(chat => chat.id !== Number(chatId));\n+┊   ┊210┊          await connection.getRepository(Chat).remove(chat);\n ┊155┊211┊        } else {\n ┊156┊212┊          // Update the group\n ┊157┊213┊\n ┊158┊214┊          // Remove the current user from the chat members. He is no longer a member of the group\n-┊159┊   ┊          const actualGroupMemberIds = chat.actualGroupMemberIds!.filter(memberId => memberId !== currentUser.id);\n+┊   ┊215┊          chat.actualGroupMembers = chat.actualGroupMembers && chat.actualGroupMembers.filter(user => user.id !== currentUser.id);\n ┊160┊216┊          // Remove the current user from the chat admins\n-┊161┊   ┊          const adminIds = chat.adminIds!.filter(memberId => memberId !== currentUser.id);\n-┊162┊   ┊          // Set the owner id to be null. A null owner means the group is read-only\n-┊163┊   ┊          let ownerId: number | null = null;\n-┊164┊   ┊\n-┊165┊   ┊          // Check if there is any admin left\n-┊166┊   ┊          if (adminIds!.length) {\n-┊167┊   ┊            // Pick an admin as the new owner. The group is no longer read-only\n-┊168┊   ┊            ownerId = chat.adminIds![0];\n-┊169┊   ┊          }\n+┊   ┊217┊          chat.admins = chat.admins && chat.admins.filter(user => user.id !== currentUser.id);\n+┊   ┊218┊          // If there are no more admins left the group goes read only\n+┊   ┊219┊          chat.owner = chat.admins && chat.admins[0] || null; // A null owner means the group is read-only\n ┊170┊220┊\n-┊171┊   ┊          chats = chats.map(chat => {\n-┊172┊   ┊            if (chat.id === Number(chatId)) {\n-┊173┊   ┊              chat = {...chat, messages, listingMemberIds, actualGroupMemberIds, adminIds, ownerId};\n-┊174┊   ┊            }\n-┊175┊   ┊            return chat;\n-┊176┊   ┊          });\n+┊   ┊221┊          await connection.getRepository(Chat).save(chat);\n ┊177┊222┊        }\n-┊178┊   ┊        return Number(chatId);\n+┊   ┊223┊        return chatId;\n ┊179┊224┊      }\n ┊180┊225┊    },\n-┊181┊   ┊    addMessage: (obj: any, {chatId, content}: AddMessageMutationArgs, {user: currentUser}: {user: User}): Message => {\n+┊   ┊226┊    addMessage: async (obj: any, {chatId, content}: AddMessageMutationArgs, {user: currentUser, connection}: { user: User, connection: Connection }): Promise<Message | null> => {\n ┊182┊227┊      if (content === null || content === '') {\n ┊183┊228┊        throw new Error(`Cannot add empty or null messages.`);\n ┊184┊229┊      }\n ┊185┊230┊\n-┊186┊   ┊      let chat = chats.find(chat => chat.id === Number(chatId));\n+┊   ┊231┊      let chat = await connection\n+┊   ┊232┊        .createQueryBuilder(Chat, \"chat\")\n+┊   ┊233┊        .whereInIds(chatId)\n+┊   ┊234┊        .innerJoinAndSelect('chat.allTimeMembers', 'allTimeMembers')\n+┊   ┊235┊        .innerJoinAndSelect('chat.listingMembers', 'listingMembers')\n+┊   ┊236┊        .leftJoinAndSelect('chat.actualGroupMembers', 'actualGroupMembers')\n+┊   ┊237┊        .getOne();\n ┊187┊238┊\n ┊188┊239┊      if (!chat) {\n ┊189┊240┊        throw new Error(`Cannot find chat ${chatId}.`);\n ┊190┊241┊      }\n ┊191┊242┊\n-┊192┊   ┊      let holderIds = chat.listingMemberIds;\n+┊   ┊243┊      let holders: User[];\n ┊193┊244┊\n ┊194┊245┊      if (!chat.name) {\n ┊195┊246┊        // Chat\n-┊196┊   ┊        if (!chat.listingMemberIds.find(listingId => listingId === currentUser.id)) {\n+┊   ┊247┊        if (!chat.listingMembers.map(user => user.id).includes(currentUser.id)) {\n ┊197┊248┊          throw new Error(`The chat ${chatId} must be listed for the current user before adding a message.`);\n ┊198┊249┊        }\n ┊199┊250┊\n-┊200┊   ┊        const recipientId = chat.allTimeMemberIds.filter(userId => userId !== currentUser.id)[0];\n+┊   ┊251┊        const recipientUser = chat.allTimeMembers.find(user => user.id !== currentUser.id);\n ┊201┊252┊\n-┊202┊   ┊        if (!chat.listingMemberIds.find(listingId => listingId === recipientId)) {\n-┊203┊   ┊          // Chat is not listed for the recipient. Add him to the listingMemberIds\n-┊204┊   ┊          const listingMemberIds = chat.listingMemberIds.concat(recipientId);\n+┊   ┊253┊        if (!recipientUser) {\n+┊   ┊254┊          throw new Error(`Cannot find recipient user.`);\n+┊   ┊255┊        }\n ┊205┊256┊\n-┊206┊   ┊          chats = chats.map(chat => {\n-┊207┊   ┊            if (chat.id === Number(chatId)) {\n-┊208┊   ┊              chat = {...chat, listingMemberIds};\n-┊209┊   ┊            }\n-┊210┊   ┊            return chat;\n-┊211┊   ┊          });\n+┊   ┊257┊        if (!chat.listingMembers.find(user => user.id === recipientUser.id)) {\n+┊   ┊258┊          // Chat is not listed for the recipient. Add him to the listingIds\n+┊   ┊259┊          chat.listingMembers.push(recipientUser);\n ┊212┊260┊\n-┊213┊   ┊          holderIds = listingMemberIds;\n+┊   ┊261┊          await connection.getRepository(Chat).save(chat);\n ┊214┊262┊\n ┊215┊263┊          pubsub.publish('chatAdded', {\n ┊216┊264┊            creatorId: currentUser.id,\n ┊217┊265┊            chatAdded: chat,\n ┊218┊266┊          });\n ┊219┊267┊        }\n+┊   ┊268┊\n+┊   ┊269┊        holders = chat.listingMembers;\n ┊220┊270┊      } else {\n ┊221┊271┊        // Group\n-┊222┊   ┊        if (!chat.actualGroupMemberIds!.find(memberId => memberId === currentUser.id)) {\n+┊   ┊272┊        if (!chat.actualGroupMembers || !chat.actualGroupMembers.find(user => user.id === currentUser.id)) {\n ┊223┊273┊          throw new Error(`The user is not a member of the group ${chatId}. Cannot add message.`);\n ┊224┊274┊        }\n ┊225┊275┊\n-┊226┊   ┊        holderIds = chat.actualGroupMemberIds!;\n+┊   ┊276┊        holders = chat.actualGroupMembers;\n ┊227┊277┊      }\n ┊228┊278┊\n-┊229┊   ┊      const id = (chat.messages.length && chat.messages[chat.messages.length - 1].id + 1) || 1;\n-┊230┊   ┊\n-┊231┊   ┊      let recipients: Recipient[] = [];\n-┊232┊   ┊\n-┊233┊   ┊      holderIds.forEach(holderId => {\n-┊234┊   ┊        if (holderId !== currentUser.id) {\n-┊235┊   ┊          recipients.push({\n-┊236┊   ┊            userId: holderId,\n-┊237┊   ┊            messageId: id,\n-┊238┊   ┊            chatId: Number(chatId),\n-┊239┊   ┊            receivedAt: null,\n-┊240┊   ┊            readAt: null,\n-┊241┊   ┊          });\n-┊242┊   ┊        }\n-┊243┊   ┊      });\n-┊244┊   ┊\n-┊245┊   ┊      const message: Message = {\n-┊246┊   ┊        id,\n-┊247┊   ┊        chatId: Number(chatId),\n-┊248┊   ┊        senderId: currentUser.id,\n+┊   ┊279┊      const message = await connection.getRepository(Message).save(new Message({\n+┊   ┊280┊        chat: chat,\n+┊   ┊281┊        sender: currentUser,\n ┊249┊282┊        content,\n-┊250┊   ┊        createdAt: moment().unix(),\n ┊251┊283┊        type: MessageType.TEXT,\n-┊252┊   ┊        recipients,\n-┊253┊   ┊        holderIds,\n-┊254┊   ┊      };\n-┊255┊   ┊\n-┊256┊   ┊      chats = chats.map(chat => {\n-┊257┊   ┊        if (chat.id === Number(chatId)) {\n-┊258┊   ┊          chat = {...chat, messages: chat.messages.concat(message)}\n-┊259┊   ┊        }\n-┊260┊   ┊        return chat;\n-┊261┊   ┊      });\n+┊   ┊284┊        holders,\n+┊   ┊285┊        recipients: holders.reduce<Recipient[]>((filtered, user) => {\n+┊   ┊286┊          if (user.id !== currentUser.id) {\n+┊   ┊287┊            filtered.push(new Recipient({\n+┊   ┊288┊              user,\n+┊   ┊289┊            }));\n+┊   ┊290┊          }\n+┊   ┊291┊          return filtered;\n+┊   ┊292┊        }, []),\n+┊   ┊293┊      }));\n ┊262┊294┊\n ┊263┊295┊      pubsub.publish('messageAdded', {\n ┊264┊296┊        messageAdded: message,\n ┊265┊297┊      });\n ┊266┊298┊\n-┊267┊   ┊      return message;\n+┊   ┊299┊      return message || null;\n ┊268┊300┊    },\n-┊269┊   ┊    removeMessages: (obj: any, {chatId, messageIds, all}: RemoveMessagesMutationArgs, {user: currentUser}: {user: User}): number[] => {\n-┊270┊   ┊      const chat = chats.find(chat => chat.id === Number(chatId));\n+┊   ┊301┊    removeMessages: async (obj: any, {chatId, messageIds, all}: RemoveMessagesMutationArgs, {user: currentUser, connection}: { user: User, connection: Connection }) => {\n+┊   ┊302┊      const chat = await connection\n+┊   ┊303┊        .createQueryBuilder(Chat, \"chat\")\n+┊   ┊304┊        .whereInIds(chatId)\n+┊   ┊305┊        .innerJoinAndSelect('chat.listingMembers', 'listingMembers')\n+┊   ┊306┊        .innerJoinAndSelect('chat.messages', 'messages')\n+┊   ┊307┊        .innerJoinAndSelect('messages.holders', 'holders')\n+┊   ┊308┊        .getOne();\n ┊271┊309┊\n ┊272┊310┊      if (!chat) {\n ┊273┊311┊        throw new Error(`Cannot find chat ${chatId}.`);\n ┊274┊312┊      }\n ┊275┊313┊\n-┊276┊   ┊      if (!chat.listingMemberIds.find(listingId => listingId === currentUser.id)) {\n+┊   ┊314┊      if (!chat.listingMembers.find(user => user.id === currentUser.id)) {\n ┊277┊315┊        throw new Error(`The chat/group ${chatId} is not listed for the current user, so there is nothing to delete.`);\n ┊278┊316┊      }\n ┊279┊317┊\n```\n```diff\n@@ -281,79 +319,166 @@\n ┊281┊319┊        throw new Error(`Cannot specify both 'all' and 'messageIds'.`);\n ┊282┊320┊      }\n ┊283┊321┊\n+┊   ┊322┊      if (!all && !(messageIds && messageIds.length)) {\n+┊   ┊323┊        throw new Error(`'all' and 'messageIds' cannot be both null`);\n+┊   ┊324┊      }\n+┊   ┊325┊\n ┊284┊326┊      let deletedIds: number[] = [];\n-┊285┊   ┊      chats = chats.map(chat => {\n-┊286┊   ┊        if (chat.id === Number(chatId)) {\n-┊287┊   ┊          // Instead of chaining map and filter we can loop once using reduce\n-┊288┊   ┊          const messages = chat.messages.reduce<Message[]>((filtered, message) => {\n-┊289┊   ┊            if (all || messageIds!.includes(String(message.id))) {\n-┊290┊   ┊              deletedIds.push(message.id);\n-┊291┊   ┊              // Remove the current user from the message holders\n-┊292┊   ┊              message.holderIds = message.holderIds.filter(holderId => holderId !== currentUser.id);\n-┊293┊   ┊            }\n+┊   ┊327┊      // Instead of chaining map and filter we can loop once using reduce\n+┊   ┊328┊      chat.messages = await chat.messages.reduce<Promise<Message[]>>(async (filtered$, message) => {\n+┊   ┊329┊        const filtered = await filtered$;\n ┊294┊330┊\n-┊295┊   ┊            if (message.holderIds.length !== 0) {\n-┊296┊   ┊              filtered.push(message);\n-┊297┊   ┊            } // else discard the message\n+┊   ┊331┊        if (all || messageIds!.includes(String(message.id))) {\n+┊   ┊332┊          deletedIds.push(message.id);\n+┊   ┊333┊          // Remove the current user from the message holders\n+┊   ┊334┊          message.holders = message.holders.filter(user => user.id !== currentUser.id);\n ┊298┊335┊\n-┊299┊   ┊            return filtered;\n-┊300┊   ┊          }, []);\n-┊301┊   ┊          chat = {...chat, messages};\n ┊302┊336┊        }\n-┊303┊   ┊        return chat;\n-┊304┊   ┊      });\n+┊   ┊337┊\n+┊   ┊338┊        if (message.holders.length !== 0) {\n+┊   ┊339┊          // Remove the current user from the message holders\n+┊   ┊340┊          await connection.getRepository(Message).save(message);\n+┊   ┊341┊          filtered.push(message);\n+┊   ┊342┊        } else {\n+┊   ┊343┊          // Simply remove the message\n+┊   ┊344┊          const recipients = await connection\n+┊   ┊345┊            .createQueryBuilder(Recipient, \"recipient\")\n+┊   ┊346┊            .innerJoinAndSelect('recipient.message', 'message', 'message.id = :messageId', {messageId: message.id})\n+┊   ┊347┊            .innerJoinAndSelect('recipient.user', 'user')\n+┊   ┊348┊            .getMany();\n+┊   ┊349┊          for (let recipient of recipients) {\n+┊   ┊350┊            await connection.getRepository(Recipient).remove(recipient);\n+┊   ┊351┊          }\n+┊   ┊352┊          await connection.getRepository(Message).remove(message);\n+┊   ┊353┊        }\n+┊   ┊354┊\n+┊   ┊355┊        return filtered;\n+┊   ┊356┊      }, Promise.resolve([]));\n+┊   ┊357┊\n+┊   ┊358┊      await connection.getRepository(Chat).save(chat);\n+┊   ┊359┊\n ┊305┊360┊      return deletedIds;\n ┊306┊361┊    },\n ┊307┊362┊  },\n ┊308┊363┊  Subscription: {\n ┊309┊364┊    messageAdded: {\n ┊310┊365┊      subscribe: withFilter(() => pubsub.asyncIterator('messageAdded'),\n-┊311┊   ┊        ({messageAdded}: {messageAdded: Message & {chat: {id: number}}}, {chatId}: MessageAddedSubscriptionArgs, {user: currentUser}: { user: User }) => {\n+┊   ┊366┊        ({messageAdded}: {messageAdded: Message}, {chatId}: MessageAddedSubscriptionArgs, {user: currentUser}: { user: User }) => {\n ┊312┊367┊          return (!chatId || messageAdded.chat.id === Number(chatId)) &&\n-┊313┊   ┊            !!messageAdded.recipients.find((recipient: Recipient) => recipient.userId === currentUser.id);\n+┊   ┊368┊            !!messageAdded.recipients.find((recipient: Recipient) => recipient.user.id === currentUser.id);\n ┊314┊369┊        }),\n ┊315┊370┊    },\n ┊316┊371┊    chatAdded: {\n ┊317┊372┊      subscribe: withFilter(() => pubsub.asyncIterator('chatAdded'),\n-┊318┊   ┊        ({creatorId, chatAdded}: {creatorId: string, chatAdded: Chat}, variables: any, {user: currentUser}: { user: User }) => {\n-┊319┊   ┊          return Number(creatorId) !== currentUser.id && !chatAdded.listingMemberIds.includes(currentUser.id);\n+┊   ┊373┊        ({creatorId, chatAdded}: {creatorId: string, chatAdded: Chat}, variables, {user: currentUser}: { user: User }) => {\n+┊   ┊374┊          return Number(creatorId) !== currentUser.id &&\n+┊   ┊375┊            !!chatAdded.listingMembers.find((user: User) => user.id === currentUser.id);\n ┊320┊376┊        }),\n ┊321┊377┊    }\n ┊322┊378┊  },\n ┊323┊379┊  Chat: {\n-┊324┊   ┊    name: (chat: Chat, args: any, {user: currentUser}: {user: User}): string => chat.name ? chat.name : users\n-┊325┊   ┊      .find(user => user.id === chat.allTimeMemberIds.find(userId => userId !== currentUser.id))!.name,\n-┊326┊   ┊    picture: (chat: Chat, args: any, {user: currentUser}: {user: User}) => chat.name ? chat.picture : users\n-┊327┊   ┊      .find(user => user.id === chat.allTimeMemberIds.find(userId => userId !== currentUser.id))!.picture,\n-┊328┊   ┊    allTimeMembers: (chat: Chat): User[] => users.filter(user => chat.allTimeMemberIds.includes(user.id)),\n-┊329┊   ┊    listingMembers: (chat: Chat): User[] => users.filter(user => chat.listingMemberIds.includes(user.id)),\n-┊330┊   ┊    actualGroupMembers: (chat: Chat): User[] => users.filter(user => chat.actualGroupMemberIds && chat.actualGroupMemberIds.includes(user.id)),\n-┊331┊   ┊    admins: (chat: Chat): User[] => users.filter(user => chat.adminIds && chat.adminIds.includes(user.id)),\n-┊332┊   ┊    owner: (chat: Chat): User | null => users.find(user => chat.ownerId === user.id) || null,\n-┊333┊   ┊    messages: (chat: Chat, {amount = null}: {amount: number}, {user: currentUser}: {user: User}): Message[] => {\n-┊334┊   ┊      const messages = chat.messages\n-┊335┊   ┊      .filter(message => message.holderIds.includes(currentUser.id))\n-┊336┊   ┊      .sort((a, b) => b.createdAt - a.createdAt) || <Message[]>[];\n-┊337┊   ┊      return (amount ? messages.slice(0, amount) : messages).reverse();\n+┊   ┊380┊    name: async (chat: Chat, args: any, {user: currentUser, connection}: {user: User, connection: Connection}): Promise<string | null> => {\n+┊   ┊381┊      if (chat.name) {\n+┊   ┊382┊        return chat.name;\n+┊   ┊383┊      }\n+┊   ┊384┊      const user = await connection\n+┊   ┊385┊        .createQueryBuilder(User, \"user\")\n+┊   ┊386┊        .where('user.id != :userId', {userId: currentUser.id})\n+┊   ┊387┊        .innerJoin('user.allTimeMemberChats', 'allTimeMemberChats', 'allTimeMemberChats.id = :chatId', {chatId: chat.id})\n+┊   ┊388┊        .getOne();\n+┊   ┊389┊      return user && user.name || null;\n+┊   ┊390┊    },\n+┊   ┊391┊    picture: async (chat: Chat, args: any, {user: currentUser, connection}: {user: User, connection: Connection}): Promise<string | null> => {\n+┊   ┊392┊      if (chat.name) {\n+┊   ┊393┊        return chat.picture;\n+┊   ┊394┊      }\n+┊   ┊395┊      const user = await connection\n+┊   ┊396┊        .createQueryBuilder(User, \"user\")\n+┊   ┊397┊        .where('user.id != :userId', {userId: currentUser.id})\n+┊   ┊398┊        .innerJoin('user.allTimeMemberChats', 'allTimeMemberChats', 'allTimeMemberChats.id = :chatId', {chatId: chat.id})\n+┊   ┊399┊        .getOne();\n+┊   ┊400┊      return user ? user.picture : null;\n+┊   ┊401┊    },\n+┊   ┊402┊    allTimeMembers: async (chat: Chat, args: any, {user: currentUser, connection}: {user: User, connection: Connection}): Promise<User[]> => {\n+┊   ┊403┊      return await connection\n+┊   ┊404┊        .createQueryBuilder(User, \"user\")\n+┊   ┊405┊        .innerJoin('user.allTimeMemberChats', 'allTimeMemberChats', 'allTimeMemberChats.id = :chatId', {chatId: chat.id})\n+┊   ┊406┊        .getMany();\n+┊   ┊407┊    },\n+┊   ┊408┊    listingMembers: async (chat: Chat, args: any, {user: currentUser, connection}: {user: User, connection: Connection}): Promise<User[]> => {\n+┊   ┊409┊      return await connection\n+┊   ┊410┊        .createQueryBuilder(User, \"user\")\n+┊   ┊411┊        .innerJoin('user.listingMemberChats', 'listingMemberChats', 'listingMemberChats.id = :chatId', {chatId: chat.id})\n+┊   ┊412┊        .getMany();\n+┊   ┊413┊    },\n+┊   ┊414┊    actualGroupMembers: async (chat: Chat, args: any, {user: currentUser, connection}: {user: User, connection: Connection}): Promise<User[]> => {\n+┊   ┊415┊      return await connection\n+┊   ┊416┊        .createQueryBuilder(User, \"user\")\n+┊   ┊417┊        .innerJoin('user.actualGroupMemberChats', 'actualGroupMemberChats', 'actualGroupMemberChats.id = :chatId', {chatId: chat.id})\n+┊   ┊418┊        .getMany();\n+┊   ┊419┊    },\n+┊   ┊420┊    admins: async (chat: Chat, args: any, {user: currentUser, connection}: {user: User, connection: Connection}): Promise<User[]> => {\n+┊   ┊421┊      return await connection\n+┊   ┊422┊        .createQueryBuilder(User, \"user\")\n+┊   ┊423┊        .innerJoin('user.adminChats', 'adminChats', 'adminChats.id = :chatId', {chatId: chat.id})\n+┊   ┊424┊        .getMany();\n ┊338┊425┊    },\n-┊339┊   ┊    unreadMessages: (chat: Chat, args: any, {user: currentUser}: {user: User}): number => chat.messages\n-┊340┊   ┊      .filter(message => message.holderIds.includes(currentUser.id) &&\n-┊341┊   ┊        message.recipients.find(recipient => recipient.userId === currentUser.id && !recipient.readAt))\n-┊342┊   ┊      .length,\n-┊343┊   ┊    isGroup: (chat: Chat): boolean => !!chat.name,\n+┊   ┊426┊    owner: async (chat: Chat, args: any, {user: currentUser, connection}: {user: User, connection: Connection}): Promise<User | null> => {\n+┊   ┊427┊      return await connection\n+┊   ┊428┊        .createQueryBuilder(User, \"user\")\n+┊   ┊429┊        .innerJoin('user.ownerChats', 'ownerChats', 'ownerChats.id = :chatId', {chatId: chat.id})\n+┊   ┊430┊        .getOne() || null;\n+┊   ┊431┊    },\n+┊   ┊432┊    messages: async (chat: Chat, {amount = null}: {amount: number}, {user: currentUser, connection}: {user: User, connection: Connection}): Promise<Message[]> => {\n+┊   ┊433┊      const query = connection\n+┊   ┊434┊        .createQueryBuilder(Message, \"message\")\n+┊   ┊435┊        .innerJoin('message.chat', 'chat', 'chat.id = :chatId', {chatId: chat.id})\n+┊   ┊436┊        .innerJoin('message.holders', 'holders', 'holders.id = :userId', {userId: currentUser.id})\n+┊   ┊437┊        .orderBy({\"message.createdAt\": \"DESC\"});\n+┊   ┊438┊      return (amount ? await query.take(amount).getMany() : await query.getMany()).reverse();\n+┊   ┊439┊    },\n+┊   ┊440┊    unreadMessages: async (chat: Chat, args: any, {user: currentUser, connection}: {user: User, connection: Connection}): Promise<number> => {\n+┊   ┊441┊      return await connection\n+┊   ┊442┊        .createQueryBuilder(Message, \"message\")\n+┊   ┊443┊        .innerJoin('message.chat', 'chat', 'chat.id = :chatId', {chatId: chat.id})\n+┊   ┊444┊        .innerJoin('message.recipients', 'recipients', 'recipients.user.id = :userId AND recipients.readAt IS NULL', {userId: currentUser.id})\n+┊   ┊445┊        .getCount();\n+┊   ┊446┊    },\n+┊   ┊447┊    isGroup: (chat: Chat) => !!chat.name,\n ┊344┊448┊  },\n ┊345┊449┊  Message: {\n-┊346┊   ┊    chat: (message: Message): Chat | null => chats.find(chat => message.chatId === chat.id) || null,\n-┊347┊   ┊    sender: (message: Message): User | null => users.find(user => user.id === message.senderId) || null,\n-┊348┊   ┊    holders: (message: Message): User[] => users.filter(user => message.holderIds.includes(user.id)),\n-┊349┊   ┊    ownership: (message: Message, args: any, {user: currentUser}: {user: User}): boolean => message.senderId === currentUser.id,\n-┊350┊   ┊  },\n-┊351┊   ┊  Recipient: {\n-┊352┊   ┊    user: (recipient: Recipient): User | null => users.find(user => recipient.userId === user.id) || null,\n-┊353┊   ┊    message: (recipient: Recipient): Message | null => {\n-┊354┊   ┊      const chat = chats.find(chat => recipient.chatId === chat.id);\n-┊355┊   ┊      return chat ? chat.messages.find(message => recipient.messageId === message.id) || null : null;\n+┊   ┊450┊    sender: async (message: Message, args: any, {user: currentUser, connection}: {user: User, connection: Connection}): Promise<User | null> => {\n+┊   ┊451┊      return (await connection\n+┊   ┊452┊        .createQueryBuilder(User, \"user\")\n+┊   ┊453┊        .innerJoin('user.senderMessages', 'senderMessages', 'senderMessages.id = :messageId', {messageId: message.id})\n+┊   ┊454┊        .getOne()) || null;\n+┊   ┊455┊    },\n+┊   ┊456┊    ownership: async (message: Message, args: any, {user: currentUser, connection}: {user: User, connection: Connection}): Promise<boolean> => {\n+┊   ┊457┊      return !!(await connection\n+┊   ┊458┊        .createQueryBuilder(User, \"user\")\n+┊   ┊459┊        .whereInIds(currentUser.id)\n+┊   ┊460┊        .innerJoin('user.senderMessages', 'senderMessages', 'senderMessages.id = :messageId', {messageId: message.id})\n+┊   ┊461┊        .getCount());\n+┊   ┊462┊    },\n+┊   ┊463┊    recipients: async (message: Message, args: any, {user: currentUser, connection}: {user: User, connection: Connection}): Promise<Recipient[]> => {\n+┊   ┊464┊      return await connection\n+┊   ┊465┊        .createQueryBuilder(Recipient, \"recipient\")\n+┊   ┊466┊        .innerJoinAndSelect('recipient.message', 'message', 'message.id = :messageId', {messageId: message.id})\n+┊   ┊467┊        .innerJoinAndSelect('recipient.user', 'user')\n+┊   ┊468┊        .innerJoinAndSelect('recipient.chat', 'chat')\n+┊   ┊469┊        .getMany();\n+┊   ┊470┊    },\n+┊   ┊471┊    holders: async (message: Message, args: any, {user: currentUser, connection}: {user: User, connection: Connection}): Promise<User[]> => {\n+┊   ┊472┊      return await connection\n+┊   ┊473┊        .createQueryBuilder(User, \"user\")\n+┊   ┊474┊        .innerJoin('user.holderMessages', 'holderMessages', 'holderMessages.id = :messageId', {messageId: message.id})\n+┊   ┊475┊        .getMany();\n+┊   ┊476┊    },\n+┊   ┊477┊    chat: async (message: Message, args: any, {user: currentUser, connection}: {user: User, connection: Connection}): Promise<Chat | null> => {\n+┊   ┊478┊      return (await connection\n+┊   ┊479┊        .createQueryBuilder(Chat, \"chat\")\n+┊   ┊480┊        .innerJoin('chat.messages', 'messages', 'messages.id = :messageId', {messageId: message.id})\n+┊   ┊481┊        .getOne()) || null;\n ┊356┊482┊    },\n-┊357┊   ┊    chat: (recipient: Recipient): Chat | null => chats.find(chat => recipient.chatId === chat.id) || null,\n ┊358┊483┊  },\n ┊359┊484┊};\n```\n\n[}]: #\n\n`QueryBuilder` is one of the most powerful features of `TypeORM` - it allows you to build SQL queries using elegant and convenient syntax, execute them and get automatically transformed entities.\n\nYou can find more informations on `TypeORM` on http://typeorm.io\n\nThe best part is that you won't have to do anything on the client, everything will be completely transparent to it, even if migrated from NoSQL-like db structure to a relational one!\nOf course, you could remove the custom normalization for the messages because now they have their own table and they are no longer embedded (so they have unique IDs), but we could leave it as well in order to be free to use any kind of backend."
          }
        ]
      },
      {
        "releaseVersion": "0.1.0",
        "releaseDate": "2018-05-29 01:26:37 +0800",
        "tagName": "master@0.1.0",
        "tagRevision": "dc3b0485a1410fd0e000edded1014b2ab463e5c1",
        "historyRevision": "5b0556f1664187fc80b61c5c42b972b263b84e8a",
        "changesDiff": "diff --git a/.gitignore b/.gitignore\nnew file mode 100644\nindex 0000000..05ade97\n--- /dev/null\n+++ b/.gitignore\n@@ -0,0 +1,3 @@\n+node_modules\n+npm-debug.log\n+.idea\ndiff --git a/.tortilla/assets/chat.png b/.tortilla/assets/chat.png\nnew file mode 100644\nindex 0000000..6bf670a\nBinary files /dev/null and b/.tortilla/assets/chat.png differ\ndiff --git a/.tortilla/assets/chat_components.png b/.tortilla/assets/chat_components.png\nnew file mode 100644\nindex 0000000..8330cd0\nBinary files /dev/null and b/.tortilla/assets/chat_components.png differ\ndiff --git a/.tortilla/assets/chats.png b/.tortilla/assets/chats.png\nnew file mode 100644\nindex 0000000..979021d\nBinary files /dev/null and b/.tortilla/assets/chats.png differ\ndiff --git a/.tortilla/assets/chats_components.png b/.tortilla/assets/chats_components.png\nnew file mode 100644\nindex 0000000..35c712e\nBinary files /dev/null and b/.tortilla/assets/chats_components.png differ\ndiff --git a/.tortilla/assets/new_chat.png b/.tortilla/assets/new_chat.png\nnew file mode 100644\nindex 0000000..77bccab\nBinary files /dev/null and b/.tortilla/assets/new_chat.png differ\ndiff --git a/.tortilla/assets/new_chat_components.png b/.tortilla/assets/new_chat_components.png\nnew file mode 100644\nindex 0000000..4cfab73\nBinary files /dev/null and b/.tortilla/assets/new_chat_components.png differ\ndiff --git a/.tortilla/assets/new_group.png b/.tortilla/assets/new_group.png\nnew file mode 100644\nindex 0000000..a887fc3\nBinary files /dev/null and b/.tortilla/assets/new_group.png differ\ndiff --git a/.tortilla/assets/new_group_components.png b/.tortilla/assets/new_group_components.png\nnew file mode 100644\nindex 0000000..5418757\nBinary files /dev/null and b/.tortilla/assets/new_group_components.png differ\ndiff --git a/.tortilla/assets/new_group_details.png b/.tortilla/assets/new_group_details.png\nnew file mode 100644\nindex 0000000..71b6f31\nBinary files /dev/null and b/.tortilla/assets/new_group_details.png differ\ndiff --git a/.tortilla/assets/new_group_details_components.png b/.tortilla/assets/new_group_details_components.png\nnew file mode 100644\nindex 0000000..7540778\nBinary files /dev/null and b/.tortilla/assets/new_group_details_components.png differ\ndiff --git a/.tortilla/manuals/templates/root.tmpl b/.tortilla/manuals/templates/root.tmpl\nnew file mode 100644\nindex 0000000..37c481e\n--- /dev/null\n+++ b/.tortilla/manuals/templates/root.tmpl\n@@ -0,0 +1 @@\n+A newly created Tortilla project. For more information, see https://github.com/Urigo/tortilla.\n\\ No newline at end of file\ndiff --git a/.tortilla/manuals/templates/step1.tmpl b/.tortilla/manuals/templates/step1.tmpl\nnew file mode 100644\nindex 0000000..b26ae49\n--- /dev/null\n+++ b/.tortilla/manuals/templates/step1.tmpl\n@@ -0,0 +1,51 @@\n+# Step 1: How to build an app?\n+\n+So you want to build an app!\n+The good news is, it’s not that difficult and after a while anyone can do it!\n+Another good news is that it’s a great skill to have, there is a lot of demand in the job market and you can get to be very creative. Also you can be part of basically any industry you can think of if you know how to program (Healthcare, \n+banking, education, defense, gaming, etc…).\n+\n+Software builds as layers on top of layers.  Every code you write is using code that others have written before already and you can just use it even without fully understanding it.\n+That’s what makes software advance so fast and makes the pace of progress increase as time goes by.\n+Also, most software today is written in an open and free way - everyone can share their code and use other people's code for free.  We even have a social network for that!  It’s called Github.\n+\n+One way of learning how to build an app is to study software from the origins. How computers, operating systems and compilers work. It is very interesting but that also takes a long time.\n+Another way to learn how to create a new app is to start by first using all the code that has been already written out there and once we have a real world running app, go deeper to understand how it works from the inside.\n+\n+I’ll try to use the later approach because I think it is more fun and also it gives context when we will dive inside on how things work. Also it helps when we try to compare between different technologies that do the same thing (Angular vs. \n+React , etc…).\n+That’s because understanding the bigger picture is more important than knowing and remembering the details.\n+\n+You noticed that the chapter started with a simple question.\n+All the lessons will start and include many of those questions.  Those are the questions you will need to Google.  The reason is that the most important skill a creator has today is to know how to search Google for the things they need. Most \n+programmers, even the best ones, don’t remember anything, they just use Google for almost every line of code they write. So know that you don’t need to know it all, Google knows it all for you.\n+This tutorial might get outdated (it won't, hopefully!), but Google will always have the answers so it is more important to know to ask the right questions.\n+In my opinion the most important skill a programmer needs to have is patience and acceptance when something just doesn’t work, enjoy that feeling and start Googling around in order to learn new things and solve this new problem (this process of \n+feeling like you don’t know anything will happen 1000 times a day, also after 20 years of programming).\n+\n+## Planning the app: how to design an app?\n+\n+The first and most important phase in the process is the beginning - designing the app, its parts, components and architecture, and how it all works together.\n+For this tutorial we will build a WhatsApp clone so we have the designs already prepared.\n+\n+The process will looks like that:\n+\n+1. **Visually sketch the screens of the app**. We already know how WhatsApp looks so we’ll just copy it on pen and paper.\n+2. **Break down to components**. The best way to describe the UI of apps is to break the UI into separate components and mix them up together. When breaking down to components we would need to think about the following steps:\n+  * **Presentational components**: the small building blocks of the UI. For example input fields, images, text, buttons etc…\n+  * **Layout**: how the components are positioned inside each other (talk about flex, grid and older layout types)\n+  * **Styles**: colors, fonts etc… We might skip that part at the beginning because we can have a perfectly working app without it\n+  * **Data dependencies**: the data that those components need - chats, messages, people etc… We will need to to do the following:\n+    * Gather data for each component\n+    * Attach all those dependencies into one schema\n+    * Attach actions for each component\n+    * Data updates: decide when the data should be updated in the view (ideally we shouldn’t have to say when but for technical and performance reasons it helps)\n+3. **Routing flow**: Moving between screens, what are the different paths the user can navigate through our app\n+\n+Once we will finish that process, you will have a big picture in your head (and on your paper) and implementing it with code will be much easier and more technical, meaning you won’t need to know a lot, just Google how to do each step...\n+\n+Another interesting thing is, that implementing this same process can be done with a variety of different technologies, so this work will make sense whether you are using web with React or Angular, native apps, Windows UWP or any other \n+technology for the UI and also relevant whether your data source is a Node, .NET or Ruby server with Mongo, Postgres or MySQL database (if all those words doesn’t mean anything for you, don’t worry, those are just different names to very similar \n+ideas and we will learn all of them later on and of course you can always just Google them).\n+\n+Head over to the next chapter to start planning.\ndiff --git a/.tortilla/manuals/templates/step10.tmpl b/.tortilla/manuals/templates/step10.tmpl\nnew file mode 100644\nindex 0000000..e87fd4d\n--- /dev/null\n+++ b/.tortilla/manuals/templates/step10.tmpl\n@@ -0,0 +1,13 @@\n+## Client\n+\n+Did you notice that after creating a new message you'll have to refresh the page in order to see it?\n+How to fix that? If you thought about re-querying the server you would be wrong! The best solution is to use the response provided by the server to update our Apollo local cache.\n+\n+Apollo performs two important core tasks: Executing queries and mutations, and caching the results.\n+\n+Thanks to Apollo’s store design, it’s possible for the results of a query or mutation to update your UI in all the right places. In many cases it’s possible for that to happen automatically, whereas in others you need to help the client out a little in doing so:\n+\n+{{{ diffStep \"6.1\" module=\"client\" }}}\n+\n+Now you won't need to reload the page in order to see the new message. What's even more interesting is that the message you wrote would also be shown as the last message in the chats list, just hit the back button in the top-left corner to find out!\n+This is because we updated our store for both the `GetChat` and the `GetChats` query.\n\\ No newline at end of file\ndiff --git a/.tortilla/manuals/templates/step11.tmpl b/.tortilla/manuals/templates/step11.tmpl\nnew file mode 100644\nindex 0000000..fd33d28\n--- /dev/null\n+++ b/.tortilla/manuals/templates/step11.tmpl\n@@ -0,0 +1,30 @@\n+## Client\n+\n+Since we're now familiar with the way mutations work, it's time to add messages and chats removal to our list of features!\n+Since the most annoying part is going to be dealing with the user interface (because a multiple selection started by a press event is involved), I created an Angular directive to ease the process.\n+Let's start by installing it:\n+\n+    $ npm install ngx-selectable-list\n+\n+Now let's import it:\n+\n+{{{ diffStep \"7.1\" module=\"client\" files=\"^(?!package.json$).*\" }}}\n+\n+Let's create the mutations:\n+\n+{{{ diffStep \"7.2\" module=\"client\" files=\"src/graphql\" }}}\n+\n+Now let's update our service:\n+\n+{{{ diffStep \"7.2\" module=\"client\" files=\"chats.service.ts\" }}}\n+\n+As you can see every time that we remove a message we also have to update the last message in the chats list.\n+\n+Finally we can wire everything up into our components:\n+\n+{{{ diffStep \"7.2\" module=\"client\" files=\"src/app/chat-viewer, src/app/chats-lister, src/app/shared\" }}}\n+\n+We also created a `ConfirmSelectionComponent` to use for content projection, since our selectable list directive will be able to listen to its events.\n+The selectable list directive supports much more different use cases, for info please read the documentation.\n+\n+As you can see `ngx-selectable-list` takes care of most of the boilerplate, giving us the freedom to concentrate on the actual code.\n\\ No newline at end of file\ndiff --git a/.tortilla/manuals/templates/step12.tmpl b/.tortilla/manuals/templates/step12.tmpl\nnew file mode 100644\nindex 0000000..896a39e\n--- /dev/null\n+++ b/.tortilla/manuals/templates/step12.tmpl\n@@ -0,0 +1,17 @@\n+We still cannot create new chats or groups, so let's implement it.\n+We're going to create a `ChatsCreation` module, with a `NewChat` and a `NewGroup` containers, along with several presentational components.\n+We're going to make use of the selectable list directive once again, to ease selecting the users when we're creating a new group.\n+You should also notice that we are looking for existing chats before creating a new one: if it already exists we're are simply redirecting to that chat instead of creating a new one (the server wouldn't allow that anyway and it will simply\n+return the chat id).\n+\n+{{{ diffStep \"8.1\" module=\"client\" files=\"src/graphql\" }}}\n+\n+After creating the mutations we should run the generator to create the corresponding types:\n+\n+    npm run generator\n+\n+{{{ diffStep \"8.1\" module=\"client\" files=\"src/app/app.module.ts, src/app/chats-creation, src/app/services\" }}}\n+\n+Finally we should update our tests:\n+\n+{{{ diffStep \"8.1\" module=\"client\" files=\"src/app/chat-viewer/containers/chat/chat.component.spec.ts\" }}}\ndiff --git a/.tortilla/manuals/templates/step13.tmpl b/.tortilla/manuals/templates/step13.tmpl\nnew file mode 100644\nindex 0000000..5708027\n--- /dev/null\n+++ b/.tortilla/manuals/templates/step13.tmpl\n@@ -0,0 +1,29 @@\n+## Client\n+\n+Now let's start our client in production mode:\n+\n+    $ ng serve --prod\n+\n+Now open the Chrome Developers Tools and, in the Network tab, select 'Slow 3G Network' and 'Disable cache'.\n+Now refresh the page and look at the DOMContentLoaded time and at the transferred size. You'll notice that our bundle size is quite small and so the loads time.\n+Now let's click on a specific chat. It will take some time to load the data. Now let's add a new message. Once again it will take some time to load the data. We could also create a new chat and the result would be the same. The whole app doesn't\n+feel as snappier as the real Whatsapp on a slow 3G Network.\n+\"That's normal, it's a web application with a remote db while Whatsapp is a native app with a local database...\"\n+That's just an excuse, because we can do as good as Whatsapp thanks to Apollo!\n+\n+Let's install `moment`, we will soon need it:\n+\n+    $ npm install moment\n+\n+Let's start by making our UI optimistic. We can predict most of the response we will get from our server, except for a few things like `id` of newly created messages. But since we don't really need that id, we can simply generate a fake one\n+which will be later overridden once we get the response from the server:\n+\n+{{{ diffStep \"9.1\" module=\"client\" files=\"^(?!package.json$).*\" }}}\n+\n+When we open a specific chat we can also preload some data from our chats list cache while waiting for the server response. We will initially be able to show only the chat name, the last message or the last few messages and a few more informations instead of the whole content from the server, but that would be more than enough to entertain the user while waiting for the server response:\n+\n+{{{ diffStep \"9.2\" module=\"client\" }}}\n+\n+Now let's deal with the most difficult part: what about chats creation? We cannot predict the `id` of the new chat and so we cannot navigate to the chat page because it contains the chat id in the url. We could simply navigate to the \"optimistic\" id, but then the user wouldn't be able to reach that url if he refreshes the page or bookmarks it. That's a problem we care about. How to solve it? We're going to create a landing page and we will later override the url once we get the response from the server!\n+\n+{{{ diffStep \"9.3\" module=\"client\" }}}\n\\ No newline at end of file\ndiff --git a/.tortilla/manuals/templates/step14.tmpl b/.tortilla/manuals/templates/step14.tmpl\nnew file mode 100644\nindex 0000000..79efac8\n--- /dev/null\n+++ b/.tortilla/manuals/templates/step14.tmpl\n@@ -0,0 +1,61 @@\n+## Server\n+\n+Authentication is an hot topic in the GraphQL world and there are some projects which aim at authenticating through GraphQL.\n+Since often you will be required to use a specific auth framework (because of a feature you need or because of an existing authorization infrastructure) I will show you how to use a classic REST API framework within your GraphQL application.\n+This approach is completely fine and in line with the official GraphQL best practices.\n+We will use `Passport` for the authentication and `BasicAuth` as the auth mechanism:\n+\n+    npm install bcrypt-nodejs passport passport-http\n+    npm install --save-dev @types/bcrypt-nodejs @types/passport @types/passport-http\n+\n+`BasicAuth` basically involves to send username e password in an Authorization Header together with each request and is fully supported by any browser (meaning that we will be able to use `Graphiql` simply by proving username and password in the login window provided by the browser itself).\n+It's the most simple auth mechanism but it's completely fine for our needs. Later we could decide to use something more complicated like `JWT`, but it's outside of the scope of this tutorial.\n+\n+{{{ diffStep \"4.1\" module=\"server\" files=\"index.ts\" }}}\n+\n+We are going to store hashes instead of plain passwords, that's why we're using `bcrypt-nodejs`.\n+With `passport.use('basic-signin')` and `passport.use('basic-signup')` we define how the auth framework deals with our database (well, our JSON file for the moment).\n+`app.post('/signup')` is the endpoint for creating new accounts, so we left it out of the authentication middleware (`app.use(passport.authenticate('basic-signin')`).\n+What's of particular interest is that we're passing the user object to the GraphQL context.\n+\n+{{{ diffStep \"4.1\" module=\"server\" files=\"schema/resolvers.ts\" }}}\n+\n+In the resolvers we're basically making use of the user object taken from the context.\n+\n+## Client\n+\n+Let's start installing `@angular/flex-layout`, because we will use it later:\n+\n+    $ npm install @angular/flex-layout\n+\n+First of all we need to create an HTTP Interceptor, which will intercept every HTTP request and will add authentication headers.\n+For the moment we still don't have those headers, but we are going to store them in the LocalStorage later.\n+We are also creating an AuthGuard, which we will use to stop the user from reaching unauthorized Routes.\n+The AuthGuard will simply look for the presence of the Authentication Header, but will not guarantee that the header is authentic.\n+This is no problem, because client side AuthGuards are not safe by design and the real authentication will be done server side anyway.\n+AuthGuards are here just to redirect the user to the Login page.\n+The service we are going to create will contain some auth methods we are going to use across the app.\n+\n+{{{ diffStep \"10.1\" module=\"client\" files=\"src/app/login/services\" }}}\n+\n+Now it's time to create a SignIn/SignUp component. Since we use Passport in the server we are going to make REST calls for the authentication, instead of using GraphQL.\n+Since we use Basic Auth we will simply combine the username and the password together to create the authentication header.\n+We will also store the response from the server, which will contain the user information like the ID, etc. which we are going to need later.\n+\n+{{{ diffStep \"10.1\" module=\"client\" files=\"src/app/login/containers, src/app/login/login.module.ts\" }}}\n+\n+Now it's time use the Interceptor we just created:\n+\n+{{{ diffStep \"10.1\" module=\"client\" files=\"src/app/app.module.ts\" }}}\n+\n+As well as the AuthGuard:\n+\n+{{{ diffStep \"10.1\" module=\"client\" files=\"src/app/chat-viewer/chat-viewer.module.ts, src/app/chats-creation/chats-creation.module.ts, src/app/chats-lister/chats-lister.module.ts\" }}}\n+\n+Last but not the least we need to fix our main service in order to not use the hardcoded user anymore. Instead we will use our Login service to read the user info from the LocalStorage.\n+\n+{{{ diffStep \"10.1\" module=\"client\" files=\"src/app/services/chats.service.ts\" }}}\n+\n+We also need to fix our tests:\n+\n+{{{ diffStep \"10.1\" module=\"client\" files=\"src/app/chat-viewer/containers/chat/chat.component.spec.ts, src/app/chats-lister/containers/chats/chats.component.spec.ts, src/app/services/chats.service.spec.ts\" }}}\n\\ No newline at end of file\ndiff --git a/.tortilla/manuals/templates/step15.tmpl b/.tortilla/manuals/templates/step15.tmpl\nnew file mode 100644\nindex 0000000..80b910a\n--- /dev/null\n+++ b/.tortilla/manuals/templates/step15.tmpl\n@@ -0,0 +1,64 @@\n+## Server\n+\n+In order to use WebSockets we will need to install a couple of packages:\n+\n+    npm install graphql-subscriptions subscriptions-transport-ws\n+\n+Our GraphQL server will use WebSockets only for subscriptions, while using HTTP for everything else. That means that we will have to add subscriptions on a specific path.\n+We're using `connectionParams` for the authentication over WebSockets, that means that we won't be using the `Passport` framework at all. Instead we will use the `onConnect` hook to manually validate the parameters provided by the user to either validate the WebSocket connection or throw an error.\n+We will also return the user object we retrieved from the db, to let the resolvers know who is the current user.\n+\n+{{{ diffStep \"5.1\" module=\"server\" files=\"index.ts\" }}}\n+\n+We will use the `PubSub` implementation from `graphql-subscriptions`, and we will connect it to `subscribe` executor of `graphql`, and publish the data using `subscriptions-transport-ws` (a WebSocket server and client library for GraphQL that can be used directly in a JavaScript app or wired up to a fully-featured GraphQL client like Apollo).\n+\n+The process of setting up a GraphQL subscriptions server consist of the following steps:\n+\n+1. Declaring subscriptions in the GraphQL schema\n+2. Setup a PubSub instance that our server will publish new events to\n+3. Hook together `PubSub` event and GraphQL subscription.\n+4. Setting up `SubscriptionsServer`, a transport between the server and the clients\n+\n+{{{ diffStep \"5.1\" module=\"server\" files=\"schema/typeDefs.ts\" }}}\n+\n+We created two subscriptions: one to notify for new chats and one to notify for new messages.\n+\n+{{{ diffStep \"5.1\" module=\"server\" files=\"schema/resolvers.ts\" }}}\n+\n+We will publish a message to the `messageAdded` subscription every time that a user sends a message, then we will filter them according to the current user (we don't want to send someone else's messages).\n+The `chatAdded` subscription is similar: we will publish each time that a group gets created, but not when chats get created. This is because when a user creates a chat the chat doesn't appear to the other peer until he writes the first message. That's why we also publish when new messages get added (we first look if the other peer already gets the chat listed).\n+\n+## Client\n+\n+In order to use WebSockets we will need to install a couple of dependencies:\n+\n+    $ npm install apollo-link-ws apollo-utilities subscriptions-transport-ws\n+\n+First let's create the queries for the GraphQL Subscriptions:\n+\n+{{{ diffStep \"11.1\" module=\"client\" files=\"src/graphql\" }}}\n+\n+Then we need to run `graphql-code-generator` to generate the types:\n+\n+    $ npm run generator\n+\n+Now we can update the chats service to update the getChats query every time that we receive a new chat from the subscription.\n+With GraphQL subscriptions your client will be alerted on push from the server and you should choose the pattern that fits your application the most:\n+\n+- Use it as a notification and run any logic you want when it fires, for example alerting the user or refetching data\n+- Use the data sent along with the notification and merge it directly into the store (existing queries are automatically notified)\n+\n+With subscribeToMore, you can easily do the latter. We will manipulate the store to add the newly created chat.\n+\n+We will do to do the same for the newMessage subscription, but this time we will have to update two different queries in the store: getChats and getChat.\n+\n+{{{ diffStep \"11.1\" module=\"client\" files=\"src/app/services/chats.service.ts\" }}}\n+\n+We can finally configure the WebSocket in the app module. Please notice that the WebSocket has its own authentication instead of using the HttpInterceptor, in fact we use `connectionParams` to send the authorization.\n+All queries will go through HTTP except the Subscriptions, which will use the WebSocket.\n+\n+{{{ diffStep \"11.1\" module=\"client\" files=\"src/app/app.module.ts\" }}}\n+\n+Finally, let's fix the tests:\n+\n+{{{ diffStep \"11.1\" module=\"client\" files=\"src/app/chat-viewer/containers/chat/chat.component.spec.ts, src/app/chats-lister/containers/chats/chats.component.spec.ts, src/app/services/chats.service.spec.ts\" }}}\ndiff --git a/.tortilla/manuals/templates/step16.tmpl b/.tortilla/manuals/templates/step16.tmpl\nnew file mode 100644\nindex 0000000..f7c3935\n--- /dev/null\n+++ b/.tortilla/manuals/templates/step16.tmpl\n@@ -0,0 +1,49 @@\n+## Server\n+\n+First of all you will have to install PostgreSQL on your operating system. Since there so many options (different Linux distributions, MacOS X, Windows...) I will assume that you already know how to install a software in your OS and take that part for granted.\n+\n+Then you will have to install a couple of packages:\n+\n+    npm install pg reflect-metadata typeorm\n+    npm install --save-dev @types/pg\n+\n+We aren't going to use plain SQL, instead we will use an Object-relational mapping framework (ORM) called `TypeORM`.\n+`TypeORM` takes advantage of Typescript classes and type declarations in order to infer the db structure.\n+\n+We will need to enable support for experimental decorators, emit type metadata for decorators and disable strict property initialization:\n+\n+{{{ diffStep \"6.1\" module=\"server\" files=\"tsconfig.json\" }}}\n+\n+The next step is to create Entities. An Entity is a class that maps to a database table. You can create a entity by defining a new class and mark it with @Entity():\n+\n+{{{ diffStep \"6.1\" module=\"server\" files=\"entity\" }}}\n+\n+Basic entities consist of columns and relations. Each entity MUST have a primary column.\n+\n+Each entity must be registered in your connection options:\n+\n+{{{ diffStep \"6.1\" module=\"server\" files=\"ormconfig.json\" }}}\n+\n+Since database table consist of columns your entities must consist of columns too. Each entity class property you marked with @Column will be mapped to a database table column.\n+Each entity must have at least one primary column. There are several types of primary columns, but in our case `@PrimaryGeneratedColumn()` creates a primary column which value will be automatically generated with an auto-increment value.\n+`@CreateDateColumn` is a special column that is automatically set to the entity's insertion date. You don't need set this column - it will be automatically set.\n+For the Recipient Entity we use a composite primary key that consists of two foreign keys.\n+\n+The next thing to do is to create a connection with the database before firing up the web server:\n+\n+{{{ diffStep \"6.1\" module=\"server\" files=\"index.ts\" }}}\n+\n+We will also remove our fake db and replace it with some real data:\n+\n+{{{ diffStep \"6.1\" module=\"server\" files=\"db.ts\" }}}\n+\n+It's time to deal with resolvers:\n+\n+{{{ diffStep \"6.1\" module=\"server\" files=\"schema/resolvers.ts\" }}}\n+\n+`QueryBuilder` is one of the most powerful features of `TypeORM` - it allows you to build SQL queries using elegant and convenient syntax, execute them and get automatically transformed entities.\n+\n+You can find more informations on `TypeORM` on http://typeorm.io\n+\n+The best part is that you won't have to do anything on the client, everything will be completely transparent to it, even if migrated from NoSQL-like db structure to a relational one!\n+Of course, you could remove the custom normalization for the messages because now they have their own table and they are no longer embedded (so they have unique IDs), but we could leave it as well in order to be free to use any kind of backend.\n\\ No newline at end of file\ndiff --git a/.tortilla/manuals/templates/step2.tmpl b/.tortilla/manuals/templates/step2.tmpl\nnew file mode 100644\nindex 0000000..cc6e4b0\n--- /dev/null\n+++ b/.tortilla/manuals/templates/step2.tmpl\n@@ -0,0 +1,185 @@\n+## Visual sketch\n+Well, not a lot to say about that: just draw your app on paper.\n+Doesn’t matter if you don’t know how to draw, it’s just squares and circles.\n+\n+![alt text](../../assets/chats.png \"Chats\")\n+![alt text](../../assets/chat.png \"Chat\")\n+![alt text](../../assets/new_chat.png \"New chat\")\n+![alt text](../../assets/new_group.png \"New group\")\n+![alt text](../../assets/new_group_details.png \"New group details\")\n+\n+## Breaking down to components\n+### -> Google Search\n+This part is a bit more tricky, but after a few examples you’ll get the hang of it.\n+\n+Draw boxes around every component and subcomponent in different colors and name each one.\n+But how do you know what should be its own component?\n+Just follow the **single responsibility principle**, that is, a component should ideally only do one thing. If it ends up growing, it should be decomposed into smaller subcomponents.\n+\n+![alt text](../../assets/chats_components.png \"Chats components\")\n+![alt text](../../assets/chat_components.png \"Chat components\")\n+![alt text](../../assets/new_chat_components.png \"New chat components\")\n+![alt text](../../assets/new_group_components.png \"New group components\")\n+![alt text](../../assets/new_group_details_components.png \"New group details components\")\n+\n+  * Chats Component\n+  * Header Component\n+  * ChatsList Component\n+  * ChatItem Component\n+  * Chat Component\n+  * MessagesList Component\n+  * MessageItem Component\n+  * NewMessage Component\n+  * NewChat Component\n+  * UsersList Component\n+  * UserItem Component\n+  * NewGroup Component\n+  * NewGroupDetails Component\n+\n+Now let’s organize them in hierarchy:\n+* Chats\n+  * Header\n+  * ChatsList\n+    * ChatItem\n+* Chat\n+  * Header\n+  * MessagesList\n+    * MessageItem\n+  * NewMessage\n+* NewChat\n+  * Header\n+  * UsersList\n+    * UserItem\n+* NewGroup\n+  * Header\n+  * UsersList\n+    * UserItem\n+  * NewGroupDetails\n+\n+## Layout\n+### -> Google Search\n+Now let’s describe how the components are placed within each other.\n+There are infinite ways to explain how components sits inside of each other.\n+Any approach has its benefits and limitations.\n+We are going to use one pattern that is pretty common, simple and also covers many types of UI structures. \n+Using that pattern we will keep us covered for a long while (until you would want to create a computer game or a graph. then you’ll need to expand your horizons).\n+This pattern is called flexbox.\n+\n+In Flexbox we can separate the alignment in two ways:\n+Container (parent) component behaviour\n+Child component behaviour inside the container\n+\n+When describing the parent, we have 3 main properties:\n+* Flex-Flow: it's a shorthand for flex-direction and flex-wrap and lets you control the direction in which the items are displayed and whether or not they can wrap onto the next line. There are four possible settings, each of them in the wrap or \n+nowrap variant:\n+  * row `[wrap, nowrap]`\n+  * row-reverse `[wrap, nowrap]`\n+  * column `[wrap, nowrap]` - this is the normal way a group of divs would be displayed, so you might not use this often\n+  * column-reverse `[wrap, nowrap]`\n+* Justify-content: determines where a browser should place the flex items within the row. It works only if the flex items have set widths and if the total width of the items is less than the flex container. There are five possible settings:\n+  * Flex-start - squash them to the left\n+  * Center - Squash them to the center\n+  * Flex-end - squash them to the right\n+  * Space-around - squash them away from each other and the ends. Place as much space as possible between all elements\n+  * Space-between - Squash the sides to the ends and place as much space between the rest of the elements as possible\n+* alignItems: Same as justifyContent but on the secondary axis\n+  * Flex-start - squash them to the left\n+  * Center - Squash them to the center\n+  * Flex-end - squash them to the right\n+  * Space-around - squash them away from each other and the ends. Place as much space as possible between all elements\n+  * Space-between - Squash the sides to the ends and place as much space between the rest of the elements as possible\n+\n+The easiest way to explain that is by showing live examples:\n+[awaiting for McFarland's permission to share his pictures]\n+\n+## Data dependencies\n+### -> Google Search\n+Our app needs to display data. Otherwise it will be just a nice moving set of pictures…\n+So let’s see what data each component needs and create a descriptions of all the data in our app.\n+\n+Let’s start with the chats list component:\n+\n+* Chats: Chats, Users, Messages\n+  * Header\n+  * ChatsList: Chats, Users, Messages\n+    * ChatItem: Chats`[chatId]`, Users`[UserId]`, Message`[messageId]`\n+\n+We need to have some basic information about the chats we are part of, like the chat id, the user id and the latest message content.\n+That means we will have to query for all the chats who we are part of, then look at the user IDs and query for those users to retrieve the name. Finally we need to query for the last message of each chat.\n+\n+Now let’s talk about the chat component (after clicking the single chat app).\n+We need a list of all the messages inside the chat, along with some info about the user or chat on the top corner:\n+\n+* Chat: Chat, User, Messages\n+  * Header: User.name || Chat.name (Because we can have multiple participant could differ from the other person’s name)\n+  * MessagesList: Messages\n+    * MessageItem: Messages`[ID]`\n+  * NewMessage\n+\n+The NewChat and NewGroup components will need just some basic info about the user:\n+\n+* NewChat: Users\n+  * Header\n+  * UsersList: Users\n+    * UserItem: Users`[ID]`\n+\n+* NewGroup: Users\n+  * Header\n+  * UsersList: Users\n+    * UserItem: Users`[ID]`\n+  * NewGroupDetails\n+\n+## Actions\n+### -> Google Search\n+But components can also do thing beyond just displaying data. \n+Let’s write all the actions each component can do.\n+  * Chats list\n+    * tap -> go to chat page\n+    * press -> enable selection of multiple chats, confirming the selection will delete them\n+  * Single Chat\n+    * tap -> send the message\n+    * press -> enable selection of multiple messages, confirming the selection will delete them\n+  * New Chat\n+    * tap -> create new chat or go to the NewGroup component\n+  * New Group\n+    * tap -> go to NewGroupDetails, then create the group\n+\n+## Communications\n+### -> Google Search\n+Let’s define when do we need to get the data from our data source.\n+Sounds easy but there are a few tricky pitfalls. (query and subscriptions).\n+We will start by simply requesting the data when we first start the component, later on we will tackle subscriptions.\n+\n+## UI flow\n+### -> Google Search\n+Let’s draw a diagram of how the user can navigate our app.\n+  * Open the app ->\n+    * Chats list ->\n+      * Click on chat ->\n+        * Specific chat page\n+          * Click back ->\n+            * Chat page\n+    * Click on '+' ->\n+      * NewChat page ->\n+        * Click on user ->\n+          * Chat page\n+        * Click back ->\n+          * Chats list\n+        * Click on 'New Group' ->\n+          * New Group page\n+            * Multiple selection and subsequent confirmation ->\n+              * NewGroupDetails page\n+                * Insert name and click on confirm ->\n+                  * Chat page\n+              * Click back ->\n+                * New Group page\n+          * Click back ->\n+            * New Group page\n+\n+Now let’s look at the whole diagram we created.\n+That basically describes all of our app.\n+If computers were smart enough to understand english and drawings, we would have an app by now.\n+But programming languages are very similar to regular languages so we now just need to translate this into any programming language, just choose a tool and start filling in the gaps.\n+\n+Next chapter will be about Scaffolding which will tell us the structure to put our code into.\n+Just like our sketch has defined parts, we would do the same just with folders and files.\ndiff --git a/.tortilla/manuals/templates/step3.tmpl b/.tortilla/manuals/templates/step3.tmpl\nnew file mode 100644\nindex 0000000..eb29a4a\n--- /dev/null\n+++ b/.tortilla/manuals/templates/step3.tmpl\n@@ -0,0 +1,27 @@\n+Now we can start writing code!\n+\n+But like we said before, software is build in layers and instead of starting from nothing, we can use existing software with prepared structure.\n+\n+First let’s install some software that we need on our computer:\n+\n+The following instructions are for computers with the Arch Linux operating system, so your mileage may vary.\n+\n+First let's start by installing npm and node.js, as simple as `# pacman -S nodejs npm`.\n+\n+Then we will need a way to install our npm global packages on a per-user basis, instead of relying on sudo: https://github.com/sindresorhus/guides/blob/master/npm-global-without-sudo.md\n+\n+Now it's the right moment to install a couple of global packages we will need later on: `npm install -g @angular/cli node-sass tortilla typescript`\n+\n+## IDE\n+\n+Now it's time to choose our IDE. I suggest you Webstorm, but it's paid software with a kind-of perpetual EAP (Early Access Preview) available for free: https://blog.jetbrains.com/webstorm/category/eap/\n+If you decide to start using Webstorm keep in mind that sooner or later you'll have to start paying an annual subscription because EAPs are not always available.\n+To have a look at some of the Webstorm features you can have a look at those videos: https://www.jetbrains.com/webstorm/documentation/\n+\n+Another, completely free (as in freedom) alternative is VSCode: https://code.visualstudio.com/\n+For most things it's as good as Webstorm, for others (like type inference) it's even better. Unfortunately it lacks most of the Webstorm features.\n+\n+At the end the choice is yours.\n+\n+## Mobile\n+We will talk once again about scaffolding once we will introduce `Android` and `Cordova`.\ndiff --git a/.tortilla/manuals/templates/step4.tmpl b/.tortilla/manuals/templates/step4.tmpl\nnew file mode 100644\nindex 0000000..ba63323\n--- /dev/null\n+++ b/.tortilla/manuals/templates/step4.tmpl\n@@ -0,0 +1,11 @@\n+Before we start writing code, it is important that we learn how to check our code.\n+\n+The computer runs through everything we write in split second but we can still pause the computer and go through step by step, check what actually happens when the computer runs our code instructions.\n+\n+This phase is sometimes being skipped by developers but trust me, you never want to skip this phase and you should always be super comfortable in debugging your code on whatever environment it’s running on.\n+\n+The easiest way to debug your Javascript application is right into your editor:\n+  * https://www.jetbrains.com/help/webstorm/debugging-javascript-in-chrome.html\n+  * https://blog.jetbrains.com/webstorm/2017/01/debugging-angular-apps/\n+\n+Later on we will learn how to debug mobile applications.\ndiff --git a/.tortilla/manuals/templates/step5.tmpl b/.tortilla/manuals/templates/step5.tmpl\nnew file mode 100644\nindex 0000000..0c7558f\n--- /dev/null\n+++ b/.tortilla/manuals/templates/step5.tmpl\n@@ -0,0 +1,132 @@\n+## Server\n+\n+After the planning phase it's finally time to start writing some real code!\n+We'll start with the server, so let's install a couple of packages first:\n+\n+    $ npm install apollo-server-express body-parser cors express graphql graphql-tools\n+    $ npm install --save-dev @types/body-parser @types/cors @types/express @types/graphql\n+\n+Express is a fast, unopinionated, minimalist web framework for node.\n+Cross-Origin Resource Sharing (CORS) is a mechanism that uses additional HTTP headers to let a user agent gain permission to access selected resources from a server on a different origin (domain) than the site currently in use. A user agent makes a cross-origin HTTP request when it requests a resource from a different domain, protocol, or port than the one from which the current document originated.\n+We will need CORS because Webpack's development server used in the client will make use of a different port than the Express server, thus configuring a different origin.\n+GraphQL is a query language for APIs and a runtime for fulfilling those queries with your existing data. GraphQL provides a complete and understandable description of the data in your API, gives clients the power to ask for exactly what they need and nothing more, makes it easier to evolve APIs over time, and enables powerful developer tools.\n+Apollo Server is a community-maintained open-source GraphQL server. It works with pretty much all Node.js HTTP server frameworks. Apollo Server works with any GraphQL schema built with GraphQL.js or with a convenience library such as graphql-tools.\n+\n+The GraphQL query language is basically about selecting fields on objects. Because the shape of a GraphQL query closely matches the result, you can predict what the query will return without knowing that much about the server. But it's useful to have an exact description of the data we can ask for - what fields can we select? What kinds of objects might they return? What fields are available on those sub-objects? That's where the schema comes in.\n+Every GraphQL service defines a set of types which completely describe the set of possible data you can query on that service. Then, when queries come in, they are validated and executed against that schema.\n+\n+For the moment let's create some empty schemas and resolvers:\n+\n+{{{ diffStep \"1.1\" module=\"server\" files=\"schema/*\" }}}\n+\n+Time to create our index:\n+\n+{{{ diffStep \"1.1\" module=\"server\" files=\"^index.ts\" }}}\n+\n+Now we want to feed our graphql server with some data. Soon we will need `moment`, so let's install it:\n+\n+    $ npm install moment\n+\n+Now we can create a fake db:\n+\n+{{{ diffStep \"1.2\" module=\"server\" files=\"db.ts\" }}}\n+\n+Its' finally time to create our schema and our resolvers:\n+\n+{{{ diffStep \"1.3\" module=\"server\" }}}\n+\n+Out basic server is already done and working. We still have no way to do any kind of mutation, but we already set up several queries to return a list of users or chats.\n+In particular we can choose if we want to return all the chats (and how many messages we want to return for each chat) or if we want to return a single chat. We can also choose which and how many properties we want to return for each query.\n+We can start the server by simply running:\n+\n+    $ npm start\n+\n+## Client\n+\n+Now we can concentrate on the client and bootstrap it using angular-cli.\n+First you will need to install angular-cli globally with:\n+\n+    $ npm install -g @angular/cli\n+\n+Then we can create a new project from scratch:\n+\n+    $ ng new client --style scss\n+\n+Time to install a couple of packages:\n+\n+    $ npm install apollo-angular apollo-angular-link-http apollo-cache-inmemory apollo-client apollo-link graphql graphql-tag\n+    $ npm install --save-dev @types/graphql\n+\n+We will also need to add `esnext.asynciterable` to the libs:\n+\n+{{{ diffStep \"1.1\" module=\"client\" files=\"tsconfig.json\" }}}\n+\n+We also added the `downlevelIteration` option which is required to make sure that everything will be transpiled to ES5.\n+\n+To get started using Apollo with Angular, we need to import two NgModules, `ApolloModule` and `HttpLinkModule`.\n+\n+- `ApolloModule` is the center of using GraphQL in your app! It includes all needed services that allows to use ApolloClient’s features.\n+- `HttpLinkModule` makes it easy to fetch data in Angular.\n+\n+`HttpLinkModule` is optional, you can replace it with any other Link.\n+Its biggest advantage of all is that it uses `HttpClient` internally so it’s possible to use it in `NativeScript` or in combination with any other `HttpClient` provider. By using `HttpLinkModule` you get Server-Side Rendering for free, without any additional work.\n+\n+To get started, inject `Apollo` and `HttpLink` services and then create a client:\n+\n+{{{ diffStep \"1.1\" module=\"client\" files=\"app.module.ts\" }}}\n+\n+We're using the `InMemory` cache, but there are several options like `Redux`, `Hermes`, `ngrx`...\n+\n+The `gql` template tag is what you use to define GraphQL queries in your Apollo apps. It parses your GraphQL query into the `GraphQL.js AST format` which may then be consumed by Apollo methods. Whenever Apollo is asking for a GraphQL query you will always want to wrap it in a `gql` template tag.\n+\n+You can embed a GraphQL document containing only fragments inside of another GraphQL document using template string interpolation. This allows you to use fragments defined in one part of your codebase inside of a query defined in a completely different file.\n+\n+{{{ diffStep \"1.2\" module=\"client\" files=\"src/graphql\" }}}\n+\n+Let's create a simple service to query the chats from our just created server:\n+\n+{{{ diffStep \"1.2\" module=\"client\" files=\"src/app/services\" }}}\n+\n+We just learned how to use Apollo to attach GraphQL query results to the Angular UI. The `watchQuery` method returns a `QueryRef` object which has the `valueChanges` property that is an Observable.\n+That information is stored in Apollo Client’s global cache, so if some other query fetches new information about the chats, this component will update to remain consistent.\n+It’s also possible to fetch data only once. The query method of Apollo service returns an Observable that also resolves with the same result as above.\n+\n+#### But what is a `QueryRef`?\n+\n+As you know, `Apollo.query` method returns an Observable that emits a result, just once, but `Apollo.watchQuery` also does the same except it passes multiple results.\n+So why `Apollo.watchQuery` can not expose an Observable?\n+\n+In `ApolloClient.watchQuery` returns an Observable, but not a standard one, it contains many useful methods (like `refetch()`) to manipulate the watched query.\n+A normal Observable, has only one method, `subscribe()`.\n+\n+The API of `QueryRef` is very simple. It has the same methods as the Apollo’s Observable we talked about. To subscribe to query results you have to access `valueChanges` property which exposes a clean RxJS Observable.\n+\n+We will use Materials for the UI, so let's install it:\n+\n+    $ npm install @angular/cdk @angular/material hammerjs ng2-truncate\n+\n+Let's configure Material:\n+\n+{{{ diffStep \"1.3\" module=\"client\" files=\"src/index.ts, src/main.ts, src/styles.scss\" }}}\n+\n+We're now creating a `shared` module where we will define our header component where we're going to project a different content from each component:\n+\n+{{{ diffStep \"1.3\" module=\"client\" files=\"src/app/shared/*\" }}}\n+\n+Now we want to create the `chats-lister` module, with a container component called `ChatsComponent` and a couple of presentational components.\n+\n+{{{ diffStep \"1.3\" module=\"client\" files=\"src/app/chats-lister/*\" }}}\n+\n+Finally let's wire everything up to the main module:\n+\n+{{{ diffStep \"1.3\" module=\"client\" files=\"src/app/app.component.ts, src/app/app.module.ts\" }}}\n+\n+If you will try to run the frontend you will notice that several messages seems like duplicated, why does it happen?\n+\n+`apollo-cache-inmemory` is the default cache implementation for Apollo Client 2.0. `InMemoryCache` is a normalized data store that supports all of Apollo Client 1.0's features without the dependency on Redux.\n+The `InMemoryCache` normalizes your data before saving it to the store by splitting the result into individual objects, creating a unique identifier for each object, and storing those objects in a flattened data structure. By default, `InMemoryCache` will attempt to use the commonly found primary keys of `id` and `_id` for the unique identifier if they exist along with `__typename` on an object.\n+Since we use NoSQL-like structure in our backend, messages are stored as an array inside each chat so their incremental identifiers are not unique across different chats. We need to normalize them in a way that takes into account both the message id and the chat id:\n+\n+{{{ diffStep \"1.4\" module=\"client\" }}}\n+\n+That way our application will work even if the backend is a NoSQL. What's even more interesting is that our application will keep working as well even when we will switch our backend to PostgreSQL.\ndiff --git a/.tortilla/manuals/templates/step6.tmpl b/.tortilla/manuals/templates/step6.tmpl\nnew file mode 100644\nindex 0000000..9e9d289\n--- /dev/null\n+++ b/.tortilla/manuals/templates/step6.tmpl\n@@ -0,0 +1,44 @@\n+## Server\n+\n+The GraphQL codegen library can generate any code for any language — including type definitions, data models, query builder, resolvers, ORM code, complete full stack platforms.\n+You can create your own custom GraphQL codegen templates in 10 minutes, that fit exactly your needs. We will use it to generate `Typescript` typings.\n+\n+First, let's install `graphql-code-generator`  in our server and add it to the run scripts:\n+\n+    $ npm install graphql-code-generator\n+\n+{{{ diffStep \"2.1\" module=\"server\" }}}\n+\n+Now let's run the generator (the server must be running in the background):\n+\n+    $ npm run generator\n+\n+Please note that the server must be started before running the generator.\n+\n+Those are the types created with `npm run generator`:\n+\n+{{{ diffStep \"2.2\" module=\"server\" }}}\n+\n+Now let's use them:\n+\n+{{{ diffStep \"2.3\" module=\"server\" }}}\n+\n+Don't worry, they will be much more useful when we will write our first mutation.\n+\n+## Client\n+\n+Let's do the same on the client:\n+\n+    $ npm install graphql-code-generator\n+\n+Please note that the server must be started before running the generator.\n+\n+{{{ diffStep \"2.1\" module=\"client\" }}}\n+\n+Those are our generated types:\n+\n+{{{ diffStep \"2.2\" module=\"client\" }}}\n+\n+Let's use them:\n+\n+{{{ diffStep \"2.3\" module=\"client\" }}}\ndiff --git a/.tortilla/manuals/templates/step7.tmpl b/.tortilla/manuals/templates/step7.tmpl\nnew file mode 100644\nindex 0000000..4a58645\n--- /dev/null\n+++ b/.tortilla/manuals/templates/step7.tmpl\n@@ -0,0 +1,21 @@\n+## Client\n+\n+Testing is a very important part of each application and for the sake of showing different testing techniques we are going to show how to test a presentational component, a container component and a service.\n+\n+First let's start by importing `hammerjs` for the Material Gestures inside the test script.\n+\n+{{{ diffStep \"3.1\" module=\"client\" files=\"src/test.ts\" }}}\n+\n+Let's start with the simplest one: the presentational component.\n+We are not going to inject any service and we don't need to access our backend, so things are quite simple: we just need to pass our Chat object as an Input, detect the changes and use the query selector to match the UI content to the one we passed as input:\n+\n+{{{ diffStep \"3.1\" module=\"client\" files=\"src/app/chats-lister/components/chat-item/chat-item.component.spec.ts\" }}}\n+\n+Testing a service is a bit more complicated because we will need to mock our backend in order to get fake results instead of having to fire up the backend each time.\n+We are going to simply mock the HTTP calls, which is a well known practice in the REST API world. Since we are using HTTP to retrieve the data, it will work as well with Apollo client:\n+\n+{{{ diffStep \"3.1\" module=\"client\" files=\"src/app/services/chats.service.spec.ts\" }}}\n+\n+In the last example we are going to test a container component, which makes use of several services and multiple other components:\n+\n+{{{ diffStep \"3.1\" module=\"client\" files=\"src/app/chats-lister/containers/chats/chats.component.spec.ts\" }}}\ndiff --git a/.tortilla/manuals/templates/step8.tmpl b/.tortilla/manuals/templates/step8.tmpl\nnew file mode 100644\nindex 0000000..7ddbd22\n--- /dev/null\n+++ b/.tortilla/manuals/templates/step8.tmpl\n@@ -0,0 +1,16 @@\n+We created a module which lists all of our chats, but we still need to show a particular chat.\n+Let's create the `chat-viewer` module! We're going to create a container component called `ChatComponent` and a couple of presentational components.\n+\n+{{{ diffStep \"4.1\" module=\"client\" }}}\n+\n+It's time to generate our types:\n+\n+    $ npm run generator\n+\n+And use them:\n+\n+{{{ diffStep \"4.2\" module=\"client\" files=\"^(?!src/types.d.ts$).*\" }}}\n+\n+We will also create some more tests for the newly created Chat container component:\n+\n+{{{ diffStep \"4.3\" module=\"client\" }}}\ndiff --git a/.tortilla/manuals/templates/step9.tmpl b/.tortilla/manuals/templates/step9.tmpl\nnew file mode 100644\nindex 0000000..5b24b0c\n--- /dev/null\n+++ b/.tortilla/manuals/templates/step9.tmpl\n@@ -0,0 +1,49 @@\n+In addition to fetching data using queries, Apollo also helps you handle GraphQL mutations. In GraphQL, mutations are identical to queries in syntax, the only difference being that you use the keyword mutation instead of query to indicate that the root fields on this query are going to be performing writes to the backend.\n+GraphQL mutations represent two things in one query string:\n+\n+1. The mutation field name with arguments, which represents the actual operation to be done on the server.\n+2. The fields you want back from the result of the mutation to update the client.\n+\n+When we use mutations in Apollo, the result is typically integrated into the cache automatically based on the id of the result, which in turn updates the UI automatically, so we often don't need to explicitly handle the results. In order for the client to correctly do this, we need to ensure we select the necessary fields in the result. One good strategy can be to simply ask for any fields that might have been affected by the mutation. Alternatively, you can use fragments to share the fields between a query and a mutation that updates that query.\n+\n+## Server\n+\n+Finally we're going to create our mutations in the server:\n+\n+{{{ diffStep \"3.1\" module=\"server\" }}}\n+\n+Let me briefly explain what's going on here.\n+For each chat/group we store the `allTimeMemberIds`, `listingMemberIds` and `actualGroupMemberIds` properties in our NoSQL-like fake db.\n+What's the difference between `allTimeMemberIds` and `listingMemberIds`? When a chat gets created only the user who created it will be able too see it, the chat will be displayed to the other user only once the first messaged gets sent. `allTimeMemberIds` is an array which always contain both the users, while `listingMemberIds` contains only the users which get the chat listed (initially the creator, later both users). `actualGroupMemberIds` is only used for groups.\n+Groups, instead, get listed by all members immediately since the creation. So initially both `allTimeMemberIds`, `listingMemberIds` and `actualGroupMemberIds` are similar. Later users can leave the group or get deleted (so they will be removed from `actualGroupMemberIds`) but they will still be able to list the group in read-only mode, thus remaining in the `listingMemberIds`. Once they remove the group they will also be remove from the `listingMemberIds` array.\n+That's why we have to check for several different conditions before adding/deleting messages: it could be necessary to add the other peer to the `listingMemberIds` (for example if we are writing the first message of a chat) or it could be necessary to physically remove the messages instead of simply removing the current user from the `holderIds`. `holderIds` is a field in each message which states which user will currently display that specific message. In fact each user can delete a specific message without affecting what the others will see. Once there will be no more users in the `holderIds` array it will be safe to delete the message.\n+Each message has also a `recipients` array containing the receiving date and the viewing date of that particular message for all the other users. That's necessary to implement the single, double and blue ticks used by the real Whatsapp.\n+\n+It may seem a bit overwhelming at first, but you should keep in mind that the real Whatsapp has tons of features and also takes advantage of a local database to store messages, so it's easier for them to implement features like per-user messages: their source of truth is not the server because once downloaded the messages are kept in the client itself, so deleting messages doesn't affect anyone else. On the contrary our source of truth is the server, so our approach is more similar to Telegram instead. This is a better approach in my opinion because it allows us to show the messages for the same user on multiple clients, instead of having to rely on questionable approaches like Whatsapp Web.\n+Also we already implemented our mutations to take care of future use cases (like reading notifications) which we still didn't implement.\n+\n+I said we were going to take greater advantage of `graphql-code-generator` once we started writing our first mutation and I'm going to show you why. Let's run the generator first:\n+\n+    $ npm run generator\n+\n+Then let's use the generated types:\n+\n+{{{ diffStep \"3.3\" module=\"server\" }}}\n+\n+## Client\n+\n+For the client I'll only show you how to make use of the addMessage mutation in this chapters. The other mutations will require much more boilerplate so I left them for their own chapter.\n+\n+Let's start by wiring the addMessage mutation. We're going to write the GraphQL query and then use the generator to generate the types:\n+\n+{{{ diffStep \"5.1\" module=\"client\" files=\"^(?!src/types.d.ts$).*\" }}}\n+\n+Run the generator:\n+\n+    $ npm run generator\n+\n+Now let's use the just-created query:\n+\n+{{{ diffStep \"5.2\" module=\"client\" }}}\n+\n+It's that simple! You would be tempted to say that it doesn't work, but you should try to refresh the page first ;)\n\\ No newline at end of file\ndiff --git a/client/.angular-cli.json b/client/.angular-cli.json\nnew file mode 100644\nindex 0000000..542e27b\n--- /dev/null\n+++ b/client/.angular-cli.json\n@@ -0,0 +1,60 @@\n+{\n+  \"$schema\": \"./node_modules/@angular/cli/lib/config/schema.json\",\n+  \"project\": {\n+    \"name\": \"whatsapp-client-angularcli-material\"\n+  },\n+  \"apps\": [\n+    {\n+      \"root\": \"src\",\n+      \"outDir\": \"dist\",\n+      \"assets\": [\n+        \"assets\",\n+        \"favicon.ico\"\n+      ],\n+      \"index\": \"index.html\",\n+      \"main\": \"main.ts\",\n+      \"polyfills\": \"polyfills.ts\",\n+      \"test\": \"test.ts\",\n+      \"tsconfig\": \"tsconfig.app.json\",\n+      \"testTsconfig\": \"tsconfig.spec.json\",\n+      \"prefix\": \"app\",\n+      \"styles\": [\n+        \"styles.scss\"\n+      ],\n+      \"scripts\": [],\n+      \"environmentSource\": \"environments/environment.ts\",\n+      \"environments\": {\n+        \"dev\": \"environments/environment.ts\",\n+        \"prod\": \"environments/environment.prod.ts\"\n+      }\n+    }\n+  ],\n+  \"e2e\": {\n+    \"protractor\": {\n+      \"config\": \"./protractor.conf.js\"\n+    }\n+  },\n+  \"lint\": [\n+    {\n+      \"project\": \"src/tsconfig.app.json\",\n+      \"exclude\": \"**/node_modules/**\"\n+    },\n+    {\n+      \"project\": \"src/tsconfig.spec.json\",\n+      \"exclude\": \"**/node_modules/**\"\n+    },\n+    {\n+      \"project\": \"e2e/tsconfig.e2e.json\",\n+      \"exclude\": \"**/node_modules/**\"\n+    }\n+  ],\n+  \"test\": {\n+    \"karma\": {\n+      \"config\": \"./karma.conf.js\"\n+    }\n+  },\n+  \"defaults\": {\n+    \"styleExt\": \"scss\",\n+    \"component\": {}\n+  }\n+}\ndiff --git a/client/.editorconfig b/client/.editorconfig\nnew file mode 100644\nindex 0000000..6e87a00\n--- /dev/null\n+++ b/client/.editorconfig\n@@ -0,0 +1,13 @@\n+# Editor configuration, see http://editorconfig.org\n+root = true\n+\n+[*]\n+charset = utf-8\n+indent_style = space\n+indent_size = 2\n+insert_final_newline = true\n+trim_trailing_whitespace = true\n+\n+[*.md]\n+max_line_length = off\n+trim_trailing_whitespace = false\ndiff --git a/client/.gitignore b/client/.gitignore\nnew file mode 100644\nindex 0000000..22657a5\n--- /dev/null\n+++ b/client/.gitignore\n@@ -0,0 +1,46 @@\n+# See http://help.github.com/ignore-files/ for more about ignoring files.\n+\n+# compiled output\n+/dist\n+/dist-server\n+/tmp\n+/out-tsc\n+\n+# dependencies\n+/node_modules\n+\n+# IDEs and editors\n+/.idea\n+.project\n+.classpath\n+.c9/\n+*.launch\n+.settings/\n+*.sublime-workspace\n+\n+# IDE - VSCode\n+.vscode/*\n+!.vscode/settings.json\n+!.vscode/tasks.json\n+!.vscode/launch.json\n+!.vscode/extensions.json\n+\n+# misc\n+/.sass-cache\n+/connect.lock\n+/coverage\n+/libpeerconnection.log\n+npm-debug.log\n+testem.log\n+/typings\n+\n+# e2e\n+/e2e/*.js\n+/e2e/*.map\n+\n+# System Files\n+.DS_Store\n+Thumbs.db\n+\n+#Tortilla\n+package-lock.json\ndiff --git a/client/.travis.yml b/client/.travis.yml\nnew file mode 100644\nindex 0000000..b90ab94\n--- /dev/null\n+++ b/client/.travis.yml\n@@ -0,0 +1,20 @@\n+dist: trusty\n+sudo: required\n+\n+branches:\n+  except:\n+  - master-step1\n+  - master-step2\n+\n+language: node_js\n+node_js:\n+  - \"8\"\n+\n+cache:\n+  directories:\n+     - ./node_modules\n+\n+script:\n+  # Use Chromium instead of Chrome.\n+  - export CHROME_BIN=chromium-browser\n+  - npm run test\ndiff --git a/client/e2e/app.e2e-spec.ts b/client/e2e/app.e2e-spec.ts\nnew file mode 100644\nindex 0000000..aaf19d5\n--- /dev/null\n+++ b/client/e2e/app.e2e-spec.ts\n@@ -0,0 +1,14 @@\n+import { AppPage } from './app.po';\n+\n+describe('whatsapp-client-angularcli-material App', () => {\n+  let page: AppPage;\n+\n+  beforeEach(() => {\n+    page = new AppPage();\n+  });\n+\n+  it('should display welcome message', () => {\n+    page.navigateTo();\n+    expect(page.getParagraphText()).toEqual('Welcome to app!');\n+  });\n+});\ndiff --git a/client/e2e/app.po.ts b/client/e2e/app.po.ts\nnew file mode 100644\nindex 0000000..82ea75b\n--- /dev/null\n+++ b/client/e2e/app.po.ts\n@@ -0,0 +1,11 @@\n+import { browser, by, element } from 'protractor';\n+\n+export class AppPage {\n+  navigateTo() {\n+    return browser.get('/');\n+  }\n+\n+  getParagraphText() {\n+    return element(by.css('app-root h1')).getText();\n+  }\n+}\ndiff --git a/client/e2e/tsconfig.e2e.json b/client/e2e/tsconfig.e2e.json\nnew file mode 100644\nindex 0000000..1d9e5ed\n--- /dev/null\n+++ b/client/e2e/tsconfig.e2e.json\n@@ -0,0 +1,14 @@\n+{\n+  \"extends\": \"../tsconfig.json\",\n+  \"compilerOptions\": {\n+    \"outDir\": \"../out-tsc/e2e\",\n+    \"baseUrl\": \"./\",\n+    \"module\": \"commonjs\",\n+    \"target\": \"es5\",\n+    \"types\": [\n+      \"jasmine\",\n+      \"jasminewd2\",\n+      \"node\"\n+    ]\n+  }\n+}\ndiff --git a/client/karma.conf.js b/client/karma.conf.js\nnew file mode 100644\nindex 0000000..68c2f7c\n--- /dev/null\n+++ b/client/karma.conf.js\n@@ -0,0 +1,33 @@\n+// Karma configuration file, see link for more information\n+// https://karma-runner.github.io/1.0/config/configuration-file.html\n+\n+module.exports = function (config) {\n+  config.set({\n+    basePath: '',\n+    frameworks: ['jasmine', '@angular/cli'],\n+    plugins: [\n+      require('karma-jasmine'),\n+      require('karma-chrome-launcher'),\n+      require('karma-jasmine-html-reporter'),\n+      require('karma-coverage-istanbul-reporter'),\n+      require('@angular/cli/plugins/karma')\n+    ],\n+    client:{\n+      clearContext: false // leave Jasmine Spec Runner output visible in browser\n+    },\n+    coverageIstanbulReporter: {\n+      reports: [ 'html', 'lcovonly' ],\n+      fixWebpackSourcePaths: true\n+    },\n+    angularCli: {\n+      environment: 'dev'\n+    },\n+    reporters: ['progress', 'kjhtml'],\n+    port: 9876,\n+    colors: true,\n+    logLevel: config.LOG_INFO,\n+    autoWatch: true,\n+    browsers: ['ChromeHeadless'],\n+    singleRun: true\n+  });\n+};\ndiff --git a/client/package.json b/client/package.json\nnew file mode 100644\nindex 0000000..7229a04\n--- /dev/null\n+++ b/client/package.json\n@@ -0,0 +1,69 @@\n+{\n+  \"name\": \"whatsapp-client-angularcli-material\",\n+  \"version\": \"0.0.0\",\n+  \"license\": \"MIT\",\n+  \"scripts\": {\n+    \"ng\": \"ng\",\n+    \"start\": \"ng serve\",\n+    \"build\": \"ng build --prod\",\n+    \"test\": \"ng test\",\n+    \"lint\": \"ng lint\",\n+    \"e2e\": \"ng e2e\",\n+    \"generator\": \"gql-gen --url http://localhost:3000/graphql --template ts --out ./src/types.d.ts \\\"./src/graphql/**/*.ts\\\"\"\n+  },\n+  \"private\": true,\n+  \"dependencies\": {\n+    \"@angular/animations\": \"5.2.5\",\n+    \"@angular/cdk\": \"5.2.1\",\n+    \"@angular/common\": \"5.2.5\",\n+    \"@angular/compiler\": \"5.2.5\",\n+    \"@angular/core\": \"5.2.5\",\n+    \"@angular/flex-layout\": \"2.0.0-beta.12\",\n+    \"@angular/forms\": \"5.2.5\",\n+    \"@angular/http\": \"5.2.5\",\n+    \"@angular/material\": \"5.2.1\",\n+    \"@angular/platform-browser\": \"5.2.5\",\n+    \"@angular/platform-browser-dynamic\": \"5.2.5\",\n+    \"@angular/router\": \"5.2.5\",\n+    \"ajv\": \"6.1.1\",\n+    \"apollo-angular\": \"1.0.1\",\n+    \"apollo-angular-link-http\": \"1.0.2-beta.0\",\n+    \"apollo-cache-inmemory\": \"1.1.9\",\n+    \"apollo-client\": \"2.2.5\",\n+    \"apollo-link\": \"1.1.0\",\n+    \"apollo-link-ws\": \"1.0.5\",\n+    \"apollo-utilities\": \"1.0.8\",\n+    \"core-js\": \"2.5.3\",\n+    \"graphql\": \"0.12.3\",\n+    \"graphql-tag\": \"2.7.3\",\n+    \"hammerjs\": \"2.0.8\",\n+    \"moment\": \"2.20.1\",\n+    \"ng2-truncate\": \"1.3.11\",\n+    \"ngx-selectable-list\": \"1.1.0\",\n+    \"rxjs\": \"5.5.6\",\n+    \"subscriptions-transport-ws\": \"0.9.5\",\n+    \"zone.js\": \"0.8.20\"\n+  },\n+  \"devDependencies\": {\n+    \"@angular/cli\": \"1.7.0\",\n+    \"@angular/compiler-cli\": \"5.2.5\",\n+    \"@angular/language-service\": \"5.2.5\",\n+    \"@types/graphql\": \"0.12.4\",\n+    \"@types/jasmine\": \"2.8.6\",\n+    \"@types/jasminewd2\": \"2.0.3\",\n+    \"@types/node\": \"6.0.101\",\n+    \"codelyzer\": \"4.1.0\",\n+    \"graphql-code-generator\": \"0.8.14\",\n+    \"jasmine-core\": \"2.8.0\",\n+    \"jasmine-spec-reporter\": \"4.2.1\",\n+    \"karma\": \"2.0.0\",\n+    \"karma-chrome-launcher\": \"2.2.0\",\n+    \"karma-coverage-istanbul-reporter\": \"1.4.1\",\n+    \"karma-jasmine\": \"1.1.1\",\n+    \"karma-jasmine-html-reporter\": \"0.2.2\",\n+    \"protractor\": \"5.1.2\",\n+    \"ts-node\": \"4.1.0\",\n+    \"tslint\": \"5.9.1\",\n+    \"typescript\": \"2.5.3\"\n+  }\n+}\ndiff --git a/client/package.json.orig b/client/package.json.orig\nnew file mode 100644\nindex 0000000..e025965\n--- /dev/null\n+++ b/client/package.json.orig\n@@ -0,0 +1,61 @@\n+{\n+  \"name\": \"whatsapp-client-angularcli-material\",\n+  \"version\": \"0.0.0\",\n+  \"license\": \"MIT\",\n+  \"scripts\": {\n+    \"ng\": \"ng\",\n+    \"start\": \"ng serve\",\n+    \"build\": \"ng build --prod\",\n+    \"test\": \"ng test\",\n+    \"lint\": \"ng lint\",\n+    \"e2e\": \"ng e2e\"\n+  },\n+  \"private\": true,\n+  \"dependencies\": {\n+    \"@angular/animations\": \"5.2.5\",\n+    \"@angular/common\": \"5.2.5\",\n+    \"@angular/compiler\": \"5.2.5\",\n+    \"@angular/core\": \"5.2.5\",\n+    \"@angular/forms\": \"5.2.5\",\n+    \"@angular/http\": \"5.2.5\",\n+    \"@angular/platform-browser\": \"5.2.5\",\n+    \"@angular/platform-browser-dynamic\": \"5.2.5\",\n+    \"@angular/router\": \"5.2.5\",\n+    \"ajv\": \"6.1.1\",\n+    \"apollo-angular\": \"1.0.1\",\n+    \"apollo-angular-link-http\": \"1.0.2-beta.0\",\n+    \"apollo-cache-inmemory\": \"1.1.9\",\n+    \"apollo-client\": \"2.2.5\",\n+    \"apollo-link\": \"1.1.0\",\n+    \"core-js\": \"2.5.3\",\n+    \"graphql\": \"0.12.3\",\n+    \"graphql-tag\": \"2.7.3\",\n+    \"rxjs\": \"5.5.6\",\n+    \"zone.js\": \"0.8.20\"\n+  },\n+  \"devDependencies\": {\n+    \"@angular/cli\": \"1.7.0\",\n+    \"@angular/compiler-cli\": \"5.2.5\",\n+    \"@angular/language-service\": \"5.2.5\",\n+<<<<<<< HEAD\n+    \"@types/graphql\": \"^0.12.4\",\n+=======\n+    \"@types/graphql\": \"0.12.4\",\n+>>>>>>> 48ac17b... Step 1.2: Add chats service\n+    \"@types/jasmine\": \"2.8.6\",\n+    \"@types/jasminewd2\": \"2.0.3\",\n+    \"@types/node\": \"6.0.101\",\n+    \"codelyzer\": \"4.1.0\",\n+    \"jasmine-core\": \"2.8.0\",\n+    \"jasmine-spec-reporter\": \"4.2.1\",\n+    \"karma\": \"2.0.0\",\n+    \"karma-chrome-launcher\": \"2.2.0\",\n+    \"karma-coverage-istanbul-reporter\": \"1.4.1\",\n+    \"karma-jasmine\": \"1.1.1\",\n+    \"karma-jasmine-html-reporter\": \"0.2.2\",\n+    \"protractor\": \"5.1.2\",\n+    \"ts-node\": \"4.1.0\",\n+    \"tslint\": \"5.9.1\",\n+    \"typescript\": \"2.5.3\"\n+  }\n+}\ndiff --git a/client/protractor.conf.js b/client/protractor.conf.js\nnew file mode 100644\nindex 0000000..7ee3b5e\n--- /dev/null\n+++ b/client/protractor.conf.js\n@@ -0,0 +1,28 @@\n+// Protractor configuration file, see link for more information\n+// https://github.com/angular/protractor/blob/master/lib/config.ts\n+\n+const { SpecReporter } = require('jasmine-spec-reporter');\n+\n+exports.config = {\n+  allScriptsTimeout: 11000,\n+  specs: [\n+    './e2e/**/*.e2e-spec.ts'\n+  ],\n+  capabilities: {\n+    'browserName': 'chrome'\n+  },\n+  directConnect: true,\n+  baseUrl: 'http://localhost:4200/',\n+  framework: 'jasmine',\n+  jasmineNodeOpts: {\n+    showColors: true,\n+    defaultTimeoutInterval: 30000,\n+    print: function() {}\n+  },\n+  onPrepare() {\n+    require('ts-node').register({\n+      project: 'e2e/tsconfig.e2e.json'\n+    });\n+    jasmine.getEnv().addReporter(new SpecReporter({ spec: { displayStacktrace: true } }));\n+  }\n+};\ndiff --git a/client/renovate.json b/client/renovate.json\nnew file mode 100644\nindex 0000000..7516e39\n--- /dev/null\n+++ b/client/renovate.json\n@@ -0,0 +1,19 @@\n+{\n+  \"extends\": [\n+    \"config:base\",\n+    \":automergeMajor\"\n+  ],\n+  \"baseBranches\": [\n+    \"master-step3\",\n+    \"master-step4\",\n+    \"master-step5\",\n+    \"master-step6\",\n+    \"master-step7\",\n+    \"master-step8\",\n+    \"master-step9\",\n+    \"master-step10\",\n+    \"master-step11\"\n+  ],\n+  \"prHourlyLimit\": 60,\n+  \"recreateClosed\": true\n+}\ndiff --git a/client/src/app/app.component.scss b/client/src/app/app.component.scss\nnew file mode 100644\nindex 0000000..e69de29\ndiff --git a/client/src/app/app.component.ts b/client/src/app/app.component.ts\nnew file mode 100644\nindex 0000000..61feda0\n--- /dev/null\n+++ b/client/src/app/app.component.ts\n@@ -0,0 +1,12 @@\n+import { Component } from '@angular/core';\n+\n+@Component({\n+  selector: 'app-root',\n+  template: `\n+    <router-outlet></router-outlet>\n+  `,\n+  styleUrls: ['./app.component.scss']\n+})\n+export class AppComponent {\n+  title = 'app';\n+}\ndiff --git a/client/src/app/app.module.ts b/client/src/app/app.module.ts\nnew file mode 100644\nindex 0000000..d81a15c\n--- /dev/null\n+++ b/client/src/app/app.module.ts\n@@ -0,0 +1,89 @@\n+import { BrowserModule } from '@angular/platform-browser';\n+import { NgModule } from '@angular/core';\n+\n+\n+import { AppComponent } from './app.component';\n+import {HTTP_INTERCEPTORS, HttpClientModule} from '@angular/common/http';\n+import {HttpLink, HttpLinkModule, Options} from 'apollo-angular-link-http';\n+import {Apollo, ApolloModule} from 'apollo-angular';\n+import {defaultDataIdFromObject, InMemoryCache} from 'apollo-cache-inmemory';\n+import {ChatsListerModule} from './chats-lister/chats-lister.module';\n+import {RouterModule, Routes} from '@angular/router';\n+import {ChatViewerModule} from './chat-viewer/chat-viewer.module';\n+import {ChatsCreationModule} from './chats-creation/chats-creation.module';\n+import {LoginModule} from './login/login.module';\n+import {AuthInterceptor} from './login/services/auth.interceptor';\n+import {getMainDefinition} from 'apollo-utilities';\n+import {OperationDefinitionNode} from 'graphql';\n+import {split} from 'apollo-link';\n+import {WebSocketLink} from 'apollo-link-ws';\n+import {LoginService} from './login/services/login.service';\n+\n+const routes: Routes = [];\n+\n+@NgModule({\n+  declarations: [\n+    AppComponent\n+  ],\n+  imports: [\n+    BrowserModule,\n+    // Apollo\n+    ApolloModule,\n+    HttpLinkModule,\n+    HttpClientModule,\n+    // Routing\n+    RouterModule.forRoot(routes),\n+    // Feature modules\n+    ChatsListerModule,\n+    ChatViewerModule,\n+    ChatsCreationModule,\n+    LoginModule,\n+  ],\n+  providers: [\n+    {\n+      provide: HTTP_INTERCEPTORS,\n+      useClass: AuthInterceptor,\n+      multi: true,\n+    }\n+  ],\n+  bootstrap: [AppComponent]\n+})\n+export class AppModule {\n+  constructor(\n+    apollo: Apollo,\n+    httpLink: HttpLink,\n+    loginService: LoginService,\n+  ) {\n+    const subscriptionLink = new WebSocketLink({\n+      uri:\n+        'ws://localhost:3000/subscriptions',\n+      options: {\n+        reconnect: true,\n+        connectionParams: () => ({\n+          authToken: loginService.getAuthHeader() || null\n+        })\n+      }\n+    });\n+\n+    const link = split(\n+      ({ query }) => {\n+        const { kind, operation } = <OperationDefinitionNode>getMainDefinition(query);\n+        return kind === 'OperationDefinition' && operation === 'subscription';\n+      },\n+      subscriptionLink,\n+      httpLink.create(<Options>{uri: 'http://localhost:3000/graphql'})\n+    );\n+\n+    apollo.create({\n+      link,\n+      cache: new InMemoryCache({\n+        dataIdFromObject: (object: any) => {\n+          switch (object.__typename) {\n+            case 'Message': return `${object.chat.id}:${object.id}`; // use `chatId` prefix and `messageId` as the primary key\n+            default: return defaultDataIdFromObject(object); // fall back to default handling\n+          }\n+        }\n+      }),\n+    });\n+  }\n+}\ndiff --git a/client/src/app/chat-viewer/chat-viewer.module.ts b/client/src/app/chat-viewer/chat-viewer.module.ts\nnew file mode 100644\nindex 0000000..dac388a\n--- /dev/null\n+++ b/client/src/app/chat-viewer/chat-viewer.module.ts\n@@ -0,0 +1,56 @@\n+import { BrowserModule } from '@angular/platform-browser';\n+import { NgModule } from '@angular/core';\n+\n+import {BrowserAnimationsModule} from '@angular/platform-browser/animations';\n+import {MatButtonModule, MatGridListModule, MatIconModule, MatListModule, MatMenuModule, MatToolbarModule} from '@angular/material';\n+import {RouterModule, Routes} from '@angular/router';\n+import {FormsModule} from '@angular/forms';\n+import {ChatsService} from '../services/chats.service';\n+import {ChatComponent} from './containers/chat/chat.component';\n+import {MessagesListComponent} from './components/messages-list/messages-list.component';\n+import {MessageItemComponent} from './components/message-item/message-item.component';\n+import {NewMessageComponent} from './components/new-message/new-message.component';\n+import {SharedModule} from '../shared/shared.module';\n+import {SelectableListModule} from 'ngx-selectable-list';\n+import {AuthGuard} from '../login/services/auth.guard';\n+\n+const routes: Routes = [\n+  {\n+    path: 'chat', children: [\n+      {path: ':id', canActivate: [AuthGuard], component: ChatComponent},\n+    ],\n+  },\n+];\n+\n+@NgModule({\n+  declarations: [\n+    ChatComponent,\n+    MessagesListComponent,\n+    MessageItemComponent,\n+    NewMessageComponent,\n+  ],\n+  imports: [\n+    BrowserModule,\n+    // Material\n+    MatToolbarModule,\n+    MatMenuModule,\n+    MatIconModule,\n+    MatButtonModule,\n+    MatListModule,\n+    MatGridListModule,\n+    // Animations\n+    BrowserAnimationsModule,\n+    // Routing\n+    RouterModule.forChild(routes),\n+    // Forms\n+    FormsModule,\n+    // Feature modules\n+    SharedModule,\n+    SelectableListModule,\n+  ],\n+  providers: [\n+    ChatsService,\n+  ],\n+})\n+export class ChatViewerModule {\n+}\ndiff --git a/client/src/app/chat-viewer/components/message-item/message-item.component.scss b/client/src/app/chat-viewer/components/message-item/message-item.component.scss\nnew file mode 100644\nindex 0000000..d680766\n--- /dev/null\n+++ b/client/src/app/chat-viewer/components/message-item/message-item.component.scss\n@@ -0,0 +1,18 @@\n+:host {\n+  display: flex;\n+  width: 100%;\n+}\n+\n+.message {\n+  max-width: 75%;\n+  background-color: lightgoldenrodyellow;\n+\n+  &.mine {\n+    background-color: lightcyan;\n+    margin-left: auto;\n+  }\n+\n+  .message-sender {\n+    font-size: small;\n+  }\n+}\ndiff --git a/client/src/app/chat-viewer/components/message-item/message-item.component.ts b/client/src/app/chat-viewer/components/message-item/message-item.component.ts\nnew file mode 100644\nindex 0000000..c556072\n--- /dev/null\n+++ b/client/src/app/chat-viewer/components/message-item/message-item.component.ts\n@@ -0,0 +1,22 @@\n+import {Component, Input} from '@angular/core';\n+import {GetChat} from '../../../../types';\n+\n+@Component({\n+  selector: 'app-message-item',\n+  template: `\n+    <div class=\"message\"\n+         [ngClass]=\"{'mine': message.ownership}\">\n+      <div *ngIf=\"isGroup && !message.ownership\" class=\"message-sender\">{{ message.sender.name }}</div>\n+      <div>{{ message.content }}</div>\n+    </div>\n+  `,\n+  styleUrls: ['message-item.component.scss'],\n+})\n+export class MessageItemComponent {\n+  // tslint:disable-next-line:no-input-rename\n+  @Input('item')\n+  message: GetChat.Messages;\n+\n+  @Input()\n+  isGroup: boolean;\n+}\ndiff --git a/client/src/app/chat-viewer/components/messages-list/messages-list.component.scss b/client/src/app/chat-viewer/components/messages-list/messages-list.component.scss\nnew file mode 100644\nindex 0000000..ed1ac7c\n--- /dev/null\n+++ b/client/src/app/chat-viewer/components/messages-list/messages-list.component.scss\n@@ -0,0 +1,12 @@\n+:host {\n+  display: block;\n+  height: 100%;\n+  overflow-y: scroll;\n+  background-color: aliceblue;\n+}\n+\n+/*\n+:host::-webkit-scrollbar {\n+  display: none;\n+}\n+*/\ndiff --git a/client/src/app/chat-viewer/components/messages-list/messages-list.component.ts b/client/src/app/chat-viewer/components/messages-list/messages-list.component.ts\nnew file mode 100644\nindex 0000000..f123280\n--- /dev/null\n+++ b/client/src/app/chat-viewer/components/messages-list/messages-list.component.ts\n@@ -0,0 +1,27 @@\n+import {Component, Input} from '@angular/core';\n+import {GetChat} from '../../../../types';\n+import {SelectableListDirective} from 'ngx-selectable-list';\n+\n+@Component({\n+  selector: 'app-messages-list',\n+  template: `\n+    <mat-list>\n+      <mat-list-item *ngFor=\"let message of messages\">\n+        <app-message-item [item]=\"message\" [isGroup]=\"isGroup\"\n+                          appSelectableItem></app-message-item>\n+      </mat-list-item>\n+    </mat-list>\n+    <ng-content *ngIf=\"selectableListDirective.selecting\"></ng-content>\n+  `,\n+  styleUrls: ['messages-list.component.scss'],\n+})\n+export class MessagesListComponent {\n+  // tslint:disable-next-line:no-input-rename\n+  @Input('items')\n+  messages: GetChat.Messages[];\n+\n+  @Input()\n+  isGroup: boolean;\n+\n+  constructor(public selectableListDirective: SelectableListDirective) {}\n+}\ndiff --git a/client/src/app/chat-viewer/components/new-message/new-message.component.scss b/client/src/app/chat-viewer/components/new-message/new-message.component.scss\nnew file mode 100644\nindex 0000000..da4ed4f\n--- /dev/null\n+++ b/client/src/app/chat-viewer/components/new-message/new-message.component.scss\n@@ -0,0 +1,13 @@\n+:host {\n+  display: flex;\n+  height: 8vh;\n+}\n+\n+input {\n+  width: 100%;\n+}\n+\n+button {\n+  width: 8vh;\n+  min-width: 56px;\n+}\ndiff --git a/client/src/app/chat-viewer/components/new-message/new-message.component.ts b/client/src/app/chat-viewer/components/new-message/new-message.component.ts\nnew file mode 100644\nindex 0000000..10b526c\n--- /dev/null\n+++ b/client/src/app/chat-viewer/components/new-message/new-message.component.ts\n@@ -0,0 +1,34 @@\n+import {Component, EventEmitter, Input, Output} from '@angular/core';\n+\n+@Component({\n+  selector: 'app-new-message',\n+  template: `\n+    <input type=\"text\" [(ngModel)]=\"message\" (keyup)=\"onInputKeyup($event)\"/>\n+    <button mat-button (click)=\"emitMessage()\" [disabled]=\"disabled\">\n+      <mat-icon aria-label=\"Icon-button with a send icon\">send</mat-icon>\n+    </button>\n+  `,\n+  styleUrls: ['new-message.component.scss'],\n+})\n+export class NewMessageComponent {\n+  @Input()\n+  disabled: boolean;\n+\n+  @Output()\n+  newMessage = new EventEmitter<string>();\n+\n+  message = '';\n+\n+  onInputKeyup({ keyCode }: KeyboardEvent) {\n+    if (keyCode === 13) {\n+      this.emitMessage();\n+    }\n+  }\n+\n+  emitMessage() {\n+    if (this.message && !this.disabled) {\n+      this.newMessage.emit(this.message);\n+      this.message = '';\n+    }\n+  }\n+}\ndiff --git a/client/src/app/chat-viewer/containers/chat/chat.component.scss b/client/src/app/chat-viewer/containers/chat/chat.component.scss\nnew file mode 100644\nindex 0000000..56ffb7e\n--- /dev/null\n+++ b/client/src/app/chat-viewer/containers/chat/chat.component.scss\n@@ -0,0 +1,10 @@\n+.container {\n+  display: flex;\n+  flex-flow: column;\n+  justify-content: space-between;\n+  height: calc(100vh - 8vh);\n+\n+  app-confirm-selection {\n+    bottom: 10vh;\n+  }\n+}\ndiff --git a/client/src/app/chat-viewer/containers/chat/chat.component.spec.ts b/client/src/app/chat-viewer/containers/chat/chat.component.spec.ts\nnew file mode 100644\nindex 0000000..930cf89\n--- /dev/null\n+++ b/client/src/app/chat-viewer/containers/chat/chat.component.spec.ts\n@@ -0,0 +1,180 @@\n+import { async, ComponentFixture, TestBed } from '@angular/core/testing';\n+\n+import { ChatComponent } from './chat.component';\n+import {DebugElement, NO_ERRORS_SCHEMA} from '@angular/core';\n+import {MatButtonModule, MatGridListModule, MatIconModule, MatListModule, MatMenuModule, MatToolbarModule} from '@angular/material';\n+import {ChatsService} from '../../../services/chats.service';\n+import {Apollo} from 'apollo-angular';\n+import {HttpClientTestingModule, HttpTestingController} from '@angular/common/http/testing';\n+import {HttpLink, HttpLinkModule, Options} from 'apollo-angular-link-http';\n+import {defaultDataIdFromObject, InMemoryCache} from 'apollo-cache-inmemory';\n+import {RouterTestingModule} from '@angular/router/testing';\n+import {ActivatedRoute} from '@angular/router';\n+import {of} from 'rxjs/observable/of';\n+import {By} from '@angular/platform-browser';\n+import {FormsModule} from '@angular/forms';\n+import {SharedModule} from '../../../shared/shared.module';\n+import {NewMessageComponent} from '../../components/new-message/new-message.component';\n+import {MessagesListComponent} from '../../components/messages-list/messages-list.component';\n+import {MessageItemComponent} from '../../components/message-item/message-item.component';\n+import {SelectableListModule} from 'ngx-selectable-list';\n+import {LoginService} from '../../../login/services/login.service';\n+\n+describe('ChatComponent', () => {\n+  let component: ChatComponent;\n+  let fixture: ComponentFixture<ChatComponent>;\n+  let el: DebugElement;\n+\n+  let httpMock: HttpTestingController;\n+  let httpLink: HttpLink;\n+  let apollo: Apollo;\n+\n+  const chat: any = {\n+    id: '1',\n+    __typename: 'Chat',\n+    name: 'Avery Stewart',\n+    picture: 'https://randomuser.me/api/portraits/thumb/women/1.jpg',\n+    allTimeMembers: [\n+      {\n+        id: '1',\n+        __typename: 'User',\n+      },\n+      {\n+        id: '3',\n+        __typename: 'User',\n+      }\n+    ],\n+    unreadMessages: 1,\n+    isGroup: false,\n+    messages: [\n+      {\n+        id: '1',\n+        chat: {\n+          id: '1',\n+          __typename: 'Chat',\n+        },\n+        __typename: 'Message',\n+        sender: {\n+          id: '3',\n+          __typename: 'User',\n+          name: 'Avery Stewart'\n+        },\n+        content: 'Yep!',\n+        createdAt: '1514035700',\n+        type: 0,\n+        recipients: [\n+          {\n+            user: {\n+              id: '1',\n+              __typename: 'User',\n+            },\n+            message: {\n+              id: '1',\n+              __typename: 'Message',\n+              chat: {\n+                id: '1',\n+                __typename: 'Chat',\n+              },\n+            },\n+            __typename: 'Recipient',\n+            chat: {\n+              id: '1',\n+              __typename: 'Chat',\n+            },\n+            receivedAt: null,\n+            readAt: null\n+          }\n+        ],\n+        ownership: false\n+      }\n+    ],\n+  };\n+\n+  beforeEach(async(() => {\n+    TestBed.configureTestingModule({\n+      declarations: [\n+        ChatComponent,\n+        MessagesListComponent,\n+        MessageItemComponent,\n+        NewMessageComponent,\n+      ],\n+      imports: [\n+        MatToolbarModule,\n+        MatMenuModule,\n+        MatIconModule,\n+        MatButtonModule,\n+        MatListModule,\n+        MatGridListModule,\n+        FormsModule,\n+        SharedModule,\n+        HttpLinkModule,\n+        HttpClientTestingModule,\n+        RouterTestingModule,\n+        SelectableListModule,\n+      ],\n+      providers: [\n+        ChatsService,\n+        Apollo,\n+        {\n+          provide: ActivatedRoute,\n+          useValue: {\n+            params: of({ id: chat.id }),\n+            queryParams: of({}),\n+          }\n+        },\n+        LoginService,\n+      ],\n+      schemas: [NO_ERRORS_SCHEMA]\n+    })\n+      .compileComponents();\n+\n+    httpMock = TestBed.get(HttpTestingController);\n+    httpLink = TestBed.get(HttpLink);\n+    apollo = TestBed.get(Apollo);\n+\n+    apollo.create({\n+      link: httpLink.create(<Options>{ uri: 'http://localhost:3000/graphql' }),\n+      cache: new InMemoryCache({\n+        dataIdFromObject: (object: any) => {\n+          switch (object.__typename) {\n+            case 'Message': return `${object.chat.id}:${object.id}`; // use `chatId` prefix and `messageId` as the primary key\n+            default: return defaultDataIdFromObject(object); // fall back to default handling\n+          }\n+        }\n+      }),\n+    });\n+  }));\n+\n+  beforeEach(() => {\n+    fixture = TestBed.createComponent(ChatComponent);\n+    component = fixture.componentInstance;\n+    fixture.detectChanges();\n+    httpMock.expectOne(httpReq => httpReq.body.operationName === 'chatAdded', 'call to chatAdded api');\n+    httpMock.expectOne(httpReq => httpReq.body.operationName === 'messageAdded', 'call to messageAdded api');\n+    httpMock.expectOne(httpReq => httpReq.body.operationName === 'GetChats', 'call to getChats api');\n+    const req = httpMock.expectOne(httpReq => httpReq.body.operationName === 'GetChat', 'call to getChat api');\n+    req.flush({\n+      data: {\n+        chat\n+      }\n+    });\n+  });\n+\n+  it('should create', () => {\n+    expect(component).toBeTruthy();\n+  });\n+\n+  it('should display the chat', () => {\n+    fixture.whenStable().then(() => {\n+      fixture.detectChanges();\n+      el = fixture.debugElement;\n+      expect(el.query(By.css(`app-toolbar > mat-toolbar > div > div`)).nativeElement.textContent).toContain(chat.name);\n+      for (let i = 0; i < chat.messages.length; i++) {\n+        expect(el.query(By.css(`app-messages-list > mat-list > mat-list-item:nth-child(${i + 1}) > div > app-message-item > div`))\n+          .nativeElement.textContent).toContain(chat.messages[i].content);\n+      }\n+    });\n+\n+    httpMock.verify();\n+  });\n+});\ndiff --git a/client/src/app/chat-viewer/containers/chat/chat.component.ts b/client/src/app/chat-viewer/containers/chat/chat.component.ts\nnew file mode 100644\nindex 0000000..a8be4f1\n--- /dev/null\n+++ b/client/src/app/chat-viewer/containers/chat/chat.component.ts\n@@ -0,0 +1,78 @@\n+import {Component, OnInit} from '@angular/core';\n+import {ActivatedRoute, Router} from '@angular/router';\n+import {ChatsService} from '../../../services/chats.service';\n+import {GetChat} from '../../../../types';\n+import {combineLatest} from 'rxjs/observable/combineLatest';\n+import {Location} from '@angular/common';\n+\n+@Component({\n+  template: `\n+    <app-toolbar>\n+      <button class=\"navigation\" mat-button (click)=\"goToChats()\">\n+        <mat-icon aria-label=\"Icon-button with an arrow back icon\">arrow_back</mat-icon>\n+      </button>\n+      <div class=\"title\">{{ name }}</div>\n+    </app-toolbar>\n+    <div class=\"container\">\n+      <app-messages-list [items]=\"messages\" [isGroup]=\"isGroup\"\n+                         appSelectableList=\"multiple_press\" (multiple)=\"deleteMessages($event)\">\n+        <app-confirm-selection #confirmSelection></app-confirm-selection>\n+      </app-messages-list>\n+      <app-new-message (newMessage)=\"addMessage($event)\"></app-new-message>\n+    </div>\n+  `,\n+  styleUrls: ['./chat.component.scss']\n+})\n+export class ChatComponent implements OnInit {\n+  chatId: string;\n+  messages: GetChat.Messages[];\n+  name: string;\n+  isGroup: boolean;\n+  optimisticUI: boolean;\n+\n+  constructor(private route: ActivatedRoute,\n+              private router: Router,\n+              private location: Location,\n+              private chatsService: ChatsService) {\n+  }\n+\n+  ngOnInit() {\n+    combineLatest(this.route.params, this.route.queryParams,\n+      (params: { id: string }, queryParams: { oui?: boolean }) => ({params, queryParams}))\n+      .subscribe(({params: {id: chatId}, queryParams: {oui}}) => {\n+        this.chatId = chatId;\n+\n+        this.optimisticUI = oui;\n+\n+        if (this.optimisticUI) {\n+          // We are using fake IDs generated by the Optimistic UI\n+          this.chatsService.addChat$.subscribe(({data: {addChat, addGroup}}) => {\n+            this.chatId = addChat ? addChat.id : addGroup.id;\n+            console.log(`Switching from the Optimistic UI id ${chatId} to ${this.chatId}`);\n+            // Rewrite the URL\n+            this.location.go(`chat/${this.chatId}`);\n+            // Optimistic UI no more\n+            this.optimisticUI = false;\n+          });\n+        }\n+\n+        this.chatsService.getChat(chatId, this.optimisticUI).chat$.subscribe(chat => {\n+          this.messages = chat.messages;\n+          this.name = chat.name;\n+          this.isGroup = chat.isGroup;\n+        });\n+      });\n+  }\n+\n+  goToChats() {\n+    this.router.navigate(['/chats']);\n+  }\n+\n+  addMessage(content: string) {\n+    this.chatsService.addMessage(this.chatId, content).subscribe();\n+  }\n+\n+  deleteMessages(messageIds: string[]) {\n+    this.chatsService.removeMessages(this.chatId, this.messages, messageIds).subscribe();\n+  }\n+}\ndiff --git a/client/src/app/chats-creation/chats-creation.module.ts b/client/src/app/chats-creation/chats-creation.module.ts\nnew file mode 100644\nindex 0000000..f8a9754\n--- /dev/null\n+++ b/client/src/app/chats-creation/chats-creation.module.ts\n@@ -0,0 +1,61 @@\n+import { BrowserModule } from '@angular/platform-browser';\n+import { NgModule } from '@angular/core';\n+\n+import {BrowserAnimationsModule} from '@angular/platform-browser/animations';\n+import {\n+  MatButtonModule, MatFormFieldModule, MatGridListModule, MatIconModule, MatInputModule, MatListModule, MatMenuModule,\n+  MatToolbarModule\n+} from '@angular/material';\n+import {RouterModule, Routes} from '@angular/router';\n+import {FormsModule} from '@angular/forms';\n+import {ChatsService} from '../services/chats.service';\n+import {UserItemComponent} from './components/user-item/user-item.component';\n+import {UsersListComponent} from './components/users-list/users-list.component';\n+import {NewGroupComponent} from './containers/new-group/new-group.component';\n+import {NewChatComponent} from './containers/new-chat/new-chat.component';\n+import {NewGroupDetailsComponent} from './components/new-group-details/new-group-details.component';\n+import {SharedModule} from '../shared/shared.module';\n+import {SelectableListModule} from 'ngx-selectable-list';\n+import {AuthGuard} from '../login/services/auth.guard';\n+\n+const routes: Routes = [\n+  {path: 'new-chat', canActivate: [AuthGuard], component: NewChatComponent},\n+  {path: 'new-group', canActivate: [AuthGuard], component: NewGroupComponent},\n+];\n+\n+@NgModule({\n+  declarations: [\n+    NewChatComponent,\n+    UsersListComponent,\n+    NewGroupComponent,\n+    UserItemComponent,\n+    NewGroupDetailsComponent,\n+  ],\n+  imports: [\n+    BrowserModule,\n+    // Animations (for Material)\n+    BrowserAnimationsModule,\n+    // Material\n+    MatToolbarModule,\n+    MatMenuModule,\n+    MatIconModule,\n+    MatButtonModule,\n+    MatListModule,\n+    MatGridListModule,\n+    MatInputModule,\n+    MatFormFieldModule,\n+    MatGridListModule,\n+    // Routing\n+    RouterModule.forChild(routes),\n+    // Forms\n+    FormsModule,\n+    // Feature modules\n+    SelectableListModule,\n+    SharedModule,\n+  ],\n+  providers: [\n+    ChatsService,\n+  ],\n+})\n+export class ChatsCreationModule {\n+}\ndiff --git a/client/src/app/chats-creation/components/new-group-details/new-group-details.component.scss b/client/src/app/chats-creation/components/new-group-details/new-group-details.component.scss\nnew file mode 100644\nindex 0000000..458b376\n--- /dev/null\n+++ b/client/src/app/chats-creation/components/new-group-details/new-group-details.component.scss\n@@ -0,0 +1,25 @@\n+:host {\n+  display: block;\n+}\n+\n+div {\n+  padding: 16px;\n+  mat-form-field {\n+    width: 100%;\n+  }\n+}\n+\n+.new-group {\n+  position: absolute;\n+  bottom: 5vw;\n+  right: 5vw;\n+}\n+\n+.users {\n+  display: flex;\n+  flex-flow: row wrap;\n+  img {\n+    flex: 0 1 8vh;\n+    height: 8vh;\n+  }\n+}\ndiff --git a/client/src/app/chats-creation/components/new-group-details/new-group-details.component.ts b/client/src/app/chats-creation/components/new-group-details/new-group-details.component.ts\nnew file mode 100644\nindex 0000000..dd6554c\n--- /dev/null\n+++ b/client/src/app/chats-creation/components/new-group-details/new-group-details.component.ts\n@@ -0,0 +1,34 @@\n+import {Component, EventEmitter, Input, Output} from '@angular/core';\n+import {GetUsers} from '../../../../types';\n+\n+@Component({\n+  selector: 'app-new-group-details',\n+  template: `\n+    <div>\n+      <mat-form-field>\n+        <input matInput placeholder=\"Group name\" [(ngModel)]=\"groupName\">\n+      </mat-form-field>\n+    </div>\n+    <button [disabled]=\"!groupName\" class=\"new-group\" mat-fab color=\"primary\" (click)=\"emitGroupDetails()\">\n+      <mat-icon aria-label=\"Icon-button with a + icon\">arrow_forward</mat-icon>\n+    </button>\n+    <div>Members</div>\n+    <div class=\"users\">\n+      <img *ngFor=\"let user of users;\" [src]=\"user.picture\"/>\n+    </div>\n+  `,\n+  styleUrls: ['new-group-details.component.scss'],\n+})\n+export class NewGroupDetailsComponent {\n+  groupName: string;\n+  @Input()\n+  users: GetUsers.Users[];\n+  @Output()\n+  groupDetails = new EventEmitter<string>();\n+\n+  emitGroupDetails() {\n+    if (this.groupDetails) {\n+      this.groupDetails.emit(this.groupName);\n+    }\n+  }\n+}\ndiff --git a/client/src/app/chats-creation/components/user-item/user-item.component.scss b/client/src/app/chats-creation/components/user-item/user-item.component.scss\nnew file mode 100644\nindex 0000000..9d7b0cf\n--- /dev/null\n+++ b/client/src/app/chats-creation/components/user-item/user-item.component.scss\n@@ -0,0 +1,28 @@\n+:host {\n+  display: block;\n+  width: 100%;\n+  height: 100%;\n+}\n+\n+button {\n+  padding: 0;\n+  display: flex;\n+  align-items: center;\n+  height: 100%;\n+  width: 100%;\n+  border: none;\n+\n+  div:first-of-type {\n+    display: flex;\n+    justify-content: center;\n+    align-items: center;\n+\n+    img {\n+      max-width: 100%;\n+    }\n+  }\n+\n+  div:nth-of-type(2) {\n+    padding-left: 16px;\n+  }\n+}\ndiff --git a/client/src/app/chats-creation/components/user-item/user-item.component.ts b/client/src/app/chats-creation/components/user-item/user-item.component.ts\nnew file mode 100644\nindex 0000000..75257e1\n--- /dev/null\n+++ b/client/src/app/chats-creation/components/user-item/user-item.component.ts\n@@ -0,0 +1,20 @@\n+import {Component, Input} from '@angular/core';\n+import {GetUsers} from '../../../../types';\n+\n+@Component({\n+  selector: 'app-user-item',\n+  template: `\n+    <button mat-menu-item>\n+      <div>\n+        <img [src]=\"user.picture\" *ngIf=\"user.picture\">\n+      </div>\n+      <div>{{ user.name }}</div>\n+    </button>\n+  `,\n+  styleUrls: ['user-item.component.scss']\n+})\n+export class UserItemComponent {\n+  // tslint:disable-next-line:no-input-rename\n+  @Input('item')\n+  user: GetUsers.Users;\n+}\ndiff --git a/client/src/app/chats-creation/components/users-list/users-list.component.scss b/client/src/app/chats-creation/components/users-list/users-list.component.scss\nnew file mode 100644\nindex 0000000..5d4e87f\n--- /dev/null\n+++ b/client/src/app/chats-creation/components/users-list/users-list.component.scss\n@@ -0,0 +1,3 @@\n+:host {\n+  display: block;\n+}\ndiff --git a/client/src/app/chats-creation/components/users-list/users-list.component.ts b/client/src/app/chats-creation/components/users-list/users-list.component.ts\nnew file mode 100644\nindex 0000000..96d5421\n--- /dev/null\n+++ b/client/src/app/chats-creation/components/users-list/users-list.component.ts\n@@ -0,0 +1,24 @@\n+import {Component, Input} from '@angular/core';\n+import {GetUsers} from '../../../../types';\n+import {SelectableListDirective} from 'ngx-selectable-list';\n+\n+@Component({\n+  selector: 'app-users-list',\n+  template: `\n+    <mat-list>\n+      <mat-list-item *ngFor=\"let user of users\">\n+        <app-user-item [item]=\"user\"\n+                       appSelectableItem></app-user-item>\n+      </mat-list-item>\n+    </mat-list>\n+    <ng-content *ngIf=\"selectableListDirective.selecting\"></ng-content>\n+  `,\n+  styleUrls: ['users-list.component.scss'],\n+})\n+export class UsersListComponent {\n+  // tslint:disable-next-line:no-input-rename\n+  @Input('items')\n+  users: GetUsers.Users[];\n+\n+  constructor(public selectableListDirective: SelectableListDirective) {}\n+}\ndiff --git a/client/src/app/chats-creation/containers/new-chat/new-chat.component.scss b/client/src/app/chats-creation/containers/new-chat/new-chat.component.scss\nnew file mode 100644\nindex 0000000..ec7b4f8\n--- /dev/null\n+++ b/client/src/app/chats-creation/containers/new-chat/new-chat.component.scss\n@@ -0,0 +1,23 @@\n+.new-group {\n+  display: flex;\n+  height: 8vh;\n+  align-items: center;\n+\n+  div:first-of-type {\n+    height: 8vh;\n+    width: 8vh;\n+    display: flex;\n+    justify-content: center;\n+    align-items: center;\n+\n+    mat-icon {\n+      height: 5vh;\n+      width: 5vh;\n+      font-size: 5vh;\n+    }\n+  }\n+\n+  div:nth-of-type(2) {\n+    padding: 16px;\n+  }\n+}\ndiff --git a/client/src/app/chats-creation/containers/new-chat/new-chat.component.ts b/client/src/app/chats-creation/containers/new-chat/new-chat.component.ts\nnew file mode 100644\nindex 0000000..91820c8\n--- /dev/null\n+++ b/client/src/app/chats-creation/containers/new-chat/new-chat.component.ts\n@@ -0,0 +1,60 @@\n+import {Component, OnInit} from '@angular/core';\n+import {Location} from '@angular/common';\n+import {Router} from '@angular/router';\n+import {AddChat, GetUsers} from '../../../../types';\n+import {ChatsService} from '../../../services/chats.service';\n+\n+@Component({\n+  template: `\n+    <app-toolbar>\n+      <button class=\"navigation\" mat-button (click)=\"goBack()\">\n+        <mat-icon aria-label=\"Icon-button with an arrow back icon\">arrow_back</mat-icon>\n+      </button>\n+      <div class=\"title\">New chat</div>\n+    </app-toolbar>\n+\n+    <div class=\"new-group\" (click)=\"goToNewGroup()\">\n+      <div>\n+        <mat-icon aria-label=\"Icon-button with a group add icon\">group_add</mat-icon>\n+      </div>\n+      <div>New group</div>\n+    </div>\n+\n+    <app-users-list [items]=\"users\"\n+                    appSelectableList=\"single\" (single)=\"addChat($event)\">\n+    </app-users-list>\n+  `,\n+  styleUrls: ['new-chat.component.scss'],\n+})\n+export class NewChatComponent implements OnInit {\n+  users: GetUsers.Users[];\n+\n+  constructor(private router: Router,\n+              private location: Location,\n+              private chatsService: ChatsService) {}\n+\n+  ngOnInit () {\n+    this.chatsService.getUsers().users$.subscribe(users => this.users = users);\n+  }\n+\n+  goBack() {\n+    this.location.back();\n+  }\n+\n+  goToNewGroup() {\n+    this.router.navigate(['/new-group']);\n+  }\n+\n+  addChat(recipientId: string) {\n+    const chatId = this.chatsService.getChatId(recipientId);\n+    if (chatId) {\n+      // Chat is already listed for the current user\n+      this.router.navigate(['/chat', chatId]);\n+    } else {\n+      // Generate id for Optimistic UI\n+      const ouiId = ChatsService.getRandomId();\n+      this.chatsService.addChat(recipientId, this.users, ouiId).subscribe();\n+      this.router.navigate(['/chat', ouiId], {queryParams: {oui: true}, skipLocationChange: true});\n+    }\n+  }\n+}\ndiff --git a/client/src/app/chats-creation/containers/new-group/new-group.component.scss b/client/src/app/chats-creation/containers/new-group/new-group.component.scss\nnew file mode 100644\nindex 0000000..e69de29\ndiff --git a/client/src/app/chats-creation/containers/new-group/new-group.component.ts b/client/src/app/chats-creation/containers/new-group/new-group.component.ts\nnew file mode 100644\nindex 0000000..19e9fb9\n--- /dev/null\n+++ b/client/src/app/chats-creation/containers/new-group/new-group.component.ts\n@@ -0,0 +1,60 @@\n+import {Component, OnInit} from '@angular/core';\n+import {Location} from '@angular/common';\n+import {Router} from '@angular/router';\n+import {AddGroup, GetUsers} from '../../../../types';\n+import {ChatsService} from '../../../services/chats.service';\n+\n+@Component({\n+  template: `\n+    <app-toolbar>\n+      <button class=\"navigation\" mat-button (click)=\"goBack()\">\n+        <mat-icon aria-label=\"Icon-button with an arrow back icon\">arrow_back</mat-icon>\n+      </button>\n+      <div class=\"title\">New group</div>\n+    </app-toolbar>\n+\n+    <app-users-list *ngIf=\"!recipientIds.length\" [items]=\"users\"\n+                    appSelectableList=\"multiple_tap\" (multiple)=\"selectUsers($event)\">\n+      <app-confirm-selection #confirmSelection icon=\"arrow_forward\"></app-confirm-selection>\n+    </app-users-list>\n+    <app-new-group-details *ngIf=\"recipientIds.length\" [users]=\"getSelectedUsers()\"\n+                           (groupDetails)=\"addGroup($event)\"></app-new-group-details>\n+  `,\n+  styleUrls: ['new-group.component.scss'],\n+})\n+export class NewGroupComponent implements OnInit {\n+  users: GetUsers.Users[];\n+  recipientIds: string[] = [];\n+\n+  constructor(private router: Router,\n+              private location: Location,\n+              private chatsService: ChatsService) {}\n+\n+  ngOnInit () {\n+    this.chatsService.getUsers().users$.subscribe(users => this.users = users);\n+  }\n+\n+  goBack() {\n+    if (this.recipientIds.length) {\n+      this.recipientIds = [];\n+    } else {\n+      this.location.back();\n+    }\n+  }\n+\n+  selectUsers(recipientIds: string[]) {\n+    this.recipientIds = recipientIds;\n+  }\n+\n+  getSelectedUsers() {\n+    return this.users.filter(user => this.recipientIds.includes(user.id));\n+  }\n+\n+  addGroup(groupName: string) {\n+    if (groupName && this.recipientIds.length) {\n+      const ouiId = ChatsService.getRandomId();\n+      this.chatsService.addGroup(this.recipientIds, groupName, ouiId).subscribe();\n+      this.router.navigate(['/chat', ouiId], {queryParams: {oui: true}, skipLocationChange: true});\n+    }\n+  }\n+}\ndiff --git a/client/src/app/chats-lister/chats-lister.module.ts b/client/src/app/chats-lister/chats-lister.module.ts\nnew file mode 100644\nindex 0000000..0e86163\n--- /dev/null\n+++ b/client/src/app/chats-lister/chats-lister.module.ts\n@@ -0,0 +1,52 @@\n+import { BrowserModule } from '@angular/platform-browser';\n+import { NgModule } from '@angular/core';\n+\n+import {BrowserAnimationsModule} from '@angular/platform-browser/animations';\n+import {MatButtonModule, MatIconModule, MatListModule, MatMenuModule} from '@angular/material';\n+import {RouterModule, Routes} from '@angular/router';\n+import {FormsModule} from '@angular/forms';\n+import {ChatsService} from '../services/chats.service';\n+import {ChatItemComponent} from './components/chat-item/chat-item.component';\n+import {ChatsComponent} from './containers/chats/chats.component';\n+import {ChatsListComponent} from './components/chats-list/chats-list.component';\n+import {TruncateModule} from 'ng2-truncate';\n+import {SharedModule} from '../shared/shared.module';\n+import {SelectableListModule} from 'ngx-selectable-list';\n+import {AuthGuard} from '../login/services/auth.guard';\n+\n+const routes: Routes = [\n+  {path: '', redirectTo: 'chats', pathMatch: 'full'},\n+  {path: 'chats', canActivate: [AuthGuard], component: ChatsComponent},\n+];\n+\n+@NgModule({\n+  declarations: [\n+    ChatsComponent,\n+    ChatsListComponent,\n+    ChatItemComponent,\n+  ],\n+  imports: [\n+    BrowserModule,\n+    // Material\n+    MatMenuModule,\n+    MatIconModule,\n+    MatButtonModule,\n+    MatListModule,\n+    // Animations\n+    BrowserAnimationsModule,\n+    // Routing\n+    RouterModule.forChild(routes),\n+    // Forms\n+    FormsModule,\n+    // Truncate Pipe\n+    TruncateModule,\n+    // Feature modules\n+    SharedModule,\n+    SelectableListModule,\n+  ],\n+  providers: [\n+    ChatsService,\n+  ],\n+})\n+export class ChatsListerModule {\n+}\ndiff --git a/client/src/app/chats-lister/components/chat-item/chat-item.component.scss b/client/src/app/chats-lister/components/chat-item/chat-item.component.scss\nnew file mode 100644\nindex 0000000..78a5e41\n--- /dev/null\n+++ b/client/src/app/chats-lister/components/chat-item/chat-item.component.scss\n@@ -0,0 +1,17 @@\n+:host {\n+  display: block;\n+  width: 100%;\n+}\n+\n+.chat-row {\n+  padding: 0;\n+  display: flex;\n+  width: 100%;\n+  justify-content: space-between;\n+  align-items: center;\n+\n+  .chat-recipient {\n+    display: flex;\n+    width: 60%;\n+  }\n+}\ndiff --git a/client/src/app/chats-lister/components/chat-item/chat-item.component.spec.ts b/client/src/app/chats-lister/components/chat-item/chat-item.component.spec.ts\nnew file mode 100644\nindex 0000000..8dc38a0\n--- /dev/null\n+++ b/client/src/app/chats-lister/components/chat-item/chat-item.component.spec.ts\n@@ -0,0 +1,107 @@\n+import { async, ComponentFixture, TestBed } from '@angular/core/testing';\n+\n+import { ChatItemComponent } from './chat-item.component';\n+import {DebugElement} from '@angular/core';\n+import {By} from '@angular/platform-browser';\n+import {TruncateModule} from 'ng2-truncate';\n+\n+describe('ChatItemComponent', () => {\n+  let component: ChatItemComponent;\n+  let fixture: ComponentFixture<ChatItemComponent>;\n+  let el: DebugElement;\n+\n+  const chat: any = {\n+    id: '1',\n+    __typename: 'Chat',\n+    name: 'Niccolo\\' Belli',\n+    picture: null,\n+    allTimeMembers: [\n+      {\n+        id: '1',\n+        __typename: 'User',\n+      },\n+      {\n+        id: '2',\n+        __typename: 'User',\n+      }\n+    ],\n+    unreadMessages: 0,\n+    isGroup: false,\n+    messages: [\n+      {\n+        id: '1',\n+        chat: {\n+          id: '1',\n+          __typename: 'Chat',\n+        },\n+        __typename: 'Message',\n+        sender: {\n+          id: '1',\n+          __typename: 'User',\n+          name: 'Niccolo\\' Belli',\n+        },\n+        content: 'Hello! How are you? A lot happened since last time',\n+        createdAt: '1513435525',\n+        type: 1,\n+        recipients: [\n+          {\n+            user: {\n+              id: '2',\n+              __typename: 'User',\n+            },\n+            message: {\n+              id: '1',\n+              __typename: 'Message',\n+              chat: {\n+                id: '1',\n+                __typename: 'Chat',\n+              },\n+            },\n+            __typename: 'Recipient',\n+            chat: {\n+              id: '1',\n+              __typename: 'Chat',\n+            },\n+            receivedAt: null,\n+            readAt: null,\n+          }\n+        ],\n+        ownership: true,\n+      }\n+    ],\n+  };\n+\n+  beforeEach(async(() => {\n+    TestBed.configureTestingModule({\n+      declarations: [ ChatItemComponent ],\n+      imports: [TruncateModule]\n+    })\n+    .compileComponents();\n+  }));\n+\n+  beforeEach(() => {\n+    fixture = TestBed.createComponent(ChatItemComponent);\n+    component = fixture.componentInstance;\n+    component.chat = chat;\n+    fixture.detectChanges();\n+    el = fixture.debugElement;\n+  });\n+\n+  it('should create', () => {\n+    expect(component).toBeTruthy();\n+  });\n+\n+  it('should contain the chat name', () => {\n+    expect(el.query(By.css('.chat-recipient > div:first-child')).nativeElement.textContent).toContain(chat.name);\n+  });\n+\n+  it('should contain the first couple of characters of the message content', () => {\n+    expect(el.query(By.css('.chat-content')).nativeElement.textContent)\n+      .toContain(chat.messages[chat.messages.length - 1].content.slice(0, 20));\n+  });\n+\n+  it('should not contain the latest characters of the message content', () => {\n+    expect(el.query(By.css('.chat-content')).nativeElement.textContent)\n+      .not.toContain(chat.messages[chat.messages.length - 1].content.slice(20));\n+  });\n+});\ndiff --git a/client/src/app/chats-lister/components/chat-item/chat-item.component.ts b/client/src/app/chats-lister/components/chat-item/chat-item.component.ts\nnew file mode 100644\nindex 0000000..afd5b1d\n--- /dev/null\n+++ b/client/src/app/chats-lister/components/chat-item/chat-item.component.ts\n@@ -0,0 +1,21 @@\n+import {Component, EventEmitter, Input, Output} from '@angular/core';\n+import {GetChats} from '../../../../types';\n+\n+@Component({\n+  selector: 'app-chat-item',\n+  template: `\n+    <div class=\"chat-row\">\n+        <div class=\"chat-recipient\">\n+          <img *ngIf=\"chat.picture\" [src]=\"chat.picture\" width=\"48\" height=\"48\">\n+          <div>{{ chat.name }} [id: {{ chat.id }}]</div>\n+        </div>\n+        <div class=\"chat-content\">{{ chat.messages[chat.messages.length - 1]?.content | truncate : 20 : '...' }}</div>\n+    </div>\n+  `,\n+  styleUrls: ['chat-item.component.scss'],\n+})\n+export class ChatItemComponent {\n+  // tslint:disable-next-line:no-input-rename\n+  @Input('item')\n+  chat: GetChats.Chats;\n+}\ndiff --git a/client/src/app/chats-lister/components/chats-list/chats-list.component.scss b/client/src/app/chats-lister/components/chats-list/chats-list.component.scss\nnew file mode 100644\nindex 0000000..5d4e87f\n--- /dev/null\n+++ b/client/src/app/chats-lister/components/chats-list/chats-list.component.scss\n@@ -0,0 +1,3 @@\n+:host {\n+  display: block;\n+}\ndiff --git a/client/src/app/chats-lister/components/chats-list/chats-list.component.ts b/client/src/app/chats-lister/components/chats-list/chats-list.component.ts\nnew file mode 100644\nindex 0000000..161d07c\n--- /dev/null\n+++ b/client/src/app/chats-lister/components/chats-list/chats-list.component.ts\n@@ -0,0 +1,24 @@\n+import {Component, Input} from '@angular/core';\n+import {GetChats} from '../../../../types';\n+import {SelectableListDirective} from 'ngx-selectable-list';\n+\n+@Component({\n+  selector: 'app-chats-list',\n+  template: `\n+    <mat-list>\n+      <mat-list-item *ngFor=\"let chat of chats\">\n+        <app-chat-item [item]=\"chat\"\n+                       appSelectableItem></app-chat-item>\n+      </mat-list-item>\n+    </mat-list>\n+    <ng-content *ngIf=\"selectableListDirective.selecting\"></ng-content>\n+  `,\n+  styleUrls: ['chats-list.component.scss'],\n+})\n+export class ChatsListComponent {\n+  // tslint:disable-next-line:no-input-rename\n+  @Input('items')\n+  chats: GetChats.Chats[];\n+\n+  constructor(public selectableListDirective: SelectableListDirective) {}\n+}\ndiff --git a/client/src/app/chats-lister/containers/chats/chats.component.scss b/client/src/app/chats-lister/containers/chats/chats.component.scss\nnew file mode 100644\nindex 0000000..79e6e09\n--- /dev/null\n+++ b/client/src/app/chats-lister/containers/chats/chats.component.scss\n@@ -0,0 +1,5 @@\n+.chat-button {\n+  position: absolute;\n+  bottom: 5vw;\n+  right: 5vw;\n+}\ndiff --git a/client/src/app/chats-lister/containers/chats/chats.component.spec.ts b/client/src/app/chats-lister/containers/chats/chats.component.spec.ts\nnew file mode 100644\nindex 0000000..0377385\n--- /dev/null\n+++ b/client/src/app/chats-lister/containers/chats/chats.component.spec.ts\n@@ -0,0 +1,393 @@\n+import { async, ComponentFixture, TestBed } from '@angular/core/testing';\n+\n+import { ChatsComponent } from './chats.component';\n+import {DebugElement, NO_ERRORS_SCHEMA} from '@angular/core';\n+import {ChatsListComponent} from '../../components/chats-list/chats-list.component';\n+import {ChatItemComponent} from '../../components/chat-item/chat-item.component';\n+import {TruncateModule} from 'ng2-truncate';\n+import {MatButtonModule, MatIconModule, MatListModule, MatMenuModule} from '@angular/material';\n+import {ChatsService} from '../../../services/chats.service';\n+import {Apollo} from 'apollo-angular';\n+import {HttpClientTestingModule, HttpTestingController} from '@angular/common/http/testing';\n+import {HttpLink, HttpLinkModule, Options} from 'apollo-angular-link-http';\n+import {defaultDataIdFromObject, InMemoryCache} from 'apollo-cache-inmemory';\n+import {By} from '@angular/platform-browser';\n+import {RouterTestingModule} from '@angular/router/testing';\n+import {SelectableListModule} from 'ngx-selectable-list';\n+import {LoginService} from '../../../login/services/login.service';\n+\n+describe('ChatsComponent', () => {\n+  let component: ChatsComponent;\n+  let fixture: ComponentFixture<ChatsComponent>;\n+  let el: DebugElement;\n+\n+  let httpMock: HttpTestingController;\n+  let httpLink: HttpLink;\n+  let apollo: Apollo;\n+\n+  const chats: any = [\n+    {\n+      id: '1',\n+      __typename: 'Chat',\n+      name: 'Avery Stewart',\n+      picture: 'https://randomuser.me/api/portraits/thumb/women/1.jpg',\n+      allTimeMembers: [\n+        {\n+          id: '1',\n+          __typename: 'User',\n+        },\n+        {\n+          id: '3',\n+          __typename: 'User',\n+        }\n+      ],\n+      unreadMessages: 1,\n+      isGroup: false,\n+      messages: [\n+        {\n+          id: '1',\n+          chat: {\n+            id: '1',\n+            __typename: 'Chat',\n+          },\n+          __typename: 'Message',\n+          sender: {\n+            id: '3',\n+            __typename: 'User',\n+            name: 'Avery Stewart'\n+          },\n+          content: 'Yep!',\n+          createdAt: '1514035700',\n+          type: 0,\n+          recipients: [\n+            {\n+              user: {\n+                id: '1',\n+                __typename: 'User',\n+              },\n+              message: {\n+                id: '1',\n+                __typename: 'Message',\n+                chat: {\n+                  id: '1',\n+                  __typename: 'Chat',\n+                },\n+              },\n+              __typename: 'Recipient',\n+              chat: {\n+                id: '1',\n+                __typename: 'Chat',\n+              },\n+              receivedAt: null,\n+              readAt: null,\n+            }\n+          ],\n+          ownership: false,\n+        }\n+      ],\n+    },\n+    {\n+      id: '2',\n+      __typename: 'Chat',\n+      name: 'Katie Peterson',\n+      picture: 'https://randomuser.me/api/portraits/thumb/women/2.jpg',\n+      allTimeMembers: [\n+        {\n+          id: '1',\n+          __typename: 'User',\n+        },\n+        {\n+          id: '4',\n+          __typename: 'User',\n+        }\n+      ],\n+      unreadMessages: 0,\n+      isGroup: false,\n+      messages: [\n+        {\n+          id: '1',\n+          chat: {\n+            id: '2',\n+            __typename: 'Chat',\n+          },\n+          __typename: 'Message',\n+          sender: {\n+            id: '1',\n+            __typename: 'User',\n+            name: 'Ethan Gonzalez'\n+          },\n+          content: 'Hey, it\\'s me',\n+          createdAt: '1514031800',\n+          type: 0,\n+          recipients: [\n+            {\n+              user: {\n+                id: '4',\n+                __typename: 'User',\n+              },\n+              message: {\n+                id: '1',\n+                __typename: 'Message',\n+                chat: {\n+                  id: '2',\n+                  __typename: 'Chat',\n+                },\n+              },\n+              __typename: 'Recipient',\n+              chat: {\n+                id: '2',\n+                __typename: 'Chat',\n+              },\n+              receivedAt: null,\n+              readAt: null,\n+            }\n+          ],\n+          ownership: true\n+        }\n+      ],\n+    },\n+    {\n+      id: '3',\n+      __typename: 'Chat',\n+      name: 'Ray Edwards',\n+      picture: 'https://randomuser.me/api/portraits/thumb/men/3.jpg',\n+      allTimeMembers: [\n+        {\n+          id: '1',\n+          __typename: 'User',\n+        },\n+        {\n+          id: '5',\n+          __typename: 'User',\n+        }\n+      ],\n+      unreadMessages: 0,\n+      isGroup: false,\n+      messages: [\n+        {\n+          id: '1',\n+          __typename: 'Message',\n+          chat: {\n+            id: '3',\n+            __typename: 'Chat',\n+          },\n+          sender: {\n+            id: '1',\n+            __typename: 'User',\n+            name: 'Ethan Gonzalez'\n+          },\n+          content: 'You still there?',\n+          createdAt: '1514010200',\n+          type: 0,\n+          recipients: [\n+            {\n+              user: {\n+                id: '5',\n+                __typename: 'User',\n+              },\n+              message: {\n+                id: '1',\n+                __typename: 'Message',\n+                chat: {\n+                  id: '3',\n+                  __typename: 'Chat',\n+                },\n+              },\n+              __typename: 'Recipient',\n+              chat: {\n+                id: '3',\n+                __typename: 'Chat',\n+              },\n+              receivedAt: null,\n+              readAt: null\n+            }\n+          ],\n+          ownership: true\n+        }\n+      ],\n+    },\n+    {\n+      id: '6',\n+      __typename: 'Chat',\n+      name: 'Niccolò Belli',\n+      picture: 'https://randomuser.me/api/portraits/thumb/men/4.jpg',\n+      allTimeMembers: [\n+        {\n+          id: '1',\n+          __typename: 'User',\n+        },\n+        {\n+          id: '6',\n+          __typename: 'User',\n+        }\n+      ],\n+      unreadMessages: 0,\n+      messages: [],\n+      isGroup: false\n+    },\n+    {\n+      id: '8',\n+      __typename: 'Chat',\n+      name: 'A user 0 group',\n+      picture: 'https://randomuser.me/api/portraits/thumb/lego/1.jpg',\n+      allTimeMembers: [\n+        {\n+          id: '1',\n+          __typename: 'User',\n+        },\n+        {\n+          id: '3',\n+          __typename: 'User',\n+        },\n+        {\n+          id: '4',\n+          __typename: 'User',\n+        },\n+        {\n+          id: '6',\n+          __typename: 'User',\n+        },\n+      ],\n+      unreadMessages: 1,\n+      isGroup: true,\n+      messages: [\n+        {\n+          id: '1',\n+          __typename: 'Message',\n+          chat: {\n+            id: '8',\n+            __typename: 'Chat',\n+          },\n+          sender: {\n+            id: '4',\n+            __typename: 'User',\n+            name: 'Katie Peterson'\n+          },\n+          content: 'Awesome!',\n+          createdAt: '1512830000',\n+          type: 0,\n+          recipients: [\n+            {\n+              user: {\n+                id: '1',\n+                __typename: 'User',\n+              },\n+              message: {\n+                id: '1',\n+                __typename: 'Message',\n+                chat: {\n+                  id: '8',\n+                  __typename: 'Chat',\n+                },\n+              },\n+              __typename: 'Recipient',\n+              chat: {\n+                id: '8',\n+                __typename: 'Chat',\n+              },\n+              receivedAt: null,\n+              readAt: null\n+            },\n+            {\n+              user: {\n+                id: '6',\n+                __typename: 'User',\n+              },\n+              message: {\n+                id: '1',\n+                __typename: 'Message',\n+                chat: {\n+                  id: '8',\n+                  __typename: 'Chat',\n+                },\n+              },\n+              __typename: 'Recipient',\n+              chat: {\n+                id: '8',\n+                __typename: 'Chat',\n+              },\n+              receivedAt: null,\n+              readAt: null\n+            }\n+          ],\n+          ownership: false\n+        }\n+      ],\n+    },\n+  ];\n+\n+  beforeEach(async(() => {\n+    TestBed.configureTestingModule({\n+      declarations: [\n+        ChatsComponent,\n+        ChatsListComponent,\n+        ChatItemComponent\n+      ],\n+      imports: [\n+        MatMenuModule,\n+        MatIconModule,\n+        MatButtonModule,\n+        MatListModule,\n+        TruncateModule,\n+        HttpLinkModule,\n+        HttpClientTestingModule,\n+        RouterTestingModule,\n+        SelectableListModule,\n+      ],\n+      providers: [\n+        ChatsService,\n+        Apollo,\n+        LoginService,\n+      ],\n+      schemas: [NO_ERRORS_SCHEMA]\n+    })\n+      .compileComponents();\n+\n+    httpMock = TestBed.get(HttpTestingController);\n+    httpLink = TestBed.get(HttpLink);\n+    apollo = TestBed.get(Apollo);\n+\n+    apollo.create({\n+      link: httpLink.create(<Options>{ uri: 'http://localhost:3000/graphql' }),\n+      cache: new InMemoryCache({\n+        dataIdFromObject: (object: any) => {\n+          switch (object.__typename) {\n+            case 'Message': return `${object.chat.id}:${object.id}`; // use `chatId` prefix and `messageId` as the primary key\n+            default: return defaultDataIdFromObject(object); // fall back to default handling\n+          }\n+        }\n+      }),\n+    });\n+  }));\n+\n+  beforeEach(() => {\n+    fixture = TestBed.createComponent(ChatsComponent);\n+    component = fixture.componentInstance;\n+    fixture.detectChanges();\n+    httpMock.expectOne(httpReq => httpReq.body.operationName === 'chatAdded', 'call to chatAdded api');\n+    httpMock.expectOne(httpReq => httpReq.body.operationName === 'messageAdded', 'call to messageAdded api');\n+    const req = httpMock.expectOne(httpReq => httpReq.body.operationName === 'GetChats', 'call to getChats api');\n+    req.flush({\n+      data: {\n+        chats\n+      }\n+    });\n+  });\n+\n+  it('should create', () => {\n+    expect(component).toBeTruthy();\n+  });\n+\n+  it('should display the chats', () => {\n+    fixture.whenStable().then(() => {\n+      fixture.detectChanges();\n+      el = fixture.debugElement;\n+      for (let i = 0; i < chats.length; i++) {\n+        expect(el.query(By.css(`app-chats-list > mat-list > mat-list-item:nth-child(${i + 1}) > div > app-chat-item > div > div > div`))\n+          .nativeElement.textContent).toContain(chats[i].name);\n+      }\n+    });\n+\n+    httpMock.verify();\n+  });\n+});\ndiff --git a/client/src/app/chats-lister/containers/chats/chats.component.ts b/client/src/app/chats-lister/containers/chats/chats.component.ts\nnew file mode 100644\nindex 0000000..69ce46c\n--- /dev/null\n+++ b/client/src/app/chats-lister/containers/chats/chats.component.ts\n@@ -0,0 +1,68 @@\n+import {Component, OnInit} from '@angular/core';\n+import {ChatsService} from '../../../services/chats.service';\n+import {Observable} from 'rxjs/Observable';\n+import {GetChats} from '../../../../types';\n+import {Router} from '@angular/router';\n+\n+@Component({\n+  template: `\n+    <app-toolbar>\n+      <div class=\"title\">Whatsapp Clone</div>\n+      <button mat-icon-button [matMenuTriggerFor]=\"menu\" class=\"menu\">\n+        <mat-icon>more_vert</mat-icon>\n+      </button>\n+    </app-toolbar>\n+\n+    <mat-menu #menu=\"matMenu\">\n+      <button mat-menu-item>\n+        <mat-icon>dialpad</mat-icon>\n+        <span>Redial</span>\n+      </button>\n+      <button mat-menu-item disabled>\n+        <mat-icon>voicemail</mat-icon>\n+        <span>Check voicemail</span>\n+      </button>\n+      <button mat-menu-item>\n+        <mat-icon>notifications_off</mat-icon>\n+        <span>Disable alerts</span>\n+      </button>\n+    </mat-menu>\n+\n+    <app-chats-list [items]=\"chats$ | async\"\n+                    appSelectableList=\"both\"\n+                    (single)=\"goToChat($event)\" (multiple)=\"deleteChats($event)\" (isSelecting)=\"isSelecting = $event\">\n+      <app-confirm-selection #confirmSelection></app-confirm-selection>\n+    </app-chats-list>\n+\n+    <button *ngIf=\"!isSelecting\" class=\"chat-button\" mat-fab color=\"primary\" (click)=\"goToNewChat()\">\n+      <mat-icon aria-label=\"Icon-button with a + icon\">add</mat-icon>\n+    </button>\n+  `,\n+  styleUrls: ['./chats.component.scss'],\n+})\n+export class ChatsComponent implements OnInit {\n+  chats$: Observable<GetChats.Chats[]>;\n+  isSelecting = false;\n+\n+  constructor(private chatsService: ChatsService,\n+              private router: Router) {\n+  }\n+\n+  ngOnInit() {\n+    this.chats$ = this.chatsService.getChats().chats$;\n+  }\n+\n+  goToChat(chatId: string) {\n+    this.router.navigate(['/chat', chatId]);\n+  }\n+\n+  goToNewChat() {\n+    this.router.navigate(['/new-chat']);\n+  }\n+\n+  deleteChats(chatIds: string[]) {\n+    chatIds.forEach(chatId => {\n+      this.chatsService.removeChat(chatId).subscribe();\n+    });\n+  }\n+}\ndiff --git a/client/src/app/login/containers/login.component.scss b/client/src/app/login/containers/login.component.scss\nnew file mode 100644\nindex 0000000..1897a22\n--- /dev/null\n+++ b/client/src/app/login/containers/login.component.scss\n@@ -0,0 +1,18 @@\n+:host {\n+  display: block;\n+}\n+\n+form:first-of-type {\n+  margin-top: 24px;\n+  margin-bottom: 48px;\n+}\n+\n+label {\n+  display: block;\n+  margin-top: 4px;\n+  margin-bottom: 4px;\n+}\n+\n+.error {\n+  color: red;\n+}\ndiff --git a/client/src/app/login/containers/login.component.ts b/client/src/app/login/containers/login.component.ts\nnew file mode 100644\nindex 0000000..51f5582\n--- /dev/null\n+++ b/client/src/app/login/containers/login.component.ts\n@@ -0,0 +1,133 @@\n+import {Component} from '@angular/core';\n+import {HttpClient} from '@angular/common/http';\n+import {FormBuilder, Validators} from '@angular/forms';\n+// import {matchOtherValidator} from '@moebius/ng-validators';\n+import {Router} from '@angular/router';\n+import {User} from '../../../types';\n+import {LoginService} from '../services/login.service';\n+\n+@Component({\n+  selector: 'app-login',\n+  template: `\n+    <form (ngSubmit)=\"signIn()\" [formGroup]=\"signInForm\" novalidate>\n+      <fieldset fxLayout=\"column\" fxLayoutGap=\"17px\">\n+        <legend>Sign in</legend>\n+        <div>\n+          <label>Username</label>\n+          <input formControlName=\"username\" autocomplete=\"username\" type=\"text\">\n+        </div>\n+        <div class=\"error\" *ngIf=\"signInForm.get('username').hasError('required') && signInForm.get('username').touched\">\n+          Username is required\n+        </div>\n+\n+        <div>\n+          <label>Password</label>\n+          <input formControlName=\"password\" autocomplete=\"current-password\" type=\"password\">\n+        </div>\n+        <div class=\"error\" *ngIf=\"signInForm.get('password').hasError('required') && signInForm.get('password').touched\">\n+          Password is required\n+        </div>\n+\n+        <button type=\"submit\" [disabled]=\"signInForm.invalid\">Sign in</button>\n+      </fieldset>\n+    </form>\n+\n+    <form (ngSubmit)=\"signUp()\" [formGroup]=\"signUpForm\" novalidate>\n+      <fieldset fxLayout=\"column\" fxLayoutGap=\"17px\">\n+        <legend>Sign up</legend>\n+        <div>\n+          <label>Name</label>\n+          <input formControlName=\"name\" type=\"text\">\n+        </div>\n+\n+        <div>\n+          <label>Username</label>\n+          <input formControlName=\"username\" autocomplete=\"username\" type=\"text\">\n+        </div>\n+        <div class=\"error\" *ngIf=\"signUpForm.get('username').hasError('required') && signUpForm.get('username').touched\">\n+          Username is required\n+        </div>\n+\n+        <div>\n+          <label>Password</label>\n+          <input formControlName=\"newPassword\" autocomplete=\"new-password\" type=\"password\">\n+        </div>\n+        <div class=\"error\" *ngIf=\"signUpForm.get('newPassword').hasError('required') && signUpForm.get('newPassword').touched\">\n+          Password is required\n+        </div>\n+\n+        <div>\n+          <label>Password</label>\n+          <input formControlName=\"confirmPassword\" type=\"password\">\n+        </div>\n+        <div class=\"error\" *ngIf=\"signUpForm.get('confirmPassword').hasError('required') && signUpForm.get('confirmPassword').touched\">\n+          Passwords must match\n+        </div>\n+\n+        <button type=\"submit\" [disabled]=\"signUpForm.invalid\">Sign up</button>\n+      </fieldset>\n+    </form>\n+  `,\n+  styleUrls: ['./login.component.scss'],\n+})\n+export class LoginComponent {\n+  signInForm = this.fb.group({\n+    username: [null, [\n+      Validators.required,\n+    ]],\n+    password: [null, [\n+      Validators.required,\n+    ]],\n+  });\n+\n+  signUpForm = this.fb.group({\n+    name: [null, [\n+      Validators.required,\n+    ]],\n+    username: [null, [\n+      Validators.required,\n+    ]],\n+    newPassword: [null, [\n+      Validators.required,\n+    ]],\n+    confirmPassword: [null, [\n+      Validators.required,\n+      // matchOtherValidator('newPassword'),\n+    ]],\n+  });\n+\n+  constructor(private http: HttpClient,\n+              private fb: FormBuilder,\n+              private router: Router,\n+              private loginService: LoginService) {}\n+\n+  signIn() {\n+    const {username, password} = this.signInForm.value;\n+    const auth = `Basic ${btoa(`${username}:${password}`)}`;\n+    this.http.post('http://localhost:3000/signin', null, {\n+      headers: {\n+        Authorization: auth,\n+      }\n+    }).subscribe((user: User) => {\n+      this.loginService.storeAuthHeader(auth);\n+      this.loginService.storeUser(user);\n+      this.router.navigate(['/chats']);\n+    }, err => console.error(err));\n+  }\n+\n+  signUp() {\n+    const {username, newPassword: password, name} = this.signInForm.value;\n+    const auth = `Basic ${btoa(`${username}:${password}`)}`;\n+    this.http.post('http://localhost:3000/signup', {\n+      name,\n+    }, {\n+      headers: {\n+        Authorization: auth,\n+      }\n+    }).subscribe((user: User) => {\n+      this.loginService.storeAuthHeader(auth);\n+      this.loginService.storeUser(user);\n+      this.router.navigate(['/chats']);\n+    }, err => console.error(err));\n+  }\n+}\ndiff --git a/client/src/app/login/login.module.ts b/client/src/app/login/login.module.ts\nnew file mode 100644\nindex 0000000..9fdda69\n--- /dev/null\n+++ b/client/src/app/login/login.module.ts\n@@ -0,0 +1,52 @@\n+import {RouterModule, Routes} from '@angular/router';\n+import {NgModule} from '@angular/core';\n+import {TruncateModule} from 'ng2-truncate';\n+import {MatButtonModule, MatIconModule, MatListModule, MatMenuModule} from '@angular/material';\n+import {SharedModule} from '../shared/shared.module';\n+import {BrowserModule} from '@angular/platform-browser';\n+import {FormsModule, ReactiveFormsModule} from '@angular/forms';\n+import {BrowserAnimationsModule} from '@angular/platform-browser/animations';\n+import {LoginComponent} from './containers/login.component';\n+import {FlexLayoutModule} from '@angular/flex-layout';\n+import {AuthInterceptor} from './services/auth.interceptor';\n+import {AuthGuard} from './services/auth.guard';\n+import {LoginService} from './services/login.service';\n+\n+\n+const routes: Routes = [\n+  {path: 'login', component: LoginComponent},\n+];\n+\n+@NgModule({\n+  declarations: [\n+    LoginComponent,\n+  ],\n+  imports: [\n+    BrowserModule,\n+    // Material\n+    MatMenuModule,\n+    MatIconModule,\n+    MatButtonModule,\n+    MatListModule,\n+    // Animations\n+    BrowserAnimationsModule,\n+    // Flex layout\n+    FlexLayoutModule,\n+    // Routing\n+    RouterModule.forChild(routes),\n+    // Forms\n+    FormsModule,\n+    ReactiveFormsModule,\n+    // Truncate Pipe\n+    TruncateModule,\n+    // Feature modules\n+    SharedModule,\n+  ],\n+  providers: [\n+    LoginService,\n+    AuthInterceptor,\n+    AuthGuard,\n+  ],\n+})\n+export class LoginModule {\n+}\ndiff --git a/client/src/app/login/services/auth.guard.ts b/client/src/app/login/services/auth.guard.ts\nnew file mode 100644\nindex 0000000..e67307b\n--- /dev/null\n+++ b/client/src/app/login/services/auth.guard.ts\n@@ -0,0 +1,18 @@\n+import {Injectable} from '@angular/core';\n+import {CanActivate, Router} from '@angular/router';\n+import {LoginService} from './login.service';\n+\n+@Injectable()\n+export class AuthGuard implements CanActivate {\n+  constructor(private router: Router,\n+              private loginService: LoginService) {}\n+\n+  canActivate() {\n+    if (this.loginService.getAuthHeader()) {\n+      return true;\n+    } else {\n+      this.router.navigate(['/login']);\n+      return false;\n+    }\n+  }\n+}\ndiff --git a/client/src/app/login/services/auth.interceptor.ts b/client/src/app/login/services/auth.interceptor.ts\nnew file mode 100644\nindex 0000000..c0dc097\n--- /dev/null\n+++ b/client/src/app/login/services/auth.interceptor.ts\n@@ -0,0 +1,20 @@\n+import {Injectable} from '@angular/core';\n+import {HttpEvent, HttpHandler, HttpInterceptor, HttpRequest} from '@angular/common/http';\n+import {Observable} from 'rxjs/Observable';\n+import {LoginService} from './login.service';\n+\n+@Injectable()\n+export class AuthInterceptor implements HttpInterceptor {\n+  constructor(private loginService: LoginService) {}\n+  intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n+    const auth = this.loginService.getAuthHeader();\n+    if (auth) {\n+      request = request.clone({\n+        setHeaders: {\n+          Authorization: auth,\n+        }\n+      });\n+    }\n+    return next.handle(request);\n+  }\n+}\ndiff --git a/client/src/app/login/services/login.service.ts b/client/src/app/login/services/login.service.ts\nnew file mode 100644\nindex 0000000..1a4c3e3\n--- /dev/null\n+++ b/client/src/app/login/services/login.service.ts\n@@ -0,0 +1,24 @@\n+import { Injectable } from '@angular/core';\n+import {User} from '../../../types';\n+\n+@Injectable()\n+export class LoginService {\n+\n+  constructor() { }\n+\n+  storeAuthHeader(auth: string) {\n+    localStorage.setItem('Authorization', auth);\n+  }\n+\n+  getAuthHeader(): string {\n+    return localStorage.getItem('Authorization');\n+  }\n+\n+  storeUser(user: User) {\n+    localStorage.setItem('user', JSON.stringify(user));\n+  }\n+\n+  getUser(): User {\n+    return JSON.parse(localStorage.getItem('user'));\n+  }\n+}\ndiff --git a/client/src/app/services/chats.service.spec.ts b/client/src/app/services/chats.service.spec.ts\nnew file mode 100644\nindex 0000000..c4b3754\n--- /dev/null\n+++ b/client/src/app/services/chats.service.spec.ts\n@@ -0,0 +1,360 @@\n+import { TestBed, inject } from '@angular/core/testing';\n+\n+import { ChatsService } from './chats.service';\n+import {Apollo} from 'apollo-angular';\n+import {HttpLink, HttpLinkModule, Options} from 'apollo-angular-link-http';\n+import {HttpClientTestingModule, HttpTestingController} from '@angular/common/http/testing';\n+import {defaultDataIdFromObject, InMemoryCache} from 'apollo-cache-inmemory';\n+import {LoginService} from '../login/services/login.service';\n+\n+describe('ChatsService', () => {\n+  let httpMock: HttpTestingController;\n+  let httpLink: HttpLink;\n+  let apollo: Apollo;\n+\n+  const chats: any = [\n+    {\n+      id: '1',\n+      __typename: 'Chat',\n+      name: 'Avery Stewart',\n+      picture: 'https://randomuser.me/api/portraits/thumb/women/1.jpg',\n+      allTimeMembers: [\n+        {\n+          id: '1',\n+          __typename: 'User',\n+        },\n+        {\n+          id: '3',\n+          __typename: 'User',\n+        }\n+      ],\n+      unreadMessages: 1,\n+      isGroup: false,\n+      messages: [\n+        {\n+          id: '1',\n+          chat: {\n+            id: '1',\n+            __typename: 'Chat',\n+          },\n+          __typename: 'Message',\n+          sender: {\n+            id: '3',\n+            __typename: 'User',\n+            name: 'Avery Stewart'\n+          },\n+          content: 'Yep!',\n+          createdAt: '1514035700',\n+          type: 0,\n+          recipients: [\n+            {\n+              user: {\n+                id: '1',\n+                __typename: 'User',\n+              },\n+              message: {\n+                id: '1',\n+                __typename: 'Message',\n+                chat: {\n+                  id: '1',\n+                  __typename: 'Chat',\n+                },\n+              },\n+              __typename: 'Recipient',\n+              chat: {\n+                id: '1',\n+                __typename: 'Chat',\n+              },\n+              receivedAt: null,\n+              readAt: null,\n+            }\n+          ],\n+          ownership: false,\n+        }\n+      ],\n+    },\n+    {\n+      id: '2',\n+      __typename: 'Chat',\n+      name: 'Katie Peterson',\n+      picture: 'https://randomuser.me/api/portraits/thumb/women/2.jpg',\n+      allTimeMembers: [\n+        {\n+          id: '1',\n+          __typename: 'User',\n+        },\n+        {\n+          id: '4',\n+          __typename: 'User',\n+        }\n+      ],\n+      unreadMessages: 0,\n+      isGroup: false,\n+      messages: [\n+        {\n+          id: '1',\n+          chat: {\n+            id: '2',\n+            __typename: 'Chat',\n+          },\n+          __typename: 'Message',\n+          sender: {\n+            id: '1',\n+            __typename: 'User',\n+            name: 'Ethan Gonzalez'\n+          },\n+          content: 'Hey, it\\'s me',\n+          createdAt: '1514031800',\n+          type: 0,\n+          recipients: [\n+            {\n+              user: {\n+                id: '4',\n+                __typename: 'User',\n+              },\n+              message: {\n+                id: '1',\n+                __typename: 'Message',\n+                chat: {\n+                  id: '2',\n+                  __typename: 'Chat',\n+                },\n+              },\n+              __typename: 'Recipient',\n+              chat: {\n+                id: '2',\n+                __typename: 'Chat',\n+              },\n+              receivedAt: null,\n+              readAt: null,\n+            }\n+          ],\n+          ownership: true\n+        }\n+      ],\n+    },\n+    {\n+      id: '3',\n+      __typename: 'Chat',\n+      name: 'Ray Edwards',\n+      picture: 'https://randomuser.me/api/portraits/thumb/men/3.jpg',\n+      allTimeMembers: [\n+        {\n+          id: '1',\n+          __typename: 'User',\n+        },\n+        {\n+          id: '5',\n+          __typename: 'User',\n+        }\n+      ],\n+      unreadMessages: 0,\n+      isGroup: false,\n+      messages: [\n+        {\n+          id: '1',\n+          __typename: 'Message',\n+          chat: {\n+            id: '3',\n+            __typename: 'Chat',\n+          },\n+          sender: {\n+            id: '1',\n+            __typename: 'User',\n+            name: 'Ethan Gonzalez'\n+          },\n+          content: 'You still there?',\n+          createdAt: '1514010200',\n+          type: 0,\n+          recipients: [\n+            {\n+              user: {\n+                id: '5',\n+                __typename: 'User',\n+              },\n+              message: {\n+                id: '1',\n+                __typename: 'Message',\n+                chat: {\n+                  id: '3',\n+                  __typename: 'Chat',\n+                },\n+              },\n+              __typename: 'Recipient',\n+              chat: {\n+                id: '3',\n+                __typename: 'Chat',\n+              },\n+              receivedAt: null,\n+              readAt: null\n+            }\n+          ],\n+          ownership: true\n+        }\n+      ],\n+    },\n+    {\n+      id: '6',\n+      __typename: 'Chat',\n+      name: 'Niccolò Belli',\n+      picture: 'https://randomuser.me/api/portraits/thumb/men/4.jpg',\n+      allTimeMembers: [\n+        {\n+          id: '1',\n+          __typename: 'User',\n+        },\n+        {\n+          id: '6',\n+          __typename: 'User',\n+        }\n+      ],\n+      unreadMessages: 0,\n+      messages: [],\n+      isGroup: false\n+    },\n+    {\n+      id: '8',\n+      __typename: 'Chat',\n+      name: 'A user 0 group',\n+      picture: 'https://randomuser.me/api/portraits/thumb/lego/1.jpg',\n+      allTimeMembers: [\n+        {\n+          id: '1',\n+          __typename: 'User',\n+        },\n+        {\n+          id: '3',\n+          __typename: 'User',\n+        },\n+        {\n+          id: '4',\n+          __typename: 'User',\n+        },\n+        {\n+          id: '6',\n+          __typename: 'User',\n+        },\n+      ],\n+      unreadMessages: 1,\n+      isGroup: true,\n+      messages: [\n+        {\n+          id: '1',\n+          __typename: 'Message',\n+          chat: {\n+            id: '8',\n+            __typename: 'Chat',\n+          },\n+          sender: {\n+            id: '4',\n+            __typename: 'User',\n+            name: 'Katie Peterson'\n+          },\n+          content: 'Awesome!',\n+          createdAt: '1512830000',\n+          type: 0,\n+          recipients: [\n+            {\n+              user: {\n+                id: '1',\n+                __typename: 'User',\n+              },\n+              message: {\n+                id: '1',\n+                __typename: 'Message',\n+                chat: {\n+                  id: '8',\n+                  __typename: 'Chat',\n+                },\n+              },\n+              __typename: 'Recipient',\n+              chat: {\n+                id: '8',\n+                __typename: 'Chat',\n+              },\n+              receivedAt: null,\n+              readAt: null\n+            },\n+            {\n+              user: {\n+                id: '6',\n+                __typename: 'User',\n+              },\n+              message: {\n+                id: '1',\n+                __typename: 'Message',\n+                chat: {\n+                  id: '8',\n+                  __typename: 'Chat',\n+                },\n+              },\n+              __typename: 'Recipient',\n+              chat: {\n+                id: '8',\n+                __typename: 'Chat',\n+              },\n+              receivedAt: null,\n+              readAt: null\n+            }\n+          ],\n+          ownership: false\n+        }\n+      ],\n+    },\n+  ];\n+\n+  beforeEach(() => {\n+    TestBed.configureTestingModule({\n+      imports: [\n+        HttpLinkModule,\n+        // HttpClientModule,\n+        HttpClientTestingModule,\n+      ],\n+      providers: [\n+        ChatsService,\n+        Apollo,\n+        LoginService,\n+      ]\n+    });\n+\n+    httpMock = TestBed.get(HttpTestingController);\n+    httpLink = TestBed.get(HttpLink);\n+    apollo = TestBed.get(Apollo);\n+\n+    apollo.create({\n+      link: httpLink.create(<Options>{ uri: 'http://localhost:3000/graphql' }),\n+      cache: new InMemoryCache({\n+        dataIdFromObject: (object: any) => {\n+          switch (object.__typename) {\n+            case 'Message': return `${object.chat.id}:${object.id}`; // use `chatId` prefix and `messageId` as the primary key\n+            default: return defaultDataIdFromObject(object); // fall back to default handling\n+          }\n+        }\n+      }),\n+    });\n+  });\n+\n+  it('should be created', inject([ChatsService], (service: ChatsService) => {\n+    expect(service).toBeTruthy();\n+  }));\n+\n+  it('should get chats', inject([ChatsService], (service: ChatsService) => {\n+    service.getChats().chats$.subscribe(_chats => {\n+      expect(_chats.length).toEqual(chats.length);\n+      for (let i = 0; i < _chats.length; i++) {\n+        expect(_chats[i]).toEqual(chats[i]);\n+      }\n+    });\n+\n+    httpMock.expectOne(httpReq => httpReq.body.operationName === 'chatAdded', 'call to chatAdded api');\n+    httpMock.expectOne(httpReq => httpReq.body.operationName === 'messageAdded', 'call to messageAdded api');\n+    const req = httpMock.expectOne(httpReq => httpReq.body.operationName === 'GetChats', 'call to getChats api');\n+    expect(req.request.method).toBe('POST');\n+    req.flush({\n+      data: {\n+        chats\n+      }\n+    });\n+    httpMock.verify();\n+  }));\n+});\ndiff --git a/client/src/app/services/chats.service.ts b/client/src/app/services/chats.service.ts\nnew file mode 100644\nindex 0000000..6bd09bd\n--- /dev/null\n+++ b/client/src/app/services/chats.service.ts\n@@ -0,0 +1,454 @@\n+import {ApolloQueryResult, MutationOptions, WatchQueryOptions} from 'apollo-client';\n+import {concat, map, share, switchMap} from 'rxjs/operators';\n+import {Apollo, QueryRef} from 'apollo-angular';\n+import {Injectable} from '@angular/core';\n+import {getChatsQuery} from '../../graphql/getChats.query';\n+import {\n+  AddChat, AddGroup, AddMessage, GetChat, GetChats, GetUsers, MessageAdded, RemoveAllMessages, RemoveChat,\n+  RemoveMessages\n+} from '../../types';\n+import {getChatQuery} from '../../graphql/getChat.query';\n+import {addMessageMutation} from '../../graphql/addMessage.mutation';\n+import {removeChatMutation} from '../../graphql/removeChat.mutation';\n+import {DocumentNode} from 'graphql';\n+import {removeAllMessagesMutation} from '../../graphql/removeAllMessages.mutation';\n+import {removeMessagesMutation} from '../../graphql/removeMessages.mutation';\n+import {getUsersQuery} from '../../graphql/getUsers.query';\n+import {Observable} from 'rxjs/Observable';\n+import {addChatMutation} from '../../graphql/addChat.mutation';\n+import {addGroupMutation} from '../../graphql/addGroup.mutation';\n+import * as moment from 'moment';\n+import {AsyncSubject} from 'rxjs/AsyncSubject';\n+import {of} from 'rxjs/observable/of';\n+import {FetchResult} from 'apollo-link';\n+import {LoginService} from '../login/services/login.service';\n+import {chatAddedSubscription} from '../../graphql/chatAdded.subscription';\n+import {messageAddedSubscription} from '../../graphql/messageAdded.subscription';\n+\n+@Injectable()\n+export class ChatsService {\n+  messagesAmount = 3;\n+  getChatsWq: QueryRef<GetChats.Query>;\n+  chats$: Observable<GetChats.Chats[]>;\n+  chats: GetChats.Chats[];\n+  getChatWqSubject: AsyncSubject<QueryRef<GetChat.Query>>;\n+  addChat$: Observable<FetchResult<AddChat.Mutation | AddGroup.Mutation>>;\n+\n+  constructor(private apollo: Apollo,\n+              private loginService: LoginService) {\n+    this.getChatsWq = this.apollo.watchQuery<GetChats.Query>(<WatchQueryOptions>{\n+      query: getChatsQuery,\n+      variables: {\n+        amount: this.messagesAmount,\n+      },\n+    });\n+\n+    this.getChatsWq.subscribeToMore({\n+      document: chatAddedSubscription,\n+      updateQuery: (prev: GetChats.Query, { subscriptionData }) => {\n+        if (!subscriptionData.data) {\n+          return prev;\n+        }\n+\n+        const newChat: GetChats.Chats = subscriptionData.data.chatAdded;\n+\n+        return Object.assign({}, prev, {\n+          chats: [...prev.chats, newChat]\n+        });\n+      }\n+    });\n+\n+    this.getChatsWq.subscribeToMore({\n+      document: messageAddedSubscription,\n+      updateQuery: (prev: GetChats.Query, { subscriptionData }) => {\n+        if (!subscriptionData.data) {\n+          return prev;\n+        }\n+\n+        const newMessage: MessageAdded.MessageAdded = subscriptionData.data.messageAdded;\n+\n+        // We need to update the cache for both Chat and Chats. The following updates the cache for Chat.\n+        try {\n+          // Read the data from our cache for this query.\n+          const {chat}: GetChat.Query = this.apollo.getClient().readQuery({\n+            query: getChatQuery, variables: {\n+              chatId: newMessage.chat.id,\n+            }\n+          });\n+\n+          // Add our message from the mutation to the end.\n+          chat.messages.push(newMessage);\n+          // Write our data back to the cache.\n+          this.apollo.getClient().writeQuery({ query: getChatQuery, data: {chat} });\n+        } catch {\n+          console.error('The chat we received an update for does not exist in the store');\n+        }\n+\n+        return Object.assign({}, prev, {\n+          chats: [...prev.chats.map(_chat =>\n+            _chat.id === newMessage.chat.id ? {..._chat, messages: [..._chat.messages, newMessage]} : _chat)]\n+        });\n+      }\n+    });\n+\n+    this.chats$ = this.getChatsWq.valueChanges.pipe(\n+      map((result: ApolloQueryResult<GetChats.Query>) => result.data.chats)\n+    );\n+    this.chats$.subscribe(chats => this.chats = chats);\n+  }\n+\n+  static getRandomId() {\n+    return String(Math.round(Math.random() * 1000000000000));\n+  }\n+\n+  getChats() {\n+    return {query: this.getChatsWq, chats$: this.chats$};\n+  }\n+\n+  getChat(chatId: string, oui?: boolean) {\n+    const _chat = this.chats && this.chats.find(chat => chat.id === chatId) || {\n+      id: chatId,\n+      name: '',\n+      picture: null,\n+      allTimeMembers: [],\n+      unreadMessages: 0,\n+      isGroup: false,\n+      messages: [],\n+    };\n+    const chat$FromCache = of<GetChat.Chat>(_chat);\n+\n+    const getApolloWatchQuery = (id: string) => {\n+      return this.apollo.watchQuery<GetChat.Query>({\n+        query: getChatQuery,\n+        variables: {\n+          chatId: id,\n+        }\n+      });\n+    };\n+\n+    let chat$: Observable<GetChat.Chat>;\n+    this.getChatWqSubject = new AsyncSubject();\n+\n+    if (oui) {\n+      chat$ = chat$FromCache.pipe(\n+        concat(this.addChat$.pipe(\n+          switchMap(({ data: { addChat, addGroup } }) => {\n+            const query = getApolloWatchQuery(addChat ? addChat.id : addGroup.id);\n+            this.getChatWqSubject.next(query);\n+            this.getChatWqSubject.complete();\n+            return query.valueChanges.pipe(\n+              map((result: ApolloQueryResult<GetChat.Query>) => result.data.chat)\n+            );\n+          }))\n+        ));\n+    } else {\n+      const query = getApolloWatchQuery(chatId);\n+      this.getChatWqSubject.next(query);\n+      this.getChatWqSubject.complete();\n+      chat$ = chat$FromCache.pipe(\n+        concat(query.valueChanges.pipe(\n+          map((result: ApolloQueryResult<GetChat.Query>) => result.data.chat)\n+        )));\n+    }\n+\n+    return {query$: this.getChatWqSubject.asObservable(), chat$};\n+  }\n+\n+  addMessage(chatId: string, content: string) {\n+    return this.apollo.mutate(<MutationOptions>{\n+      mutation: addMessageMutation,\n+      variables: <AddMessage.Variables>{\n+        chatId,\n+        content,\n+      },\n+      optimisticResponse: {\n+        __typename: 'Mutation',\n+        addMessage: {\n+          id: ChatsService.getRandomId(),\n+          __typename: 'Message',\n+          senderId: this.loginService.getUser().id,\n+          sender: {\n+            id: this.loginService.getUser().id,\n+            __typename: 'User',\n+            name: this.loginService.getUser().name,\n+          },\n+          content,\n+          createdAt: moment().unix(),\n+          type: 0,\n+          recipients: [],\n+          ownership: true,\n+        },\n+      },\n+      update: (store, { data: { addMessage } }: {data: AddMessage.Mutation}) => {\n+        // Update the messages cache\n+        {\n+          // Read the data from our cache for this query.\n+          const {chat}: GetChat.Query = store.readQuery({\n+            query: getChatQuery, variables: {\n+              chatId,\n+            }\n+          });\n+          // Add our message from the mutation to the end.\n+          chat.messages.push(addMessage);\n+          // Write our data back to the cache.\n+          store.writeQuery({ query: getChatQuery, data: {chat} });\n+        }\n+        // Update last message cache\n+        {\n+          // Read the data from our cache for this query.\n+          const {chats}: GetChats.Query = store.readQuery({\n+            query: getChatsQuery,\n+            variables: <GetChats.Variables>{\n+              amount: this.messagesAmount,\n+            },\n+          });\n+          // Add our comment from the mutation to the end.\n+          chats.find(chat => chat.id === chatId).messages.push(addMessage);\n+          // Write our data back to the cache.\n+          store.writeQuery({\n+            query: getChatsQuery,\n+            variables: <GetChats.Variables>{\n+              amount: this.messagesAmount,\n+            },\n+            data: {\n+              chats,\n+            },\n+          });\n+        }\n+      },\n+    });\n+  }\n+\n+  removeChat(chatId: string) {\n+    return this.apollo.mutate({\n+      mutation: removeChatMutation,\n+      variables: <RemoveChat.Variables>{\n+        chatId,\n+      },\n+      optimisticResponse: {\n+        __typename: 'Mutation',\n+        removeChat: chatId,\n+      },\n+      update: (store, { data: { removeChat } }) => {\n+        // Read the data from our cache for this query.\n+        const {chats}: GetChats.Query = store.readQuery({\n+          query: getChatsQuery,\n+          variables: <GetChats.Variables>{\n+            amount: this.messagesAmount,\n+          },\n+        });\n+        // Remove the chat (mutable)\n+        for (const index of chats.keys()) {\n+          if (chats[index].id === removeChat) {\n+            chats.splice(index, 1);\n+          }\n+        }\n+        // Write our data back to the cache.\n+        store.writeQuery({\n+          query: getChatsQuery,\n+          variables: <GetChats.Variables>{\n+            amount: this.messagesAmount,\n+          },\n+          data: {\n+            chats,\n+          },\n+        });\n+      },\n+    });\n+  }\n+\n+  removeMessages(chatId: string, messages: GetChat.Messages[], messageIdsOrAll: string[] | boolean) {\n+    let variables: RemoveMessages.Variables | RemoveAllMessages.Variables;\n+    let ids: string[] = [];\n+    let mutation: DocumentNode;\n+\n+    if (typeof messageIdsOrAll === 'boolean') {\n+      variables = {chatId, all: messageIdsOrAll} as RemoveAllMessages.Variables;\n+      ids = messages.map(message => message.id);\n+      mutation = removeAllMessagesMutation;\n+    } else {\n+      variables = {chatId, messageIds: messageIdsOrAll} as RemoveMessages.Variables;\n+      ids = messageIdsOrAll;\n+      mutation = removeMessagesMutation;\n+    }\n+\n+    return this.apollo.mutate(<MutationOptions>{\n+      mutation,\n+      variables,\n+      optimisticResponse: {\n+        __typename: 'Mutation',\n+        removeMessages: ids,\n+      },\n+      update: (store, { data: { removeMessages } }: {data: RemoveMessages.Mutation | RemoveAllMessages.Mutation}) => {\n+        // Update the messages cache\n+        {\n+          // Read the data from our cache for this query.\n+          const {chat}: GetChat.Query = store.readQuery({\n+            query: getChatQuery, variables: {\n+              chatId,\n+            }\n+          });\n+          // Remove the messages (mutable)\n+          removeMessages.forEach(messageId => {\n+            for (const index of chat.messages.keys()) {\n+              if (chat.messages[index].id === messageId) {\n+                chat.messages.splice(index, 1);\n+              }\n+            }\n+          });\n+          // Write our data back to the cache.\n+          store.writeQuery({ query: getChatQuery, data: {chat} });\n+        }\n+        // Update last message cache\n+        {\n+          // Read the data from our cache for this query.\n+          const {chats}: GetChats.Query = store.readQuery({\n+            query: getChatsQuery,\n+            variables: <GetChats.Variables>{\n+              amount: this.messagesAmount,\n+            },\n+          });\n+          // Fix last message\n+          chats.find(chat => chat.id === chatId).messages = messages\n+            .filter(message => !ids.includes(message.id))\n+            .sort((a, b) => Number(b.createdAt) - Number(a.createdAt)) || [];\n+          // Write our data back to the cache.\n+          store.writeQuery({\n+            query: getChatsQuery,\n+            variables: <GetChats.Variables>{\n+              amount: this.messagesAmount,\n+            },\n+            data: {\n+              chats,\n+            },\n+          });\n+        }\n+      },\n+    });\n+  }\n+\n+  getUsers() {\n+    const query = this.apollo.watchQuery<GetUsers.Query>(<WatchQueryOptions>{\n+      query: getUsersQuery,\n+    });\n+    const users$ = query.valueChanges.pipe(\n+      map((result: ApolloQueryResult<GetUsers.Query>) => result.data.users)\n+    );\n+\n+    return {query, users$};\n+  }\n+\n+  // Checks if the chat is listed for the current user and returns the id\n+  getChatId(recipientId: string) {\n+    const _chat = this.chats.find(chat => {\n+      return !chat.isGroup && !!chat.allTimeMembers.find(user => user.id === this.loginService.getUser().id) &&\n+        !!chat.allTimeMembers.find(user => user.id === recipientId);\n+    });\n+    return _chat ? _chat.id : false;\n+  }\n+\n+  addChat(recipientId: string, users: GetUsers.Users[], ouiId: string) {\n+    this.addChat$ = this.apollo.mutate({\n+      mutation: addChatMutation,\n+      variables: <AddChat.Variables>{\n+        recipientId,\n+      },\n+      optimisticResponse: {\n+        __typename: 'Mutation',\n+        addChat: {\n+          id: ouiId,\n+          __typename: 'Chat',\n+          name: users.find(user => user.id === recipientId).name,\n+          picture: users.find(user => user.id === recipientId).picture,\n+          allTimeMembers: [\n+            {\n+              id: this.loginService.getUser().id,\n+              __typename: 'User',\n+            },\n+            {\n+              id: recipientId,\n+              __typename: 'User',\n+            }\n+          ],\n+          unreadMessages: 0,\n+          messages: [],\n+          isGroup: false,\n+        },\n+      },\n+      update: (store, { data: { addChat } }) => {\n+        // Read the data from our cache for this query.\n+        const {chats}: GetChats.Query = store.readQuery({\n+          query: getChatsQuery,\n+          variables: <GetChats.Variables>{\n+            amount: this.messagesAmount,\n+          },\n+        });\n+        // Add our comment from the mutation to the end.\n+        chats.push(addChat);\n+        // Write our data back to the cache.\n+        store.writeQuery({\n+          query: getChatsQuery,\n+          variables: <GetChats.Variables>{\n+            amount: this.messagesAmount,\n+          },\n+          data: {\n+            chats,\n+          },\n+        });\n+      },\n+    }).pipe(share());\n+    return this.addChat$;\n+  }\n+\n+  addGroup(recipientIds: string[], groupName: string, ouiId: string) {\n+    this.addChat$ = this.apollo.mutate({\n+      mutation: addGroupMutation,\n+      variables: <AddGroup.Variables>{\n+        recipientIds,\n+        groupName,\n+      },\n+      optimisticResponse: {\n+        __typename: 'Mutation',\n+        addGroup: {\n+          id: ouiId,\n+          __typename: 'Chat',\n+          name: groupName,\n+          picture: 'https://randomuser.me/api/portraits/thumb/lego/1.jpg',\n+          userIds: [this.loginService.getUser().id, recipientIds],\n+          allTimeMembers: [\n+            {\n+              id: this.loginService.getUser().id,\n+              __typename: 'User',\n+            },\n+            ...recipientIds.map(id => ({id, __typename: 'User'})),\n+          ],\n+          unreadMessages: 0,\n+          messages: [],\n+          isGroup: true,\n+        },\n+      },\n+      update: (store, { data: { addGroup } }) => {\n+        // Read the data from our cache for this query.\n+        const {chats}: GetChats.Query = store.readQuery({\n+          query: getChatsQuery,\n+          variables: <GetChats.Variables>{\n+            amount: this.messagesAmount,\n+          },\n+        });\n+        // Add our comment from the mutation to the end.\n+        chats.push(addGroup);\n+        // Write our data back to the cache.\n+        store.writeQuery({\n+          query: getChatsQuery,\n+          variables: <GetChats.Variables>{\n+            amount: this.messagesAmount,\n+          },\n+          data: {\n+            chats,\n+          },\n+        });\n+      },\n+    }).pipe(share());\n+    return this.addChat$;\n+  }\n+}\ndiff --git a/client/src/app/shared/components/confirm-selection/confirm-selection.component.scss b/client/src/app/shared/components/confirm-selection/confirm-selection.component.scss\nnew file mode 100644\nindex 0000000..7809636\n--- /dev/null\n+++ b/client/src/app/shared/components/confirm-selection/confirm-selection.component.scss\n@@ -0,0 +1,6 @@\n+:host {\n+  display: block;\n+  position: absolute;\n+  bottom: 5vw;\n+  right: 5vw;\n+}\ndiff --git a/client/src/app/shared/components/confirm-selection/confirm-selection.component.ts b/client/src/app/shared/components/confirm-selection/confirm-selection.component.ts\nnew file mode 100644\nindex 0000000..26bd9a9\n--- /dev/null\n+++ b/client/src/app/shared/components/confirm-selection/confirm-selection.component.ts\n@@ -0,0 +1,21 @@\n+import {Component, EventEmitter, Input, Output} from '@angular/core';\n+\n+@Component({\n+  selector: 'app-confirm-selection',\n+  template: `\n+    <button mat-fab color=\"primary\" (click)=\"handleClick()\">\n+      <mat-icon aria-label=\"Icon-button\">{{ icon }}</mat-icon>\n+    </button>\n+  `,\n+  styleUrls: ['./confirm-selection.component.scss'],\n+})\n+export class ConfirmSelectionComponent {\n+  @Input()\n+  icon = 'delete';\n+  @Output()\n+  emitClick = new EventEmitter<null>();\n+\n+  handleClick() {\n+    this.emitClick.emit();\n+  }\n+}\ndiff --git a/client/src/app/shared/components/toolbar/toolbar.component.scss b/client/src/app/shared/components/toolbar/toolbar.component.scss\nnew file mode 100644\nindex 0000000..974207c\n--- /dev/null\n+++ b/client/src/app/shared/components/toolbar/toolbar.component.scss\n@@ -0,0 +1,13 @@\n+:host {\n+  display: block;\n+  height: 8vh;\n+}\n+\n+.mat-toolbar {\n+  justify-content: space-between;\n+  height: 100%;\n+\n+  .left-block {\n+    display: flex;\n+  }\n+}\ndiff --git a/client/src/app/shared/components/toolbar/toolbar.component.ts b/client/src/app/shared/components/toolbar/toolbar.component.ts\nnew file mode 100644\nindex 0000000..d986d30\n--- /dev/null\n+++ b/client/src/app/shared/components/toolbar/toolbar.component.ts\n@@ -0,0 +1,18 @@\n+import {Component} from '@angular/core';\n+\n+@Component({\n+  selector: 'app-toolbar',\n+  template: `\n+    <mat-toolbar>\n+      <div class=\"left-block\">\n+        <ng-content select=\".navigation\"></ng-content>\n+        <ng-content select=\".title\"></ng-content>\n+      </div>\n+      <ng-content select=\".menu\"></ng-content>\n+    </mat-toolbar>\n+  `,\n+  styleUrls: ['./toolbar.component.scss']\n+})\n+export class ToolbarComponent {\n+\n+}\ndiff --git a/client/src/app/shared/shared.module.ts b/client/src/app/shared/shared.module.ts\nnew file mode 100644\nindex 0000000..5d48eea\n--- /dev/null\n+++ b/client/src/app/shared/shared.module.ts\n@@ -0,0 +1,33 @@\n+import {BrowserModule} from '@angular/platform-browser';\n+import {NgModule} from '@angular/core';\n+\n+import {MatButtonModule, MatIconModule, MatToolbarModule} from '@angular/material';\n+import {ToolbarComponent} from './components/toolbar/toolbar.component';\n+import {FormsModule} from '@angular/forms';\n+import {BrowserAnimationsModule} from '@angular/platform-browser/animations';\n+import {ConfirmSelectionComponent} from './components/confirm-selection/confirm-selection.component';\n+\n+@NgModule({\n+  declarations: [\n+    ToolbarComponent,\n+    ConfirmSelectionComponent,\n+  ],\n+  imports: [\n+    BrowserModule,\n+    // Material\n+    MatToolbarModule,\n+    MatIconModule,\n+    MatButtonModule,\n+    // Animations\n+    BrowserAnimationsModule,\n+    // Forms\n+    FormsModule,\n+  ],\n+  providers: [],\n+  exports: [\n+    ToolbarComponent,\n+    ConfirmSelectionComponent,\n+  ],\n+})\n+export class SharedModule {\n+}\ndiff --git a/client/src/assets/.gitkeep b/client/src/assets/.gitkeep\nnew file mode 100644\nindex 0000000..e69de29\ndiff --git a/client/src/environments/environment.prod.ts b/client/src/environments/environment.prod.ts\nnew file mode 100644\nindex 0000000..3612073\n--- /dev/null\n+++ b/client/src/environments/environment.prod.ts\n@@ -0,0 +1,3 @@\n+export const environment = {\n+  production: true\n+};\ndiff --git a/client/src/environments/environment.ts b/client/src/environments/environment.ts\nnew file mode 100644\nindex 0000000..b7f639a\n--- /dev/null\n+++ b/client/src/environments/environment.ts\n@@ -0,0 +1,8 @@\n+// The file contents for the current environment will overwrite these during build.\n+// The build system defaults to the dev environment which uses `environment.ts`, but if you do\n+// `ng build --env=prod` then `environment.prod.ts` will be used instead.\n+// The list of which env maps to which file can be found in `.angular-cli.json`.\n+\n+export const environment = {\n+  production: false\n+};\ndiff --git a/client/src/favicon.ico b/client/src/favicon.ico\nnew file mode 100644\nindex 0000000..8081c7c\nBinary files /dev/null and b/client/src/favicon.ico differ\ndiff --git a/client/src/graphql/addChat.mutation.ts b/client/src/graphql/addChat.mutation.ts\nnew file mode 100644\nindex 0000000..cf33eba\n--- /dev/null\n+++ b/client/src/graphql/addChat.mutation.ts\n@@ -0,0 +1,17 @@\n+import gql from 'graphql-tag';\n+import {fragments} from './fragment';\n+\n+// We use the gql tag to parse our query string into a query document\n+export const addChatMutation = gql`\n+  mutation AddChat($recipientId: ID!) {\n+    addChat(recipientId: $recipientId) {\n+      ...ChatWithoutMessages\n+      messages {\n+        ...Message\n+      }\n+    }\n+  }\n+\n+  ${fragments['chatWithoutMessages']}\n+  ${fragments['message']}\n+`;\ndiff --git a/client/src/graphql/addGroup.mutation.ts b/client/src/graphql/addGroup.mutation.ts\nnew file mode 100644\nindex 0000000..8fb2362\n--- /dev/null\n+++ b/client/src/graphql/addGroup.mutation.ts\n@@ -0,0 +1,17 @@\n+import gql from 'graphql-tag';\n+import {fragments} from './fragment';\n+\n+// We use the gql tag to parse our query string into a query document\n+export const addGroupMutation = gql`\n+  mutation AddGroup($recipientIds: [ID!]!, $groupName: String!) {\n+    addGroup(recipientIds: $recipientIds, groupName: $groupName) {\n+      ...ChatWithoutMessages\n+      messages {\n+        ...Message\n+      }\n+    }\n+  }\n+\n+  ${fragments['chatWithoutMessages']}\n+  ${fragments['message']}\n+`;\ndiff --git a/client/src/graphql/addMessage.mutation.ts b/client/src/graphql/addMessage.mutation.ts\nnew file mode 100644\nindex 0000000..abcd58d\n--- /dev/null\n+++ b/client/src/graphql/addMessage.mutation.ts\n@@ -0,0 +1,13 @@\n+import gql from 'graphql-tag';\n+import {fragments} from './fragment';\n+\n+// We use the gql tag to parse our query string into a query document\n+export const addMessageMutation = gql`\n+  mutation AddMessage($chatId: ID!, $content: String!) {\n+    addMessage(chatId: $chatId, content: $content) {\n+      ...Message\n+    }\n+  }\n+\n+  ${fragments['message']}\n+`;\ndiff --git a/client/src/graphql/chatAdded.subscription.ts b/client/src/graphql/chatAdded.subscription.ts\nnew file mode 100644\nindex 0000000..9f6afe5\n--- /dev/null\n+++ b/client/src/graphql/chatAdded.subscription.ts\n@@ -0,0 +1,17 @@\n+import gql from 'graphql-tag';\n+import {fragments} from './fragment';\n+\n+// We use the gql tag to parse our query string into a query document\n+export const chatAddedSubscription = gql`\n+  subscription chatAdded {\n+    chatAdded {\n+      ...ChatWithoutMessages\n+      messages {\n+        ...Message\n+      }\n+    }\n+  }\n+\n+  ${fragments['chatWithoutMessages']}\n+  ${fragments['message']}\n+`;\ndiff --git a/client/src/graphql/fragment.ts b/client/src/graphql/fragment.ts\nnew file mode 100644\nindex 0000000..fae680e\n--- /dev/null\n+++ b/client/src/graphql/fragment.ts\n@@ -0,0 +1,51 @@\n+import gql from 'graphql-tag';\n+import {DocumentNode} from 'graphql';\n+\n+export const fragments: {\n+  [key: string]: DocumentNode\n+} = {\n+  chatWithoutMessages: gql`\n+    fragment ChatWithoutMessages on Chat {\n+      id\n+      name\n+      picture\n+      allTimeMembers {\n+        id\n+      }\n+      unreadMessages\n+      isGroup\n+    }\n+  `,\n+  message: gql`\n+    fragment Message on Message {\n+      id\n+      chat {\n+        id\n+      }\n+      sender {\n+        id\n+        name\n+      }\n+      content\n+      createdAt\n+      type\n+      recipients {\n+        user {\n+          id\n+        }\n+        message {\n+          id\n+          chat {\n+            id\n+          }\n+        }\n+        chat {\n+          id\n+        }\n+        receivedAt\n+        readAt\n+      }\n+      ownership\n+    }\n+  `,\n+};\ndiff --git a/client/src/graphql/getChat.query.ts b/client/src/graphql/getChat.query.ts\nnew file mode 100644\nindex 0000000..621c4b9\n--- /dev/null\n+++ b/client/src/graphql/getChat.query.ts\n@@ -0,0 +1,17 @@\n+import gql from 'graphql-tag';\n+import {fragments} from './fragment';\n+\n+// We use the gql tag to parse our query string into a query document\n+export const getChatQuery = gql`\n+  query GetChat($chatId: ID!) {\n+    chat(chatId: $chatId) {\n+      ...ChatWithoutMessages\n+      messages {\n+        ...Message\n+      }\n+    }\n+  }\n+\n+  ${fragments['chatWithoutMessages']}\n+  ${fragments['message']}\n+`;\ndiff --git a/client/src/graphql/getChats.query.ts b/client/src/graphql/getChats.query.ts\nnew file mode 100644\nindex 0000000..44e6d96\n--- /dev/null\n+++ b/client/src/graphql/getChats.query.ts\n@@ -0,0 +1,17 @@\n+import gql from 'graphql-tag';\n+import {fragments} from './fragment';\n+\n+// We use the gql tag to parse our query string into a query document\n+export const getChatsQuery = gql`\n+  query GetChats($amount: Int) {\n+    chats {\n+      ...ChatWithoutMessages\n+      messages(amount: $amount) {\n+        ...Message\n+      }\n+    }\n+  }\n+\n+  ${fragments['chatWithoutMessages']}\n+  ${fragments['message']}\n+`;\ndiff --git a/client/src/graphql/getUsers.query.ts b/client/src/graphql/getUsers.query.ts\nnew file mode 100644\nindex 0000000..ddb62a6\n--- /dev/null\n+++ b/client/src/graphql/getUsers.query.ts\n@@ -0,0 +1,12 @@\n+import gql from 'graphql-tag';\n+\n+// We use the gql tag to parse our query string into a query document\n+export const getUsersQuery = gql`\n+  query GetUsers {\n+    users {\n+      id,\n+      name,\n+      picture,\n+    }\n+  }\n+`;\ndiff --git a/client/src/graphql/messageAdded.subscription.ts b/client/src/graphql/messageAdded.subscription.ts\nnew file mode 100644\nindex 0000000..9132e1b\n--- /dev/null\n+++ b/client/src/graphql/messageAdded.subscription.ts\n@@ -0,0 +1,16 @@\n+import gql from 'graphql-tag';\n+import {fragments} from './fragment';\n+\n+// We use the gql tag to parse our query string into a query document\n+export const messageAddedSubscription = gql`\n+  subscription messageAdded($chatId: ID) {\n+    messageAdded(chatId: $chatId) {\n+      ...Message\n+      chat {\n+        id,\n+      },\n+    }\n+  }\n+\n+  ${fragments['message']}\n+`;\ndiff --git a/client/src/graphql/removeAllMessages.mutation.ts b/client/src/graphql/removeAllMessages.mutation.ts\nnew file mode 100644\nindex 0000000..65a89b8\n--- /dev/null\n+++ b/client/src/graphql/removeAllMessages.mutation.ts\n@@ -0,0 +1,8 @@\n+import gql from 'graphql-tag';\n+\n+// We use the gql tag to parse our query string into a query document\n+export const removeAllMessagesMutation = gql`\n+  mutation RemoveAllMessages($chatId: ID!, $all: Boolean) {\n+    removeMessages(chatId: $chatId, all: $all)\n+  }\n+`;\ndiff --git a/client/src/graphql/removeChat.mutation.ts b/client/src/graphql/removeChat.mutation.ts\nnew file mode 100644\nindex 0000000..8f432d5\n--- /dev/null\n+++ b/client/src/graphql/removeChat.mutation.ts\n@@ -0,0 +1,8 @@\n+import gql from 'graphql-tag';\n+\n+// We use the gql tag to parse our query string into a query document\n+export const removeChatMutation = gql`\n+  mutation RemoveChat($chatId: ID!) {\n+    removeChat(chatId: $chatId)\n+  }\n+`;\ndiff --git a/client/src/graphql/removeMessages.mutation.ts b/client/src/graphql/removeMessages.mutation.ts\nnew file mode 100644\nindex 0000000..f5c676f\n--- /dev/null\n+++ b/client/src/graphql/removeMessages.mutation.ts\n@@ -0,0 +1,8 @@\n+import gql from 'graphql-tag';\n+\n+// We use the gql tag to parse our query string into a query document\n+export const removeMessagesMutation = gql`\n+  mutation RemoveMessages($chatId: ID!, $messageIds: [ID]) {\n+    removeMessages(chatId: $chatId, messageIds: $messageIds)\n+  }\n+`;\ndiff --git a/client/src/index.html b/client/src/index.html\nnew file mode 100644\nindex 0000000..db90117\n--- /dev/null\n+++ b/client/src/index.html\n@@ -0,0 +1,16 @@\n+<!doctype html>\n+<html lang=\"en\">\n+<head>\n+  <meta charset=\"utf-8\">\n+  <title>WhatsappClientAngularcliMaterial</title>\n+  <base href=\"/\">\n+\n+  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1, user-scalable=no\">\n+  <link rel=\"icon\" type=\"image/x-icon\" href=\"favicon.ico\">\n+  <!-- Material icons -->\n+  <link href=\"https://fonts.googleapis.com/icon?family=Material+Icons\" rel=\"stylesheet\">\n+</head>\n+<body>\n+  <app-root></app-root>\n+</body>\n+</html>\ndiff --git a/client/src/main.ts b/client/src/main.ts\nnew file mode 100644\nindex 0000000..27d19d9\n--- /dev/null\n+++ b/client/src/main.ts\n@@ -0,0 +1,15 @@\n+import { enableProdMode } from '@angular/core';\n+import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n+\n+import { AppModule } from './app/app.module';\n+import { environment } from './environments/environment';\n+\n+// Material gestures\n+import 'hammerjs';\n+\n+if (environment.production) {\n+  enableProdMode();\n+}\n+\n+platformBrowserDynamic().bootstrapModule(AppModule)\n+  .catch(err => console.log(err));\ndiff --git a/client/src/polyfills.ts b/client/src/polyfills.ts\nnew file mode 100644\nindex 0000000..af84770\n--- /dev/null\n+++ b/client/src/polyfills.ts\n@@ -0,0 +1,79 @@\n+/**\n+ * This file includes polyfills needed by Angular and is loaded before the app.\n+ * You can add your own extra polyfills to this file.\n+ *\n+ * This file is divided into 2 sections:\n+ *   1. Browser polyfills. These are applied before loading ZoneJS and are sorted by browsers.\n+ *   2. Application imports. Files imported after ZoneJS that should be loaded before your main\n+ *      file.\n+ *\n+ * The current setup is for so-called \"evergreen\" browsers; the last versions of browsers that\n+ * automatically update themselves. This includes Safari >= 10, Chrome >= 55 (including Opera),\n+ * Edge >= 13 on the desktop, and iOS 10 and Chrome on mobile.\n+ *\n+ * Learn more in https://angular.io/docs/ts/latest/guide/browser-support.html\n+ */\n+\n+/***************************************************************************************************\n+ * BROWSER POLYFILLS\n+ */\n+\n+/** IE9, IE10 and IE11 requires all of the following polyfills. **/\n+// import 'core-js/es6/symbol';\n+// import 'core-js/es6/object';\n+// import 'core-js/es6/function';\n+// import 'core-js/es6/parse-int';\n+// import 'core-js/es6/parse-float';\n+// import 'core-js/es6/number';\n+// import 'core-js/es6/math';\n+// import 'core-js/es6/string';\n+// import 'core-js/es6/date';\n+// import 'core-js/es6/array';\n+// import 'core-js/es6/regexp';\n+// import 'core-js/es6/map';\n+// import 'core-js/es6/weak-map';\n+// import 'core-js/es6/set';\n+\n+/** IE10 and IE11 requires the following for NgClass support on SVG elements */\n+// import 'classlist.js';  // Run `npm install --save classlist.js`.\n+\n+/** IE10 and IE11 requires the following for the Reflect API. */\n+// import 'core-js/es6/reflect';\n+\n+\n+/** Evergreen browsers require these. **/\n+// Used for reflect-metadata in JIT. If you use AOT (and only Angular decorators), you can remove.\n+import 'core-js/es7/reflect';\n+\n+\n+/**\n+ * Required to support Web Animations `@angular/platform-browser/animations`.\n+ * Needed for: All but Chrome, Firefox and Opera. http://caniuse.com/#feat=web-animation\n+ **/\n+// import 'web-animations-js';  // Run `npm install --save web-animations-js`.\n+\n+/**\n+ * By default, zone.js will patch all possible macroTask and DomEvents\n+ * user can disable parts of macroTask/DomEvents patch by setting following flags\n+ */\n+\n+ // (window as any).__Zone_disable_requestAnimationFrame = true; // disable patch requestAnimationFrame\n+ // (window as any).__Zone_disable_on_property = true; // disable patch onProperty such as onclick\n+ // (window as any).__zone_symbol__BLACK_LISTED_EVENTS = ['scroll', 'mousemove']; // disable patch specified eventNames\n+\n+ /*\n+ * in IE/Edge developer tools, the addEventListener will also be wrapped by zone.js\n+ * with the following flag, it will bypass `zone.js` patch for IE/Edge\n+ */\n+// (window as any).__Zone_enable_cross_context_check = true;\n+\n+/***************************************************************************************************\n+ * Zone JS is required by default for Angular itself.\n+ */\n+import 'zone.js/dist/zone';  // Included with Angular CLI.\n+\n+\n+\n+/***************************************************************************************************\n+ * APPLICATION IMPORTS\n+ */\ndiff --git a/client/src/styles.scss b/client/src/styles.scss\nnew file mode 100644\nindex 0000000..efd56a4\n--- /dev/null\n+++ b/client/src/styles.scss\n@@ -0,0 +1,8 @@\n+/* You can add global styles to this file, and also import other style files */\n+\n+/* Meterial theme */\n+@import \"~@angular/material/prebuilt-themes/indigo-pink.css\";\n+\n+body {\n+  margin: 0;\n+}\ndiff --git a/client/src/test.ts b/client/src/test.ts\nnew file mode 100644\nindex 0000000..25a1ed7\n--- /dev/null\n+++ b/client/src/test.ts\n@@ -0,0 +1,23 @@\n+// This file is required by karma.conf.js and loads recursively all the .spec and framework files\n+\n+import 'zone.js/dist/zone-testing';\n+import { getTestBed } from '@angular/core/testing';\n+import {\n+  BrowserDynamicTestingModule,\n+  platformBrowserDynamicTesting\n+} from '@angular/platform-browser-dynamic/testing';\n+\n+// Material gestures\n+import 'hammerjs';\n+\n+declare const require: any;\n+\n+// First, initialize the Angular testing environment.\n+getTestBed().initTestEnvironment(\n+  BrowserDynamicTestingModule,\n+  platformBrowserDynamicTesting()\n+);\n+// Then we find all the tests.\n+const context = require.context('./', true, /\\.spec\\.ts$/);\n+// And load the modules.\n+context.keys().map(context);\ndiff --git a/client/src/tsconfig.app.json b/client/src/tsconfig.app.json\nnew file mode 100644\nindex 0000000..39ba8db\n--- /dev/null\n+++ b/client/src/tsconfig.app.json\n@@ -0,0 +1,13 @@\n+{\n+  \"extends\": \"../tsconfig.json\",\n+  \"compilerOptions\": {\n+    \"outDir\": \"../out-tsc/app\",\n+    \"baseUrl\": \"./\",\n+    \"module\": \"es2015\",\n+    \"types\": []\n+  },\n+  \"exclude\": [\n+    \"test.ts\",\n+    \"**/*.spec.ts\"\n+  ]\n+}\ndiff --git a/client/src/tsconfig.spec.json b/client/src/tsconfig.spec.json\nnew file mode 100644\nindex 0000000..ac22a29\n--- /dev/null\n+++ b/client/src/tsconfig.spec.json\n@@ -0,0 +1,19 @@\n+{\n+  \"extends\": \"../tsconfig.json\",\n+  \"compilerOptions\": {\n+    \"outDir\": \"../out-tsc/spec\",\n+    \"baseUrl\": \"./\",\n+    \"module\": \"commonjs\",\n+    \"types\": [\n+      \"jasmine\",\n+      \"node\"\n+    ]\n+  },\n+  \"files\": [\n+    \"test.ts\"\n+  ],\n+  \"include\": [\n+    \"**/*.spec.ts\",\n+    \"**/*.d.ts\"\n+  ]\n+}\ndiff --git a/client/src/types.d.ts b/client/src/types.d.ts\nnew file mode 100644\nindex 0000000..b1986ca\n--- /dev/null\n+++ b/client/src/types.d.ts\n@@ -0,0 +1,321 @@\n+/* tslint:disable */\n+\n+export interface Query {\n+  users: User[]; \n+  chats: Chat[]; \n+  chat?: Chat | null; \n+}\n+\n+export interface User {\n+  id: string; \n+  name?: string | null; \n+  picture?: string | null; \n+  phone?: string | null; \n+}\n+\n+export interface Chat {\n+  id: string; /* May be a chat or a group */\n+  name?: string | null; /* Computed for chats */\n+  picture?: string | null; /* Computed for chats */\n+  allTimeMembers: User[]; /* All members, current and past ones. */\n+  listingMembers: User[]; /* Whoever gets the chat listed. For groups includes past members who still didn&#x27;t delete the group. */\n+  actualGroupMembers: User[]; /* Actual members of the group (they are not the only ones who get the group listed). Null for chats. */\n+  admins: User[]; /* Null for chats */\n+  owner?: User | null; /* If null the group is read-only. Null for chats. */\n+  messages: Message[]; \n+  unreadMessages: number; /* Computed property */\n+  isGroup: boolean; /* Computed property */\n+}\n+\n+export interface Message {\n+  id: string; \n+  sender: User; \n+  chat: Chat; \n+  content: string; \n+  createdAt: string; \n+  type: number; /* FIXME: should return MessageType */\n+  recipients: Recipient[]; /* Whoever received the message */\n+  holders: User[]; /* Whoever still holds a copy of the message. Cannot be null because the message gets deleted otherwise */\n+  ownership: boolean; /* Computed property */\n+}\n+\n+export interface Recipient {\n+  user: User; \n+  message: Message; \n+  receivedAt?: string | null; \n+  readAt?: string | null; \n+}\n+\n+export interface Mutation {\n+  addChat?: Chat | null; \n+  addGroup?: Chat | null; \n+  removeChat?: string | null; \n+  addMessage?: Message | null; \n+  removeMessages?: string[] | null; \n+  addMembers?: string[] | null; \n+  removeMembers?: string[] | null; \n+  addAdmins?: string[] | null; \n+  removeAdmins?: string[] | null; \n+  setGroupName?: string | null; \n+  setGroupPicture?: string | null; \n+  markAsReceived?: boolean | null; \n+  markAsRead?: boolean | null; \n+}\n+\n+export interface Subscription {\n+  messageAdded?: Message | null; \n+  chatAdded?: Chat | null; \n+}\n+export interface ChatQueryArgs {\n+  chatId: string; \n+}\n+export interface MessagesChatArgs {\n+  amount?: number | null; \n+}\n+export interface AddChatMutationArgs {\n+  recipientId: string; \n+}\n+export interface AddGroupMutationArgs {\n+  recipientIds: string[]; \n+  groupName: string; \n+}\n+export interface RemoveChatMutationArgs {\n+  chatId: string; \n+}\n+export interface AddMessageMutationArgs {\n+  chatId: string; \n+  content: string; \n+}\n+export interface RemoveMessagesMutationArgs {\n+  chatId: string; \n+  messageIds?: string[] | null; \n+  all?: boolean | null; \n+}\n+export interface AddMembersMutationArgs {\n+  groupId: string; \n+  userIds: string[]; \n+}\n+export interface RemoveMembersMutationArgs {\n+  groupId: string; \n+  userIds: string[]; \n+}\n+export interface AddAdminsMutationArgs {\n+  groupId: string; \n+  userIds: string[]; \n+}\n+export interface RemoveAdminsMutationArgs {\n+  groupId: string; \n+  userIds: string[]; \n+}\n+export interface SetGroupNameMutationArgs {\n+  groupId: string; \n+}\n+export interface SetGroupPictureMutationArgs {\n+  groupId: string; \n+}\n+export interface MarkAsReceivedMutationArgs {\n+  chatId: string; \n+}\n+export interface MarkAsReadMutationArgs {\n+  chatId: string; \n+}\n+export interface MessageAddedSubscriptionArgs {\n+  chatId?: string | null; \n+}\n+\n+export type MessageType = \"LOCATION\" | \"TEXT\" | \"PICTURE\";\n+\n+export namespace AddChat {\n+  export type Variables = {\n+    recipientId: string;\n+  }\n+\n+  export type Mutation = {\n+    addChat?: AddChat | null; \n+  } \n+\n+  export type AddChat = {\n+    messages: Messages[]; \n+  } & ChatWithoutMessages.Fragment\n+\n+  export type Messages = Message.Fragment\n+}\n+export namespace AddGroup {\n+  export type Variables = {\n+    recipientIds: string[];\n+    groupName: string;\n+  }\n+\n+  export type Mutation = {\n+    addGroup?: AddGroup | null; \n+  } \n+\n+  export type AddGroup = {\n+    messages: Messages[]; \n+  } & ChatWithoutMessages.Fragment\n+\n+  export type Messages = Message.Fragment\n+}\n+export namespace AddMessage {\n+  export type Variables = {\n+    chatId: string;\n+    content: string;\n+  }\n+\n+  export type Mutation = {\n+    addMessage?: AddMessage | null; \n+  } \n+\n+  export type AddMessage = Message.Fragment\n+}\n+export namespace ChatAdded {\n+  export type Variables = {\n+  }\n+\n+  export type Subscription = {\n+    chatAdded?: ChatAdded | null; \n+  } \n+\n+  export type ChatAdded = {\n+    messages: Messages[]; \n+  } & ChatWithoutMessages.Fragment\n+\n+  export type Messages = Message.Fragment\n+}\n+export namespace GetChat {\n+  export type Variables = {\n+    chatId: string;\n+  }\n+\n+  export type Query = {\n+    chat?: Chat | null; \n+  } \n+\n+  export type Chat = {\n+    messages: Messages[]; \n+  } & ChatWithoutMessages.Fragment\n+\n+  export type Messages = Message.Fragment\n+}\n+export namespace GetChats {\n+  export type Variables = {\n+    amount?: number | null;\n+  }\n+\n+  export type Query = {\n+    chats: Chats[]; \n+  } \n+\n+  export type Chats = {\n+    messages: Messages[]; \n+  } & ChatWithoutMessages.Fragment\n+\n+  export type Messages = Message.Fragment\n+}\n+export namespace GetUsers {\n+  export type Variables = {\n+  }\n+\n+  export type Query = {\n+    users: Users[]; \n+  } \n+\n+  export type Users = {\n+    id: string; \n+    name?: string | null; \n+    picture?: string | null; \n+  } \n+}\n+export namespace MessageAdded {\n+  export type Variables = {\n+    chatId?: string | null;\n+  }\n+\n+  export type Subscription = {\n+    messageAdded?: MessageAdded | null; \n+  } \n+\n+  export type MessageAdded = {\n+    chat: Chat; \n+  } & Message.Fragment\n+\n+  export type Chat = {\n+    id: string; \n+  } \n+}\n+export namespace RemoveAllMessages {\n+  export type Variables = {\n+    chatId: string;\n+    all?: boolean | null;\n+  }\n+\n+  export type Mutation = {\n+    removeMessages?: string[] | null; \n+  } \n+}\n+export namespace RemoveChat {\n+  export type Variables = {\n+    chatId: string;\n+  }\n+\n+  export type Mutation = {\n+    removeChat?: string | null; \n+  } \n+}\n+export namespace RemoveMessages {\n+  export type Variables = {\n+    chatId: string;\n+    messageIds?: string[] | null;\n+  }\n+\n+  export type Mutation = {\n+    removeMessages?: string[] | null; \n+  } \n+}\n+\n+export namespace ChatWithoutMessages {\n+  export type Fragment = {\n+    id: string; \n+    name?: string | null; \n+    picture?: string | null; \n+    allTimeMembers: AllTimeMembers[]; \n+    unreadMessages: number; \n+    isGroup: boolean; \n+  } \n+\n+  export type AllTimeMembers = {\n+    id: string; \n+  } \n+}\n+\n+export namespace Message {\n+  export type Fragment = {\n+    id: string; \n+    sender: Sender; \n+    content: string; \n+    createdAt: string; \n+    type: number; \n+    recipients: Recipients[]; \n+    ownership: boolean; \n+  } \n+\n+  export type Sender = {\n+    id: string; \n+    name?: string | null; \n+  } \n+\n+  export type Recipients = {\n+    user: User; \n+    message: Message; \n+    receivedAt?: string | null; \n+    readAt?: string | null; \n+  } \n+\n+  export type User = {\n+    id: string; \n+  } \n+\n+  export type Message = {\n+    id: string; \n+  } \n+}\ndiff --git a/client/src/typings.d.ts b/client/src/typings.d.ts\nnew file mode 100644\nindex 0000000..ef5c7bd\n--- /dev/null\n+++ b/client/src/typings.d.ts\n@@ -0,0 +1,5 @@\n+/* SystemJS module definition */\n+declare var module: NodeModule;\n+interface NodeModule {\n+  id: string;\n+}\ndiff --git a/client/tsconfig.json b/client/tsconfig.json\nnew file mode 100644\nindex 0000000..d8195f3\n--- /dev/null\n+++ b/client/tsconfig.json\n@@ -0,0 +1,21 @@\n+{\n+  \"compileOnSave\": false,\n+  \"compilerOptions\": {\n+    \"outDir\": \"./dist/out-tsc\",\n+    \"sourceMap\": true,\n+    \"declaration\": false,\n+    \"moduleResolution\": \"node\",\n+    \"emitDecoratorMetadata\": true,\n+    \"experimentalDecorators\": true,\n+    \"downlevelIteration\": true,\n+    \"target\": \"es5\",\n+    \"typeRoots\": [\n+      \"node_modules/@types\"\n+    ],\n+    \"lib\": [\n+      \"es2017\",\n+      \"dom\",\n+      \"esnext.asynciterable\"\n+    ]\n+  }\n+}\ndiff --git a/client/tslint.json b/client/tslint.json\nnew file mode 100644\nindex 0000000..9963d6c\n--- /dev/null\n+++ b/client/tslint.json\n@@ -0,0 +1,143 @@\n+{\n+  \"rulesDirectory\": [\n+    \"node_modules/codelyzer\"\n+  ],\n+  \"rules\": {\n+    \"arrow-return-shorthand\": true,\n+    \"callable-types\": true,\n+    \"class-name\": true,\n+    \"comment-format\": [\n+      true,\n+      \"check-space\"\n+    ],\n+    \"curly\": true,\n+    \"deprecation\": {\n+      \"severity\": \"warn\"\n+    },\n+    \"eofline\": true,\n+    \"forin\": true,\n+    \"import-blacklist\": [\n+      true,\n+      \"rxjs\",\n+      \"rxjs/Rx\"\n+    ],\n+    \"import-spacing\": true,\n+    \"indent\": [\n+      true,\n+      \"spaces\"\n+    ],\n+    \"interface-over-type-literal\": true,\n+    \"label-position\": true,\n+    \"max-line-length\": [\n+      true,\n+      140\n+    ],\n+    \"member-access\": false,\n+    \"member-ordering\": [\n+      true,\n+      {\n+        \"order\": [\n+          \"static-field\",\n+          \"instance-field\",\n+          \"static-method\",\n+          \"instance-method\"\n+        ]\n+      }\n+    ],\n+    \"no-arg\": true,\n+    \"no-bitwise\": true,\n+    \"no-console\": [\n+      true,\n+      \"debug\",\n+      \"info\",\n+      \"time\",\n+      \"timeEnd\",\n+      \"trace\"\n+    ],\n+    \"no-construct\": true,\n+    \"no-debugger\": true,\n+    \"no-duplicate-super\": true,\n+    \"no-empty\": false,\n+    \"no-empty-interface\": true,\n+    \"no-eval\": true,\n+    \"no-inferrable-types\": [\n+      true,\n+      \"ignore-params\"\n+    ],\n+    \"no-misused-new\": true,\n+    \"no-non-null-assertion\": true,\n+    \"no-shadowed-variable\": true,\n+    \"no-string-literal\": false,\n+    \"no-string-throw\": true,\n+    \"no-switch-case-fall-through\": true,\n+    \"no-trailing-whitespace\": true,\n+    \"no-unnecessary-initializer\": true,\n+    \"no-unused-expression\": true,\n+    \"no-use-before-declare\": true,\n+    \"no-var-keyword\": true,\n+    \"object-literal-sort-keys\": false,\n+    \"one-line\": [\n+      true,\n+      \"check-open-brace\",\n+      \"check-catch\",\n+      \"check-else\",\n+      \"check-whitespace\"\n+    ],\n+    \"prefer-const\": true,\n+    \"quotemark\": [\n+      true,\n+      \"single\"\n+    ],\n+    \"radix\": true,\n+    \"semicolon\": [\n+      true,\n+      \"always\"\n+    ],\n+    \"triple-equals\": [\n+      true,\n+      \"allow-null-check\"\n+    ],\n+    \"typedef-whitespace\": [\n+      true,\n+      {\n+        \"call-signature\": \"nospace\",\n+        \"index-signature\": \"nospace\",\n+        \"parameter\": \"nospace\",\n+        \"property-declaration\": \"nospace\",\n+        \"variable-declaration\": \"nospace\"\n+      }\n+    ],\n+    \"unified-signatures\": true,\n+    \"variable-name\": false,\n+    \"whitespace\": [\n+      true,\n+      \"check-branch\",\n+      \"check-decl\",\n+      \"check-operator\",\n+      \"check-separator\",\n+      \"check-type\"\n+    ],\n+    \"directive-selector\": [\n+      true,\n+      \"attribute\",\n+      \"app\",\n+      \"camelCase\"\n+    ],\n+    \"component-selector\": [\n+      true,\n+      \"element\",\n+      \"app\",\n+      \"kebab-case\"\n+    ],\n+    \"no-output-on-prefix\": true,\n+    \"use-input-property-decorator\": true,\n+    \"use-output-property-decorator\": true,\n+    \"use-host-property-decorator\": true,\n+    \"no-input-rename\": true,\n+    \"no-output-rename\": true,\n+    \"use-life-cycle-interface\": true,\n+    \"use-pipe-transform-interface\": true,\n+    \"component-class-suffix\": true,\n+    \"directive-class-suffix\": true\n+  }\n+}\ndiff --git a/package.json b/package.json\nnew file mode 100644\nindex 0000000..b1d25d1\n--- /dev/null\n+++ b/package.json\n@@ -0,0 +1,5 @@\n+{\n+  \"name\": \"whatsapp-textrepo-angularcli-express\",\n+  \"description\": \"A newly created Tortilla project\",\n+  \"private\": true\n+}\ndiff --git a/server/.gitignore b/server/.gitignore\nnew file mode 100644\nindex 0000000..e23c92b\n--- /dev/null\n+++ b/server/.gitignore\n@@ -0,0 +1,4 @@\n+node_modules\n+npm-debug.log\n+.idea\n+package-lock.json\ndiff --git a/server/db.ts b/server/db.ts\nnew file mode 100644\nindex 0000000..d8d4d55\n--- /dev/null\n+++ b/server/db.ts\n@@ -0,0 +1,292 @@\n+// For TypeORM\n+import \"reflect-metadata\";\n+import { Chat } from \"./entity/Chat\";\n+import { Recipient } from \"./entity/Recipient\";\n+import * as moment from 'moment';\n+import { Message } from \"./entity/Message\";\n+import { User } from \"./entity/User\";\n+import { Connection } from \"typeorm\";\n+\n+export enum MessageType {\n+  PICTURE,\n+  TEXT,\n+  LOCATION,\n+}\n+\n+export async function addSampleData(connection: Connection) {\n+  const user1 = new User({\n+    username: 'ethan',\n+    password: '$2a$08$NO9tkFLCoSqX1c5wk3s7z.JfxaVMKA.m7zUDdDwEquo4rvzimQeJm', // 111\n+    name: 'Ethan Gonzalez',\n+    picture: 'https://randomuser.me/api/portraits/thumb/men/1.jpg',\n+    phone: '+391234567890',\n+  });\n+  await connection.manager.save(user1);\n+\n+  const user2 = new User({\n+    username: 'bryan',\n+    password: '$2a$08$xE4FuCi/ifxjL2S8CzKAmuKLwv18ktksSN.F3XYEnpmcKtpbpeZgO', // 222\n+    name: 'Bryan Wallace',\n+    picture: 'https://randomuser.me/api/portraits/thumb/men/2.jpg',\n+    phone: '+391234567891',\n+  });\n+  await connection.manager.save(user2);\n+\n+  const user3 = new User({\n+    username: 'avery',\n+    password: '$2a$08$UHgH7J8G6z1mGQn2qx2kdeWv0jvgHItyAsL9hpEUI3KJmhVW5Q1d.', // 333\n+    name: 'Avery Stewart',\n+    picture: 'https://randomuser.me/api/portraits/thumb/women/1.jpg',\n+    phone: '+391234567892',\n+  });\n+  await connection.manager.save(user3);\n+\n+  const user4 = new User({\n+    username: 'katie',\n+    password: '$2a$08$wR1k5Q3T9FC7fUgB7Gdb9Os/GV7dGBBf4PLlWT7HERMFhmFDt47xi', // 444\n+    name: 'Katie Peterson',\n+    picture: 'https://randomuser.me/api/portraits/thumb/women/2.jpg',\n+    phone: '+391234567893',\n+  });\n+  await connection.manager.save(user4);\n+\n+  const user5 = new User({\n+    username: 'ray',\n+    password: '$2a$08$6.mbXqsDX82ZZ7q5d8Osb..JrGSsNp4R3IKj7mxgF6YGT0OmMw242', // 555\n+    name: 'Ray Edwards',\n+    picture: 'https://randomuser.me/api/portraits/thumb/men/3.jpg',\n+    phone: '+391234567894',\n+  });\n+  await connection.manager.save(user5);\n+\n+  const user6 = new User({\n+    username: 'niko',\n+    password: '$2a$08$fL5lZR.Rwf9FWWe8XwwlceiPBBim8n9aFtaem.INQhiKT4.Ux3Uq.', // 666\n+    name: 'Niccolò Belli',\n+    picture: 'https://randomuser.me/api/portraits/thumb/men/4.jpg',\n+    phone: '+391234567895',\n+  });\n+  await connection.manager.save(user6);\n+\n+  const user7 = new User({\n+    username: 'mario',\n+    password: '$2a$08$nDHDmWcVxDnH5DDT3HMMC.psqcnu6wBiOgkmJUy9IH..qxa3R6YrO', // 777\n+    name: 'Mario Rossi',\n+    picture: 'https://randomuser.me/api/portraits/thumb/men/5.jpg',\n+    phone: '+391234567896',\n+  });\n+  await connection.manager.save(user7);\n+\n+\n+\n+\n+  await connection.manager.save(new Chat({\n+    allTimeMembers: [user1, user3],\n+    listingMembers: [user1, user3],\n+    messages: [\n+      new Message({\n+        sender: user1,\n+        content: 'You on your way?',\n+        createdAt: moment().subtract(1, 'hours').toDate(),\n+        type: MessageType.TEXT,\n+        holders: [user1, user3],\n+        recipients: [\n+          new Recipient({\n+            user: user3,\n+          }),\n+        ],\n+      }),\n+      new Message({\n+        sender: user3,\n+        content: 'Yep!',\n+        createdAt: moment().subtract(1, 'hours').add(5, 'minutes').toDate(),\n+        type: MessageType.TEXT,\n+        holders: [user1, user3],\n+        recipients: [\n+          new Recipient({\n+            user: user1,\n+          }),\n+        ],\n+      }),\n+    ],\n+  }));\n+\n+  await connection.manager.save(new Chat({\n+    allTimeMembers: [user1, user4],\n+    listingMembers: [user1, user4],\n+    messages: [\n+      new Message({\n+        sender: user1,\n+        content: 'Hey, it\\'s me',\n+        createdAt: moment().subtract(2, 'hours').toDate(),\n+        type: MessageType.TEXT,\n+        holders: [user1, user4],\n+        recipients: [\n+          new Recipient({\n+            user: user4,\n+          }),\n+        ],\n+      }),\n+    ],\n+  }));\n+\n+  await connection.manager.save(new Chat({\n+    allTimeMembers: [user1, user5],\n+    listingMembers: [user1, user5],\n+    messages: [\n+      new Message({\n+        sender: user1,\n+        content: 'I should buy a boat',\n+        createdAt: moment().subtract(1, 'days').toDate(),\n+        type: MessageType.TEXT,\n+        holders: [user1, user5],\n+        recipients: [\n+          new Recipient({\n+            user: user5,\n+          }),\n+        ],\n+      }),\n+      new Message({\n+        sender: user1,\n+        content: 'You still there?',\n+        createdAt: moment().subtract(1, 'days').add(16, 'hours').toDate(),\n+        type: MessageType.TEXT,\n+        holders: [user1, user5],\n+        recipients: [\n+          new Recipient({\n+            user: user5,\n+          }),\n+        ],\n+      }),\n+    ],\n+  }));\n+\n+  await connection.manager.save(new Chat({\n+    allTimeMembers: [user3, user4],\n+    listingMembers: [user3, user4],\n+    messages: [\n+      new Message({\n+        sender: user3,\n+        content: 'Look at my mukluks!',\n+        createdAt: moment().subtract(4, 'days').toDate(),\n+        type: MessageType.TEXT,\n+        holders: [user3, user4],\n+        recipients: [\n+          new Recipient({\n+            user: user4,\n+          }),\n+        ],\n+      }),\n+    ],\n+  }));\n+\n+  await connection.manager.save(new Chat({\n+    allTimeMembers: [user2, user5],\n+    listingMembers: [user2, user5],\n+    messages: [\n+      new Message({\n+        sender: user2,\n+        content: 'This is wicked good ice cream.',\n+        createdAt: moment().subtract(2, 'weeks').toDate(),\n+        type: MessageType.TEXT,\n+        holders: [user2, user5],\n+        recipients: [\n+          new Recipient({\n+            user: user5,\n+          }),\n+        ],\n+      }),\n+      new Message({\n+        sender: user5,\n+        content: 'Love it!',\n+        createdAt: moment().subtract(2, 'weeks').add(10, 'minutes').toDate(),\n+        type: MessageType.TEXT,\n+        holders: [user2, user5],\n+        recipients: [\n+          new Recipient({\n+            user: user2,\n+          }),\n+        ],\n+      }),\n+    ],\n+  }));\n+\n+  await connection.manager.save(new Chat({\n+    allTimeMembers: [user1, user6],\n+    listingMembers: [user1],\n+  }));\n+\n+  await connection.manager.save(new Chat({\n+    allTimeMembers: [user2, user1],\n+    listingMembers: [user2],\n+  }));\n+\n+  await connection.manager.save(new Chat({\n+    name: 'Ethan\\'s group',\n+    picture: 'https://randomuser.me/api/portraits/thumb/lego/1.jpg',\n+    allTimeMembers: [user1, user3, user4, user6],\n+    listingMembers: [user1, user3, user4, user6],\n+    actualGroupMembers: [user1, user4, user6],\n+    admins: [user1, user6],\n+    owner: user1,\n+    messages: [\n+      new Message({\n+        sender: user1,\n+        content: 'I made a group',\n+        createdAt: moment().subtract(2, 'weeks').toDate(),\n+        type: MessageType.TEXT,\n+        holders: [user1, user3, user4, user6],\n+        recipients: [\n+          new Recipient({\n+            user: user3,\n+          }),\n+          new Recipient({\n+            user: user4,\n+          }),\n+          new Recipient({\n+            user: user6,\n+          }),\n+        ],\n+      }),\n+      new Message({\n+        sender: user1,\n+        content: 'Ops, Avery was not supposed to be here',\n+        createdAt: moment().subtract(2, 'weeks').add(2, 'minutes').toDate(),\n+        type: MessageType.TEXT,\n+        holders: [user1, user4, user6],\n+        recipients: [\n+          new Recipient({\n+            user: user4,\n+          }),\n+          new Recipient({\n+            user: user6,\n+          }),\n+        ],\n+      }),\n+      new Message({\n+        sender: user4,\n+        content: 'Awesome!',\n+        createdAt: moment().subtract(2, 'weeks').add(10, 'minutes').toDate(),\n+        type: MessageType.TEXT,\n+        holders: [user1, user4, user6],\n+        recipients: [\n+          new Recipient({\n+            user: user1,\n+          }),\n+          new Recipient({\n+            user: user6,\n+          }),\n+        ],\n+      }),\n+    ],\n+  }));\n+\n+  await connection.manager.save(new Chat({\n+    name: 'Ray\\'s group',\n+    allTimeMembers: [user3, user6],\n+    listingMembers: [user3, user6],\n+    actualGroupMembers: [user3, user6],\n+    admins: [user6],\n+    owner: user6,\n+  }));\n+}\ndiff --git a/server/entity/Chat.ts b/server/entity/Chat.ts\nnew file mode 100644\nindex 0000000..827aa59\n--- /dev/null\n+++ b/server/entity/Chat.ts\n@@ -0,0 +1,79 @@\n+import { Entity, Column, PrimaryGeneratedColumn, OneToMany, JoinTable, ManyToMany, ManyToOne } from \"typeorm\";\n+import { Message } from \"./Message\";\n+import { User } from \"./User\";\n+import { Recipient } from \"./Recipient\";\n+\n+interface ChatConstructor {\n+  name?: string;\n+  picture?: string;\n+  allTimeMembers?: User[];\n+  listingMembers?: User[];\n+  actualGroupMembers?: User[];\n+  admins?: User[];\n+  owner?: User;\n+  messages?: Message[];\n+}\n+\n+@Entity()\n+export class Chat {\n+  @PrimaryGeneratedColumn()\n+  id: number;\n+\n+  @Column({nullable: true})\n+  name: string;\n+\n+  @Column({nullable: true})\n+  picture: string;\n+\n+  @ManyToMany(type => User, user => user.allTimeMemberChats, {cascade: [\"insert\", \"update\"], eager: false})\n+  @JoinTable()\n+  allTimeMembers: User[];\n+\n+  @ManyToMany(type => User, user => user.listingMemberChats, {cascade: [\"insert\", \"update\"], eager: false})\n+  @JoinTable()\n+  listingMembers: User[];\n+\n+  @ManyToMany(type => User, user => user.actualGroupMemberChats, {cascade: [\"insert\", \"update\"], eager: false})\n+  @JoinTable()\n+  actualGroupMembers?: User[];\n+\n+  @ManyToMany(type => User, user => user.adminChats, {cascade: [\"insert\", \"update\"], eager: false})\n+  @JoinTable()\n+  admins?: User[];\n+\n+  @ManyToOne(type => User, user => user.ownerChats, {cascade: [\"insert\", \"update\"], eager: false})\n+  owner?: User | null;\n+\n+  @OneToMany(type => Message, message => message.chat, {cascade: [\"insert\", \"update\"], eager: true})\n+  messages: Message[];\n+\n+  @OneToMany(type => Recipient, recipient => recipient.chat)\n+  recipients: Recipient[];\n+\n+  constructor({name, picture, allTimeMembers, listingMembers, actualGroupMembers, admins, owner, messages}: ChatConstructor = {}) {\n+    if (name) {\n+      this.name = name;\n+    }\n+    if (picture) {\n+      this.picture = picture;\n+    }\n+    if (allTimeMembers) {\n+      this.allTimeMembers = allTimeMembers;\n+    }\n+    if (listingMembers) {\n+      this.listingMembers = listingMembers;\n+    }\n+    if (actualGroupMembers) {\n+      this.actualGroupMembers = actualGroupMembers;\n+    }\n+    if (admins) {\n+      this.admins = admins;\n+    }\n+    if (owner) {\n+      this.owner = owner;\n+    }\n+    if (messages) {\n+      this.messages = messages;\n+    }\n+  }\n+}\ndiff --git a/server/entity/Message.ts b/server/entity/Message.ts\nnew file mode 100644\nindex 0000000..36f7701\n--- /dev/null\n+++ b/server/entity/Message.ts\n@@ -0,0 +1,70 @@\n+import {\n+  Entity, Column, PrimaryGeneratedColumn, OneToMany, ManyToOne, ManyToMany, JoinTable, CreateDateColumn\n+} from \"typeorm\";\n+import { Chat } from \"./Chat\";\n+import { User } from \"./User\";\n+import { Recipient } from \"./Recipient\";\n+import { MessageType } from \"../db\";\n+\n+interface MessageConstructor {\n+  sender?: User;\n+  content?: string;\n+  createdAt?: Date,\n+  type?: MessageType;\n+  recipients?: Recipient[];\n+  holders?: User[];\n+  chat?: Chat;\n+}\n+\n+@Entity()\n+export class Message {\n+  @PrimaryGeneratedColumn()\n+  id: number;\n+\n+  @ManyToOne(type => User, user => user.senderMessages, {eager: true})\n+  sender: User;\n+\n+  @Column()\n+  content: string;\n+\n+  @CreateDateColumn({nullable: true})\n+  createdAt: Date;\n+\n+  @Column()\n+  type: number;\n+\n+  @OneToMany(type => Recipient, recipient => recipient.message, {cascade: [\"insert\", \"update\"], eager: true})\n+  recipients: Recipient[];\n+\n+  @ManyToMany(type => User, user => user.holderMessages, {cascade: [\"insert\", \"update\"], eager: true})\n+  @JoinTable()\n+  holders: User[];\n+\n+  @ManyToOne(type => Chat, chat => chat.messages)\n+  chat: Chat;\n+\n+  constructor({sender, content, createdAt, type, recipients, holders, chat}: MessageConstructor = {}) {\n+    if (sender) {\n+      this.sender = sender;\n+    }\n+    if (content) {\n+      this.content = content;\n+    }\n+    if (createdAt) {\n+      this.createdAt = createdAt;\n+    }\n+    if (type) {\n+      this.type = type;\n+    }\n+    if (recipients) {\n+      recipients.forEach(recipient => recipient.message = this);\n+      this.recipients = recipients;\n+    }\n+    if (holders) {\n+      this.holders = holders;\n+    }\n+    if (chat) {\n+      this.chat = chat;\n+    }\n+  }\n+}\ndiff --git a/server/entity/Recipient.ts b/server/entity/Recipient.ts\nnew file mode 100644\nindex 0000000..4ad5542\n--- /dev/null\n+++ b/server/entity/Recipient.ts\n@@ -0,0 +1,44 @@\n+import { Entity, ManyToOne, Column } from \"typeorm\";\n+import { Message } from \"./Message\";\n+import { User } from \"./User\";\n+import { Chat } from \"./Chat\";\n+\n+interface RecipientConstructor {\n+  user?: User;\n+  message?: Message;\n+  receivedAt?: Date;\n+  readAt?: Date;\n+}\n+\n+@Entity()\n+export class Recipient {\n+  @ManyToOne(type => User, user => user.recipients, { primary: true })\n+  user: User;\n+\n+  @ManyToOne(type => Message, message => message.recipients, { primary: true })\n+  message: Message;\n+\n+  @ManyToOne(type => Chat, chat => chat.recipients)\n+  chat: Chat;\n+\n+  @Column({nullable: true})\n+  receivedAt: Date;\n+\n+  @Column({nullable: true})\n+  readAt: Date;\n+\n+  constructor({user, message, receivedAt, readAt}: RecipientConstructor = {}) {\n+    if (user) {\n+      this.user = user;\n+    }\n+    if (message) {\n+      this.message = message;\n+    }\n+    if (receivedAt) {\n+      this.receivedAt = receivedAt;\n+    }\n+    if (readAt) {\n+      this.readAt = readAt;\n+    }\n+  }\n+}\ndiff --git a/server/entity/User.ts b/server/entity/User.ts\nnew file mode 100644\nindex 0000000..454ef60\n--- /dev/null\n+++ b/server/entity/User.ts\n@@ -0,0 +1,75 @@\n+import { Entity, Column, PrimaryGeneratedColumn, ManyToMany, OneToMany } from \"typeorm\";\n+import { Chat } from \"./Chat\";\n+import { Message } from \"./Message\";\n+import { Recipient } from \"./Recipient\";\n+\n+interface UserConstructor {\n+  username?: string;\n+  password?: string;\n+  name?: string;\n+  picture?: string;\n+  phone?: string;\n+}\n+\n+@Entity()\n+export class User {\n+  @PrimaryGeneratedColumn()\n+  id: number;\n+\n+  @Column()\n+  username: string;\n+\n+  @Column()\n+  password: string;\n+\n+  @Column()\n+  name: string;\n+\n+  @Column({nullable: true})\n+  picture: string;\n+\n+  @Column({nullable: true})\n+  phone?: string;\n+\n+  @ManyToMany(type => Chat, chat => chat.allTimeMembers)\n+  allTimeMemberChats: Chat[];\n+\n+  @ManyToMany(type => Chat, chat => chat.listingMembers)\n+  listingMemberChats: Chat[];\n+\n+  @ManyToMany(type => Chat, chat => chat.actualGroupMembers)\n+  actualGroupMemberChats: Chat[];\n+\n+  @ManyToMany(type => Chat, chat => chat.admins)\n+  adminChats: Chat[];\n+\n+  @ManyToMany(type => Message, message => message.holders)\n+  holderMessages: Message[];\n+\n+  @OneToMany(type => Chat, chat => chat.owner)\n+  ownerChats: Chat[];\n+\n+  @OneToMany(type => Message, message => message.sender)\n+  senderMessages: Message[];\n+\n+  @OneToMany(type => Recipient, recipient => recipient.user)\n+  recipients: Recipient[];\n+\n+  constructor({username, password, name, picture, phone}: UserConstructor = {}) {\n+    if (username) {\n+      this.username = username;\n+    }\n+    if (password) {\n+      this.password = password;\n+    }\n+    if (name) {\n+      this.name = name;\n+    }\n+    if (picture) {\n+      this.picture = picture;\n+    }\n+    if (phone) {\n+      this.phone = phone;\n+    }\n+  }\n+}\ndiff --git a/server/index.ts b/server/index.ts\nnew file mode 100644\nindex 0000000..f8063a6\n--- /dev/null\n+++ b/server/index.ts\n@@ -0,0 +1,119 @@\n+// For TypeORM\n+import \"reflect-metadata\";\n+import { schema } from \"./schema\";\n+import * as bodyParser from \"body-parser\";\n+import * as cors from 'cors';\n+import * as express from 'express';\n+import { graphiqlExpress, graphqlExpress } from \"apollo-server-express\";\n+import * as passport from \"passport\";\n+import * as basicStrategy from 'passport-http';\n+import * as bcrypt from 'bcrypt-nodejs';\n+import { createServer } from \"http\";\n+import { SubscriptionServer } from \"subscriptions-transport-ws\";\n+import { execute, subscribe } from \"graphql\";\n+import { createConnection } from \"typeorm\";\n+import { User } from \"./entity/User\";\n+import { addSampleData } from \"./db\";\n+\n+function generateHash(password: string) {\n+  return bcrypt.hashSync(password, bcrypt.genSaltSync(8));\n+}\n+\n+function validPassword(password: string, localPassword: string) {\n+  return bcrypt.compareSync(password, localPassword);\n+}\n+\n+createConnection().then(async connection => {\n+  await addSampleData(connection);\n+\n+  passport.use('basic-signin', new basicStrategy.BasicStrategy(\n+    async function (username, password, done) {\n+      const user = await connection.getRepository(User).findOne({where: { username }});\n+      if (user && validPassword(password, user.password)) {\n+        return done(null, user);\n+      }\n+      return done(null, false);\n+    }\n+  ));\n+\n+  passport.use('basic-signup', new basicStrategy.BasicStrategy({passReqToCallback: true},\n+    async function (req: any, username: any, password: any, done: any) {\n+      const userExists = !!(await connection.getRepository(User).findOne({where: { username }}));\n+      if (!userExists && password && req.body.name) {\n+        const user = await connection.manager.save(new User({\n+          username,\n+          password: generateHash(password),\n+          name: req.body.name,\n+        }));\n+        return done(null, user);\n+      }\n+      return done(null, false);\n+    }\n+  ));\n+\n+  const PORT = 3000;\n+\n+  const app = express();\n+\n+  app.use(cors());\n+  app.use(bodyParser.json());\n+  app.use(passport.initialize());\n+\n+  app.post('/signup',\n+    passport.authenticate('basic-signup', {session: false}),\n+    function (req, res) {\n+      res.json(req.user);\n+    });\n+\n+  app.use(passport.authenticate('basic-signin', {session: false}));\n+\n+  app.post('/signin', function (req, res) {\n+    res.json(req.user);\n+  });\n+\n+  app.use('/graphql', graphqlExpress(req => ({\n+    schema: schema,\n+    context: {\n+      user: req!['user'],\n+      connection,\n+    },\n+  })));\n+\n+  app.use('/graphiql', graphiqlExpress({\n+    endpointURL: '/graphql',\n+  }));\n+\n+// Wrap the Express server\n+  const ws = createServer(app);\n+  ws.listen(PORT, () => {\n+    console.log(`Apollo Server is now running on http://localhost:${PORT}`);\n+    // Set up the WebSocket for handling GraphQL subscriptions\n+    new SubscriptionServer({\n+      onConnect: async (connectionParams: any, webSocket: any) => {\n+        if (connectionParams.authToken) {\n+          // Create a buffer and tell it the data coming in is base64\n+          const buf = new Buffer(connectionParams.authToken.split(' ')[1], 'base64');\n+          // Read it back out as a string\n+          const [username, password]: string[] = buf.toString().split(':');\n+          if (username && password) {\n+            const user = await connection.getRepository(User).findOne({where: { username }});\n+\n+            if (user && validPassword(password, user.password)) {\n+              // Set context for the WebSocket\n+              return {user, connection};\n+            } else {\n+              throw new Error('Wrong credentials!');\n+            }\n+          }\n+        }\n+        throw new Error('Missing auth token!');\n+      },\n+      execute,\n+      subscribe,\n+      schema\n+    }, {\n+      server: ws,\n+      path: '/subscriptions',\n+    });\n+  });\n+});\ndiff --git a/server/ormconfig.json b/server/ormconfig.json\nnew file mode 100644\nindex 0000000..029b87c\n--- /dev/null\n+++ b/server/ormconfig.json\n@@ -0,0 +1,24 @@\n+{\n+   \"type\": \"postgres\",\n+   \"host\": \"localhost\",\n+   \"port\": 5432,\n+   \"username\": \"test\",\n+   \"password\": \"\",\n+   \"database\": \"test\",\n+   \"synchronize\": true,\n+   \"logging\": false,\n+   \"entities\": [\n+      \"entity/**/*.ts\"\n+   ],\n+   \"migrations\": [\n+      \"migration/**/*.ts\"\n+   ],\n+   \"subscribers\": [\n+      \"subscriber/**/*.ts\"\n+   ],\n+   \"cli\": {\n+      \"entitiesDir\": \"entity\",\n+      \"migrationsDir\": \"migration\",\n+      \"subscribersDir\": \"subscriber\"\n+   }\n+}\n\\ No newline at end of file\ndiff --git a/server/package.json b/server/package.json\nnew file mode 100644\nindex 0000000..05d9063\n--- /dev/null\n+++ b/server/package.json\n@@ -0,0 +1,43 @@\n+{\n+  \"name\": \"whatsapp-server-express\",\n+  \"description\": \"A newly created Tortilla project\",\n+  \"private\": true,\n+  \"scripts\": {\n+    \"start\": \"npm run build:live\",\n+    \"build:live\": \"nodemon --exec ./node_modules/.bin/ts-node -- ./index.ts\",\n+    \"generator\": \"gql-gen --url http://localhost:3000/graphql --template ts --out ./types.d.ts\"\n+  },\n+  \"devDependencies\": {\n+    \"@types/bcrypt-nodejs\": \"0.0.30\",\n+    \"@types/body-parser\": \"1.16.8\",\n+    \"@types/cors\": \"2.8.3\",\n+    \"@types/express\": \"4.11.1\",\n+    \"@types/graphql\": \"0.12.6\",\n+    \"@types/node\": \"9.6.5\",\n+    \"@types/passport\": \"0.4.4\",\n+    \"@types/passport-http\": \"0.3.6\",\n+    \"@types/pg\": \"7.4.5\",\n+    \"@types/ws\": \"4.0.2\",\n+    \"nodemon\": \"1.17.3\",\n+    \"ts-node\": \"6.0.0\",\n+    \"typescript\": \"2.8.1\"\n+  },\n+  \"dependencies\": {\n+    \"apollo-server-express\": \"1.3.4\",\n+    \"bcrypt-nodejs\": \"0.0.3\",\n+    \"body-parser\": \"1.18.2\",\n+    \"cors\": \"2.8.4\",\n+    \"express\": \"4.16.3\",\n+    \"graphql\": \"0.12.3\",\n+    \"graphql-code-generator\": \"0.8.21\",\n+    \"graphql-subscriptions\": \"0.5.8\",\n+    \"graphql-tools\": \"2.24.0\",\n+    \"moment\": \"2.22.1\",\n+    \"passport\": \"0.4.0\",\n+    \"passport-http\": \"0.3.0\",\n+    \"pg\": \"7.4.1\",\n+    \"reflect-metadata\": \"0.1.12\",\n+    \"subscriptions-transport-ws\": \"0.9.7\",\n+    \"typeorm\": \"0.2.0-alpha.46\"\n+  }\n+}\ndiff --git a/server/schema/index.ts b/server/schema/index.ts\nnew file mode 100644\nindex 0000000..cedee02\n--- /dev/null\n+++ b/server/schema/index.ts\n@@ -0,0 +1,10 @@\n+import { makeExecutableSchema } from 'graphql-tools';\n+import { typeDefs } from \"./typeDefs\";\n+import { resolvers } from \"./resolvers\";\n+import { IExecutableSchemaDefinition } from \"graphql-tools/dist/Interfaces\";\n+import { GraphQLSchema } from \"graphql\";\n+\n+export const schema: GraphQLSchema = makeExecutableSchema(<IExecutableSchemaDefinition>{\n+  typeDefs,\n+  resolvers,\n+});\n\\ No newline at end of file\ndiff --git a/server/schema/resolvers.ts b/server/schema/resolvers.ts\nnew file mode 100644\nindex 0000000..d901f79\n--- /dev/null\n+++ b/server/schema/resolvers.ts\n@@ -0,0 +1,484 @@\n+import { MessageType } from \"../db\";\n+import { IResolvers } from \"graphql-tools/dist/Interfaces\";\n+import {\n+  AddChatMutationArgs, AddGroupMutationArgs, AddMessageMutationArgs, ChatQueryArgs, MessageAddedSubscriptionArgs,\n+  RemoveChatMutationArgs, RemoveMessagesMutationArgs\n+} from \"../types\";\n+import * as moment from \"moment\";\n+import { PubSub, withFilter } from \"graphql-subscriptions\";\n+import { User } from \"../entity/User\";\n+import { Chat } from \"../entity/Chat\";\n+import { Message } from \"../entity/Message\";\n+import { Recipient } from \"../entity/Recipient\";\n+import { Connection } from \"typeorm\";\n+\n+export const pubsub = new PubSub();\n+\n+export const resolvers: IResolvers = {\n+  Query: {\n+    // Show all users for the moment.\n+    users: async (obj: any, args: any, {user: currentUser, connection}: { user: User, connection: Connection }): Promise<User[]> => {\n+      return await connection\n+        .createQueryBuilder(User, \"user\")\n+        .where('user.id != :id', {id: currentUser.id})\n+        .getMany();\n+    },\n+    chats: async (obj: any, args: any, {user: currentUser, connection}: { user: User, connection: Connection }): Promise<any[]> => {\n+      return await connection\n+        .createQueryBuilder(Chat, \"chat\")\n+        .leftJoin('chat.listingMembers', 'listingMembers')\n+        .where('listingMembers.id = :id', {id: currentUser.id})\n+        .getMany();\n+    },\n+    chat: async (obj: any, {chatId}: ChatQueryArgs, {connection}: { user: User, connection: Connection }): Promise<any> => {\n+      return await connection\n+        .createQueryBuilder(Chat, \"chat\")\n+        .whereInIds(chatId)\n+        .getOne();\n+    },\n+  },\n+  Mutation: {\n+    addChat: async (obj: any, {recipientId}: AddChatMutationArgs, {user: currentUser, connection}: { user: User, connection: Connection }): Promise<Chat | null> => {\n+      const recipient = await connection\n+        .createQueryBuilder(User, \"user\")\n+        .whereInIds(recipientId)\n+        .getOne();\n+\n+      if (!recipient) {\n+        throw new Error(`Recipient ${recipientId} doesn't exist.`);\n+      }\n+\n+      let chat = await connection\n+        .createQueryBuilder(Chat, \"chat\")\n+        .where('chat.name IS NULL')\n+        .innerJoin('chat.allTimeMembers', 'allTimeMembers1', 'allTimeMembers1.id = :currentUserId', {currentUserId: currentUser.id})\n+        .innerJoin('chat.allTimeMembers', 'allTimeMembers2', 'allTimeMembers2.id = :recipientId', {recipientId})\n+        .innerJoinAndSelect('chat.listingMembers', 'listingMembers')\n+        .getOne();\n+\n+      if (chat) {\n+        // Chat already exists. Both users are already in the userIds array\n+        const listingMembers = await connection\n+          .createQueryBuilder(User, \"user\")\n+          .innerJoin('user.listingMemberChats', 'listingMemberChats', 'listingMemberChats.id = :chatId', {chatId: chat.id})\n+          .getMany();\n+\n+        if (!listingMembers.find(user => user.id === currentUser.id)) {\n+          // The chat isn't listed for the current user. Add him to the memberIds\n+          chat.listingMembers.push(currentUser);\n+          chat = await connection.getRepository(Chat).save(chat);\n+\n+          return chat || null;\n+        } else {\n+          throw new Error(`Chat already exists.`);\n+        }\n+      } else {\n+        // Create the chat\n+        chat = await connection.getRepository(Chat).save(new Chat({\n+          allTimeMembers: [currentUser, recipient],\n+          // Chat will not be listed to the other user until the first message gets written\n+          listingMembers: [currentUser],\n+        }));\n+\n+        return chat || null;\n+      }\n+    },\n+    addGroup: async (obj: any, {recipientIds, groupName}: AddGroupMutationArgs, {user: currentUser, connection}: { user: User, connection: Connection }): Promise<Chat | null> => {\n+      let recipients: User[] = [];\n+      for (let recipientId of recipientIds) {\n+        const recipient = await connection\n+          .createQueryBuilder(User, \"user\")\n+          .whereInIds(recipientId)\n+          .getOne();\n+        if (!recipient) {\n+          throw new Error(`Recipient ${recipientId} doesn't exist.`);\n+        }\n+        recipients.push(recipient);\n+      }\n+\n+      const chat = await connection.getRepository(Chat).save(new Chat({\n+        name: groupName,\n+        admins: [currentUser],\n+        owner: currentUser,\n+        allTimeMembers: [...recipients, currentUser],\n+        listingMembers: [...recipients, currentUser],\n+        actualGroupMembers: [...recipients, currentUser],\n+      }));\n+\n+      pubsub.publish('chatAdded', {\n+        creatorId: currentUser.id,\n+        chatAdded: chat,\n+      });\n+\n+      return chat || null;\n+    },\n+    removeChat: async (obj: any, {chatId}: RemoveChatMutationArgs, {user: currentUser, connection}: { user: User, connection: Connection }) => {\n+      const chat = await connection\n+        .createQueryBuilder(Chat, \"chat\")\n+        .whereInIds(Number(chatId))\n+        .innerJoinAndSelect('chat.listingMembers', 'listingMembers')\n+        .leftJoinAndSelect('chat.actualGroupMembers', 'actualGroupMembers')\n+        .leftJoinAndSelect('chat.admins', 'admins')\n+        .leftJoinAndSelect('chat.owner', 'owner')\n+        .leftJoinAndSelect('chat.messages', 'messages')\n+        .leftJoinAndSelect('messages.holders', 'holders')\n+        .getOne();\n+\n+      if (!chat) {\n+        throw new Error(`The chat ${chatId} doesn't exist.`);\n+      }\n+\n+      if (!chat.name) {\n+        // Chat\n+        if (!chat.listingMembers.find(user => user.id === currentUser.id)) {\n+          throw new Error(`The user is not a listing member of the chat ${chatId}.`);\n+        }\n+\n+        // Instead of chaining map and filter we can loop once using reduce\n+        chat.messages = await chat.messages.reduce<Promise<Message[]>>(async (filtered$, message) => {\n+          const filtered = await filtered$;\n+\n+          message.holders = message.holders.filter(user => user.id !== currentUser.id);\n+\n+          if (message.holders.length !== 0) {\n+            // Remove the current user from the message holders\n+            await connection.getRepository(Message).save(message);\n+            filtered.push(message);\n+          } else {\n+            // Simply remove the message\n+            const recipients = await connection\n+              .createQueryBuilder(Recipient, \"recipient\")\n+              .innerJoinAndSelect('recipient.message', 'message', 'message.id = :messageId', {messageId: message.id})\n+              .innerJoinAndSelect('recipient.user', 'user')\n+              .getMany();\n+            for (let recipient of recipients) {\n+              await connection.getRepository(Recipient).remove(recipient);\n+            }\n+            await connection.getRepository(Message).remove(message);\n+          }\n+\n+          return filtered;\n+        }, Promise.resolve([]));\n+\n+        // Remove the current user from who gets the chat listed. The chat will no longer appear in his list\n+        chat.listingMembers = chat.listingMembers.filter(user => user.id !== currentUser.id);\n+\n+        // Check how many members are left\n+        if (chat.listingMembers.length === 0) {\n+          // Delete the chat\n+          await connection.getRepository(Chat).remove(chat);\n+        } else {\n+          // Update the chat\n+          await connection.getRepository(Chat).save(chat);\n+        }\n+        return chatId;\n+      } else {\n+        // Group\n+\n+        // Instead of chaining map and filter we can loop once using reduce\n+        chat.messages = await chat.messages.reduce<Promise<Message[]>>(async (filtered$, message) => {\n+          const filtered = await filtered$;\n+\n+          message.holders = message.holders.filter(user => user.id !== currentUser.id);\n+\n+          if (message.holders.length !== 0) {\n+            // Remove the current user from the message holders\n+            await connection.getRepository(Message).save(message);\n+            filtered.push(message);\n+          } else {\n+            // Simply remove the message\n+            const recipients = await connection\n+              .createQueryBuilder(Recipient, \"recipient\")\n+              .innerJoinAndSelect('recipient.message', 'message', 'message.id = :messageId', {messageId: message.id})\n+              .innerJoinAndSelect('recipient.user', 'user')\n+              .getMany();\n+            for (let recipient of recipients) {\n+              await connection.getRepository(Recipient).remove(recipient);\n+            }\n+            await connection.getRepository(Message).remove(message);\n+          }\n+\n+          return filtered;\n+        }, Promise.resolve([]));\n+\n+        // Remove the current user from who gets the group listed. The group will no longer appear in his list\n+        chat.listingMembers = chat.listingMembers.filter(user => user.id !== currentUser.id);\n+\n+        // Check how many members (including previous ones who can still access old messages) are left\n+        if (chat.listingMembers.length === 0) {\n+          // Remove the group\n+          await connection.getRepository(Chat).remove(chat);\n+        } else {\n+          // Update the group\n+\n+          // Remove the current user from the chat members. He is no longer a member of the group\n+          chat.actualGroupMembers = chat.actualGroupMembers && chat.actualGroupMembers.filter(user => user.id !== currentUser.id);\n+          // Remove the current user from the chat admins\n+          chat.admins = chat.admins && chat.admins.filter(user => user.id !== currentUser.id);\n+          // If there are no more admins left the group goes read only\n+          chat.owner = chat.admins && chat.admins[0] || null; // A null owner means the group is read-only\n+\n+          await connection.getRepository(Chat).save(chat);\n+        }\n+        return chatId;\n+      }\n+    },\n+    addMessage: async (obj: any, {chatId, content}: AddMessageMutationArgs, {user: currentUser, connection}: { user: User, connection: Connection }): Promise<Message | null> => {\n+      if (content === null || content === '') {\n+        throw new Error(`Cannot add empty or null messages.`);\n+      }\n+\n+      let chat = await connection\n+        .createQueryBuilder(Chat, \"chat\")\n+        .whereInIds(chatId)\n+        .innerJoinAndSelect('chat.allTimeMembers', 'allTimeMembers')\n+        .innerJoinAndSelect('chat.listingMembers', 'listingMembers')\n+        .leftJoinAndSelect('chat.actualGroupMembers', 'actualGroupMembers')\n+        .getOne();\n+\n+      if (!chat) {\n+        throw new Error(`Cannot find chat ${chatId}.`);\n+      }\n+\n+      let holders: User[];\n+\n+      if (!chat.name) {\n+        // Chat\n+        if (!chat.listingMembers.map(user => user.id).includes(currentUser.id)) {\n+          throw new Error(`The chat ${chatId} must be listed for the current user before adding a message.`);\n+        }\n+\n+        const recipientUser = chat.allTimeMembers.find(user => user.id !== currentUser.id);\n+\n+        if (!recipientUser) {\n+          throw new Error(`Cannot find recipient user.`);\n+        }\n+\n+        if (!chat.listingMembers.find(user => user.id === recipientUser.id)) {\n+          // Chat is not listed for the recipient. Add him to the listingIds\n+          chat.listingMembers.push(recipientUser);\n+\n+          await connection.getRepository(Chat).save(chat);\n+\n+          pubsub.publish('chatAdded', {\n+            creatorId: currentUser.id,\n+            chatAdded: chat,\n+          });\n+        }\n+\n+        holders = chat.listingMembers;\n+      } else {\n+        // Group\n+        if (!chat.actualGroupMembers || !chat.actualGroupMembers.find(user => user.id === currentUser.id)) {\n+          throw new Error(`The user is not a member of the group ${chatId}. Cannot add message.`);\n+        }\n+\n+        holders = chat.actualGroupMembers;\n+      }\n+\n+      const message = await connection.getRepository(Message).save(new Message({\n+        chat: chat,\n+        sender: currentUser,\n+        content,\n+        type: MessageType.TEXT,\n+        holders,\n+        recipients: holders.reduce<Recipient[]>((filtered, user) => {\n+          if (user.id !== currentUser.id) {\n+            filtered.push(new Recipient({\n+              user,\n+            }));\n+          }\n+          return filtered;\n+        }, []),\n+      }));\n+\n+      pubsub.publish('messageAdded', {\n+        messageAdded: message,\n+      });\n+\n+      return message || null;\n+    },\n+    removeMessages: async (obj: any, {chatId, messageIds, all}: RemoveMessagesMutationArgs, {user: currentUser, connection}: { user: User, connection: Connection }) => {\n+      const chat = await connection\n+        .createQueryBuilder(Chat, \"chat\")\n+        .whereInIds(chatId)\n+        .innerJoinAndSelect('chat.listingMembers', 'listingMembers')\n+        .innerJoinAndSelect('chat.messages', 'messages')\n+        .innerJoinAndSelect('messages.holders', 'holders')\n+        .getOne();\n+\n+      if (!chat) {\n+        throw new Error(`Cannot find chat ${chatId}.`);\n+      }\n+\n+      if (!chat.listingMembers.find(user => user.id === currentUser.id)) {\n+        throw new Error(`The chat/group ${chatId} is not listed for the current user, so there is nothing to delete.`);\n+      }\n+\n+      if (all && messageIds) {\n+        throw new Error(`Cannot specify both 'all' and 'messageIds'.`);\n+      }\n+\n+      if (!all && !(messageIds && messageIds.length)) {\n+        throw new Error(`'all' and 'messageIds' cannot be both null`);\n+      }\n+\n+      let deletedIds: number[] = [];\n+      // Instead of chaining map and filter we can loop once using reduce\n+      chat.messages = await chat.messages.reduce<Promise<Message[]>>(async (filtered$, message) => {\n+        const filtered = await filtered$;\n+\n+        if (all || messageIds!.includes(String(message.id))) {\n+          deletedIds.push(message.id);\n+          // Remove the current user from the message holders\n+          message.holders = message.holders.filter(user => user.id !== currentUser.id);\n+\n+        }\n+\n+        if (message.holders.length !== 0) {\n+          // Remove the current user from the message holders\n+          await connection.getRepository(Message).save(message);\n+          filtered.push(message);\n+        } else {\n+          // Simply remove the message\n+          const recipients = await connection\n+            .createQueryBuilder(Recipient, \"recipient\")\n+            .innerJoinAndSelect('recipient.message', 'message', 'message.id = :messageId', {messageId: message.id})\n+            .innerJoinAndSelect('recipient.user', 'user')\n+            .getMany();\n+          for (let recipient of recipients) {\n+            await connection.getRepository(Recipient).remove(recipient);\n+          }\n+          await connection.getRepository(Message).remove(message);\n+        }\n+\n+        return filtered;\n+      }, Promise.resolve([]));\n+\n+      await connection.getRepository(Chat).save(chat);\n+\n+      return deletedIds;\n+    },\n+  },\n+  Subscription: {\n+    messageAdded: {\n+      subscribe: withFilter(() => pubsub.asyncIterator('messageAdded'),\n+        ({messageAdded}: {messageAdded: Message}, {chatId}: MessageAddedSubscriptionArgs, {user: currentUser}: { user: User }) => {\n+          return (!chatId || messageAdded.chat.id === Number(chatId)) &&\n+            !!messageAdded.recipients.find((recipient: Recipient) => recipient.user.id === currentUser.id);\n+        }),\n+    },\n+    chatAdded: {\n+      subscribe: withFilter(() => pubsub.asyncIterator('chatAdded'),\n+        ({creatorId, chatAdded}: {creatorId: string, chatAdded: Chat}, variables, {user: currentUser}: { user: User }) => {\n+          return Number(creatorId) !== currentUser.id &&\n+            !!chatAdded.listingMembers.find((user: User) => user.id === currentUser.id);\n+        }),\n+    }\n+  },\n+  Chat: {\n+    name: async (chat: Chat, args: any, {user: currentUser, connection}: {user: User, connection: Connection}): Promise<string | null> => {\n+      if (chat.name) {\n+        return chat.name;\n+      }\n+      const user = await connection\n+        .createQueryBuilder(User, \"user\")\n+        .where('user.id != :userId', {userId: currentUser.id})\n+        .innerJoin('user.allTimeMemberChats', 'allTimeMemberChats', 'allTimeMemberChats.id = :chatId', {chatId: chat.id})\n+        .getOne();\n+      return user && user.name || null;\n+    },\n+    picture: async (chat: Chat, args: any, {user: currentUser, connection}: {user: User, connection: Connection}): Promise<string | null> => {\n+      if (chat.name) {\n+        return chat.picture;\n+      }\n+      const user = await connection\n+        .createQueryBuilder(User, \"user\")\n+        .where('user.id != :userId', {userId: currentUser.id})\n+        .innerJoin('user.allTimeMemberChats', 'allTimeMemberChats', 'allTimeMemberChats.id = :chatId', {chatId: chat.id})\n+        .getOne();\n+      return user ? user.picture : null;\n+    },\n+    allTimeMembers: async (chat: Chat, args: any, {user: currentUser, connection}: {user: User, connection: Connection}): Promise<User[]> => {\n+      return await connection\n+        .createQueryBuilder(User, \"user\")\n+        .innerJoin('user.allTimeMemberChats', 'allTimeMemberChats', 'allTimeMemberChats.id = :chatId', {chatId: chat.id})\n+        .getMany();\n+    },\n+    listingMembers: async (chat: Chat, args: any, {user: currentUser, connection}: {user: User, connection: Connection}): Promise<User[]> => {\n+      return await connection\n+        .createQueryBuilder(User, \"user\")\n+        .innerJoin('user.listingMemberChats', 'listingMemberChats', 'listingMemberChats.id = :chatId', {chatId: chat.id})\n+        .getMany();\n+    },\n+    actualGroupMembers: async (chat: Chat, args: any, {user: currentUser, connection}: {user: User, connection: Connection}): Promise<User[]> => {\n+      return await connection\n+        .createQueryBuilder(User, \"user\")\n+        .innerJoin('user.actualGroupMemberChats', 'actualGroupMemberChats', 'actualGroupMemberChats.id = :chatId', {chatId: chat.id})\n+        .getMany();\n+    },\n+    admins: async (chat: Chat, args: any, {user: currentUser, connection}: {user: User, connection: Connection}): Promise<User[]> => {\n+      return await connection\n+        .createQueryBuilder(User, \"user\")\n+        .innerJoin('user.adminChats', 'adminChats', 'adminChats.id = :chatId', {chatId: chat.id})\n+        .getMany();\n+    },\n+    owner: async (chat: Chat, args: any, {user: currentUser, connection}: {user: User, connection: Connection}): Promise<User | null> => {\n+      return await connection\n+        .createQueryBuilder(User, \"user\")\n+        .innerJoin('user.ownerChats', 'ownerChats', 'ownerChats.id = :chatId', {chatId: chat.id})\n+        .getOne() || null;\n+    },\n+    messages: async (chat: Chat, {amount = null}: {amount: number}, {user: currentUser, connection}: {user: User, connection: Connection}): Promise<Message[]> => {\n+      const query = connection\n+        .createQueryBuilder(Message, \"message\")\n+        .innerJoin('message.chat', 'chat', 'chat.id = :chatId', {chatId: chat.id})\n+        .innerJoin('message.holders', 'holders', 'holders.id = :userId', {userId: currentUser.id})\n+        .orderBy({\"message.createdAt\": \"DESC\"});\n+      return (amount ? await query.take(amount).getMany() : await query.getMany()).reverse();\n+    },\n+    unreadMessages: async (chat: Chat, args: any, {user: currentUser, connection}: {user: User, connection: Connection}): Promise<number> => {\n+      return await connection\n+        .createQueryBuilder(Message, \"message\")\n+        .innerJoin('message.chat', 'chat', 'chat.id = :chatId', {chatId: chat.id})\n+        .innerJoin('message.recipients', 'recipients', 'recipients.user.id = :userId AND recipients.readAt IS NULL', {userId: currentUser.id})\n+        .getCount();\n+    },\n+    isGroup: (chat: Chat) => !!chat.name,\n+  },\n+  Message: {\n+    sender: async (message: Message, args: any, {user: currentUser, connection}: {user: User, connection: Connection}): Promise<User | null> => {\n+      return (await connection\n+        .createQueryBuilder(User, \"user\")\n+        .innerJoin('user.senderMessages', 'senderMessages', 'senderMessages.id = :messageId', {messageId: message.id})\n+        .getOne()) || null;\n+    },\n+    ownership: async (message: Message, args: any, {user: currentUser, connection}: {user: User, connection: Connection}): Promise<boolean> => {\n+      return !!(await connection\n+        .createQueryBuilder(User, \"user\")\n+        .whereInIds(currentUser.id)\n+        .innerJoin('user.senderMessages', 'senderMessages', 'senderMessages.id = :messageId', {messageId: message.id})\n+        .getCount());\n+    },\n+    recipients: async (message: Message, args: any, {user: currentUser, connection}: {user: User, connection: Connection}): Promise<Recipient[]> => {\n+      return await connection\n+        .createQueryBuilder(Recipient, \"recipient\")\n+        .innerJoinAndSelect('recipient.message', 'message', 'message.id = :messageId', {messageId: message.id})\n+        .innerJoinAndSelect('recipient.user', 'user')\n+        .innerJoinAndSelect('recipient.chat', 'chat')\n+        .getMany();\n+    },\n+    holders: async (message: Message, args: any, {user: currentUser, connection}: {user: User, connection: Connection}): Promise<User[]> => {\n+      return await connection\n+        .createQueryBuilder(User, \"user\")\n+        .innerJoin('user.holderMessages', 'holderMessages', 'holderMessages.id = :messageId', {messageId: message.id})\n+        .getMany();\n+    },\n+    chat: async (message: Message, args: any, {user: currentUser, connection}: {user: User, connection: Connection}): Promise<Chat | null> => {\n+      return (await connection\n+        .createQueryBuilder(Chat, \"chat\")\n+        .innerJoin('chat.messages', 'messages', 'messages.id = :messageId', {messageId: message.id})\n+        .getOne()) || null;\n+    },\n+  },\n+};\ndiff --git a/server/schema/typeDefs.ts b/server/schema/typeDefs.ts\nnew file mode 100644\nindex 0000000..c09cad4\n--- /dev/null\n+++ b/server/schema/typeDefs.ts\n@@ -0,0 +1,91 @@\n+import { ITypeDefinitions } from \"graphql-tools/dist/Interfaces\";\n+\n+export const typeDefs: ITypeDefinitions = `\n+  type Query {\n+    users: [User!]\n+    chats: [Chat!]\n+    chat(chatId: ID!): Chat\n+  }\n+\n+  type Subscription {\n+    messageAdded(chatId: ID): Message\n+    chatAdded: Chat\n+  }\n+\n+  enum MessageType {\n+    LOCATION\n+    TEXT\n+    PICTURE\n+  }\n+  \n+  type Chat {\n+    #May be a chat or a group\n+    id: ID!\n+    #Computed for chats\n+    name: String\n+    #Computed for chats\n+    picture: String\n+    #All members, current and past ones.\n+    allTimeMembers: [User!]!\n+    #Whoever gets the chat listed. For groups includes past members who still didn't delete the group.\n+    listingMembers: [User!]!\n+    #Actual members of the group (they are not the only ones who get the group listed). Null for chats.\n+    actualGroupMembers: [User!]!\n+    #Null for chats\n+    admins: [User!]\n+    #If null the group is read-only. Null for chats.\n+    owner: User\n+    messages(amount: Int): [Message]!\n+    #Computed property\n+    unreadMessages: Int!\n+    #Computed property\n+    isGroup: Boolean!\n+  }\n+\n+  type Message {\n+    id: ID!\n+    sender: User!\n+    chat: Chat!\n+    content: String!\n+    createdAt: String!\n+    #FIXME: should return MessageType\n+    type: Int!\n+    #Whoever received the message\n+    recipients: [Recipient!]!\n+    #Whoever still holds a copy of the message. Cannot be null because the message gets deleted otherwise\n+    holders: [User!]!\n+    #Computed property\n+    ownership: Boolean!\n+  }\n+  \n+  type Recipient {\n+    user: User!\n+    message: Message!\n+    chat: Chat!\n+    receivedAt: String\n+    readAt: String\n+  }\n+\n+  type User {\n+    id: ID!\n+    name: String\n+    picture: String\n+    phone: String\n+  }\n+\n+  type Mutation {\n+    addChat(recipientId: ID!): Chat\n+    addGroup(recipientIds: [ID!]!, groupName: String!): Chat\n+    removeChat(chatId: ID!): ID\n+    addMessage(chatId: ID!, content: String!): Message\n+    removeMessages(chatId: ID!, messageIds: [ID], all: Boolean): [ID]\n+    addMembers(groupId: ID!, userIds: [ID!]!): [ID]\n+    removeMembers(groupId: ID!, userIds: [ID!]!): [ID]\n+    addAdmins(groupId: ID!, userIds: [ID!]!): [ID]\n+    removeAdmins(groupId: ID!, userIds: [ID!]!): [ID]\n+    setGroupName(groupId: ID!): String\n+    setGroupPicture(groupId: ID!): String\n+    markAsReceived(chatId: ID!): Boolean\n+    markAsRead(chatId: ID!): Boolean\n+  }\n+`;\ndiff --git a/server/tsconfig.json b/server/tsconfig.json\nnew file mode 100644\nindex 0000000..def032f\n--- /dev/null\n+++ b/server/tsconfig.json\n@@ -0,0 +1,60 @@\n+{\n+  \"compilerOptions\": {\n+    /* Basic Options */\n+    \"target\": \"es2017\",                       /* Specify ECMAScript target version: 'ES3' (default), 'ES5', 'ES2015', 'ES2016', 'ES2017', or 'ESNEXT'. */\n+    \"module\": \"commonjs\",                     /* Specify module code generation: 'none', 'commonjs', 'amd', 'system', 'umd', 'es2015', or 'ESNext'. */\n+    \"lib\": [                                  /* Specify library files to be included in the compilation:  */\n+      \"es2017\",\n+      \"esnext.asynciterable\"\n+    ],\n+    // \"allowJs\": true,                       /* Allow javascript files to be compiled. */\n+    // \"checkJs\": true,                       /* Report errors in .js files. */\n+    // \"jsx\": \"preserve\",                     /* Specify JSX code generation: 'preserve', 'react-native', or 'react'. */\n+    // \"declaration\": true,                   /* Generates corresponding '.d.ts' file. */\n+    // \"sourceMap\": true,                     /* Generates corresponding '.map' file. */\n+    // \"outFile\": \"./\",                       /* Concatenate and emit output to single file. */\n+    // \"outDir\": \"./\",                        /* Redirect output structure to the directory. */\n+    // \"rootDir\": \"./\",                       /* Specify the root directory of input files. Use to control the output directory structure with --outDir. */\n+    // \"removeComments\": true,                /* Do not emit comments to output. */\n+    // \"noEmit\": true,                        /* Do not emit outputs. */\n+    // \"importHelpers\": true,                 /* Import emit helpers from 'tslib'. */\n+    // \"downlevelIteration\": true,            /* Provide full support for iterables in 'for-of', spread, and destructuring when targeting 'ES5' or 'ES3'. */\n+    // \"isolatedModules\": true,               /* Transpile each file as a separate module (similar to 'ts.transpileModule'). */\n+\n+    /* Strict Type-Checking Options */\n+    \"strict\": true,                           /* Enable all strict type-checking options. */\n+    // \"noImplicitAny\": true,                 /* Raise error on expressions and declarations with an implied 'any' type. */\n+    // \"strictNullChecks\": true,              /* Enable strict null checks. */\n+    // See https://github.com/DefinitelyTyped/DefinitelyTyped/issues/21359\n+    \"strictFunctionTypes\": false,             /* Enable strict checking of function types. */\n+    // \"noImplicitThis\": true,                /* Raise error on 'this' expressions with an implied 'any' type. */\n+    // \"alwaysStrict\": true,                  /* Parse in strict mode and emit \"use strict\" for each source file. */\n+\n+    /* Additional Checks */\n+    // \"noUnusedLocals\": true,                /* Report errors on unused locals. */\n+    // \"noUnusedParameters\": true,            /* Report errors on unused parameters. */\n+    // \"noImplicitReturns\": true,             /* Report error when not all code paths in function return a value. */\n+    // \"noFallthroughCasesInSwitch\": true,    /* Report errors for fallthrough cases in switch statement. */\n+\n+    /* Module Resolution Options */\n+    // \"moduleResolution\": \"node\",            /* Specify module resolution strategy: 'node' (Node.js) or 'classic' (TypeScript pre-1.6). */\n+    // \"baseUrl\": \"./\",                       /* Base directory to resolve non-absolute module names. */\n+    // \"paths\": {},                           /* A series of entries which re-map imports to lookup locations relative to the 'baseUrl'. */\n+    // \"rootDirs\": [],                        /* List of root folders whose combined content represents the structure of the project at runtime. */\n+    // \"typeRoots\": [],                       /* List of folders to include type definitions from. */\n+    // \"types\": [],                           /* Type declaration files to be included in compilation. */\n+    // \"allowSyntheticDefaultImports\": true,  /* Allow default imports from modules with no default export. This does not affect code emit, just typechecking. */\n+    // \"preserveSymlinks\": true,              /* Do not resolve the real path of symlinks. */\n+\n+    /* Source Map Options */\n+    // \"sourceRoot\": \"./\",                    /* Specify the location where debugger should locate TypeScript files instead of source locations. */\n+    // \"mapRoot\": \"./\",                       /* Specify the location where debugger should locate map files instead of generated locations. */\n+    // \"inlineSourceMap\": true,               /* Emit a single file with source maps instead of having a separate file. */\n+    // \"inlineSources\": true,                 /* Emit the source alongside the sourcemaps within a single file; requires '--inlineSourceMap' or '--sourceMap' to be set. */\n+\n+    /* Experimental Options */\n+    \"experimentalDecorators\": true,           /* Enables experimental support for ES7 decorators. */\n+    \"emitDecoratorMetadata\": true,            /* Enables experimental support for emitting type metadata for decorators. */\n+    \"strictPropertyInitialization\": false\n+  }\n+}\n\\ No newline at end of file\ndiff --git a/server/types.d.ts b/server/types.d.ts\nnew file mode 100644\nindex 0000000..ce81b7a\n--- /dev/null\n+++ b/server/types.d.ts\n@@ -0,0 +1,127 @@\n+/* tslint:disable */\n+\n+export interface Query {\n+  users: User[]; \n+  chats: Chat[]; \n+  chat?: Chat | null; \n+}\n+\n+export interface User {\n+  id: string; \n+  name?: string | null; \n+  picture?: string | null; \n+  phone?: string | null; \n+}\n+\n+export interface Chat {\n+  id: string; /* May be a chat or a group */\n+  name?: string | null; /* Computed for chats */\n+  picture?: string | null; /* Computed for chats */\n+  allTimeMembers: User[]; /* All members, current and past ones. */\n+  listingMembers: User[]; /* Whoever gets the chat listed. For groups includes past members who still didn&#x27;t delete the group. */\n+  actualGroupMembers: User[]; /* Actual members of the group (they are not the only ones who get the group listed). Null for chats. */\n+  admins: User[]; /* Null for chats */\n+  owner?: User | null; /* If null the group is read-only. Null for chats. */\n+  messages: Message[]; \n+  unreadMessages: number; /* Computed property */\n+  isGroup: boolean; /* Computed property */\n+}\n+\n+export interface Message {\n+  id: string; \n+  sender: User; \n+  chat: Chat; \n+  content: string; \n+  createdAt: string; \n+  type: number; /* FIXME: should return MessageType */\n+  recipients: Recipient[]; /* Whoever received the message */\n+  holders: User[]; /* Whoever still holds a copy of the message. Cannot be null because the message gets deleted otherwise */\n+  ownership: boolean; /* Computed property */\n+}\n+\n+export interface Recipient {\n+  user: User; \n+  message: Message; \n+  receivedAt?: string | null; \n+  readAt?: string | null; \n+}\n+\n+export interface Mutation {\n+  addChat?: Chat | null; \n+  addGroup?: Chat | null; \n+  removeChat?: string | null; \n+  addMessage?: Message | null; \n+  removeMessages?: string[] | null; \n+  addMembers?: string[] | null; \n+  removeMembers?: string[] | null; \n+  addAdmins?: string[] | null; \n+  removeAdmins?: string[] | null; \n+  setGroupName?: string | null; \n+  setGroupPicture?: string | null; \n+  markAsReceived?: boolean | null; \n+  markAsRead?: boolean | null; \n+}\n+\n+export interface Subscription {\n+  messageAdded?: Message | null; \n+  chatAdded?: Chat | null; \n+}\n+export interface ChatQueryArgs {\n+  chatId: string; \n+}\n+export interface MessagesChatArgs {\n+  amount?: number | null; \n+}\n+export interface AddChatMutationArgs {\n+  recipientId: string; \n+}\n+export interface AddGroupMutationArgs {\n+  recipientIds: string[]; \n+  groupName: string; \n+}\n+export interface RemoveChatMutationArgs {\n+  chatId: string; \n+}\n+export interface AddMessageMutationArgs {\n+  chatId: string; \n+  content: string; \n+}\n+export interface RemoveMessagesMutationArgs {\n+  chatId: string; \n+  messageIds?: string[] | null; \n+  all?: boolean | null; \n+}\n+export interface AddMembersMutationArgs {\n+  groupId: string; \n+  userIds: string[]; \n+}\n+export interface RemoveMembersMutationArgs {\n+  groupId: string; \n+  userIds: string[]; \n+}\n+export interface AddAdminsMutationArgs {\n+  groupId: string; \n+  userIds: string[]; \n+}\n+export interface RemoveAdminsMutationArgs {\n+  groupId: string; \n+  userIds: string[]; \n+}\n+export interface SetGroupNameMutationArgs {\n+  groupId: string; \n+}\n+export interface SetGroupPictureMutationArgs {\n+  groupId: string; \n+}\n+export interface MarkAsReceivedMutationArgs {\n+  chatId: string; \n+}\n+export interface MarkAsReadMutationArgs {\n+  chatId: string; \n+}\n+export interface MessageAddedSubscriptionArgs {\n+  chatId?: string | null; \n+}\n+\n+export type MessageType = \"LOCATION\" | \"TEXT\" | \"PICTURE\";\n+\n",
        "manuals": [
          {
            "manualTitle": "A Whatsapp clone written with Angular, Material, Express, Postgresql and Apollo GraphQL.",
            "stepRevision": "9a5dc25da5ceafb48c5fb70156fd73ffd1aab2c4",
            "manualView": "A newly created Tortilla project. For more information, see https://github.com/Urigo/tortilla."
          },
          {
            "manualTitle": "Step 1: Introduction",
            "stepRevision": "8045d2f23207c99ef82aea1e8b07f5117c67bb34",
            "manualView": "# Step 1: How to build an app?\n\nSo you want to build an app!\nThe good news is, it’s not that difficult and after a while anyone can do it!\nAnother good news is that it’s a great skill to have, there is a lot of demand in the job market and you can get to be very creative. Also you can be part of basically any industry you can think of if you know how to program (Healthcare, \nbanking, education, defense, gaming, etc…).\n\nSoftware builds as layers on top of layers.  Every code you write is using code that others have written before already and you can just use it even without fully understanding it.\nThat’s what makes software advance so fast and makes the pace of progress increase as time goes by.\nAlso, most software today is written in an open and free way - everyone can share their code and use other people's code for free.  We even have a social network for that!  It’s called Github.\n\nOne way of learning how to build an app is to study software from the origins. How computers, operating systems and compilers work. It is very interesting but that also takes a long time.\nAnother way to learn how to create a new app is to start by first using all the code that has been already written out there and once we have a real world running app, go deeper to understand how it works from the inside.\n\nI’ll try to use the later approach because I think it is more fun and also it gives context when we will dive inside on how things work. Also it helps when we try to compare between different technologies that do the same thing (Angular vs. \nReact , etc…).\nThat’s because understanding the bigger picture is more important than knowing and remembering the details.\n\nYou noticed that the chapter started with a simple question.\nAll the lessons will start and include many of those questions.  Those are the questions you will need to Google.  The reason is that the most important skill a creator has today is to know how to search Google for the things they need. Most \nprogrammers, even the best ones, don’t remember anything, they just use Google for almost every line of code they write. So know that you don’t need to know it all, Google knows it all for you.\nThis tutorial might get outdated (it won't, hopefully!), but Google will always have the answers so it is more important to know to ask the right questions.\nIn my opinion the most important skill a programmer needs to have is patience and acceptance when something just doesn’t work, enjoy that feeling and start Googling around in order to learn new things and solve this new problem (this process of \nfeeling like you don’t know anything will happen 1000 times a day, also after 20 years of programming).\n\n## Planning the app: how to design an app?\n\nThe first and most important phase in the process is the beginning - designing the app, its parts, components and architecture, and how it all works together.\nFor this tutorial we will build a WhatsApp clone so we have the designs already prepared.\n\nThe process will looks like that:\n\n1. **Visually sketch the screens of the app**. We already know how WhatsApp looks so we’ll just copy it on pen and paper.\n2. **Break down to components**. The best way to describe the UI of apps is to break the UI into separate components and mix them up together. When breaking down to components we would need to think about the following steps:\n  * **Presentational components**: the small building blocks of the UI. For example input fields, images, text, buttons etc…\n  * **Layout**: how the components are positioned inside each other (talk about flex, grid and older layout types)\n  * **Styles**: colors, fonts etc… We might skip that part at the beginning because we can have a perfectly working app without it\n  * **Data dependencies**: the data that those components need - chats, messages, people etc… We will need to to do the following:\n    * Gather data for each component\n    * Attach all those dependencies into one schema\n    * Attach actions for each component\n    * Data updates: decide when the data should be updated in the view (ideally we shouldn’t have to say when but for technical and performance reasons it helps)\n3. **Routing flow**: Moving between screens, what are the different paths the user can navigate through our app\n\nOnce we will finish that process, you will have a big picture in your head (and on your paper) and implementing it with code will be much easier and more technical, meaning you won’t need to know a lot, just Google how to do each step...\n\nAnother interesting thing is, that implementing this same process can be done with a variety of different technologies, so this work will make sense whether you are using web with React or Angular, native apps, Windows UWP or any other \ntechnology for the UI and also relevant whether your data source is a Node, .NET or Ruby server with Mongo, Postgres or MySQL database (if all those words doesn’t mean anything for you, don’t worry, those are just different names to very similar \nideas and we will learn all of them later on and of course you can always just Google them).\n\nHead over to the next chapter to start planning."
          },
          {
            "manualTitle": "Step 2: Planning process",
            "stepRevision": "b5cc76111d0a68e4451c3e4100d67209df0879be",
            "manualView": "## Visual sketch\nWell, not a lot to say about that: just draw your app on paper.\nDoesn’t matter if you don’t know how to draw, it’s just squares and circles.\n\n![alt text](../../assets/chats.png \"Chats\")\n![alt text](../../assets/chat.png \"Chat\")\n![alt text](../../assets/new_chat.png \"New chat\")\n![alt text](../../assets/new_group.png \"New group\")\n![alt text](../../assets/new_group_details.png \"New group details\")\n\n## Breaking down to components\n### -> Google Search\nThis part is a bit more tricky, but after a few examples you’ll get the hang of it.\n\nDraw boxes around every component and subcomponent in different colors and name each one.\nBut how do you know what should be its own component?\nJust follow the **single responsibility principle**, that is, a component should ideally only do one thing. If it ends up growing, it should be decomposed into smaller subcomponents.\n\n![alt text](../../assets/chats_components.png \"Chats components\")\n![alt text](../../assets/chat_components.png \"Chat components\")\n![alt text](../../assets/new_chat_components.png \"New chat components\")\n![alt text](../../assets/new_group_components.png \"New group components\")\n![alt text](../../assets/new_group_details_components.png \"New group details components\")\n\n  * Chats Component\n  * Header Component\n  * ChatsList Component\n  * ChatItem Component\n  * Chat Component\n  * MessagesList Component\n  * MessageItem Component\n  * NewMessage Component\n  * NewChat Component\n  * UsersList Component\n  * UserItem Component\n  * NewGroup Component\n  * NewGroupDetails Component\n\nNow let’s organize them in hierarchy:\n* Chats\n  * Header\n  * ChatsList\n    * ChatItem\n* Chat\n  * Header\n  * MessagesList\n    * MessageItem\n  * NewMessage\n* NewChat\n  * Header\n  * UsersList\n    * UserItem\n* NewGroup\n  * Header\n  * UsersList\n    * UserItem\n  * NewGroupDetails\n\n## Layout\n### -> Google Search\nNow let’s describe how the components are placed within each other.\nThere are infinite ways to explain how components sits inside of each other.\nAny approach has its benefits and limitations.\nWe are going to use one pattern that is pretty common, simple and also covers many types of UI structures. \nUsing that pattern we will keep us covered for a long while (until you would want to create a computer game or a graph. then you’ll need to expand your horizons).\nThis pattern is called flexbox.\n\nIn Flexbox we can separate the alignment in two ways:\nContainer (parent) component behaviour\nChild component behaviour inside the container\n\nWhen describing the parent, we have 3 main properties:\n* Flex-Flow: it's a shorthand for flex-direction and flex-wrap and lets you control the direction in which the items are displayed and whether or not they can wrap onto the next line. There are four possible settings, each of them in the wrap or \nnowrap variant:\n  * row `[wrap, nowrap]`\n  * row-reverse `[wrap, nowrap]`\n  * column `[wrap, nowrap]` - this is the normal way a group of divs would be displayed, so you might not use this often\n  * column-reverse `[wrap, nowrap]`\n* Justify-content: determines where a browser should place the flex items within the row. It works only if the flex items have set widths and if the total width of the items is less than the flex container. There are five possible settings:\n  * Flex-start - squash them to the left\n  * Center - Squash them to the center\n  * Flex-end - squash them to the right\n  * Space-around - squash them away from each other and the ends. Place as much space as possible between all elements\n  * Space-between - Squash the sides to the ends and place as much space between the rest of the elements as possible\n* alignItems: Same as justifyContent but on the secondary axis\n  * Flex-start - squash them to the left\n  * Center - Squash them to the center\n  * Flex-end - squash them to the right\n  * Space-around - squash them away from each other and the ends. Place as much space as possible between all elements\n  * Space-between - Squash the sides to the ends and place as much space between the rest of the elements as possible\n\nThe easiest way to explain that is by showing live examples:\n[awaiting for McFarland's permission to share his pictures]\n\n## Data dependencies\n### -> Google Search\nOur app needs to display data. Otherwise it will be just a nice moving set of pictures…\nSo let’s see what data each component needs and create a descriptions of all the data in our app.\n\nLet’s start with the chats list component:\n\n* Chats: Chats, Users, Messages\n  * Header\n  * ChatsList: Chats, Users, Messages\n    * ChatItem: Chats`[chatId]`, Users`[UserId]`, Message`[messageId]`\n\nWe need to have some basic information about the chats we are part of, like the chat id, the user id and the latest message content.\nThat means we will have to query for all the chats who we are part of, then look at the user IDs and query for those users to retrieve the name. Finally we need to query for the last message of each chat.\n\nNow let’s talk about the chat component (after clicking the single chat app).\nWe need a list of all the messages inside the chat, along with some info about the user or chat on the top corner:\n\n* Chat: Chat, User, Messages\n  * Header: User.name || Chat.name (Because we can have multiple participant could differ from the other person’s name)\n  * MessagesList: Messages\n    * MessageItem: Messages`[ID]`\n  * NewMessage\n\nThe NewChat and NewGroup components will need just some basic info about the user:\n\n* NewChat: Users\n  * Header\n  * UsersList: Users\n    * UserItem: Users`[ID]`\n\n* NewGroup: Users\n  * Header\n  * UsersList: Users\n    * UserItem: Users`[ID]`\n  * NewGroupDetails\n\n## Actions\n### -> Google Search\nBut components can also do thing beyond just displaying data. \nLet’s write all the actions each component can do.\n  * Chats list\n    * tap -> go to chat page\n    * press -> enable selection of multiple chats, confirming the selection will delete them\n  * Single Chat\n    * tap -> send the message\n    * press -> enable selection of multiple messages, confirming the selection will delete them\n  * New Chat\n    * tap -> create new chat or go to the NewGroup component\n  * New Group\n    * tap -> go to NewGroupDetails, then create the group\n\n## Communications\n### -> Google Search\nLet’s define when do we need to get the data from our data source.\nSounds easy but there are a few tricky pitfalls. (query and subscriptions).\nWe will start by simply requesting the data when we first start the component, later on we will tackle subscriptions.\n\n## UI flow\n### -> Google Search\nLet’s draw a diagram of how the user can navigate our app.\n  * Open the app ->\n    * Chats list ->\n      * Click on chat ->\n        * Specific chat page\n          * Click back ->\n            * Chat page\n    * Click on '+' ->\n      * NewChat page ->\n        * Click on user ->\n          * Chat page\n        * Click back ->\n          * Chats list\n        * Click on 'New Group' ->\n          * New Group page\n            * Multiple selection and subsequent confirmation ->\n              * NewGroupDetails page\n                * Insert name and click on confirm ->\n                  * Chat page\n              * Click back ->\n                * New Group page\n          * Click back ->\n            * New Group page\n\nNow let’s look at the whole diagram we created.\nThat basically describes all of our app.\nIf computers were smart enough to understand english and drawings, we would have an app by now.\nBut programming languages are very similar to regular languages so we now just need to translate this into any programming language, just choose a tool and start filling in the gaps.\n\nNext chapter will be about Scaffolding which will tell us the structure to put our code into.\nJust like our sketch has defined parts, we would do the same just with folders and files."
          },
          {
            "manualTitle": "Step 3: Scaffolding",
            "stepRevision": "d6f921a22eb60118c1552ac4b12361e72ba61f93",
            "manualView": "Now we can start writing code!\n\nBut like we said before, software is build in layers and instead of starting from nothing, we can use existing software with prepared structure.\n\nFirst let’s install some software that we need on our computer:\n\nThe following instructions are for computers with the Arch Linux operating system, so your mileage may vary.\n\nFirst let's start by installing npm and node.js, as simple as `# pacman -S nodejs npm`.\n\nThen we will need a way to install our npm global packages on a per-user basis, instead of relying on sudo: https://github.com/sindresorhus/guides/blob/master/npm-global-without-sudo.md\n\nNow it's the right moment to install a couple of global packages we will need later on: `npm install -g @angular/cli node-sass tortilla typescript`\n\n## IDE\n\nNow it's time to choose our IDE. I suggest you Webstorm, but it's paid software with a kind-of perpetual EAP (Early Access Preview) available for free: https://blog.jetbrains.com/webstorm/category/eap/\nIf you decide to start using Webstorm keep in mind that sooner or later you'll have to start paying an annual subscription because EAPs are not always available.\nTo have a look at some of the Webstorm features you can have a look at those videos: https://www.jetbrains.com/webstorm/documentation/\n\nAnother, completely free (as in freedom) alternative is VSCode: https://code.visualstudio.com/\nFor most things it's as good as Webstorm, for others (like type inference) it's even better. Unfortunately it lacks most of the Webstorm features.\n\nAt the end the choice is yours.\n\n## Mobile\nWe will talk once again about scaffolding once we will introduce `Android` and `Cordova`."
          },
          {
            "manualTitle": "Step 4: Debugging",
            "stepRevision": "32bfafb1cdb5ab1a27ec85cd68ecc1988217a1d2",
            "manualView": "Before we start writing code, it is important that we learn how to check our code.\n\nThe computer runs through everything we write in split second but we can still pause the computer and go through step by step, check what actually happens when the computer runs our code instructions.\n\nThis phase is sometimes being skipped by developers but trust me, you never want to skip this phase and you should always be super comfortable in debugging your code on whatever environment it’s running on.\n\nThe easiest way to debug your Javascript application is right into your editor:\n  * https://www.jetbrains.com/help/webstorm/debugging-javascript-in-chrome.html\n  * https://blog.jetbrains.com/webstorm/2017/01/debugging-angular-apps/\n\nLater on we will learn how to debug mobile applications."
          },
          {
            "manualTitle": "Step 5: Chats listing",
            "stepRevision": "6a2717a213f1a87f39bd42538d010736fc45b73d",
            "manualView": "## Server\n\nAfter the planning phase it's finally time to start writing some real code!\nWe'll start with the server, so let's install a couple of packages first:\n\n    $ npm install apollo-server-express body-parser cors express graphql graphql-tools\n    $ npm install --save-dev @types/body-parser @types/cors @types/express @types/graphql\n\nExpress is a fast, unopinionated, minimalist web framework for node.\nCross-Origin Resource Sharing (CORS) is a mechanism that uses additional HTTP headers to let a user agent gain permission to access selected resources from a server on a different origin (domain) than the site currently in use. A user agent makes a cross-origin HTTP request when it requests a resource from a different domain, protocol, or port than the one from which the current document originated.\nWe will need CORS because Webpack's development server used in the client will make use of a different port than the Express server, thus configuring a different origin.\nGraphQL is a query language for APIs and a runtime for fulfilling those queries with your existing data. GraphQL provides a complete and understandable description of the data in your API, gives clients the power to ask for exactly what they need and nothing more, makes it easier to evolve APIs over time, and enables powerful developer tools.\nApollo Server is a community-maintained open-source GraphQL server. It works with pretty much all Node.js HTTP server frameworks. Apollo Server works with any GraphQL schema built with GraphQL.js or with a convenience library such as graphql-tools.\n\nThe GraphQL query language is basically about selecting fields on objects. Because the shape of a GraphQL query closely matches the result, you can predict what the query will return without knowing that much about the server. But it's useful to have an exact description of the data we can ask for - what fields can we select? What kinds of objects might they return? What fields are available on those sub-objects? That's where the schema comes in.\nEvery GraphQL service defines a set of types which completely describe the set of possible data you can query on that service. Then, when queries come in, they are validated and executed against that schema.\n\nFor the moment let's create some empty schemas and resolvers:\n\n[{]: <helper> (diffStep \"1.1\" files=\"schema/*\" module=\"server\")\n\n#### Step 1.1: Create empty Apollo server\n\n##### Added schema&#x2F;index.ts\n```diff\n@@ -0,0 +1,10 @@\n+┊  ┊ 1┊import { makeExecutableSchema } from 'graphql-tools';\n+┊  ┊ 2┊import { typeDefs } from \"./typeDefs\";\n+┊  ┊ 3┊import { resolvers } from \"./resolvers\";\n+┊  ┊ 4┊import { IExecutableSchemaDefinition } from \"graphql-tools/dist/Interfaces\";\n+┊  ┊ 5┊import { GraphQLSchema } from \"graphql\";\n+┊  ┊ 6┊\n+┊  ┊ 7┊export const schema: GraphQLSchema = makeExecutableSchema(<IExecutableSchemaDefinition>{\n+┊  ┊ 8┊  typeDefs,\n+┊  ┊ 9┊  resolvers,\n+┊  ┊10┊});🚫↵\n```\n\n##### Added schema&#x2F;resolvers.ts\n```diff\n@@ -0,0 +1,6 @@\n+┊ ┊1┊import { IResolvers } from \"graphql-tools/dist/Interfaces\";\n+┊ ┊2┊\n+┊ ┊3┊export const resolvers: IResolvers = {\n+┊ ┊4┊  Query: {\n+┊ ┊5┊  },\n+┊ ┊6┊};\n```\n\n##### Added schema&#x2F;typeDefs.ts\n```diff\n@@ -0,0 +1,4 @@\n+┊ ┊1┊import { ITypeDefinitions } from \"graphql-tools/dist/Interfaces\";\n+┊ ┊2┊\n+┊ ┊3┊export const typeDefs: ITypeDefinitions = `\n+┊ ┊4┊`;\n```\n\n[}]: #\n\nTime to create our index:\n\n[{]: <helper> (diffStep \"1.1\" files=\"^index.ts\" module=\"server\")\n\n#### Step 1.1: Create empty Apollo server\n\n##### Added index.ts\n```diff\n@@ -0,0 +1,23 @@\n+┊  ┊ 1┊import { schema } from \"./schema\";\n+┊  ┊ 2┊import * as bodyParser from \"body-parser\";\n+┊  ┊ 3┊import * as cors from 'cors';\n+┊  ┊ 4┊import * as express from 'express';\n+┊  ┊ 5┊import { graphiqlExpress, graphqlExpress } from \"apollo-server-express\";\n+┊  ┊ 6┊\n+┊  ┊ 7┊const PORT = 3000;\n+┊  ┊ 8┊\n+┊  ┊ 9┊const app = express();\n+┊  ┊10┊\n+┊  ┊11┊app.use(cors());\n+┊  ┊12┊app.use(bodyParser.json());\n+┊  ┊13┊\n+┊  ┊14┊app.use('/graphql', graphqlExpress(req => ({\n+┊  ┊15┊  schema: schema,\n+┊  ┊16┊  context: req,\n+┊  ┊17┊})));\n+┊  ┊18┊\n+┊  ┊19┊app.use('/graphiql', graphiqlExpress({\n+┊  ┊20┊  endpointURL: '/graphql',\n+┊  ┊21┊}));\n+┊  ┊22┊\n+┊  ┊23┊app.listen(PORT);\n```\n\n[}]: #\n\nNow we want to feed our graphql server with some data. Soon we will need `moment`, so let's install it:\n\n    $ npm install moment\n\nNow we can create a fake db:\n\n[{]: <helper> (diffStep \"1.2\" files=\"db.ts\" module=\"server\")\n\n#### Step 1.2: Add fake db\n\n##### Added db.ts\n```diff\n@@ -0,0 +1,438 @@\n+┊   ┊  1┊import * as moment from 'moment';\n+┊   ┊  2┊\n+┊   ┊  3┊export enum MessageType {\n+┊   ┊  4┊  PICTURE,\n+┊   ┊  5┊  TEXT,\n+┊   ┊  6┊  LOCATION,\n+┊   ┊  7┊}\n+┊   ┊  8┊\n+┊   ┊  9┊export interface User {\n+┊   ┊ 10┊  id: number,\n+┊   ┊ 11┊  username: string,\n+┊   ┊ 12┊  password: string,\n+┊   ┊ 13┊  name: string,\n+┊   ┊ 14┊  picture?: string | null,\n+┊   ┊ 15┊  phone?: string | null,\n+┊   ┊ 16┊}\n+┊   ┊ 17┊\n+┊   ┊ 18┊export interface Chat {\n+┊   ┊ 19┊  id: number,\n+┊   ┊ 20┊  name?: string | null,\n+┊   ┊ 21┊  picture?: string | null,\n+┊   ┊ 22┊  // All members, current and past ones.\n+┊   ┊ 23┊  allTimeMemberIds: number[],\n+┊   ┊ 24┊  // Whoever gets the chat listed. For groups includes past members who still didn't delete the group.\n+┊   ┊ 25┊  listingMemberIds: number[],\n+┊   ┊ 26┊  // Actual members of the group (they are not the only ones who get the group listed). Null for chats.\n+┊   ┊ 27┊  actualGroupMemberIds?: number[] | null,\n+┊   ┊ 28┊  adminIds?: number[] | null,\n+┊   ┊ 29┊  ownerId?: number | null,\n+┊   ┊ 30┊  messages: Message[],\n+┊   ┊ 31┊}\n+┊   ┊ 32┊\n+┊   ┊ 33┊export interface Message {\n+┊   ┊ 34┊  id: number,\n+┊   ┊ 35┊  chatId: number,\n+┊   ┊ 36┊  senderId: number,\n+┊   ┊ 37┊  content: string,\n+┊   ┊ 38┊  createdAt: number,\n+┊   ┊ 39┊  type: MessageType,\n+┊   ┊ 40┊  recipients: Recipient[],\n+┊   ┊ 41┊  holderIds: number[],\n+┊   ┊ 42┊}\n+┊   ┊ 43┊\n+┊   ┊ 44┊export interface Recipient {\n+┊   ┊ 45┊  userId: number,\n+┊   ┊ 46┊  messageId: number,\n+┊   ┊ 47┊  chatId: number,\n+┊   ┊ 48┊  receivedAt: number | null,\n+┊   ┊ 49┊  readAt: number | null,\n+┊   ┊ 50┊}\n+┊   ┊ 51┊\n+┊   ┊ 52┊const users: User[] = [\n+┊   ┊ 53┊  {\n+┊   ┊ 54┊    id: 1,\n+┊   ┊ 55┊    username: 'ethan',\n+┊   ┊ 56┊    password: '$2a$08$NO9tkFLCoSqX1c5wk3s7z.JfxaVMKA.m7zUDdDwEquo4rvzimQeJm', // 111\n+┊   ┊ 57┊    name: 'Ethan Gonzalez',\n+┊   ┊ 58┊    picture: 'https://randomuser.me/api/portraits/thumb/men/1.jpg',\n+┊   ┊ 59┊    phone: '+391234567890',\n+┊   ┊ 60┊  },\n+┊   ┊ 61┊  {\n+┊   ┊ 62┊    id: 2,\n+┊   ┊ 63┊    username: 'bryan',\n+┊   ┊ 64┊    password: '$2a$08$xE4FuCi/ifxjL2S8CzKAmuKLwv18ktksSN.F3XYEnpmcKtpbpeZgO', // 222\n+┊   ┊ 65┊    name: 'Bryan Wallace',\n+┊   ┊ 66┊    picture: 'https://randomuser.me/api/portraits/thumb/men/2.jpg',\n+┊   ┊ 67┊    phone: '+391234567891',\n+┊   ┊ 68┊  },\n+┊   ┊ 69┊  {\n+┊   ┊ 70┊    id: 3,\n+┊   ┊ 71┊    username: 'avery',\n+┊   ┊ 72┊    password: '$2a$08$UHgH7J8G6z1mGQn2qx2kdeWv0jvgHItyAsL9hpEUI3KJmhVW5Q1d.', // 333\n+┊   ┊ 73┊    name: 'Avery Stewart',\n+┊   ┊ 74┊    picture: 'https://randomuser.me/api/portraits/thumb/women/1.jpg',\n+┊   ┊ 75┊    phone: '+391234567892',\n+┊   ┊ 76┊  },\n+┊   ┊ 77┊  {\n+┊   ┊ 78┊    id: 4,\n+┊   ┊ 79┊    username: 'katie',\n+┊   ┊ 80┊    password: '$2a$08$wR1k5Q3T9FC7fUgB7Gdb9Os/GV7dGBBf4PLlWT7HERMFhmFDt47xi', // 444\n+┊   ┊ 81┊    name: 'Katie Peterson',\n+┊   ┊ 82┊    picture: 'https://randomuser.me/api/portraits/thumb/women/2.jpg',\n+┊   ┊ 83┊    phone: '+391234567893',\n+┊   ┊ 84┊  },\n+┊   ┊ 85┊  {\n+┊   ┊ 86┊    id: 5,\n+┊   ┊ 87┊    username: 'ray',\n+┊   ┊ 88┊    password: '$2a$08$6.mbXqsDX82ZZ7q5d8Osb..JrGSsNp4R3IKj7mxgF6YGT0OmMw242', // 555\n+┊   ┊ 89┊    name: 'Ray Edwards',\n+┊   ┊ 90┊    picture: 'https://randomuser.me/api/portraits/thumb/men/3.jpg',\n+┊   ┊ 91┊    phone: '+391234567894',\n+┊   ┊ 92┊  },\n+┊   ┊ 93┊  {\n+┊   ┊ 94┊    id: 6,\n+┊   ┊ 95┊    username: 'niko',\n+┊   ┊ 96┊    password: '$2a$08$fL5lZR.Rwf9FWWe8XwwlceiPBBim8n9aFtaem.INQhiKT4.Ux3Uq.', // 666\n+┊   ┊ 97┊    name: 'Niccolò Belli',\n+┊   ┊ 98┊    picture: 'https://randomuser.me/api/portraits/thumb/men/4.jpg',\n+┊   ┊ 99┊    phone: '+391234567895',\n+┊   ┊100┊  },\n+┊   ┊101┊  {\n+┊   ┊102┊    id: 7,\n+┊   ┊103┊    username: 'mario',\n+┊   ┊104┊    password: '$2a$08$nDHDmWcVxDnH5DDT3HMMC.psqcnu6wBiOgkmJUy9IH..qxa3R6YrO', // 777\n+┊   ┊105┊    name: 'Mario Rossi',\n+┊   ┊106┊    picture: 'https://randomuser.me/api/portraits/thumb/men/5.jpg',\n+┊   ┊107┊    phone: '+391234567896',\n+┊   ┊108┊  },\n+┊   ┊109┊];\n+┊   ┊110┊\n+┊   ┊111┊const chats: Chat[] = [\n+┊   ┊112┊  {\n+┊   ┊113┊    id: 1,\n+┊   ┊114┊    name: null,\n+┊   ┊115┊    picture: null,\n+┊   ┊116┊    allTimeMemberIds: [1, 3],\n+┊   ┊117┊    listingMemberIds: [1, 3],\n+┊   ┊118┊    adminIds: null,\n+┊   ┊119┊    ownerId: null,\n+┊   ┊120┊    messages: [\n+┊   ┊121┊      {\n+┊   ┊122┊        id: 1,\n+┊   ┊123┊        chatId: 1,\n+┊   ┊124┊        senderId: 1,\n+┊   ┊125┊        content: 'You on your way?',\n+┊   ┊126┊        createdAt: moment().subtract(1, 'hours').unix(),\n+┊   ┊127┊        type: MessageType.TEXT,\n+┊   ┊128┊        recipients: [\n+┊   ┊129┊          {\n+┊   ┊130┊            userId: 3,\n+┊   ┊131┊            messageId: 1,\n+┊   ┊132┊            chatId: 1,\n+┊   ┊133┊            receivedAt: null,\n+┊   ┊134┊            readAt: null,\n+┊   ┊135┊          },\n+┊   ┊136┊        ],\n+┊   ┊137┊        holderIds: [1, 3],\n+┊   ┊138┊      },\n+┊   ┊139┊      {\n+┊   ┊140┊        id: 2,\n+┊   ┊141┊        chatId: 1,\n+┊   ┊142┊        senderId: 3,\n+┊   ┊143┊        content: 'Yep!',\n+┊   ┊144┊        createdAt: moment().subtract(1, 'hours').add(5, 'minutes').unix(),\n+┊   ┊145┊        type: MessageType.TEXT,\n+┊   ┊146┊        recipients: [\n+┊   ┊147┊          {\n+┊   ┊148┊            userId: 1,\n+┊   ┊149┊            messageId: 2,\n+┊   ┊150┊            chatId: 1,\n+┊   ┊151┊            receivedAt: null,\n+┊   ┊152┊            readAt: null,\n+┊   ┊153┊          },\n+┊   ┊154┊        ],\n+┊   ┊155┊        holderIds: [3, 1],\n+┊   ┊156┊      },\n+┊   ┊157┊    ],\n+┊   ┊158┊  },\n+┊   ┊159┊  {\n+┊   ┊160┊    id: 2,\n+┊   ┊161┊    name: null,\n+┊   ┊162┊    picture: null,\n+┊   ┊163┊    allTimeMemberIds: [1, 4],\n+┊   ┊164┊    listingMemberIds: [1, 4],\n+┊   ┊165┊    adminIds: null,\n+┊   ┊166┊    ownerId: null,\n+┊   ┊167┊    messages: [\n+┊   ┊168┊      {\n+┊   ┊169┊        id: 1,\n+┊   ┊170┊        chatId: 2,\n+┊   ┊171┊        senderId: 1,\n+┊   ┊172┊        content: 'Hey, it\\'s me',\n+┊   ┊173┊        createdAt: moment().subtract(2, 'hours').unix(),\n+┊   ┊174┊        type: MessageType.TEXT,\n+┊   ┊175┊        recipients: [\n+┊   ┊176┊          {\n+┊   ┊177┊            userId: 4,\n+┊   ┊178┊            messageId: 1,\n+┊   ┊179┊            chatId: 2,\n+┊   ┊180┊            receivedAt: null,\n+┊   ┊181┊            readAt: null,\n+┊   ┊182┊          },\n+┊   ┊183┊        ],\n+┊   ┊184┊        holderIds: [1, 4],\n+┊   ┊185┊      },\n+┊   ┊186┊    ],\n+┊   ┊187┊  },\n+┊   ┊188┊  {\n+┊   ┊189┊    id: 3,\n+┊   ┊190┊    name: null,\n+┊   ┊191┊    picture: null,\n+┊   ┊192┊    allTimeMemberIds: [1, 5],\n+┊   ┊193┊    listingMemberIds: [1, 5],\n+┊   ┊194┊    adminIds: null,\n+┊   ┊195┊    ownerId: null,\n+┊   ┊196┊    messages: [\n+┊   ┊197┊      {\n+┊   ┊198┊        id: 1,\n+┊   ┊199┊        chatId: 3,\n+┊   ┊200┊        senderId: 1,\n+┊   ┊201┊        content: 'I should buy a boat',\n+┊   ┊202┊        createdAt: moment().subtract(1, 'days').unix(),\n+┊   ┊203┊        type: MessageType.TEXT,\n+┊   ┊204┊        recipients: [\n+┊   ┊205┊          {\n+┊   ┊206┊            userId: 5,\n+┊   ┊207┊            messageId: 1,\n+┊   ┊208┊            chatId: 3,\n+┊   ┊209┊            receivedAt: null,\n+┊   ┊210┊            readAt: null,\n+┊   ┊211┊          },\n+┊   ┊212┊        ],\n+┊   ┊213┊        holderIds: [1, 5],\n+┊   ┊214┊      },\n+┊   ┊215┊      {\n+┊   ┊216┊        id: 2,\n+┊   ┊217┊        chatId: 3,\n+┊   ┊218┊        senderId: 1,\n+┊   ┊219┊        content: 'You still there?',\n+┊   ┊220┊        createdAt: moment().subtract(1, 'days').add(16, 'hours').unix(),\n+┊   ┊221┊        type: MessageType.TEXT,\n+┊   ┊222┊        recipients: [\n+┊   ┊223┊          {\n+┊   ┊224┊            userId: 5,\n+┊   ┊225┊            messageId: 2,\n+┊   ┊226┊            chatId: 3,\n+┊   ┊227┊            receivedAt: null,\n+┊   ┊228┊            readAt: null,\n+┊   ┊229┊          },\n+┊   ┊230┊        ],\n+┊   ┊231┊        holderIds: [1, 5],\n+┊   ┊232┊      },\n+┊   ┊233┊    ],\n+┊   ┊234┊  },\n+┊   ┊235┊  {\n+┊   ┊236┊    id: 4,\n+┊   ┊237┊    name: null,\n+┊   ┊238┊    picture: null,\n+┊   ┊239┊    allTimeMemberIds: [3, 4],\n+┊   ┊240┊    listingMemberIds: [3, 4],\n+┊   ┊241┊    adminIds: null,\n+┊   ┊242┊    ownerId: null,\n+┊   ┊243┊    messages: [\n+┊   ┊244┊      {\n+┊   ┊245┊        id: 1,\n+┊   ┊246┊        chatId: 4,\n+┊   ┊247┊        senderId: 3,\n+┊   ┊248┊        content: 'Look at my mukluks!',\n+┊   ┊249┊        createdAt: moment().subtract(4, 'days').unix(),\n+┊   ┊250┊        type: MessageType.TEXT,\n+┊   ┊251┊        recipients: [\n+┊   ┊252┊          {\n+┊   ┊253┊            userId: 4,\n+┊   ┊254┊            messageId: 1,\n+┊   ┊255┊            chatId: 4,\n+┊   ┊256┊            receivedAt: null,\n+┊   ┊257┊            readAt: null,\n+┊   ┊258┊          },\n+┊   ┊259┊        ],\n+┊   ┊260┊        holderIds: [3, 4],\n+┊   ┊261┊      },\n+┊   ┊262┊    ],\n+┊   ┊263┊  },\n+┊   ┊264┊  {\n+┊   ┊265┊    id: 5,\n+┊   ┊266┊    name: null,\n+┊   ┊267┊    picture: null,\n+┊   ┊268┊    allTimeMemberIds: [2, 5],\n+┊   ┊269┊    listingMemberIds: [2, 5],\n+┊   ┊270┊    adminIds: null,\n+┊   ┊271┊    ownerId: null,\n+┊   ┊272┊    messages: [\n+┊   ┊273┊      {\n+┊   ┊274┊        id: 1,\n+┊   ┊275┊        chatId: 5,\n+┊   ┊276┊        senderId: 2,\n+┊   ┊277┊        content: 'This is wicked good ice cream.',\n+┊   ┊278┊        createdAt: moment().subtract(2, 'weeks').unix(),\n+┊   ┊279┊        type: MessageType.TEXT,\n+┊   ┊280┊        recipients: [\n+┊   ┊281┊          {\n+┊   ┊282┊            userId: 5,\n+┊   ┊283┊            messageId: 1,\n+┊   ┊284┊            chatId: 5,\n+┊   ┊285┊            receivedAt: null,\n+┊   ┊286┊            readAt: null,\n+┊   ┊287┊          },\n+┊   ┊288┊        ],\n+┊   ┊289┊        holderIds: [2, 5],\n+┊   ┊290┊      },\n+┊   ┊291┊      {\n+┊   ┊292┊        id: 2,\n+┊   ┊293┊        chatId: 6,\n+┊   ┊294┊        senderId: 5,\n+┊   ┊295┊        content: 'Love it!',\n+┊   ┊296┊        createdAt: moment().subtract(2, 'weeks').add(10, 'minutes').unix(),\n+┊   ┊297┊        type: MessageType.TEXT,\n+┊   ┊298┊        recipients: [\n+┊   ┊299┊          {\n+┊   ┊300┊            userId: 2,\n+┊   ┊301┊            messageId: 2,\n+┊   ┊302┊            chatId: 5,\n+┊   ┊303┊            receivedAt: null,\n+┊   ┊304┊            readAt: null,\n+┊   ┊305┊          },\n+┊   ┊306┊        ],\n+┊   ┊307┊        holderIds: [5, 2],\n+┊   ┊308┊      },\n+┊   ┊309┊    ],\n+┊   ┊310┊  },\n+┊   ┊311┊  {\n+┊   ┊312┊    id: 6,\n+┊   ┊313┊    name: null,\n+┊   ┊314┊    picture: null,\n+┊   ┊315┊    allTimeMemberIds: [1, 6],\n+┊   ┊316┊    listingMemberIds: [1],\n+┊   ┊317┊    adminIds: null,\n+┊   ┊318┊    ownerId: null,\n+┊   ┊319┊    messages: [],\n+┊   ┊320┊  },\n+┊   ┊321┊  {\n+┊   ┊322┊    id: 7,\n+┊   ┊323┊    name: null,\n+┊   ┊324┊    picture: null,\n+┊   ┊325┊    allTimeMemberIds: [2, 1],\n+┊   ┊326┊    listingMemberIds: [2],\n+┊   ┊327┊    adminIds: null,\n+┊   ┊328┊    ownerId: null,\n+┊   ┊329┊    messages: [],\n+┊   ┊330┊  },\n+┊   ┊331┊  {\n+┊   ┊332┊    id: 8,\n+┊   ┊333┊    name: 'A user 0 group',\n+┊   ┊334┊    picture: 'https://randomuser.me/api/portraits/thumb/lego/1.jpg',\n+┊   ┊335┊    allTimeMemberIds: [1, 3, 4, 6],\n+┊   ┊336┊    listingMemberIds: [1, 3, 4, 6],\n+┊   ┊337┊    actualGroupMemberIds: [1, 4, 6],\n+┊   ┊338┊    adminIds: [1, 6],\n+┊   ┊339┊    ownerId: 1,\n+┊   ┊340┊    messages: [\n+┊   ┊341┊      {\n+┊   ┊342┊        id: 1,\n+┊   ┊343┊        chatId: 8,\n+┊   ┊344┊        senderId: 1,\n+┊   ┊345┊        content: 'I made a group',\n+┊   ┊346┊        createdAt: moment().subtract(2, 'weeks').unix(),\n+┊   ┊347┊        type: MessageType.TEXT,\n+┊   ┊348┊        recipients: [\n+┊   ┊349┊          {\n+┊   ┊350┊            userId: 3,\n+┊   ┊351┊            messageId: 1,\n+┊   ┊352┊            chatId: 8,\n+┊   ┊353┊            receivedAt: null,\n+┊   ┊354┊            readAt: null,\n+┊   ┊355┊          },\n+┊   ┊356┊          {\n+┊   ┊357┊            userId: 4,\n+┊   ┊358┊            messageId: 1,\n+┊   ┊359┊            chatId: 8,\n+┊   ┊360┊            receivedAt: moment().subtract(2, 'weeks').add(1, 'minutes').unix(),\n+┊   ┊361┊            readAt: moment().subtract(2, 'weeks').add(5, 'minutes').unix(),\n+┊   ┊362┊          },\n+┊   ┊363┊          {\n+┊   ┊364┊            userId: 6,\n+┊   ┊365┊            messageId: 1,\n+┊   ┊366┊            chatId: 8,\n+┊   ┊367┊            receivedAt: null,\n+┊   ┊368┊            readAt: null,\n+┊   ┊369┊          },\n+┊   ┊370┊        ],\n+┊   ┊371┊        holderIds: [1, 3, 4, 6],\n+┊   ┊372┊      },\n+┊   ┊373┊      {\n+┊   ┊374┊        id: 2,\n+┊   ┊375┊        chatId: 8,\n+┊   ┊376┊        senderId: 1,\n+┊   ┊377┊        content: 'Ops, user 3 was not supposed to be here',\n+┊   ┊378┊        createdAt: moment().subtract(2, 'weeks').add(2, 'minutes').unix(),\n+┊   ┊379┊        type: MessageType.TEXT,\n+┊   ┊380┊        recipients: [\n+┊   ┊381┊          {\n+┊   ┊382┊            userId: 4,\n+┊   ┊383┊            messageId: 2,\n+┊   ┊384┊            chatId: 8,\n+┊   ┊385┊            receivedAt: moment().subtract(2, 'weeks').add(3, 'minutes').unix(),\n+┊   ┊386┊            readAt: moment().subtract(2, 'weeks').add(5, 'minutes').unix(),\n+┊   ┊387┊          },\n+┊   ┊388┊          {\n+┊   ┊389┊            userId: 6,\n+┊   ┊390┊            messageId: 2,\n+┊   ┊391┊            chatId: 8,\n+┊   ┊392┊            receivedAt: null,\n+┊   ┊393┊            readAt: null,\n+┊   ┊394┊          },\n+┊   ┊395┊        ],\n+┊   ┊396┊        holderIds: [1, 4, 6],\n+┊   ┊397┊      },\n+┊   ┊398┊      {\n+┊   ┊399┊        id: 3,\n+┊   ┊400┊        chatId: 8,\n+┊   ┊401┊        senderId: 4,\n+┊   ┊402┊        content: 'Awesome!',\n+┊   ┊403┊        createdAt: moment().subtract(2, 'weeks').add(10, 'minutes').unix(),\n+┊   ┊404┊        type: MessageType.TEXT,\n+┊   ┊405┊        recipients: [\n+┊   ┊406┊          {\n+┊   ┊407┊            userId: 1,\n+┊   ┊408┊            messageId: 3,\n+┊   ┊409┊            chatId: 8,\n+┊   ┊410┊            receivedAt: null,\n+┊   ┊411┊            readAt: null,\n+┊   ┊412┊          },\n+┊   ┊413┊          {\n+┊   ┊414┊            userId: 6,\n+┊   ┊415┊            messageId: 3,\n+┊   ┊416┊            chatId: 8,\n+┊   ┊417┊            receivedAt: null,\n+┊   ┊418┊            readAt: null,\n+┊   ┊419┊          },\n+┊   ┊420┊        ],\n+┊   ┊421┊        holderIds: [1, 4, 6],\n+┊   ┊422┊      },\n+┊   ┊423┊    ],\n+┊   ┊424┊  },\n+┊   ┊425┊  {\n+┊   ┊426┊    id: 9,\n+┊   ┊427┊    name: 'A user 5 group',\n+┊   ┊428┊    picture: null,\n+┊   ┊429┊    allTimeMemberIds: [6, 3],\n+┊   ┊430┊    listingMemberIds: [6, 3],\n+┊   ┊431┊    actualGroupMemberIds: [6, 3],\n+┊   ┊432┊    adminIds: [6],\n+┊   ┊433┊    ownerId: 6,\n+┊   ┊434┊    messages: [],\n+┊   ┊435┊  },\n+┊   ┊436┊];\n+┊   ┊437┊\n+┊   ┊438┊export const db = {users, chats};\n```\n\n[}]: #\n\nIts' finally time to create our schema and our resolvers:\n\n[{]: <helper> (diffStep \"1.3\" module=\"server\")\n\n#### Step 1.3: Add resolvers and schema\n\n##### Changed schema&#x2F;resolvers.ts\n```diff\n@@ -1,6 +1,51 @@\n+┊  ┊ 1┊import { Chat, db, Message, Recipient, User } from \"../db\";\n ┊ 1┊ 2┊import { IResolvers } from \"graphql-tools/dist/Interfaces\";\n ┊ 2┊ 3┊\n+┊  ┊ 4┊let users = db.users;\n+┊  ┊ 5┊let chats = db.chats;\n+┊  ┊ 6┊const currentUser = 1;\n+┊  ┊ 7┊\n ┊ 3┊ 8┊export const resolvers: IResolvers = {\n ┊ 4┊ 9┊  Query: {\n+┊  ┊10┊    // Show all users for the moment.\n+┊  ┊11┊    users: (): User[] => users.filter(user => user.id !== currentUser),\n+┊  ┊12┊    chats: (): Chat[] => chats.filter(chat => chat.listingMemberIds.includes(currentUser)),\n+┊  ┊13┊    chat: (obj: any, {chatId}): Chat | null => chats.find(chat => chat.id === chatId) || null,\n+┊  ┊14┊  },\n+┊  ┊15┊  Chat: {\n+┊  ┊16┊    name: (chat: Chat): string => chat.name ? chat.name : users\n+┊  ┊17┊      .find(user => user.id === chat.allTimeMemberIds.find(userId => userId !== currentUser))!.name,\n+┊  ┊18┊    picture: (chat: Chat) => chat.name ? chat.picture : users\n+┊  ┊19┊      .find(user => user.id === chat.allTimeMemberIds.find(userId => userId !== currentUser))!.picture,\n+┊  ┊20┊    allTimeMembers: (chat: Chat): User[] => users.filter(user => chat.allTimeMemberIds.includes(user.id)),\n+┊  ┊21┊    listingMembers: (chat: Chat): User[] => users.filter(user => chat.listingMemberIds.includes(user.id)),\n+┊  ┊22┊    actualGroupMembers: (chat: Chat): User[] => users.filter(user => chat.actualGroupMemberIds && chat.actualGroupMemberIds.includes(user.id)),\n+┊  ┊23┊    admins: (chat: Chat): User[] => users.filter(user => chat.adminIds && chat.adminIds.includes(user.id)),\n+┊  ┊24┊    owner: (chat: Chat): User | null => users.find(user => chat.ownerId === user.id) || null,\n+┊  ┊25┊    messages: (chat: Chat, {amount = null}: {amount: number}): Message[] => {\n+┊  ┊26┊      const messages = chat.messages\n+┊  ┊27┊      .filter(message => message.holderIds.includes(currentUser))\n+┊  ┊28┊      .sort((a, b) => b.createdAt - a.createdAt) || <Message[]>[];\n+┊  ┊29┊      return (amount ? messages.slice(0, amount) : messages).reverse();\n+┊  ┊30┊    },\n+┊  ┊31┊    unreadMessages: (chat: Chat): number => chat.messages\n+┊  ┊32┊      .filter(message => message.holderIds.includes(currentUser) &&\n+┊  ┊33┊        message.recipients.find(recipient => recipient.userId === currentUser && !recipient.readAt))\n+┊  ┊34┊      .length,\n+┊  ┊35┊    isGroup: (chat: Chat): boolean => !!chat.name,\n+┊  ┊36┊  },\n+┊  ┊37┊  Message: {\n+┊  ┊38┊    chat: (message: Message): Chat | null => chats.find(chat => message.chatId === chat.id) || null,\n+┊  ┊39┊    sender: (message: Message): User | null => users.find(user => user.id === message.senderId) || null,\n+┊  ┊40┊    holders: (message: Message): User[] => users.filter(user => message.holderIds.includes(user.id)),\n+┊  ┊41┊    ownership: (message: Message): boolean => message.senderId === currentUser,\n+┊  ┊42┊  },\n+┊  ┊43┊  Recipient: {\n+┊  ┊44┊    user: (recipient: Recipient): User | null => users.find(user => recipient.userId === user.id) || null,\n+┊  ┊45┊    message: (recipient: Recipient): Message | null => {\n+┊  ┊46┊      const chat = chats.find(chat => recipient.chatId === chat.id);\n+┊  ┊47┊      return chat ? chat.messages.find(message => recipient.messageId === message.id) || null : null;\n+┊  ┊48┊    },\n+┊  ┊49┊    chat: (recipient: Recipient): Chat | null => chats.find(chat => recipient.chatId === chat.id) || null,\n ┊ 5┊50┊  },\n ┊ 6┊51┊};\n```\n\n##### Changed schema&#x2F;typeDefs.ts\n```diff\n@@ -1,4 +1,70 @@\n ┊ 1┊ 1┊import { ITypeDefinitions } from \"graphql-tools/dist/Interfaces\";\n ┊ 2┊ 2┊\n ┊ 3┊ 3┊export const typeDefs: ITypeDefinitions = `\n+┊  ┊ 4┊  type Query {\n+┊  ┊ 5┊    users: [User!]\n+┊  ┊ 6┊    chats: [Chat!]\n+┊  ┊ 7┊    chat(chatId: ID!): Chat\n+┊  ┊ 8┊  }\n+┊  ┊ 9┊\n+┊  ┊10┊  enum MessageType {\n+┊  ┊11┊    LOCATION\n+┊  ┊12┊    TEXT\n+┊  ┊13┊    PICTURE\n+┊  ┊14┊  }\n+┊  ┊15┊  \n+┊  ┊16┊  type Chat {\n+┊  ┊17┊    #May be a chat or a group\n+┊  ┊18┊    id: ID!\n+┊  ┊19┊    #Computed for chats\n+┊  ┊20┊    name: String\n+┊  ┊21┊    #Computed for chats\n+┊  ┊22┊    picture: String\n+┊  ┊23┊    #All members, current and past ones.\n+┊  ┊24┊    allTimeMembers: [User!]!\n+┊  ┊25┊    #Whoever gets the chat listed. For groups includes past members who still didn't delete the group.\n+┊  ┊26┊    listingMembers: [User!]!\n+┊  ┊27┊    #Actual members of the group (they are not the only ones who get the group listed). Null for chats.\n+┊  ┊28┊    actualGroupMembers: [User!]!\n+┊  ┊29┊    #Null for chats\n+┊  ┊30┊    admins: [User!]\n+┊  ┊31┊    #If null the group is read-only. Null for chats.\n+┊  ┊32┊    owner: User\n+┊  ┊33┊    messages(amount: Int): [Message]!\n+┊  ┊34┊    #Computed property\n+┊  ┊35┊    unreadMessages: Int!\n+┊  ┊36┊    #Computed property\n+┊  ┊37┊    isGroup: Boolean!\n+┊  ┊38┊  }\n+┊  ┊39┊\n+┊  ┊40┊  type Message {\n+┊  ┊41┊    id: ID!\n+┊  ┊42┊    sender: User!\n+┊  ┊43┊    chat: Chat!\n+┊  ┊44┊    content: String!\n+┊  ┊45┊    createdAt: String!\n+┊  ┊46┊    #FIXME: should return MessageType\n+┊  ┊47┊    type: Int!\n+┊  ┊48┊    #Whoever received the message\n+┊  ┊49┊    recipients: [Recipient!]!\n+┊  ┊50┊    #Whoever still holds a copy of the message. Cannot be null because the message gets deleted otherwise\n+┊  ┊51┊    holders: [User!]!\n+┊  ┊52┊    #Computed property\n+┊  ┊53┊    ownership: Boolean!\n+┊  ┊54┊  }\n+┊  ┊55┊  \n+┊  ┊56┊  type Recipient {\n+┊  ┊57┊    user: User!\n+┊  ┊58┊    message: Message!\n+┊  ┊59┊    chat: Chat!\n+┊  ┊60┊    receivedAt: String\n+┊  ┊61┊    readAt: String\n+┊  ┊62┊  }\n+┊  ┊63┊\n+┊  ┊64┊  type User {\n+┊  ┊65┊    id: ID!\n+┊  ┊66┊    name: String\n+┊  ┊67┊    picture: String\n+┊  ┊68┊    phone: String\n+┊  ┊69┊  }\n ┊ 4┊70┊`;\n```\n\n[}]: #\n\nOut basic server is already done and working. We still have no way to do any kind of mutation, but we already set up several queries to return a list of users or chats.\nIn particular we can choose if we want to return all the chats (and how many messages we want to return for each chat) or if we want to return a single chat. We can also choose which and how many properties we want to return for each query.\nWe can start the server by simply running:\n\n    $ npm start\n\n## Client\n\nNow we can concentrate on the client and bootstrap it using angular-cli.\nFirst you will need to install angular-cli globally with:\n\n    $ npm install -g @angular/cli\n\nThen we can create a new project from scratch:\n\n    $ ng new client --style scss\n\nTime to install a couple of packages:\n\n    $ npm install apollo-angular apollo-angular-link-http apollo-cache-inmemory apollo-client apollo-link graphql graphql-tag\n    $ npm install --save-dev @types/graphql\n\nWe will also need to add `esnext.asynciterable` to the libs:\n\n[{]: <helper> (diffStep \"1.1\" files=\"tsconfig.json\" module=\"client\")\n\n#### Step 1.1: Add angular-apollo to app module\n\n##### Changed tsconfig.json\n```diff\n@@ -8,13 +8,15 @@\n ┊ 8┊ 8┊    \"moduleResolution\": \"node\",\n ┊ 9┊ 9┊    \"emitDecoratorMetadata\": true,\n ┊10┊10┊    \"experimentalDecorators\": true,\n+┊  ┊11┊    \"downlevelIteration\": true,\n ┊11┊12┊    \"target\": \"es5\",\n ┊12┊13┊    \"typeRoots\": [\n ┊13┊14┊      \"node_modules/@types\"\n ┊14┊15┊    ],\n ┊15┊16┊    \"lib\": [\n ┊16┊17┊      \"es2017\",\n-┊17┊  ┊      \"dom\"\n+┊  ┊18┊      \"dom\",\n+┊  ┊19┊      \"esnext.asynciterable\"\n ┊18┊20┊    ]\n ┊19┊21┊  }\n ┊20┊22┊}\n```\n\n[}]: #\n\nWe also added the `downlevelIteration` option which is required to make sure that everything will be transpiled to ES5.\n\nTo get started using Apollo with Angular, we need to import two NgModules, `ApolloModule` and `HttpLinkModule`.\n\n- `ApolloModule` is the center of using GraphQL in your app! It includes all needed services that allows to use ApolloClient’s features.\n- `HttpLinkModule` makes it easy to fetch data in Angular.\n\n`HttpLinkModule` is optional, you can replace it with any other Link.\nIts biggest advantage of all is that it uses `HttpClient` internally so it’s possible to use it in `NativeScript` or in combination with any other `HttpClient` provider. By using `HttpLinkModule` you get Server-Side Rendering for free, without any additional work.\n\nTo get started, inject `Apollo` and `HttpLink` services and then create a client:\n\n[{]: <helper> (diffStep \"1.1\" files=\"app.module.ts\" module=\"client\")\n\n#### Step 1.1: Add angular-apollo to app module\n\n##### Changed src&#x2F;app&#x2F;app.module.ts\n```diff\n@@ -2,15 +2,33 @@\n ┊ 2┊ 2┊import { NgModule } from '@angular/core';\n ┊ 3┊ 3┊\n ┊ 4┊ 4┊import { AppComponent } from './app.component';\n+┊  ┊ 5┊import {HttpClientModule} from '@angular/common/http';\n+┊  ┊ 6┊import {HttpLink, HttpLinkModule, Options} from 'apollo-angular-link-http';\n+┊  ┊ 7┊import {Apollo, ApolloModule} from 'apollo-angular';\n+┊  ┊ 8┊import {InMemoryCache} from 'apollo-cache-inmemory';\n ┊ 5┊ 9┊\n ┊ 6┊10┊@NgModule({\n ┊ 7┊11┊  declarations: [\n ┊ 8┊12┊    AppComponent\n ┊ 9┊13┊  ],\n ┊10┊14┊  imports: [\n-┊11┊  ┊    BrowserModule\n+┊  ┊15┊    BrowserModule,\n+┊  ┊16┊    // Apollo\n+┊  ┊17┊    ApolloModule,\n+┊  ┊18┊    HttpLinkModule,\n+┊  ┊19┊    HttpClientModule,\n ┊12┊20┊  ],\n ┊13┊21┊  providers: [],\n ┊14┊22┊  bootstrap: [AppComponent]\n ┊15┊23┊})\n-┊16┊  ┊export class AppModule { }\n+┊  ┊24┊export class AppModule {\n+┊  ┊25┊  constructor(\n+┊  ┊26┊    apollo: Apollo,\n+┊  ┊27┊    httpLink: HttpLink,\n+┊  ┊28┊  ) {\n+┊  ┊29┊    apollo.create({\n+┊  ┊30┊      link: httpLink.create(<Options>{uri: 'http://localhost:3000/graphql'}),\n+┊  ┊31┊      cache: new InMemoryCache(),\n+┊  ┊32┊    });\n+┊  ┊33┊  }\n+┊  ┊34┊}\n```\n\n[}]: #\n\nWe're using the `InMemory` cache, but there are several options like `Redux`, `Hermes`, `ngrx`...\n\nThe `gql` template tag is what you use to define GraphQL queries in your Apollo apps. It parses your GraphQL query into the `GraphQL.js AST format` which may then be consumed by Apollo methods. Whenever Apollo is asking for a GraphQL query you will always want to wrap it in a `gql` template tag.\n\nYou can embed a GraphQL document containing only fragments inside of another GraphQL document using template string interpolation. This allows you to use fragments defined in one part of your codebase inside of a query defined in a completely different file.\n\n[{]: <helper> (diffStep \"1.2\" files=\"src/graphql\" module=\"client\")\n\n#### Step 1.2: Add chats service\n\n##### Added src&#x2F;graphql&#x2F;fragment.ts\n```diff\n@@ -0,0 +1,51 @@\n+┊  ┊ 1┊import gql from 'graphql-tag';\n+┊  ┊ 2┊import {DocumentNode} from 'graphql';\n+┊  ┊ 3┊\n+┊  ┊ 4┊export const fragments: {\n+┊  ┊ 5┊  [key: string]: DocumentNode\n+┊  ┊ 6┊} = {\n+┊  ┊ 7┊  chatWithoutMessages: gql`\n+┊  ┊ 8┊    fragment ChatWithoutMessages on Chat {\n+┊  ┊ 9┊      id\n+┊  ┊10┊      name\n+┊  ┊11┊      picture\n+┊  ┊12┊      allTimeMembers {\n+┊  ┊13┊        id\n+┊  ┊14┊      }\n+┊  ┊15┊      unreadMessages\n+┊  ┊16┊      isGroup\n+┊  ┊17┊    }\n+┊  ┊18┊  `,\n+┊  ┊19┊  message: gql`\n+┊  ┊20┊    fragment Message on Message {\n+┊  ┊21┊      id\n+┊  ┊22┊      chat {\n+┊  ┊23┊        id\n+┊  ┊24┊      }\n+┊  ┊25┊      sender {\n+┊  ┊26┊        id\n+┊  ┊27┊        name\n+┊  ┊28┊      }\n+┊  ┊29┊      content\n+┊  ┊30┊      createdAt\n+┊  ┊31┊      type\n+┊  ┊32┊      recipients {\n+┊  ┊33┊        user {\n+┊  ┊34┊          id\n+┊  ┊35┊        }\n+┊  ┊36┊        message {\n+┊  ┊37┊          id\n+┊  ┊38┊          chat {\n+┊  ┊39┊            id\n+┊  ┊40┊          }\n+┊  ┊41┊        }\n+┊  ┊42┊        chat {\n+┊  ┊43┊          id\n+┊  ┊44┊        }\n+┊  ┊45┊        receivedAt\n+┊  ┊46┊        readAt\n+┊  ┊47┊      }\n+┊  ┊48┊      ownership\n+┊  ┊49┊    }\n+┊  ┊50┊  `,\n+┊  ┊51┊};\n```\n\n##### Added src&#x2F;graphql&#x2F;getChats.query.ts\n```diff\n@@ -0,0 +1,17 @@\n+┊  ┊ 1┊import gql from 'graphql-tag';\n+┊  ┊ 2┊import {fragments} from './fragment';\n+┊  ┊ 3┊\n+┊  ┊ 4┊// We use the gql tag to parse our query string into a query document\n+┊  ┊ 5┊export const getChatsQuery = gql`\n+┊  ┊ 6┊  query GetChats($amount: Int) {\n+┊  ┊ 7┊    chats {\n+┊  ┊ 8┊      ...ChatWithoutMessages\n+┊  ┊ 9┊      messages(amount: $amount) {\n+┊  ┊10┊        ...Message\n+┊  ┊11┊      }\n+┊  ┊12┊    }\n+┊  ┊13┊  }\n+┊  ┊14┊\n+┊  ┊15┊  ${fragments['chatWithoutMessages']}\n+┊  ┊16┊  ${fragments['message']}\n+┊  ┊17┊`;\n```\n\n[}]: #\n\nLet's create a simple service to query the chats from our just created server:\n\n[{]: <helper> (diffStep \"1.2\" files=\"src/app/services\" module=\"client\")\n\n#### Step 1.2: Add chats service\n\n##### Added src&#x2F;app&#x2F;services&#x2F;chats.service.ts\n```diff\n@@ -0,0 +1,26 @@\n+┊  ┊ 1┊import {ApolloQueryResult, WatchQueryOptions} from 'apollo-client';\n+┊  ┊ 2┊import {map} from 'rxjs/operators';\n+┊  ┊ 3┊import {Apollo} from 'apollo-angular';\n+┊  ┊ 4┊import {Injectable} from '@angular/core';\n+┊  ┊ 5┊import {getChatsQuery} from '../../graphql/getChats.query';\n+┊  ┊ 6┊\n+┊  ┊ 7┊@Injectable()\n+┊  ┊ 8┊export class ChatsService {\n+┊  ┊ 9┊  messagesAmount = 3;\n+┊  ┊10┊\n+┊  ┊11┊  constructor(private apollo: Apollo) {}\n+┊  ┊12┊\n+┊  ┊13┊  getChats() {\n+┊  ┊14┊    const query = this.apollo.watchQuery<any>(<WatchQueryOptions>{\n+┊  ┊15┊      query: getChatsQuery,\n+┊  ┊16┊      variables: {\n+┊  ┊17┊        amount: this.messagesAmount,\n+┊  ┊18┊      },\n+┊  ┊19┊    });\n+┊  ┊20┊    const chats$ = query.valueChanges.pipe(\n+┊  ┊21┊      map((result: ApolloQueryResult<any>) => result.data.chats)\n+┊  ┊22┊    );\n+┊  ┊23┊\n+┊  ┊24┊    return {query, chats$};\n+┊  ┊25┊  }\n+┊  ┊26┊}\n```\n\n[}]: #\n\nWe just learned how to use Apollo to attach GraphQL query results to the Angular UI. The `watchQuery` method returns a `QueryRef` object which has the `valueChanges` property that is an Observable.\nThat information is stored in Apollo Client’s global cache, so if some other query fetches new information about the chats, this component will update to remain consistent.\nIt’s also possible to fetch data only once. The query method of Apollo service returns an Observable that also resolves with the same result as above.\n\n#### But what is a `QueryRef`?\n\nAs you know, `Apollo.query` method returns an Observable that emits a result, just once, but `Apollo.watchQuery` also does the same except it passes multiple results.\nSo why `Apollo.watchQuery` can not expose an Observable?\n\nIn `ApolloClient.watchQuery` returns an Observable, but not a standard one, it contains many useful methods (like `refetch()`) to manipulate the watched query.\nA normal Observable, has only one method, `subscribe()`.\n\nThe API of `QueryRef` is very simple. It has the same methods as the Apollo’s Observable we talked about. To subscribe to query results you have to access `valueChanges` property which exposes a clean RxJS Observable.\n\nWe will use Materials for the UI, so let's install it:\n\n    $ npm install @angular/cdk @angular/material hammerjs ng2-truncate\n\nLet's configure Material:\n\n[{]: <helper> (diffStep \"1.3\" files=\"src/index.ts, src/main.ts, src/styles.scss\" module=\"client\")\n\n#### Step 1.3: List the chats\n\n##### Changed src&#x2F;main.ts\n```diff\n@@ -4,6 +4,9 @@\n ┊ 4┊ 4┊import { AppModule } from './app/app.module';\n ┊ 5┊ 5┊import { environment } from './environments/environment';\n ┊ 6┊ 6┊\n+┊  ┊ 7┊// Material gestures\n+┊  ┊ 8┊import 'hammerjs';\n+┊  ┊ 9┊\n ┊ 7┊10┊if (environment.production) {\n ┊ 8┊11┊  enableProdMode();\n ┊ 9┊12┊}\n```\n\n##### Changed src&#x2F;styles.scss\n```diff\n@@ -1 +1,8 @@\n ┊1┊1┊/* You can add global styles to this file, and also import other style files */\n+┊ ┊2┊\n+┊ ┊3┊/* Meterial theme */\n+┊ ┊4┊@import \"~@angular/material/prebuilt-themes/indigo-pink.css\";\n+┊ ┊5┊\n+┊ ┊6┊body {\n+┊ ┊7┊  margin: 0;\n+┊ ┊8┊}\n```\n\n[}]: #\n\nWe're now creating a `shared` module where we will define our header component where we're going to project a different content from each component:\n\n[{]: <helper> (diffStep \"1.3\" files=\"src/app/shared/*\" module=\"client\")\n\n#### Step 1.3: List the chats\n\n##### Added src&#x2F;app&#x2F;shared&#x2F;components&#x2F;toolbar&#x2F;toolbar.component.scss\n```diff\n@@ -0,0 +1,13 @@\n+┊  ┊ 1┊:host {\n+┊  ┊ 2┊  display: block;\n+┊  ┊ 3┊  height: 8vh;\n+┊  ┊ 4┊}\n+┊  ┊ 5┊\n+┊  ┊ 6┊.mat-toolbar {\n+┊  ┊ 7┊  justify-content: space-between;\n+┊  ┊ 8┊  height: 100%;\n+┊  ┊ 9┊\n+┊  ┊10┊  .left-block {\n+┊  ┊11┊    display: flex;\n+┊  ┊12┊  }\n+┊  ┊13┊}\n```\n\n##### Added src&#x2F;app&#x2F;shared&#x2F;components&#x2F;toolbar&#x2F;toolbar.component.ts\n```diff\n@@ -0,0 +1,18 @@\n+┊  ┊ 1┊import {Component} from '@angular/core';\n+┊  ┊ 2┊\n+┊  ┊ 3┊@Component({\n+┊  ┊ 4┊  selector: 'app-toolbar',\n+┊  ┊ 5┊  template: `\n+┊  ┊ 6┊    <mat-toolbar>\n+┊  ┊ 7┊      <div class=\"left-block\">\n+┊  ┊ 8┊        <ng-content select=\".navigation\"></ng-content>\n+┊  ┊ 9┊        <ng-content select=\".title\"></ng-content>\n+┊  ┊10┊      </div>\n+┊  ┊11┊      <ng-content select=\".menu\"></ng-content>\n+┊  ┊12┊    </mat-toolbar>\n+┊  ┊13┊  `,\n+┊  ┊14┊  styleUrls: ['./toolbar.component.scss']\n+┊  ┊15┊})\n+┊  ┊16┊export class ToolbarComponent {\n+┊  ┊17┊\n+┊  ┊18┊}\n```\n\n##### Added src&#x2F;app&#x2F;shared&#x2F;shared.module.ts\n```diff\n@@ -0,0 +1,28 @@\n+┊  ┊ 1┊import {BrowserModule} from '@angular/platform-browser';\n+┊  ┊ 2┊import {NgModule} from '@angular/core';\n+┊  ┊ 3┊\n+┊  ┊ 4┊import {MatToolbarModule} from '@angular/material';\n+┊  ┊ 5┊import {ToolbarComponent} from './components/toolbar/toolbar.component';\n+┊  ┊ 6┊import {FormsModule} from '@angular/forms';\n+┊  ┊ 7┊import {BrowserAnimationsModule} from '@angular/platform-browser/animations';\n+┊  ┊ 8┊\n+┊  ┊ 9┊@NgModule({\n+┊  ┊10┊  declarations: [\n+┊  ┊11┊    ToolbarComponent,\n+┊  ┊12┊  ],\n+┊  ┊13┊  imports: [\n+┊  ┊14┊    BrowserModule,\n+┊  ┊15┊    // Material\n+┊  ┊16┊    MatToolbarModule,\n+┊  ┊17┊    // Animations\n+┊  ┊18┊    BrowserAnimationsModule,\n+┊  ┊19┊    // Forms\n+┊  ┊20┊    FormsModule,\n+┊  ┊21┊  ],\n+┊  ┊22┊  providers: [],\n+┊  ┊23┊  exports: [\n+┊  ┊24┊    ToolbarComponent,\n+┊  ┊25┊  ],\n+┊  ┊26┊})\n+┊  ┊27┊export class SharedModule {\n+┊  ┊28┊}\n```\n\n[}]: #\n\nNow we want to create the `chats-lister` module, with a container component called `ChatsComponent` and a couple of presentational components.\n\n[{]: <helper> (diffStep \"1.3\" files=\"src/app/chats-lister/*\" module=\"client\")\n\n#### Step 1.3: List the chats\n\n##### Added src&#x2F;app&#x2F;chats-lister&#x2F;chats-lister.module.ts\n```diff\n@@ -0,0 +1,49 @@\n+┊  ┊ 1┊import { BrowserModule } from '@angular/platform-browser';\n+┊  ┊ 2┊import { NgModule } from '@angular/core';\n+┊  ┊ 3┊\n+┊  ┊ 4┊import {BrowserAnimationsModule} from '@angular/platform-browser/animations';\n+┊  ┊ 5┊import {MatButtonModule, MatIconModule, MatListModule, MatMenuModule} from '@angular/material';\n+┊  ┊ 6┊import {RouterModule, Routes} from '@angular/router';\n+┊  ┊ 7┊import {FormsModule} from '@angular/forms';\n+┊  ┊ 8┊import {ChatsService} from '../services/chats.service';\n+┊  ┊ 9┊import {ChatItemComponent} from './components/chat-item/chat-item.component';\n+┊  ┊10┊import {ChatsComponent} from './containers/chats/chats.component';\n+┊  ┊11┊import {ChatsListComponent} from './components/chats-list/chats-list.component';\n+┊  ┊12┊import {TruncateModule} from 'ng2-truncate';\n+┊  ┊13┊import {SharedModule} from '../shared/shared.module';\n+┊  ┊14┊\n+┊  ┊15┊const routes: Routes = [\n+┊  ┊16┊  {path: '', redirectTo: 'chats', pathMatch: 'full'},\n+┊  ┊17┊  {path: 'chats', component: ChatsComponent},\n+┊  ┊18┊];\n+┊  ┊19┊\n+┊  ┊20┊@NgModule({\n+┊  ┊21┊  declarations: [\n+┊  ┊22┊    ChatsComponent,\n+┊  ┊23┊    ChatsListComponent,\n+┊  ┊24┊    ChatItemComponent,\n+┊  ┊25┊  ],\n+┊  ┊26┊  imports: [\n+┊  ┊27┊    BrowserModule,\n+┊  ┊28┊    // Material\n+┊  ┊29┊    MatMenuModule,\n+┊  ┊30┊    MatIconModule,\n+┊  ┊31┊    MatButtonModule,\n+┊  ┊32┊    MatListModule,\n+┊  ┊33┊    // Animations\n+┊  ┊34┊    BrowserAnimationsModule,\n+┊  ┊35┊    // Routing\n+┊  ┊36┊    RouterModule.forChild(routes),\n+┊  ┊37┊    // Forms\n+┊  ┊38┊    FormsModule,\n+┊  ┊39┊    // Truncate Pipe\n+┊  ┊40┊    TruncateModule,\n+┊  ┊41┊    // Feature modules\n+┊  ┊42┊    SharedModule,\n+┊  ┊43┊  ],\n+┊  ┊44┊  providers: [\n+┊  ┊45┊    ChatsService,\n+┊  ┊46┊  ],\n+┊  ┊47┊})\n+┊  ┊48┊export class ChatsListerModule {\n+┊  ┊49┊}\n```\n\n##### Added src&#x2F;app&#x2F;chats-lister&#x2F;components&#x2F;chat-item&#x2F;chat-item.component.scss\n```diff\n@@ -0,0 +1,17 @@\n+┊  ┊ 1┊:host {\n+┊  ┊ 2┊  display: block;\n+┊  ┊ 3┊  width: 100%;\n+┊  ┊ 4┊}\n+┊  ┊ 5┊\n+┊  ┊ 6┊.chat-row {\n+┊  ┊ 7┊  padding: 0;\n+┊  ┊ 8┊  display: flex;\n+┊  ┊ 9┊  width: 100%;\n+┊  ┊10┊  justify-content: space-between;\n+┊  ┊11┊  align-items: center;\n+┊  ┊12┊\n+┊  ┊13┊  .chat-recipient {\n+┊  ┊14┊    display: flex;\n+┊  ┊15┊    width: 60%;\n+┊  ┊16┊  }\n+┊  ┊17┊}\n```\n\n##### Added src&#x2F;app&#x2F;chats-lister&#x2F;components&#x2F;chat-item&#x2F;chat-item.component.ts\n```diff\n@@ -0,0 +1,20 @@\n+┊  ┊ 1┊import {Component, Input} from '@angular/core';\n+┊  ┊ 2┊\n+┊  ┊ 3┊@Component({\n+┊  ┊ 4┊  selector: 'app-chat-item',\n+┊  ┊ 5┊  template: `\n+┊  ┊ 6┊    <div class=\"chat-row\">\n+┊  ┊ 7┊        <div class=\"chat-recipient\">\n+┊  ┊ 8┊          <img *ngIf=\"chat.picture\" [src]=\"chat.picture\" width=\"48\" height=\"48\">\n+┊  ┊ 9┊          <div>{{ chat.name }} [id: {{ chat.id }}]</div>\n+┊  ┊10┊        </div>\n+┊  ┊11┊        <div class=\"chat-content\">{{ chat.messages[chat.messages.length - 1]?.content | truncate : 20 : '...' }}</div>\n+┊  ┊12┊    </div>\n+┊  ┊13┊  `,\n+┊  ┊14┊  styleUrls: ['chat-item.component.scss'],\n+┊  ┊15┊})\n+┊  ┊16┊export class ChatItemComponent {\n+┊  ┊17┊  // tslint:disable-next-line:no-input-rename\n+┊  ┊18┊  @Input('item')\n+┊  ┊19┊  chat: any;\n+┊  ┊20┊}\n```\n\n##### Added src&#x2F;app&#x2F;chats-lister&#x2F;components&#x2F;chats-list&#x2F;chats-list.component.scss\n```diff\n@@ -0,0 +1,3 @@\n+┊ ┊1┊:host {\n+┊ ┊2┊  display: block;\n+┊ ┊3┊}\n```\n\n##### Added src&#x2F;app&#x2F;chats-lister&#x2F;components&#x2F;chats-list&#x2F;chats-list.component.ts\n```diff\n@@ -0,0 +1,20 @@\n+┊  ┊ 1┊import {Component, Input} from '@angular/core';\n+┊  ┊ 2┊\n+┊  ┊ 3┊@Component({\n+┊  ┊ 4┊  selector: 'app-chats-list',\n+┊  ┊ 5┊  template: `\n+┊  ┊ 6┊    <mat-list>\n+┊  ┊ 7┊      <mat-list-item *ngFor=\"let chat of chats\">\n+┊  ┊ 8┊        <app-chat-item [item]=\"chat\"></app-chat-item>\n+┊  ┊ 9┊      </mat-list-item>\n+┊  ┊10┊    </mat-list>\n+┊  ┊11┊  `,\n+┊  ┊12┊  styleUrls: ['chats-list.component.scss'],\n+┊  ┊13┊})\n+┊  ┊14┊export class ChatsListComponent {\n+┊  ┊15┊  // tslint:disable-next-line:no-input-rename\n+┊  ┊16┊  @Input('items')\n+┊  ┊17┊  chats: any[];\n+┊  ┊18┊\n+┊  ┊19┊  constructor() {}\n+┊  ┊20┊}\n```\n\n##### Added src&#x2F;app&#x2F;chats-lister&#x2F;containers&#x2F;chats&#x2F;chats.component.scss\n```diff\n@@ -0,0 +1,5 @@\n+┊ ┊1┊.chat-button {\n+┊ ┊2┊  position: absolute;\n+┊ ┊3┊  bottom: 5vw;\n+┊ ┊4┊  right: 5vw;\n+┊ ┊5┊}\n```\n\n##### Added src&#x2F;app&#x2F;chats-lister&#x2F;containers&#x2F;chats&#x2F;chats.component.ts\n```diff\n@@ -0,0 +1,46 @@\n+┊  ┊ 1┊import {Component, OnInit} from '@angular/core';\n+┊  ┊ 2┊import {ChatsService} from '../../../services/chats.service';\n+┊  ┊ 3┊import {Observable} from 'rxjs';\n+┊  ┊ 4┊\n+┊  ┊ 5┊@Component({\n+┊  ┊ 6┊  template: `\n+┊  ┊ 7┊    <app-toolbar>\n+┊  ┊ 8┊      <div class=\"title\">Whatsapp Clone</div>\n+┊  ┊ 9┊      <button mat-icon-button [matMenuTriggerFor]=\"menu\" class=\"menu\">\n+┊  ┊10┊        <mat-icon>more_vert</mat-icon>\n+┊  ┊11┊      </button>\n+┊  ┊12┊    </app-toolbar>\n+┊  ┊13┊\n+┊  ┊14┊    <mat-menu #menu=\"matMenu\">\n+┊  ┊15┊      <button mat-menu-item>\n+┊  ┊16┊        <mat-icon>dialpad</mat-icon>\n+┊  ┊17┊        <span>Redial</span>\n+┊  ┊18┊      </button>\n+┊  ┊19┊      <button mat-menu-item disabled>\n+┊  ┊20┊        <mat-icon>voicemail</mat-icon>\n+┊  ┊21┊        <span>Check voicemail</span>\n+┊  ┊22┊      </button>\n+┊  ┊23┊      <button mat-menu-item>\n+┊  ┊24┊        <mat-icon>notifications_off</mat-icon>\n+┊  ┊25┊        <span>Disable alerts</span>\n+┊  ┊26┊      </button>\n+┊  ┊27┊    </mat-menu>\n+┊  ┊28┊\n+┊  ┊29┊    <app-chats-list [items]=\"chats$ | async\"></app-chats-list>\n+┊  ┊30┊\n+┊  ┊31┊    <button class=\"chat-button\" mat-fab color=\"primary\">\n+┊  ┊32┊      <mat-icon aria-label=\"Icon-button with a + icon\">add</mat-icon>\n+┊  ┊33┊    </button>\n+┊  ┊34┊  `,\n+┊  ┊35┊  styleUrls: ['./chats.component.scss'],\n+┊  ┊36┊})\n+┊  ┊37┊export class ChatsComponent implements OnInit {\n+┊  ┊38┊  chats$: Observable<any[]>;\n+┊  ┊39┊\n+┊  ┊40┊  constructor(private chatsService: ChatsService) {\n+┊  ┊41┊  }\n+┊  ┊42┊\n+┊  ┊43┊  ngOnInit() {\n+┊  ┊44┊    this.chats$ = this.chatsService.getChats().chats$;\n+┊  ┊45┊  }\n+┊  ┊46┊}\n```\n\n[}]: #\n\nFinally let's wire everything up to the main module:\n\n[{]: <helper> (diffStep \"1.3\" files=\"src/app/app.component.ts, src/app/app.module.ts\" module=\"client\")\n\n#### Step 1.3: List the chats\n\n##### Changed src&#x2F;app&#x2F;app.component.ts\n```diff\n@@ -2,7 +2,9 @@\n ┊ 2┊ 2┊\n ┊ 3┊ 3┊@Component({\n ┊ 4┊ 4┊  selector: 'app-root',\n-┊ 5┊  ┊  templateUrl: './app.component.html',\n+┊  ┊ 5┊  template: `\n+┊  ┊ 6┊    <router-outlet></router-outlet>\n+┊  ┊ 7┊  `,\n ┊ 6┊ 8┊  styleUrls: ['./app.component.scss']\n ┊ 7┊ 9┊})\n ┊ 8┊10┊export class AppComponent {\n```\n\n##### Changed src&#x2F;app&#x2F;app.module.ts\n```diff\n@@ -5,7 +5,10 @@\n ┊ 5┊ 5┊import {HttpClientModule} from '@angular/common/http';\n ┊ 6┊ 6┊import {HttpLink, HttpLinkModule, Options} from 'apollo-angular-link-http';\n ┊ 7┊ 7┊import {Apollo, ApolloModule} from 'apollo-angular';\n-┊ 8┊  ┊import {InMemoryCache} from 'apollo-cache-inmemory';\n+┊  ┊ 8┊import {defaultDataIdFromObject, InMemoryCache} from 'apollo-cache-inmemory';\n+┊  ┊ 9┊import {ChatsListerModule} from './chats-lister/chats-lister.module';\n+┊  ┊10┊import {RouterModule, Routes} from '@angular/router';\n+┊  ┊11┊const routes: Routes = [];\n ┊ 9┊12┊\n ┊10┊13┊@NgModule({\n ┊11┊14┊  declarations: [\n```\n```diff\n@@ -17,6 +20,10 @@\n ┊17┊20┊    ApolloModule,\n ┊18┊21┊    HttpLinkModule,\n ┊19┊22┊    HttpClientModule,\n+┊  ┊23┊    // Routing\n+┊  ┊24┊    RouterModule.forRoot(routes),\n+┊  ┊25┊    // Feature modules\n+┊  ┊26┊    ChatsListerModule,\n ┊20┊27┊  ],\n ┊21┊28┊  providers: [],\n ┊22┊29┊  bootstrap: [AppComponent]\n```\n\n[}]: #\n\nIf you will try to run the frontend you will notice that several messages seems like duplicated, why does it happen?\n\n`apollo-cache-inmemory` is the default cache implementation for Apollo Client 2.0. `InMemoryCache` is a normalized data store that supports all of Apollo Client 1.0's features without the dependency on Redux.\nThe `InMemoryCache` normalizes your data before saving it to the store by splitting the result into individual objects, creating a unique identifier for each object, and storing those objects in a flattened data structure. By default, `InMemoryCache` will attempt to use the commonly found primary keys of `id` and `_id` for the unique identifier if they exist along with `__typename` on an object.\nSince we use NoSQL-like structure in our backend, messages are stored as an array inside each chat so their incremental identifiers are not unique across different chats. We need to normalize them in a way that takes into account both the message id and the chat id:\n\n[{]: <helper> (diffStep \"1.4\" module=\"client\")\n\n#### Step 1.4: Better normalize messages\n\n##### Changed src&#x2F;app&#x2F;app.module.ts\n```diff\n@@ -35,7 +35,14 @@\n ┊35┊35┊  ) {\n ┊36┊36┊    apollo.create({\n ┊37┊37┊      link: httpLink.create(<Options>{uri: 'http://localhost:3000/graphql'}),\n-┊38┊  ┊      cache: new InMemoryCache(),\n+┊  ┊38┊      cache: new InMemoryCache({\n+┊  ┊39┊        dataIdFromObject: (object: any) => {\n+┊  ┊40┊          switch (object.__typename) {\n+┊  ┊41┊            case 'Message': return `${object.chat.id}:${object.id}`; // use `chatId` prefix and `messageId` as the primary key\n+┊  ┊42┊            default: return defaultDataIdFromObject(object); // fall back to default handling\n+┊  ┊43┊          }\n+┊  ┊44┊        }\n+┊  ┊45┊      }),\n ┊39┊46┊    });\n ┊40┊47┊  }\n ┊41┊48┊}\n```\n\n[}]: #\n\nThat way our application will work even if the backend is a NoSQL. What's even more interesting is that our application will keep working as well even when we will switch our backend to PostgreSQL."
          },
          {
            "manualTitle": "Step 6: graphql-code-generator",
            "stepRevision": "f1108527a6cb780ccb8bfc1599e9ddbfaa59cddc",
            "manualView": "## Server\n\nThe GraphQL codegen library can generate any code for any language — including type definitions, data models, query builder, resolvers, ORM code, complete full stack platforms.\nYou can create your own custom GraphQL codegen templates in 10 minutes, that fit exactly your needs. We will use it to generate `Typescript` typings.\n\nFirst, let's install `graphql-code-generator`  in our server and add it to the run scripts:\n\n    $ npm install graphql-code-generator\n\n[{]: <helper> (diffStep \"2.1\" module=\"server\")\n\n#### Step 2.1: Install graphql-code-generator\n\n##### Changed package.json\n```diff\n@@ -4,7 +4,8 @@\n ┊ 4┊ 4┊  \"private\": true,\n ┊ 5┊ 5┊  \"scripts\": {\n ┊ 6┊ 6┊    \"start\": \"npm run build:live\",\n-┊ 7┊  ┊    \"build:live\": \"nodemon --exec ./node_modules/.bin/ts-node -- ./index.ts\"\n+┊  ┊ 7┊    \"build:live\": \"nodemon --exec ./node_modules/.bin/ts-node -- ./index.ts\",\n+┊  ┊ 8┊    \"generator\": \"gql-gen --url http://localhost:3000/graphql --template ts --out ./types.d.ts\"\n ┊ 8┊ 9┊  },\n ┊ 9┊10┊  \"devDependencies\": {\n ┊10┊11┊    \"@types/body-parser\": \"1.17.0\",\n```\n```diff\n@@ -22,6 +23,7 @@\n ┊22┊23┊    \"cors\": \"2.8.4\",\n ┊23┊24┊    \"express\": \"4.16.3\",\n ┊24┊25┊    \"graphql\": \"0.13.2\",\n+┊  ┊26┊    \"graphql-code-generator\": \"0.9.1\",\n ┊25┊27┊    \"graphql-tools\": \"3.0.1\",\n ┊26┊28┊    \"moment\": \"2.22.1\"\n ┊27┊29┊  }\n```\n\n[}]: #\n\nNow let's run the generator (the server must be running in the background):\n\n    $ npm run generator\n\nPlease note that the server must be started before running the generator.\n\nThose are the types created with `npm run generator`:\n\n[{]: <helper> (diffStep \"2.2\" module=\"server\")\n\n#### Step 2.2: Create types with generator\n\n##### Changed package.json\n```diff\n@@ -5,7 +5,7 @@\n ┊ 5┊ 5┊  \"scripts\": {\n ┊ 6┊ 6┊    \"start\": \"npm run build:live\",\n ┊ 7┊ 7┊    \"build:live\": \"nodemon --exec ./node_modules/.bin/ts-node -- ./index.ts\",\n-┊ 8┊  ┊    \"generator\": \"gql-gen --url http://localhost:3000/graphql --template ts --out ./types.d.ts\"\n+┊  ┊ 8┊    \"generator\": \"gql-gen --schema http://localhost:3000/graphql --template ts --out ./types.d.ts\"\n ┊ 9┊ 9┊  },\n ┊10┊10┊  \"devDependencies\": {\n ┊11┊11┊    \"@types/body-parser\": \"1.17.0\",\n```\n```diff\n@@ -24,6 +24,7 @@\n ┊24┊24┊    \"express\": \"4.16.3\",\n ┊25┊25┊    \"graphql\": \"0.13.2\",\n ┊26┊26┊    \"graphql-code-generator\": \"0.9.1\",\n+┊  ┊27┊    \"graphql-codegen-typescript-template\": \"0.9.1\",\n ┊27┊28┊    \"graphql-tools\": \"3.0.1\",\n ┊28┊29┊    \"moment\": \"2.22.1\"\n ┊29┊30┊  }\n```\n\n##### Added types.d.ts\n```diff\n@@ -0,0 +1,60 @@\n+┊  ┊ 1┊/* tslint:disable */\n+┊  ┊ 2┊\n+┊  ┊ 3┊export interface Query {\n+┊  ┊ 4┊  users?: User[] | null;\n+┊  ┊ 5┊  chats?: Chat[] | null;\n+┊  ┊ 6┊  chat?: Chat | null;\n+┊  ┊ 7┊}\n+┊  ┊ 8┊\n+┊  ┊ 9┊export interface User {\n+┊  ┊10┊  id: string;\n+┊  ┊11┊  name?: string | null;\n+┊  ┊12┊  picture?: string | null;\n+┊  ┊13┊  phone?: string | null;\n+┊  ┊14┊}\n+┊  ┊15┊\n+┊  ┊16┊export interface Chat {\n+┊  ┊17┊  id: string /** May be a chat or a group */;\n+┊  ┊18┊  name?: string | null /** Computed for chats */;\n+┊  ┊19┊  picture?: string | null /** Computed for chats */;\n+┊  ┊20┊  allTimeMembers: User[] /** All members, current and past ones. */;\n+┊  ┊21┊  listingMembers: User[] /** Whoever gets the chat listed. For groups includes past members who still didn't delete the group. */;\n+┊  ┊22┊  actualGroupMembers: User[] /** Actual members of the group (they are not the only ones who get the group listed). Null for chats. */;\n+┊  ┊23┊  admins?: User[] | null /** Null for chats */;\n+┊  ┊24┊  owner?: User | null /** If null the group is read-only. Null for chats. */;\n+┊  ┊25┊  messages: (Message | null)[];\n+┊  ┊26┊  unreadMessages: number /** Computed property */;\n+┊  ┊27┊  isGroup: boolean /** Computed property */;\n+┊  ┊28┊}\n+┊  ┊29┊\n+┊  ┊30┊export interface Message {\n+┊  ┊31┊  id: string;\n+┊  ┊32┊  sender: User;\n+┊  ┊33┊  chat: Chat;\n+┊  ┊34┊  content: string;\n+┊  ┊35┊  createdAt: string;\n+┊  ┊36┊  type: number /** FIXME: should return MessageType */;\n+┊  ┊37┊  recipients: Recipient[] /** Whoever received the message */;\n+┊  ┊38┊  holders: User[] /** Whoever still holds a copy of the message. Cannot be null because the message gets deleted otherwise */;\n+┊  ┊39┊  ownership: boolean /** Computed property */;\n+┊  ┊40┊}\n+┊  ┊41┊\n+┊  ┊42┊export interface Recipient {\n+┊  ┊43┊  user: User;\n+┊  ┊44┊  message: Message;\n+┊  ┊45┊  chat: Chat;\n+┊  ┊46┊  receivedAt?: string | null;\n+┊  ┊47┊  readAt?: string | null;\n+┊  ┊48┊}\n+┊  ┊49┊export interface ChatQueryArgs {\n+┊  ┊50┊  chatId: string;\n+┊  ┊51┊}\n+┊  ┊52┊export interface MessagesChatArgs {\n+┊  ┊53┊  amount?: number | null;\n+┊  ┊54┊}\n+┊  ┊55┊\n+┊  ┊56┊export enum MessageType {\n+┊  ┊57┊  LOCATION = \"LOCATION\",\n+┊  ┊58┊  TEXT = \"TEXT\",\n+┊  ┊59┊  PICTURE = \"PICTURE\"\n+┊  ┊60┊}\n```\n\n[}]: #\n\nNow let's use them:\n\n[{]: <helper> (diffStep \"2.3\" module=\"server\")\n\n#### Step 2.3: Use our types\n\n##### Changed schema&#x2F;resolvers.ts\n```diff\n@@ -1,5 +1,6 @@\n ┊1┊1┊import { Chat, db, Message, Recipient, User } from \"../db\";\n ┊2┊2┊import { IResolvers } from \"graphql-tools/dist/Interfaces\";\n+┊ ┊3┊import { ChatQueryArgs } from \"../types\";\n ┊3┊4┊\n ┊4┊5┊let users = db.users;\n ┊5┊6┊let chats = db.chats;\n```\n```diff\n@@ -10,7 +11,7 @@\n ┊10┊11┊    // Show all users for the moment.\n ┊11┊12┊    users: (): User[] => users.filter(user => user.id !== currentUser),\n ┊12┊13┊    chats: (): Chat[] => chats.filter(chat => chat.listingMemberIds.includes(currentUser)),\n-┊13┊  ┊    chat: (obj: any, {chatId}): Chat | null => chats.find(chat => chat.id === chatId) || null,\n+┊  ┊14┊    chat: (obj: any, {chatId}: ChatQueryArgs): Chat | null => chats.find(chat => chat.id === Number(chatId)) || null,\n ┊14┊15┊  },\n ┊15┊16┊  Chat: {\n ┊16┊17┊    name: (chat: Chat): string => chat.name ? chat.name : users\n```\n\n[}]: #\n\nDon't worry, they will be much more useful when we will write our first mutation.\n\n## Client\n\nLet's do the same on the client:\n\n    $ npm install graphql-code-generator\n\nPlease note that the server must be started before running the generator.\n\n[{]: <helper> (diffStep \"2.1\" module=\"client\")\n\n#### Step 2.1: Install graphql-code-generator\n\n##### Changed package.json\n```diff\n@@ -7,7 +7,8 @@\n ┊ 7┊ 7┊    \"build\": \"ng build\",\n ┊ 8┊ 8┊    \"test\": \"ng test\",\n ┊ 9┊ 9┊    \"lint\": \"ng lint\",\n-┊10┊  ┊    \"e2e\": \"ng e2e\"\n+┊  ┊10┊    \"e2e\": \"ng e2e\",\n+┊  ┊11┊    \"generator\": \"gql-gen --url http://localhost:3000/graphql --template ts --out ./src/types.d.ts \\\"./src/graphql/**/*.ts\\\"\"\n ┊11┊12┊  },\n ┊12┊13┊  \"private\": true,\n ┊13┊14┊  \"dependencies\": {\n```\n```diff\n@@ -45,6 +46,7 @@\n ┊45┊46┊    \"@types/jasminewd2\": \"2.0.3\",\n ┊46┊47┊    \"@types/node\": \"8.9.5\",\n ┊47┊48┊    \"codelyzer\": \"4.2.1\",\n+┊  ┊49┊    \"graphql-code-generator\": \"0.9.1\",\n ┊48┊50┊    \"jasmine-core\": \"2.99.1\",\n ┊49┊51┊    \"jasmine-spec-reporter\": \"4.2.1\",\n ┊50┊52┊    \"karma\": \"1.7.1\",\n```\n\n[}]: #\n\nThose are our generated types:\n\n[{]: <helper> (diffStep \"2.2\" module=\"client\")\n\n#### Step 2.2: Run generator\n\n##### Changed package.json\n```diff\n@@ -8,7 +8,7 @@\n ┊ 8┊ 8┊    \"test\": \"ng test\",\n ┊ 9┊ 9┊    \"lint\": \"ng lint\",\n ┊10┊10┊    \"e2e\": \"ng e2e\",\n-┊11┊  ┊    \"generator\": \"gql-gen --url http://localhost:3000/graphql --template ts --out ./src/types.d.ts \\\"./src/graphql/**/*.ts\\\"\"\n+┊  ┊11┊    \"generator\": \"gql-gen --schema http://localhost:3000/graphql --template ts --out ./src/types.d.ts \\\"./src/graphql/**/*.ts\\\"\"\n ┊12┊12┊  },\n ┊13┊13┊  \"private\": true,\n ┊14┊14┊  \"dependencies\": {\n```\n```diff\n@@ -47,6 +47,7 @@\n ┊47┊47┊    \"@types/node\": \"8.9.5\",\n ┊48┊48┊    \"codelyzer\": \"4.2.1\",\n ┊49┊49┊    \"graphql-code-generator\": \"0.9.1\",\n+┊  ┊50┊    \"graphql-codegen-typescript-template\": \"0.9.1\",\n ┊50┊51┊    \"jasmine-core\": \"2.99.1\",\n ┊51┊52┊    \"jasmine-spec-reporter\": \"4.2.1\",\n ┊52┊53┊    \"karma\": \"1.7.1\",\n```\n\n##### Added src&#x2F;types.d.ts\n```diff\n@@ -0,0 +1,149 @@\n+┊   ┊  1┊/* tslint:disable */\n+┊   ┊  2┊\n+┊   ┊  3┊export interface Query {\n+┊   ┊  4┊  users?: User[] | null;\n+┊   ┊  5┊  chats?: Chat[] | null;\n+┊   ┊  6┊  chat?: Chat | null;\n+┊   ┊  7┊}\n+┊   ┊  8┊\n+┊   ┊  9┊export interface User {\n+┊   ┊ 10┊  id: string;\n+┊   ┊ 11┊  name?: string | null;\n+┊   ┊ 12┊  picture?: string | null;\n+┊   ┊ 13┊  phone?: string | null;\n+┊   ┊ 14┊}\n+┊   ┊ 15┊\n+┊   ┊ 16┊export interface Chat {\n+┊   ┊ 17┊  id: string /** May be a chat or a group */;\n+┊   ┊ 18┊  name?: string | null /** Computed for chats */;\n+┊   ┊ 19┊  picture?: string | null /** Computed for chats */;\n+┊   ┊ 20┊  allTimeMembers: User[] /** All members, current and past ones. */;\n+┊   ┊ 21┊  listingMembers: User[] /** Whoever gets the chat listed. For groups includes past members who still didn't delete the group. */;\n+┊   ┊ 22┊  actualGroupMembers: User[] /** Actual members of the group (they are not the only ones who get the group listed). Null for chats. */;\n+┊   ┊ 23┊  admins?: User[] | null /** Null for chats */;\n+┊   ┊ 24┊  owner?: User | null /** If null the group is read-only. Null for chats. */;\n+┊   ┊ 25┊  messages: (Message | null)[];\n+┊   ┊ 26┊  unreadMessages: number /** Computed property */;\n+┊   ┊ 27┊  isGroup: boolean /** Computed property */;\n+┊   ┊ 28┊}\n+┊   ┊ 29┊\n+┊   ┊ 30┊export interface Message {\n+┊   ┊ 31┊  id: string;\n+┊   ┊ 32┊  sender: User;\n+┊   ┊ 33┊  chat: Chat;\n+┊   ┊ 34┊  content: string;\n+┊   ┊ 35┊  createdAt: string;\n+┊   ┊ 36┊  type: number /** FIXME: should return MessageType */;\n+┊   ┊ 37┊  recipients: Recipient[] /** Whoever received the message */;\n+┊   ┊ 38┊  holders: User[] /** Whoever still holds a copy of the message. Cannot be null because the message gets deleted otherwise */;\n+┊   ┊ 39┊  ownership: boolean /** Computed property */;\n+┊   ┊ 40┊}\n+┊   ┊ 41┊\n+┊   ┊ 42┊export interface Recipient {\n+┊   ┊ 43┊  user: User;\n+┊   ┊ 44┊  message: Message;\n+┊   ┊ 45┊  chat: Chat;\n+┊   ┊ 46┊  receivedAt?: string | null;\n+┊   ┊ 47┊  readAt?: string | null;\n+┊   ┊ 48┊}\n+┊   ┊ 49┊export interface ChatQueryArgs {\n+┊   ┊ 50┊  chatId: string;\n+┊   ┊ 51┊}\n+┊   ┊ 52┊export interface MessagesChatArgs {\n+┊   ┊ 53┊  amount?: number | null;\n+┊   ┊ 54┊}\n+┊   ┊ 55┊\n+┊   ┊ 56┊export enum MessageType {\n+┊   ┊ 57┊  LOCATION = \"LOCATION\",\n+┊   ┊ 58┊  TEXT = \"TEXT\",\n+┊   ┊ 59┊  PICTURE = \"PICTURE\"\n+┊   ┊ 60┊}\n+┊   ┊ 61┊export namespace GetChats {\n+┊   ┊ 62┊  export type Variables = {\n+┊   ┊ 63┊    amount?: number | null;\n+┊   ┊ 64┊  };\n+┊   ┊ 65┊\n+┊   ┊ 66┊  export type Query = {\n+┊   ┊ 67┊    __typename?: \"Query\";\n+┊   ┊ 68┊    chats?: Chats[] | null;\n+┊   ┊ 69┊  };\n+┊   ┊ 70┊\n+┊   ┊ 71┊  export type Chats = {\n+┊   ┊ 72┊    __typename?: \"Chat\";\n+┊   ┊ 73┊    messages: (Messages | null)[];\n+┊   ┊ 74┊  } & ChatWithoutMessages.Fragment;\n+┊   ┊ 75┊\n+┊   ┊ 76┊  export type Messages = Message.Fragment;\n+┊   ┊ 77┊}\n+┊   ┊ 78┊\n+┊   ┊ 79┊export namespace ChatWithoutMessages {\n+┊   ┊ 80┊  export type Fragment = {\n+┊   ┊ 81┊    __typename?: \"Chat\";\n+┊   ┊ 82┊    id: string;\n+┊   ┊ 83┊    name?: string | null;\n+┊   ┊ 84┊    picture?: string | null;\n+┊   ┊ 85┊    allTimeMembers: AllTimeMembers[];\n+┊   ┊ 86┊    unreadMessages: number;\n+┊   ┊ 87┊    isGroup: boolean;\n+┊   ┊ 88┊  };\n+┊   ┊ 89┊\n+┊   ┊ 90┊  export type AllTimeMembers = {\n+┊   ┊ 91┊    __typename?: \"User\";\n+┊   ┊ 92┊    id: string;\n+┊   ┊ 93┊  };\n+┊   ┊ 94┊}\n+┊   ┊ 95┊\n+┊   ┊ 96┊export namespace Message {\n+┊   ┊ 97┊  export type Fragment = {\n+┊   ┊ 98┊    __typename?: \"Message\";\n+┊   ┊ 99┊    id: string;\n+┊   ┊100┊    chat: Chat;\n+┊   ┊101┊    sender: Sender;\n+┊   ┊102┊    content: string;\n+┊   ┊103┊    createdAt: string;\n+┊   ┊104┊    type: number;\n+┊   ┊105┊    recipients: Recipients[];\n+┊   ┊106┊    ownership: boolean;\n+┊   ┊107┊  };\n+┊   ┊108┊\n+┊   ┊109┊  export type Chat = {\n+┊   ┊110┊    __typename?: \"Chat\";\n+┊   ┊111┊    id: string;\n+┊   ┊112┊  };\n+┊   ┊113┊\n+┊   ┊114┊  export type Sender = {\n+┊   ┊115┊    __typename?: \"User\";\n+┊   ┊116┊    id: string;\n+┊   ┊117┊    name?: string | null;\n+┊   ┊118┊  };\n+┊   ┊119┊\n+┊   ┊120┊  export type Recipients = {\n+┊   ┊121┊    __typename?: \"Recipient\";\n+┊   ┊122┊    user: User;\n+┊   ┊123┊    message: Message;\n+┊   ┊124┊    chat: __Chat;\n+┊   ┊125┊    receivedAt?: string | null;\n+┊   ┊126┊    readAt?: string | null;\n+┊   ┊127┊  };\n+┊   ┊128┊\n+┊   ┊129┊  export type User = {\n+┊   ┊130┊    __typename?: \"User\";\n+┊   ┊131┊    id: string;\n+┊   ┊132┊  };\n+┊   ┊133┊\n+┊   ┊134┊  export type Message = {\n+┊   ┊135┊    __typename?: \"Message\";\n+┊   ┊136┊    id: string;\n+┊   ┊137┊    chat: _Chat;\n+┊   ┊138┊  };\n+┊   ┊139┊\n+┊   ┊140┊  export type _Chat = {\n+┊   ┊141┊    __typename?: \"Chat\";\n+┊   ┊142┊    id: string;\n+┊   ┊143┊  };\n+┊   ┊144┊\n+┊   ┊145┊  export type __Chat = {\n+┊   ┊146┊    __typename?: \"Chat\";\n+┊   ┊147┊    id: string;\n+┊   ┊148┊  };\n+┊   ┊149┊}\n```\n\n[}]: #\n\nLet's use them:\n\n[{]: <helper> (diffStep \"2.3\" module=\"client\")\n\n#### Step 2.3: Use the generated types\n\n##### Changed src&#x2F;app&#x2F;chats-lister&#x2F;components&#x2F;chat-item&#x2F;chat-item.component.ts\n```diff\n@@ -1,4 +1,5 @@\n ┊1┊1┊import {Component, Input} from '@angular/core';\n+┊ ┊2┊import {GetChats} from '../../../../types';\n ┊2┊3┊\n ┊3┊4┊@Component({\n ┊4┊5┊  selector: 'app-chat-item',\n```\n```diff\n@@ -16,5 +17,5 @@\n ┊16┊17┊export class ChatItemComponent {\n ┊17┊18┊  // tslint:disable-next-line:no-input-rename\n ┊18┊19┊  @Input('item')\n-┊19┊  ┊  chat: any;\n+┊  ┊20┊  chat: GetChats.Chats;\n ┊20┊21┊}\n```\n\n##### Changed src&#x2F;app&#x2F;chats-lister&#x2F;components&#x2F;chats-list&#x2F;chats-list.component.ts\n```diff\n@@ -1,4 +1,5 @@\n ┊1┊1┊import {Component, Input} from '@angular/core';\n+┊ ┊2┊import {GetChats} from '../../../../types';\n ┊2┊3┊\n ┊3┊4┊@Component({\n ┊4┊5┊  selector: 'app-chats-list',\n```\n```diff\n@@ -14,7 +15,7 @@\n ┊14┊15┊export class ChatsListComponent {\n ┊15┊16┊  // tslint:disable-next-line:no-input-rename\n ┊16┊17┊  @Input('items')\n-┊17┊  ┊  chats: any[];\n+┊  ┊18┊  chats: GetChats.Chats[];\n ┊18┊19┊\n ┊19┊20┊  constructor() {}\n ┊20┊21┊}\n```\n\n##### Changed src&#x2F;app&#x2F;chats-lister&#x2F;containers&#x2F;chats&#x2F;chats.component.ts\n```diff\n@@ -1,6 +1,7 @@\n ┊1┊1┊import {Component, OnInit} from '@angular/core';\n ┊2┊2┊import {ChatsService} from '../../../services/chats.service';\n ┊3┊3┊import {Observable} from 'rxjs';\n+┊ ┊4┊import {GetChats} from '../../../../types';\n ┊4┊5┊\n ┊5┊6┊@Component({\n ┊6┊7┊  template: `\n```\n```diff\n@@ -35,7 +36,7 @@\n ┊35┊36┊  styleUrls: ['./chats.component.scss'],\n ┊36┊37┊})\n ┊37┊38┊export class ChatsComponent implements OnInit {\n-┊38┊  ┊  chats$: Observable<any[]>;\n+┊  ┊39┊  chats$: Observable<GetChats.Chats[]>;\n ┊39┊40┊\n ┊40┊41┊  constructor(private chatsService: ChatsService) {\n ┊41┊42┊  }\n```\n\n##### Changed src&#x2F;app&#x2F;services&#x2F;chats.service.ts\n```diff\n@@ -3,6 +3,7 @@\n ┊3┊3┊import {Apollo} from 'apollo-angular';\n ┊4┊4┊import {Injectable} from '@angular/core';\n ┊5┊5┊import {getChatsQuery} from '../../graphql/getChats.query';\n+┊ ┊6┊import {GetChats} from '../../types';\n ┊6┊7┊\n ┊7┊8┊@Injectable()\n ┊8┊9┊export class ChatsService {\n```\n```diff\n@@ -11,14 +12,14 @@\n ┊11┊12┊  constructor(private apollo: Apollo) {}\n ┊12┊13┊\n ┊13┊14┊  getChats() {\n-┊14┊  ┊    const query = this.apollo.watchQuery<any>(<WatchQueryOptions>{\n+┊  ┊15┊    const query = this.apollo.watchQuery<GetChats.Query>(<WatchQueryOptions>{\n ┊15┊16┊      query: getChatsQuery,\n ┊16┊17┊      variables: {\n ┊17┊18┊        amount: this.messagesAmount,\n ┊18┊19┊      },\n ┊19┊20┊    });\n ┊20┊21┊    const chats$ = query.valueChanges.pipe(\n-┊21┊  ┊      map((result: ApolloQueryResult<any>) => result.data.chats)\n+┊  ┊22┊      map((result: ApolloQueryResult<GetChats.Query>) => result.data.chats)\n ┊22┊23┊    );\n ┊23┊24┊\n ┊24┊25┊    return {query, chats$};\n```\n\n[}]: #"
          },
          {
            "manualTitle": "Step 7: Testing",
            "stepRevision": "0b0a94523505b78a8bd01d484487403deaa76f18",
            "manualView": "## Client\n\nTesting is a very important part of each application and for the sake of showing different testing techniques we are going to show how to test a presentational component, a container component and a service.\n\nFirst let's start by importing `hammerjs` for the Material Gestures inside the test script.\n\n[{]: <helper> (diffStep \"3.1\" files=\"src/test.ts\" module=\"client\")\n\n#### Step 3.1: Testing\n\n##### Changed src&#x2F;test.ts\n```diff\n@@ -7,6 +7,9 @@\n ┊ 7┊ 7┊  platformBrowserDynamicTesting\n ┊ 8┊ 8┊} from '@angular/platform-browser-dynamic/testing';\n ┊ 9┊ 9┊\n+┊  ┊10┊// Material gestures\n+┊  ┊11┊import 'hammerjs';\n+┊  ┊12┊\n ┊10┊13┊declare const require: any;\n ┊11┊14┊\n ┊12┊15┊// First, initialize the Angular testing environment.\n```\n\n[}]: #\n\nLet's start with the simplest one: the presentational component.\nWe are not going to inject any service and we don't need to access our backend, so things are quite simple: we just need to pass our Chat object as an Input, detect the changes and use the query selector to match the UI content to the one we passed as input:\n\n[{]: <helper> (diffStep \"3.1\" files=\"src/app/chats-lister/components/chat-item/chat-item.component.spec.ts\" module=\"client\")\n\n#### Step 3.1: Testing\n\n##### Added src&#x2F;app&#x2F;chats-lister&#x2F;components&#x2F;chat-item&#x2F;chat-item.component.spec.ts\n```diff\n@@ -0,0 +1,107 @@\n+┊   ┊  1┊import { async, ComponentFixture, TestBed } from '@angular/core/testing';\n+┊   ┊  2┊\n+┊   ┊  3┊import { ChatItemComponent } from './chat-item.component';\n+┊   ┊  4┊import {DebugElement} from '@angular/core';\n+┊   ┊  5┊import {By} from '@angular/platform-browser';\n+┊   ┊  6┊import {TruncateModule} from 'ng2-truncate';\n+┊   ┊  7┊\n+┊   ┊  8┊describe('ChatItemComponent', () => {\n+┊   ┊  9┊  let component: ChatItemComponent;\n+┊   ┊ 10┊  let fixture: ComponentFixture<ChatItemComponent>;\n+┊   ┊ 11┊  let el: DebugElement;\n+┊   ┊ 12┊\n+┊   ┊ 13┊  const chat: any = {\n+┊   ┊ 14┊    id: '1',\n+┊   ┊ 15┊    __typename: 'Chat',\n+┊   ┊ 16┊    name: 'Niccolo\\' Belli',\n+┊   ┊ 17┊    picture: null,\n+┊   ┊ 18┊    allTimeMembers: [\n+┊   ┊ 19┊      {\n+┊   ┊ 20┊        id: '1',\n+┊   ┊ 21┊        __typename: 'User',\n+┊   ┊ 22┊      },\n+┊   ┊ 23┊      {\n+┊   ┊ 24┊        id: '2',\n+┊   ┊ 25┊        __typename: 'User',\n+┊   ┊ 26┊      }\n+┊   ┊ 27┊    ],\n+┊   ┊ 28┊    unreadMessages: 0,\n+┊   ┊ 29┊    isGroup: false,\n+┊   ┊ 30┊    messages: [\n+┊   ┊ 31┊      {\n+┊   ┊ 32┊        id: '1',\n+┊   ┊ 33┊        chat: {\n+┊   ┊ 34┊          id: '1',\n+┊   ┊ 35┊          __typename: 'Chat',\n+┊   ┊ 36┊        },\n+┊   ┊ 37┊        __typename: 'Message',\n+┊   ┊ 38┊        sender: {\n+┊   ┊ 39┊          id: '1',\n+┊   ┊ 40┊          __typename: 'User',\n+┊   ┊ 41┊          name: 'Niccolo\\' Belli',\n+┊   ┊ 42┊        },\n+┊   ┊ 43┊        content: 'Hello! How are you? A lot happened since last time',\n+┊   ┊ 44┊        createdAt: '1513435525',\n+┊   ┊ 45┊        type: 1,\n+┊   ┊ 46┊        recipients: [\n+┊   ┊ 47┊          {\n+┊   ┊ 48┊            user: {\n+┊   ┊ 49┊              id: '2',\n+┊   ┊ 50┊              __typename: 'User',\n+┊   ┊ 51┊            },\n+┊   ┊ 52┊            message: {\n+┊   ┊ 53┊              id: '1',\n+┊   ┊ 54┊              __typename: 'Message',\n+┊   ┊ 55┊              chat: {\n+┊   ┊ 56┊                id: '1',\n+┊   ┊ 57┊                __typename: 'Chat',\n+┊   ┊ 58┊              },\n+┊   ┊ 59┊            },\n+┊   ┊ 60┊            __typename: 'Recipient',\n+┊   ┊ 61┊            chat: {\n+┊   ┊ 62┊              id: '1',\n+┊   ┊ 63┊              __typename: 'Chat',\n+┊   ┊ 64┊            },\n+┊   ┊ 65┊            receivedAt: null,\n+┊   ┊ 66┊            readAt: null,\n+┊   ┊ 67┊          }\n+┊   ┊ 68┊        ],\n+┊   ┊ 69┊        ownership: true,\n+┊   ┊ 70┊      }\n+┊   ┊ 71┊    ],\n+┊   ┊ 72┊  };\n+┊   ┊ 73┊\n+┊   ┊ 74┊  beforeEach(async(() => {\n+┊   ┊ 75┊    TestBed.configureTestingModule({\n+┊   ┊ 76┊      declarations: [ ChatItemComponent ],\n+┊   ┊ 77┊      imports: [TruncateModule]\n+┊   ┊ 78┊    })\n+┊   ┊ 79┊    .compileComponents();\n+┊   ┊ 80┊  }));\n+┊   ┊ 81┊\n+┊   ┊ 82┊  beforeEach(() => {\n+┊   ┊ 83┊    fixture = TestBed.createComponent(ChatItemComponent);\n+┊   ┊ 84┊    component = fixture.componentInstance;\n+┊   ┊ 85┊    component.chat = chat;\n+┊   ┊ 86┊    fixture.detectChanges();\n+┊   ┊ 87┊    el = fixture.debugElement;\n+┊   ┊ 88┊  });\n+┊   ┊ 89┊\n+┊   ┊ 90┊  it('should create', () => {\n+┊   ┊ 91┊    expect(component).toBeTruthy();\n+┊   ┊ 92┊  });\n+┊   ┊ 93┊\n+┊   ┊ 94┊  it('should contain the chat name', () => {\n+┊   ┊ 95┊    expect(el.query(By.css('.chat-recipient > div:first-child')).nativeElement.textContent).toContain(chat.name);\n+┊   ┊ 96┊  });\n+┊   ┊ 97┊\n+┊   ┊ 98┊  it('should contain the first couple of characters of the message content', () => {\n+┊   ┊ 99┊    expect(el.query(By.css('.chat-content')).nativeElement.textContent)\n+┊   ┊100┊      .toContain(chat.messages[chat.messages.length - 1].content.slice(0, 20));\n+┊   ┊101┊  });\n+┊   ┊102┊\n+┊   ┊103┊  it('should not contain the latest characters of the message content', () => {\n+┊   ┊104┊    expect(el.query(By.css('.chat-content')).nativeElement.textContent)\n+┊   ┊105┊      .not.toContain(chat.messages[chat.messages.length - 1].content.slice(20));\n+┊   ┊106┊  });\n+┊   ┊107┊});\n```\n\n[}]: #\n\nTesting a service is a bit more complicated because we will need to mock our backend in order to get fake results instead of having to fire up the backend each time.\nWe are going to simply mock the HTTP calls, which is a well known practice in the REST API world. Since we are using HTTP to retrieve the data, it will work as well with Apollo client:\n\n[{]: <helper> (diffStep \"3.1\" files=\"src/app/services/chats.service.spec.ts\" module=\"client\")\n\n#### Step 3.1: Testing\n\n##### Added src&#x2F;app&#x2F;services&#x2F;chats.service.spec.ts\n```diff\n@@ -0,0 +1,356 @@\n+┊   ┊  1┊import { TestBed, inject } from '@angular/core/testing';\n+┊   ┊  2┊\n+┊   ┊  3┊import { ChatsService } from './chats.service';\n+┊   ┊  4┊import {Apollo} from 'apollo-angular';\n+┊   ┊  5┊import {HttpLink, HttpLinkModule, Options} from 'apollo-angular-link-http';\n+┊   ┊  6┊import {HttpClientTestingModule, HttpTestingController} from '@angular/common/http/testing';\n+┊   ┊  7┊import {defaultDataIdFromObject, InMemoryCache} from 'apollo-cache-inmemory';\n+┊   ┊  8┊\n+┊   ┊  9┊describe('ChatsService', () => {\n+┊   ┊ 10┊  let httpMock: HttpTestingController;\n+┊   ┊ 11┊  let httpLink: HttpLink;\n+┊   ┊ 12┊  let apollo: Apollo;\n+┊   ┊ 13┊\n+┊   ┊ 14┊  const chats: any = [\n+┊   ┊ 15┊    {\n+┊   ┊ 16┊      id: '1',\n+┊   ┊ 17┊      __typename: 'Chat',\n+┊   ┊ 18┊      name: 'Avery Stewart',\n+┊   ┊ 19┊      picture: 'https://randomuser.me/api/portraits/thumb/women/1.jpg',\n+┊   ┊ 20┊      allTimeMembers: [\n+┊   ┊ 21┊        {\n+┊   ┊ 22┊          id: '1',\n+┊   ┊ 23┊          __typename: 'User',\n+┊   ┊ 24┊        },\n+┊   ┊ 25┊        {\n+┊   ┊ 26┊          id: '3',\n+┊   ┊ 27┊          __typename: 'User',\n+┊   ┊ 28┊        }\n+┊   ┊ 29┊      ],\n+┊   ┊ 30┊      unreadMessages: 1,\n+┊   ┊ 31┊      isGroup: false,\n+┊   ┊ 32┊      messages: [\n+┊   ┊ 33┊        {\n+┊   ┊ 34┊          id: '1',\n+┊   ┊ 35┊          chat: {\n+┊   ┊ 36┊            id: '1',\n+┊   ┊ 37┊            __typename: 'Chat',\n+┊   ┊ 38┊          },\n+┊   ┊ 39┊          __typename: 'Message',\n+┊   ┊ 40┊          sender: {\n+┊   ┊ 41┊            id: '3',\n+┊   ┊ 42┊            __typename: 'User',\n+┊   ┊ 43┊            name: 'Avery Stewart'\n+┊   ┊ 44┊          },\n+┊   ┊ 45┊          content: 'Yep!',\n+┊   ┊ 46┊          createdAt: '1514035700',\n+┊   ┊ 47┊          type: 0,\n+┊   ┊ 48┊          recipients: [\n+┊   ┊ 49┊            {\n+┊   ┊ 50┊              user: {\n+┊   ┊ 51┊                id: '1',\n+┊   ┊ 52┊                __typename: 'User',\n+┊   ┊ 53┊              },\n+┊   ┊ 54┊              message: {\n+┊   ┊ 55┊                id: '1',\n+┊   ┊ 56┊                __typename: 'Message',\n+┊   ┊ 57┊                chat: {\n+┊   ┊ 58┊                  id: '1',\n+┊   ┊ 59┊                  __typename: 'Chat',\n+┊   ┊ 60┊                },\n+┊   ┊ 61┊              },\n+┊   ┊ 62┊              __typename: 'Recipient',\n+┊   ┊ 63┊              chat: {\n+┊   ┊ 64┊                id: '1',\n+┊   ┊ 65┊                __typename: 'Chat',\n+┊   ┊ 66┊              },\n+┊   ┊ 67┊              receivedAt: null,\n+┊   ┊ 68┊              readAt: null,\n+┊   ┊ 69┊            }\n+┊   ┊ 70┊          ],\n+┊   ┊ 71┊          ownership: false,\n+┊   ┊ 72┊        }\n+┊   ┊ 73┊      ],\n+┊   ┊ 74┊    },\n+┊   ┊ 75┊    {\n+┊   ┊ 76┊      id: '2',\n+┊   ┊ 77┊      __typename: 'Chat',\n+┊   ┊ 78┊      name: 'Katie Peterson',\n+┊   ┊ 79┊      picture: 'https://randomuser.me/api/portraits/thumb/women/2.jpg',\n+┊   ┊ 80┊      allTimeMembers: [\n+┊   ┊ 81┊        {\n+┊   ┊ 82┊          id: '1',\n+┊   ┊ 83┊          __typename: 'User',\n+┊   ┊ 84┊        },\n+┊   ┊ 85┊        {\n+┊   ┊ 86┊          id: '4',\n+┊   ┊ 87┊          __typename: 'User',\n+┊   ┊ 88┊        }\n+┊   ┊ 89┊      ],\n+┊   ┊ 90┊      unreadMessages: 0,\n+┊   ┊ 91┊      isGroup: false,\n+┊   ┊ 92┊      messages: [\n+┊   ┊ 93┊        {\n+┊   ┊ 94┊          id: '1',\n+┊   ┊ 95┊          chat: {\n+┊   ┊ 96┊            id: '2',\n+┊   ┊ 97┊            __typename: 'Chat',\n+┊   ┊ 98┊          },\n+┊   ┊ 99┊          __typename: 'Message',\n+┊   ┊100┊          sender: {\n+┊   ┊101┊            id: '1',\n+┊   ┊102┊            __typename: 'User',\n+┊   ┊103┊            name: 'Ethan Gonzalez'\n+┊   ┊104┊          },\n+┊   ┊105┊          content: 'Hey, it\\'s me',\n+┊   ┊106┊          createdAt: '1514031800',\n+┊   ┊107┊          type: 0,\n+┊   ┊108┊          recipients: [\n+┊   ┊109┊            {\n+┊   ┊110┊              user: {\n+┊   ┊111┊                id: '4',\n+┊   ┊112┊                __typename: 'User',\n+┊   ┊113┊              },\n+┊   ┊114┊              message: {\n+┊   ┊115┊                id: '1',\n+┊   ┊116┊                __typename: 'Message',\n+┊   ┊117┊                chat: {\n+┊   ┊118┊                  id: '2',\n+┊   ┊119┊                  __typename: 'Chat',\n+┊   ┊120┊                },\n+┊   ┊121┊              },\n+┊   ┊122┊              __typename: 'Recipient',\n+┊   ┊123┊              chat: {\n+┊   ┊124┊                id: '2',\n+┊   ┊125┊                __typename: 'Chat',\n+┊   ┊126┊              },\n+┊   ┊127┊              receivedAt: null,\n+┊   ┊128┊              readAt: null,\n+┊   ┊129┊            }\n+┊   ┊130┊          ],\n+┊   ┊131┊          ownership: true\n+┊   ┊132┊        }\n+┊   ┊133┊      ],\n+┊   ┊134┊    },\n+┊   ┊135┊    {\n+┊   ┊136┊      id: '3',\n+┊   ┊137┊      __typename: 'Chat',\n+┊   ┊138┊      name: 'Ray Edwards',\n+┊   ┊139┊      picture: 'https://randomuser.me/api/portraits/thumb/men/3.jpg',\n+┊   ┊140┊      allTimeMembers: [\n+┊   ┊141┊        {\n+┊   ┊142┊          id: '1',\n+┊   ┊143┊          __typename: 'User',\n+┊   ┊144┊        },\n+┊   ┊145┊        {\n+┊   ┊146┊          id: '5',\n+┊   ┊147┊          __typename: 'User',\n+┊   ┊148┊        }\n+┊   ┊149┊      ],\n+┊   ┊150┊      unreadMessages: 0,\n+┊   ┊151┊      isGroup: false,\n+┊   ┊152┊      messages: [\n+┊   ┊153┊        {\n+┊   ┊154┊          id: '1',\n+┊   ┊155┊          __typename: 'Message',\n+┊   ┊156┊          chat: {\n+┊   ┊157┊            id: '3',\n+┊   ┊158┊            __typename: 'Chat',\n+┊   ┊159┊          },\n+┊   ┊160┊          sender: {\n+┊   ┊161┊            id: '1',\n+┊   ┊162┊            __typename: 'User',\n+┊   ┊163┊            name: 'Ethan Gonzalez'\n+┊   ┊164┊          },\n+┊   ┊165┊          content: 'You still there?',\n+┊   ┊166┊          createdAt: '1514010200',\n+┊   ┊167┊          type: 0,\n+┊   ┊168┊          recipients: [\n+┊   ┊169┊            {\n+┊   ┊170┊              user: {\n+┊   ┊171┊                id: '5',\n+┊   ┊172┊                __typename: 'User',\n+┊   ┊173┊              },\n+┊   ┊174┊              message: {\n+┊   ┊175┊                id: '1',\n+┊   ┊176┊                __typename: 'Message',\n+┊   ┊177┊                chat: {\n+┊   ┊178┊                  id: '3',\n+┊   ┊179┊                  __typename: 'Chat',\n+┊   ┊180┊                },\n+┊   ┊181┊              },\n+┊   ┊182┊              __typename: 'Recipient',\n+┊   ┊183┊              chat: {\n+┊   ┊184┊                id: '3',\n+┊   ┊185┊                __typename: 'Chat',\n+┊   ┊186┊              },\n+┊   ┊187┊              receivedAt: null,\n+┊   ┊188┊              readAt: null\n+┊   ┊189┊            }\n+┊   ┊190┊          ],\n+┊   ┊191┊          ownership: true\n+┊   ┊192┊        }\n+┊   ┊193┊      ],\n+┊   ┊194┊    },\n+┊   ┊195┊    {\n+┊   ┊196┊      id: '6',\n+┊   ┊197┊      __typename: 'Chat',\n+┊   ┊198┊      name: 'Niccolò Belli',\n+┊   ┊199┊      picture: 'https://randomuser.me/api/portraits/thumb/men/4.jpg',\n+┊   ┊200┊      allTimeMembers: [\n+┊   ┊201┊        {\n+┊   ┊202┊          id: '1',\n+┊   ┊203┊          __typename: 'User',\n+┊   ┊204┊        },\n+┊   ┊205┊        {\n+┊   ┊206┊          id: '6',\n+┊   ┊207┊          __typename: 'User',\n+┊   ┊208┊        }\n+┊   ┊209┊      ],\n+┊   ┊210┊      unreadMessages: 0,\n+┊   ┊211┊      messages: [],\n+┊   ┊212┊      isGroup: false\n+┊   ┊213┊    },\n+┊   ┊214┊    {\n+┊   ┊215┊      id: '8',\n+┊   ┊216┊      __typename: 'Chat',\n+┊   ┊217┊      name: 'A user 0 group',\n+┊   ┊218┊      picture: 'https://randomuser.me/api/portraits/thumb/lego/1.jpg',\n+┊   ┊219┊      allTimeMembers: [\n+┊   ┊220┊        {\n+┊   ┊221┊          id: '1',\n+┊   ┊222┊          __typename: 'User',\n+┊   ┊223┊        },\n+┊   ┊224┊        {\n+┊   ┊225┊          id: '3',\n+┊   ┊226┊          __typename: 'User',\n+┊   ┊227┊        },\n+┊   ┊228┊        {\n+┊   ┊229┊          id: '4',\n+┊   ┊230┊          __typename: 'User',\n+┊   ┊231┊        },\n+┊   ┊232┊        {\n+┊   ┊233┊          id: '6',\n+┊   ┊234┊          __typename: 'User',\n+┊   ┊235┊        },\n+┊   ┊236┊      ],\n+┊   ┊237┊      unreadMessages: 1,\n+┊   ┊238┊      isGroup: true,\n+┊   ┊239┊      messages: [\n+┊   ┊240┊        {\n+┊   ┊241┊          id: '1',\n+┊   ┊242┊          __typename: 'Message',\n+┊   ┊243┊          chat: {\n+┊   ┊244┊            id: '8',\n+┊   ┊245┊            __typename: 'Chat',\n+┊   ┊246┊          },\n+┊   ┊247┊          sender: {\n+┊   ┊248┊            id: '4',\n+┊   ┊249┊            __typename: 'User',\n+┊   ┊250┊            name: 'Katie Peterson'\n+┊   ┊251┊          },\n+┊   ┊252┊          content: 'Awesome!',\n+┊   ┊253┊          createdAt: '1512830000',\n+┊   ┊254┊          type: 0,\n+┊   ┊255┊          recipients: [\n+┊   ┊256┊            {\n+┊   ┊257┊              user: {\n+┊   ┊258┊                id: '1',\n+┊   ┊259┊                __typename: 'User',\n+┊   ┊260┊              },\n+┊   ┊261┊              message: {\n+┊   ┊262┊                id: '1',\n+┊   ┊263┊                __typename: 'Message',\n+┊   ┊264┊                chat: {\n+┊   ┊265┊                  id: '8',\n+┊   ┊266┊                  __typename: 'Chat',\n+┊   ┊267┊                },\n+┊   ┊268┊              },\n+┊   ┊269┊              __typename: 'Recipient',\n+┊   ┊270┊              chat: {\n+┊   ┊271┊                id: '8',\n+┊   ┊272┊                __typename: 'Chat',\n+┊   ┊273┊              },\n+┊   ┊274┊              receivedAt: null,\n+┊   ┊275┊              readAt: null\n+┊   ┊276┊            },\n+┊   ┊277┊            {\n+┊   ┊278┊              user: {\n+┊   ┊279┊                id: '6',\n+┊   ┊280┊                __typename: 'User',\n+┊   ┊281┊              },\n+┊   ┊282┊              message: {\n+┊   ┊283┊                id: '1',\n+┊   ┊284┊                __typename: 'Message',\n+┊   ┊285┊                chat: {\n+┊   ┊286┊                  id: '8',\n+┊   ┊287┊                  __typename: 'Chat',\n+┊   ┊288┊                },\n+┊   ┊289┊              },\n+┊   ┊290┊              __typename: 'Recipient',\n+┊   ┊291┊              chat: {\n+┊   ┊292┊                id: '8',\n+┊   ┊293┊                __typename: 'Chat',\n+┊   ┊294┊              },\n+┊   ┊295┊              receivedAt: null,\n+┊   ┊296┊              readAt: null\n+┊   ┊297┊            }\n+┊   ┊298┊          ],\n+┊   ┊299┊          ownership: false\n+┊   ┊300┊        }\n+┊   ┊301┊      ],\n+┊   ┊302┊    },\n+┊   ┊303┊  ];\n+┊   ┊304┊\n+┊   ┊305┊  beforeEach(() => {\n+┊   ┊306┊    TestBed.configureTestingModule({\n+┊   ┊307┊      imports: [\n+┊   ┊308┊        HttpLinkModule,\n+┊   ┊309┊        // HttpClientModule,\n+┊   ┊310┊        HttpClientTestingModule,\n+┊   ┊311┊      ],\n+┊   ┊312┊      providers: [\n+┊   ┊313┊        ChatsService,\n+┊   ┊314┊        Apollo,\n+┊   ┊315┊      ]\n+┊   ┊316┊    });\n+┊   ┊317┊\n+┊   ┊318┊    httpMock = TestBed.get(HttpTestingController);\n+┊   ┊319┊    httpLink = TestBed.get(HttpLink);\n+┊   ┊320┊    apollo = TestBed.get(Apollo);\n+┊   ┊321┊\n+┊   ┊322┊    apollo.create({\n+┊   ┊323┊      link: httpLink.create(<Options>{ uri: 'http://localhost:3000/graphql' }),\n+┊   ┊324┊      cache: new InMemoryCache({\n+┊   ┊325┊        dataIdFromObject: (object: any) => {\n+┊   ┊326┊          switch (object.__typename) {\n+┊   ┊327┊            case 'Message': return `${object.chat.id}:${object.id}`; // use `chatId` prefix and `messageId` as the primary key\n+┊   ┊328┊            default: return defaultDataIdFromObject(object); // fall back to default handling\n+┊   ┊329┊          }\n+┊   ┊330┊        }\n+┊   ┊331┊      }),\n+┊   ┊332┊    });\n+┊   ┊333┊  });\n+┊   ┊334┊\n+┊   ┊335┊  it('should be created', inject([ChatsService], (service: ChatsService) => {\n+┊   ┊336┊    expect(service).toBeTruthy();\n+┊   ┊337┊  }));\n+┊   ┊338┊\n+┊   ┊339┊  it('should get chats', inject([ChatsService], (service: ChatsService) => {\n+┊   ┊340┊    service.getChats().chats$.subscribe(_chats => {\n+┊   ┊341┊      expect(_chats.length).toEqual(chats.length);\n+┊   ┊342┊      for (let i = 0; i < _chats.length; i++) {\n+┊   ┊343┊        expect(_chats[i]).toEqual(chats[i]);\n+┊   ┊344┊      }\n+┊   ┊345┊    });\n+┊   ┊346┊\n+┊   ┊347┊    const req = httpMock.expectOne('http://localhost:3000/graphql', 'call to api');\n+┊   ┊348┊    expect(req.request.method).toBe('POST');\n+┊   ┊349┊    req.flush({\n+┊   ┊350┊      data: {\n+┊   ┊351┊        chats\n+┊   ┊352┊      }\n+┊   ┊353┊    });\n+┊   ┊354┊    httpMock.verify();\n+┊   ┊355┊  }));\n+┊   ┊356┊});\n```\n\n[}]: #\n\nIn the last example we are going to test a container component, which makes use of several services and multiple other components:\n\n[{]: <helper> (diffStep \"3.1\" files=\"src/app/chats-lister/containers/chats/chats.component.spec.ts\" module=\"client\")\n\n#### Step 3.1: Testing\n\n##### Added src&#x2F;app&#x2F;chats-lister&#x2F;containers&#x2F;chats&#x2F;chats.component.spec.ts\n```diff\n@@ -0,0 +1,387 @@\n+┊   ┊  1┊import { async, ComponentFixture, TestBed } from '@angular/core/testing';\n+┊   ┊  2┊\n+┊   ┊  3┊import { ChatsComponent } from './chats.component';\n+┊   ┊  4┊import {DebugElement, NO_ERRORS_SCHEMA} from '@angular/core';\n+┊   ┊  5┊import {ChatsListComponent} from '../../components/chats-list/chats-list.component';\n+┊   ┊  6┊import {ChatItemComponent} from '../../components/chat-item/chat-item.component';\n+┊   ┊  7┊import {TruncateModule} from 'ng2-truncate';\n+┊   ┊  8┊import {MatButtonModule, MatIconModule, MatListModule, MatMenuModule} from '@angular/material';\n+┊   ┊  9┊import {ChatsService} from '../../../services/chats.service';\n+┊   ┊ 10┊import {Apollo} from 'apollo-angular';\n+┊   ┊ 11┊import {HttpClientTestingModule, HttpTestingController} from '@angular/common/http/testing';\n+┊   ┊ 12┊import {HttpLink, HttpLinkModule, Options} from 'apollo-angular-link-http';\n+┊   ┊ 13┊import {defaultDataIdFromObject, InMemoryCache} from 'apollo-cache-inmemory';\n+┊   ┊ 14┊import {By} from '@angular/platform-browser';\n+┊   ┊ 15┊import {RouterTestingModule} from '@angular/router/testing';\n+┊   ┊ 16┊\n+┊   ┊ 17┊describe('ChatsComponent', () => {\n+┊   ┊ 18┊  let component: ChatsComponent;\n+┊   ┊ 19┊  let fixture: ComponentFixture<ChatsComponent>;\n+┊   ┊ 20┊  let el: DebugElement;\n+┊   ┊ 21┊\n+┊   ┊ 22┊  let httpMock: HttpTestingController;\n+┊   ┊ 23┊  let httpLink: HttpLink;\n+┊   ┊ 24┊  let apollo: Apollo;\n+┊   ┊ 25┊\n+┊   ┊ 26┊  const chats: any = [\n+┊   ┊ 27┊    {\n+┊   ┊ 28┊      id: '1',\n+┊   ┊ 29┊      __typename: 'Chat',\n+┊   ┊ 30┊      name: 'Avery Stewart',\n+┊   ┊ 31┊      picture: 'https://randomuser.me/api/portraits/thumb/women/1.jpg',\n+┊   ┊ 32┊      allTimeMembers: [\n+┊   ┊ 33┊        {\n+┊   ┊ 34┊          id: '1',\n+┊   ┊ 35┊          __typename: 'User',\n+┊   ┊ 36┊        },\n+┊   ┊ 37┊        {\n+┊   ┊ 38┊          id: '3',\n+┊   ┊ 39┊          __typename: 'User',\n+┊   ┊ 40┊        }\n+┊   ┊ 41┊      ],\n+┊   ┊ 42┊      unreadMessages: 1,\n+┊   ┊ 43┊      isGroup: false,\n+┊   ┊ 44┊      messages: [\n+┊   ┊ 45┊        {\n+┊   ┊ 46┊          id: '1',\n+┊   ┊ 47┊          chat: {\n+┊   ┊ 48┊            id: '1',\n+┊   ┊ 49┊            __typename: 'Chat',\n+┊   ┊ 50┊          },\n+┊   ┊ 51┊          __typename: 'Message',\n+┊   ┊ 52┊          sender: {\n+┊   ┊ 53┊            id: '3',\n+┊   ┊ 54┊            __typename: 'User',\n+┊   ┊ 55┊            name: 'Avery Stewart'\n+┊   ┊ 56┊          },\n+┊   ┊ 57┊          content: 'Yep!',\n+┊   ┊ 58┊          createdAt: '1514035700',\n+┊   ┊ 59┊          type: 0,\n+┊   ┊ 60┊          recipients: [\n+┊   ┊ 61┊            {\n+┊   ┊ 62┊              user: {\n+┊   ┊ 63┊                id: '1',\n+┊   ┊ 64┊                __typename: 'User',\n+┊   ┊ 65┊              },\n+┊   ┊ 66┊              message: {\n+┊   ┊ 67┊                id: '1',\n+┊   ┊ 68┊                __typename: 'Message',\n+┊   ┊ 69┊                chat: {\n+┊   ┊ 70┊                  id: '1',\n+┊   ┊ 71┊                  __typename: 'Chat',\n+┊   ┊ 72┊                },\n+┊   ┊ 73┊              },\n+┊   ┊ 74┊              __typename: 'Recipient',\n+┊   ┊ 75┊              chat: {\n+┊   ┊ 76┊                id: '1',\n+┊   ┊ 77┊                __typename: 'Chat',\n+┊   ┊ 78┊              },\n+┊   ┊ 79┊              receivedAt: null,\n+┊   ┊ 80┊              readAt: null,\n+┊   ┊ 81┊            }\n+┊   ┊ 82┊          ],\n+┊   ┊ 83┊          ownership: false,\n+┊   ┊ 84┊        }\n+┊   ┊ 85┊      ],\n+┊   ┊ 86┊    },\n+┊   ┊ 87┊    {\n+┊   ┊ 88┊      id: '2',\n+┊   ┊ 89┊      __typename: 'Chat',\n+┊   ┊ 90┊      name: 'Katie Peterson',\n+┊   ┊ 91┊      picture: 'https://randomuser.me/api/portraits/thumb/women/2.jpg',\n+┊   ┊ 92┊      allTimeMembers: [\n+┊   ┊ 93┊        {\n+┊   ┊ 94┊          id: '1',\n+┊   ┊ 95┊          __typename: 'User',\n+┊   ┊ 96┊        },\n+┊   ┊ 97┊        {\n+┊   ┊ 98┊          id: '4',\n+┊   ┊ 99┊          __typename: 'User',\n+┊   ┊100┊        }\n+┊   ┊101┊      ],\n+┊   ┊102┊      unreadMessages: 0,\n+┊   ┊103┊      isGroup: false,\n+┊   ┊104┊      messages: [\n+┊   ┊105┊        {\n+┊   ┊106┊          id: '1',\n+┊   ┊107┊          chat: {\n+┊   ┊108┊            id: '2',\n+┊   ┊109┊            __typename: 'Chat',\n+┊   ┊110┊          },\n+┊   ┊111┊          __typename: 'Message',\n+┊   ┊112┊          sender: {\n+┊   ┊113┊            id: '1',\n+┊   ┊114┊            __typename: 'User',\n+┊   ┊115┊            name: 'Ethan Gonzalez'\n+┊   ┊116┊          },\n+┊   ┊117┊          content: 'Hey, it\\'s me',\n+┊   ┊118┊          createdAt: '1514031800',\n+┊   ┊119┊          type: 0,\n+┊   ┊120┊          recipients: [\n+┊   ┊121┊            {\n+┊   ┊122┊              user: {\n+┊   ┊123┊                id: '4',\n+┊   ┊124┊                __typename: 'User',\n+┊   ┊125┊              },\n+┊   ┊126┊              message: {\n+┊   ┊127┊                id: '1',\n+┊   ┊128┊                __typename: 'Message',\n+┊   ┊129┊                chat: {\n+┊   ┊130┊                  id: '2',\n+┊   ┊131┊                  __typename: 'Chat',\n+┊   ┊132┊                },\n+┊   ┊133┊              },\n+┊   ┊134┊              __typename: 'Recipient',\n+┊   ┊135┊              chat: {\n+┊   ┊136┊                id: '2',\n+┊   ┊137┊                __typename: 'Chat',\n+┊   ┊138┊              },\n+┊   ┊139┊              receivedAt: null,\n+┊   ┊140┊              readAt: null,\n+┊   ┊141┊            }\n+┊   ┊142┊          ],\n+┊   ┊143┊          ownership: true\n+┊   ┊144┊        }\n+┊   ┊145┊      ],\n+┊   ┊146┊    },\n+┊   ┊147┊    {\n+┊   ┊148┊      id: '3',\n+┊   ┊149┊      __typename: 'Chat',\n+┊   ┊150┊      name: 'Ray Edwards',\n+┊   ┊151┊      picture: 'https://randomuser.me/api/portraits/thumb/men/3.jpg',\n+┊   ┊152┊      allTimeMembers: [\n+┊   ┊153┊        {\n+┊   ┊154┊          id: '1',\n+┊   ┊155┊          __typename: 'User',\n+┊   ┊156┊        },\n+┊   ┊157┊        {\n+┊   ┊158┊          id: '5',\n+┊   ┊159┊          __typename: 'User',\n+┊   ┊160┊        }\n+┊   ┊161┊      ],\n+┊   ┊162┊      unreadMessages: 0,\n+┊   ┊163┊      isGroup: false,\n+┊   ┊164┊      messages: [\n+┊   ┊165┊        {\n+┊   ┊166┊          id: '1',\n+┊   ┊167┊          __typename: 'Message',\n+┊   ┊168┊          chat: {\n+┊   ┊169┊            id: '3',\n+┊   ┊170┊            __typename: 'Chat',\n+┊   ┊171┊          },\n+┊   ┊172┊          sender: {\n+┊   ┊173┊            id: '1',\n+┊   ┊174┊            __typename: 'User',\n+┊   ┊175┊            name: 'Ethan Gonzalez'\n+┊   ┊176┊          },\n+┊   ┊177┊          content: 'You still there?',\n+┊   ┊178┊          createdAt: '1514010200',\n+┊   ┊179┊          type: 0,\n+┊   ┊180┊          recipients: [\n+┊   ┊181┊            {\n+┊   ┊182┊              user: {\n+┊   ┊183┊                id: '5',\n+┊   ┊184┊                __typename: 'User',\n+┊   ┊185┊              },\n+┊   ┊186┊              message: {\n+┊   ┊187┊                id: '1',\n+┊   ┊188┊                __typename: 'Message',\n+┊   ┊189┊                chat: {\n+┊   ┊190┊                  id: '3',\n+┊   ┊191┊                  __typename: 'Chat',\n+┊   ┊192┊                },\n+┊   ┊193┊              },\n+┊   ┊194┊              __typename: 'Recipient',\n+┊   ┊195┊              chat: {\n+┊   ┊196┊                id: '3',\n+┊   ┊197┊                __typename: 'Chat',\n+┊   ┊198┊              },\n+┊   ┊199┊              receivedAt: null,\n+┊   ┊200┊              readAt: null\n+┊   ┊201┊            }\n+┊   ┊202┊          ],\n+┊   ┊203┊          ownership: true\n+┊   ┊204┊        }\n+┊   ┊205┊      ],\n+┊   ┊206┊    },\n+┊   ┊207┊    {\n+┊   ┊208┊      id: '6',\n+┊   ┊209┊      __typename: 'Chat',\n+┊   ┊210┊      name: 'Niccolò Belli',\n+┊   ┊211┊      picture: 'https://randomuser.me/api/portraits/thumb/men/4.jpg',\n+┊   ┊212┊      allTimeMembers: [\n+┊   ┊213┊        {\n+┊   ┊214┊          id: '1',\n+┊   ┊215┊          __typename: 'User',\n+┊   ┊216┊        },\n+┊   ┊217┊        {\n+┊   ┊218┊          id: '6',\n+┊   ┊219┊          __typename: 'User',\n+┊   ┊220┊        }\n+┊   ┊221┊      ],\n+┊   ┊222┊      unreadMessages: 0,\n+┊   ┊223┊      messages: [],\n+┊   ┊224┊      isGroup: false\n+┊   ┊225┊    },\n+┊   ┊226┊    {\n+┊   ┊227┊      id: '8',\n+┊   ┊228┊      __typename: 'Chat',\n+┊   ┊229┊      name: 'A user 0 group',\n+┊   ┊230┊      picture: 'https://randomuser.me/api/portraits/thumb/lego/1.jpg',\n+┊   ┊231┊      allTimeMembers: [\n+┊   ┊232┊        {\n+┊   ┊233┊          id: '1',\n+┊   ┊234┊          __typename: 'User',\n+┊   ┊235┊        },\n+┊   ┊236┊        {\n+┊   ┊237┊          id: '3',\n+┊   ┊238┊          __typename: 'User',\n+┊   ┊239┊        },\n+┊   ┊240┊        {\n+┊   ┊241┊          id: '4',\n+┊   ┊242┊          __typename: 'User',\n+┊   ┊243┊        },\n+┊   ┊244┊        {\n+┊   ┊245┊          id: '6',\n+┊   ┊246┊          __typename: 'User',\n+┊   ┊247┊        },\n+┊   ┊248┊      ],\n+┊   ┊249┊      unreadMessages: 1,\n+┊   ┊250┊      isGroup: true,\n+┊   ┊251┊      messages: [\n+┊   ┊252┊        {\n+┊   ┊253┊          id: '1',\n+┊   ┊254┊          __typename: 'Message',\n+┊   ┊255┊          chat: {\n+┊   ┊256┊            id: '8',\n+┊   ┊257┊            __typename: 'Chat',\n+┊   ┊258┊          },\n+┊   ┊259┊          sender: {\n+┊   ┊260┊            id: '4',\n+┊   ┊261┊            __typename: 'User',\n+┊   ┊262┊            name: 'Katie Peterson'\n+┊   ┊263┊          },\n+┊   ┊264┊          content: 'Awesome!',\n+┊   ┊265┊          createdAt: '1512830000',\n+┊   ┊266┊          type: 0,\n+┊   ┊267┊          recipients: [\n+┊   ┊268┊            {\n+┊   ┊269┊              user: {\n+┊   ┊270┊                id: '1',\n+┊   ┊271┊                __typename: 'User',\n+┊   ┊272┊              },\n+┊   ┊273┊              message: {\n+┊   ┊274┊                id: '1',\n+┊   ┊275┊                __typename: 'Message',\n+┊   ┊276┊                chat: {\n+┊   ┊277┊                  id: '8',\n+┊   ┊278┊                  __typename: 'Chat',\n+┊   ┊279┊                },\n+┊   ┊280┊              },\n+┊   ┊281┊              __typename: 'Recipient',\n+┊   ┊282┊              chat: {\n+┊   ┊283┊                id: '8',\n+┊   ┊284┊                __typename: 'Chat',\n+┊   ┊285┊              },\n+┊   ┊286┊              receivedAt: null,\n+┊   ┊287┊              readAt: null\n+┊   ┊288┊            },\n+┊   ┊289┊            {\n+┊   ┊290┊              user: {\n+┊   ┊291┊                id: '6',\n+┊   ┊292┊                __typename: 'User',\n+┊   ┊293┊              },\n+┊   ┊294┊              message: {\n+┊   ┊295┊                id: '1',\n+┊   ┊296┊                __typename: 'Message',\n+┊   ┊297┊                chat: {\n+┊   ┊298┊                  id: '8',\n+┊   ┊299┊                  __typename: 'Chat',\n+┊   ┊300┊                },\n+┊   ┊301┊              },\n+┊   ┊302┊              __typename: 'Recipient',\n+┊   ┊303┊              chat: {\n+┊   ┊304┊                id: '8',\n+┊   ┊305┊                __typename: 'Chat',\n+┊   ┊306┊              },\n+┊   ┊307┊              receivedAt: null,\n+┊   ┊308┊              readAt: null\n+┊   ┊309┊            }\n+┊   ┊310┊          ],\n+┊   ┊311┊          ownership: false\n+┊   ┊312┊        }\n+┊   ┊313┊      ],\n+┊   ┊314┊    },\n+┊   ┊315┊  ];\n+┊   ┊316┊\n+┊   ┊317┊  beforeEach(async(() => {\n+┊   ┊318┊    TestBed.configureTestingModule({\n+┊   ┊319┊      declarations: [\n+┊   ┊320┊        ChatsComponent,\n+┊   ┊321┊        ChatsListComponent,\n+┊   ┊322┊        ChatItemComponent\n+┊   ┊323┊      ],\n+┊   ┊324┊      imports: [\n+┊   ┊325┊        MatMenuModule,\n+┊   ┊326┊        MatIconModule,\n+┊   ┊327┊        MatButtonModule,\n+┊   ┊328┊        MatListModule,\n+┊   ┊329┊        TruncateModule,\n+┊   ┊330┊        HttpLinkModule,\n+┊   ┊331┊        HttpClientTestingModule,\n+┊   ┊332┊        RouterTestingModule\n+┊   ┊333┊      ],\n+┊   ┊334┊      providers: [\n+┊   ┊335┊        ChatsService,\n+┊   ┊336┊        Apollo,\n+┊   ┊337┊      ],\n+┊   ┊338┊      schemas: [NO_ERRORS_SCHEMA]\n+┊   ┊339┊    })\n+┊   ┊340┊      .compileComponents();\n+┊   ┊341┊\n+┊   ┊342┊    httpMock = TestBed.get(HttpTestingController);\n+┊   ┊343┊    httpLink = TestBed.get(HttpLink);\n+┊   ┊344┊    apollo = TestBed.get(Apollo);\n+┊   ┊345┊\n+┊   ┊346┊    apollo.create({\n+┊   ┊347┊      link: httpLink.create(<Options>{ uri: 'http://localhost:3000/graphql' }),\n+┊   ┊348┊      cache: new InMemoryCache({\n+┊   ┊349┊        dataIdFromObject: (object: any) => {\n+┊   ┊350┊          switch (object.__typename) {\n+┊   ┊351┊            case 'Message': return `${object.chat.id}:${object.id}`; // use `chatId` prefix and `messageId` as the primary key\n+┊   ┊352┊            default: return defaultDataIdFromObject(object); // fall back to default handling\n+┊   ┊353┊          }\n+┊   ┊354┊        }\n+┊   ┊355┊      }),\n+┊   ┊356┊    });\n+┊   ┊357┊  }));\n+┊   ┊358┊\n+┊   ┊359┊  beforeEach(() => {\n+┊   ┊360┊    fixture = TestBed.createComponent(ChatsComponent);\n+┊   ┊361┊    component = fixture.componentInstance;\n+┊   ┊362┊    fixture.detectChanges();\n+┊   ┊363┊    const req = httpMock.expectOne('http://localhost:3000/graphql', 'call to api');\n+┊   ┊364┊    req.flush({\n+┊   ┊365┊      data: {\n+┊   ┊366┊        chats\n+┊   ┊367┊      }\n+┊   ┊368┊    });\n+┊   ┊369┊  });\n+┊   ┊370┊\n+┊   ┊371┊  it('should create', () => {\n+┊   ┊372┊    expect(component).toBeTruthy();\n+┊   ┊373┊  });\n+┊   ┊374┊\n+┊   ┊375┊  it('should display the chats', () => {\n+┊   ┊376┊    fixture.whenStable().then(() => {\n+┊   ┊377┊      fixture.detectChanges();\n+┊   ┊378┊      el = fixture.debugElement;\n+┊   ┊379┊      for (let i = 0; i < chats.length; i++) {\n+┊   ┊380┊        expect(el.query(By.css(`app-chats-list > mat-list > mat-list-item:nth-child(${i + 1}) > div > app-chat-item > div > div > div`))\n+┊   ┊381┊          .nativeElement.textContent).toContain(chats[i].name);\n+┊   ┊382┊      }\n+┊   ┊383┊    });\n+┊   ┊384┊\n+┊   ┊385┊    httpMock.verify();\n+┊   ┊386┊  });\n+┊   ┊387┊});\n```\n\n[}]: #"
          },
          {
            "manualTitle": "Step 8: Chat viewer",
            "stepRevision": "f44e03b8e11bcb98ab948add04cc88036b7b5e76",
            "manualView": "We created a module which lists all of our chats, but we still need to show a particular chat.\nLet's create the `chat-viewer` module! We're going to create a container component called `ChatComponent` and a couple of presentational components.\n\n[{]: <helper> (diffStep \"4.1\" module=\"client\")\n\n#### Step 4.1: Chat Viewer\n\n##### Changed src&#x2F;app&#x2F;app.module.ts\n```diff\n@@ -8,6 +8,7 @@\n ┊ 8┊ 8┊import {defaultDataIdFromObject, InMemoryCache} from 'apollo-cache-inmemory';\n ┊ 9┊ 9┊import {ChatsListerModule} from './chats-lister/chats-lister.module';\n ┊10┊10┊import {RouterModule, Routes} from '@angular/router';\n+┊  ┊11┊import {ChatViewerModule} from './chat-viewer/chat-viewer.module';\n ┊11┊12┊const routes: Routes = [];\n ┊12┊13┊\n ┊13┊14┊@NgModule({\n```\n```diff\n@@ -24,6 +25,7 @@\n ┊24┊25┊    RouterModule.forRoot(routes),\n ┊25┊26┊    // Feature modules\n ┊26┊27┊    ChatsListerModule,\n+┊  ┊28┊    ChatViewerModule,\n ┊27┊29┊  ],\n ┊28┊30┊  providers: [],\n ┊29┊31┊  bootstrap: [AppComponent]\n```\n\n##### Added src&#x2F;app&#x2F;chat-viewer&#x2F;chat-viewer.module.ts\n```diff\n@@ -0,0 +1,53 @@\n+┊  ┊ 1┊import { BrowserModule } from '@angular/platform-browser';\n+┊  ┊ 2┊import { NgModule } from '@angular/core';\n+┊  ┊ 3┊\n+┊  ┊ 4┊import {BrowserAnimationsModule} from '@angular/platform-browser/animations';\n+┊  ┊ 5┊import {MatButtonModule, MatGridListModule, MatIconModule, MatListModule, MatMenuModule, MatToolbarModule} from '@angular/material';\n+┊  ┊ 6┊import {RouterModule, Routes} from '@angular/router';\n+┊  ┊ 7┊import {FormsModule} from '@angular/forms';\n+┊  ┊ 8┊import {ChatsService} from '../services/chats.service';\n+┊  ┊ 9┊import {ChatComponent} from './containers/chat/chat.component';\n+┊  ┊10┊import {MessagesListComponent} from './components/messages-list/messages-list.component';\n+┊  ┊11┊import {MessageItemComponent} from './components/message-item/message-item.component';\n+┊  ┊12┊import {NewMessageComponent} from './components/new-message/new-message.component';\n+┊  ┊13┊import {SharedModule} from '../shared/shared.module';\n+┊  ┊14┊\n+┊  ┊15┊const routes: Routes = [\n+┊  ┊16┊  {\n+┊  ┊17┊    path: 'chat', children: [\n+┊  ┊18┊      {path: ':id', component: ChatComponent},\n+┊  ┊19┊    ],\n+┊  ┊20┊  },\n+┊  ┊21┊];\n+┊  ┊22┊\n+┊  ┊23┊@NgModule({\n+┊  ┊24┊  declarations: [\n+┊  ┊25┊    ChatComponent,\n+┊  ┊26┊    MessagesListComponent,\n+┊  ┊27┊    MessageItemComponent,\n+┊  ┊28┊    NewMessageComponent,\n+┊  ┊29┊  ],\n+┊  ┊30┊  imports: [\n+┊  ┊31┊    BrowserModule,\n+┊  ┊32┊    // Material\n+┊  ┊33┊    MatToolbarModule,\n+┊  ┊34┊    MatMenuModule,\n+┊  ┊35┊    MatIconModule,\n+┊  ┊36┊    MatButtonModule,\n+┊  ┊37┊    MatListModule,\n+┊  ┊38┊    MatGridListModule,\n+┊  ┊39┊    // Animations\n+┊  ┊40┊    BrowserAnimationsModule,\n+┊  ┊41┊    // Routing\n+┊  ┊42┊    RouterModule.forChild(routes),\n+┊  ┊43┊    // Forms\n+┊  ┊44┊    FormsModule,\n+┊  ┊45┊    // Feature modules\n+┊  ┊46┊    SharedModule,\n+┊  ┊47┊  ],\n+┊  ┊48┊  providers: [\n+┊  ┊49┊    ChatsService,\n+┊  ┊50┊  ],\n+┊  ┊51┊})\n+┊  ┊52┊export class ChatViewerModule {\n+┊  ┊53┊}\n```\n\n##### Added src&#x2F;app&#x2F;chat-viewer&#x2F;components&#x2F;message-item&#x2F;message-item.component.scss\n```diff\n@@ -0,0 +1,18 @@\n+┊  ┊ 1┊:host {\n+┊  ┊ 2┊  display: flex;\n+┊  ┊ 3┊  width: 100%;\n+┊  ┊ 4┊}\n+┊  ┊ 5┊\n+┊  ┊ 6┊.message {\n+┊  ┊ 7┊  max-width: 75%;\n+┊  ┊ 8┊  background-color: lightgoldenrodyellow;\n+┊  ┊ 9┊\n+┊  ┊10┊  &.mine {\n+┊  ┊11┊    background-color: lightcyan;\n+┊  ┊12┊    margin-left: auto;\n+┊  ┊13┊  }\n+┊  ┊14┊\n+┊  ┊15┊  .message-sender {\n+┊  ┊16┊    font-size: small;\n+┊  ┊17┊  }\n+┊  ┊18┊}\n```\n\n##### Added src&#x2F;app&#x2F;chat-viewer&#x2F;components&#x2F;message-item&#x2F;message-item.component.ts\n```diff\n@@ -0,0 +1,21 @@\n+┊  ┊ 1┊import {Component, Input} from '@angular/core';\n+┊  ┊ 2┊\n+┊  ┊ 3┊@Component({\n+┊  ┊ 4┊  selector: 'app-message-item',\n+┊  ┊ 5┊  template: `\n+┊  ┊ 6┊    <div class=\"message\"\n+┊  ┊ 7┊         [ngClass]=\"{'mine': message.ownership}\">\n+┊  ┊ 8┊      <div *ngIf=\"isGroup && !message.ownership\" class=\"message-sender\">{{ message.sender.name }}</div>\n+┊  ┊ 9┊      <div>{{ message.content }}</div>\n+┊  ┊10┊    </div>\n+┊  ┊11┊  `,\n+┊  ┊12┊  styleUrls: ['message-item.component.scss'],\n+┊  ┊13┊})\n+┊  ┊14┊export class MessageItemComponent {\n+┊  ┊15┊  // tslint:disable-next-line:no-input-rename\n+┊  ┊16┊  @Input('item')\n+┊  ┊17┊  message: any;\n+┊  ┊18┊\n+┊  ┊19┊  @Input()\n+┊  ┊20┊  isGroup: boolean;\n+┊  ┊21┊}\n```\n\n##### Added src&#x2F;app&#x2F;chat-viewer&#x2F;components&#x2F;messages-list&#x2F;messages-list.component.scss\n```diff\n@@ -0,0 +1,12 @@\n+┊  ┊ 1┊:host {\n+┊  ┊ 2┊  display: block;\n+┊  ┊ 3┊  height: 100%;\n+┊  ┊ 4┊  overflow-y: scroll;\n+┊  ┊ 5┊  background-color: aliceblue;\n+┊  ┊ 6┊}\n+┊  ┊ 7┊\n+┊  ┊ 8┊/*\n+┊  ┊ 9┊:host::-webkit-scrollbar {\n+┊  ┊10┊  display: none;\n+┊  ┊11┊}\n+┊  ┊12┊*/\n```\n\n##### Added src&#x2F;app&#x2F;chat-viewer&#x2F;components&#x2F;messages-list&#x2F;messages-list.component.ts\n```diff\n@@ -0,0 +1,23 @@\n+┊  ┊ 1┊import {Component, Input} from '@angular/core';\n+┊  ┊ 2┊\n+┊  ┊ 3┊@Component({\n+┊  ┊ 4┊  selector: 'app-messages-list',\n+┊  ┊ 5┊  template: `\n+┊  ┊ 6┊    <mat-list>\n+┊  ┊ 7┊      <mat-list-item *ngFor=\"let message of messages\">\n+┊  ┊ 8┊        <app-message-item [item]=\"message\" [isGroup]=\"isGroup\"></app-message-item>\n+┊  ┊ 9┊      </mat-list-item>\n+┊  ┊10┊    </mat-list>\n+┊  ┊11┊  `,\n+┊  ┊12┊  styleUrls: ['messages-list.component.scss'],\n+┊  ┊13┊})\n+┊  ┊14┊export class MessagesListComponent {\n+┊  ┊15┊  // tslint:disable-next-line:no-input-rename\n+┊  ┊16┊  @Input('items')\n+┊  ┊17┊  messages: any[];\n+┊  ┊18┊\n+┊  ┊19┊  @Input()\n+┊  ┊20┊  isGroup: boolean;\n+┊  ┊21┊\n+┊  ┊22┊  constructor() {}\n+┊  ┊23┊}\n```\n\n##### Added src&#x2F;app&#x2F;chat-viewer&#x2F;components&#x2F;new-message&#x2F;new-message.component.scss\n```diff\n@@ -0,0 +1,13 @@\n+┊  ┊ 1┊:host {\n+┊  ┊ 2┊  display: flex;\n+┊  ┊ 3┊  height: 8vh;\n+┊  ┊ 4┊}\n+┊  ┊ 5┊\n+┊  ┊ 6┊input {\n+┊  ┊ 7┊  width: 100%;\n+┊  ┊ 8┊}\n+┊  ┊ 9┊\n+┊  ┊10┊button {\n+┊  ┊11┊  width: 8vh;\n+┊  ┊12┊  min-width: 56px;\n+┊  ┊13┊}\n```\n\n##### Added src&#x2F;app&#x2F;chat-viewer&#x2F;components&#x2F;new-message&#x2F;new-message.component.ts\n```diff\n@@ -0,0 +1,34 @@\n+┊  ┊ 1┊import {Component, EventEmitter, Input, Output} from '@angular/core';\n+┊  ┊ 2┊\n+┊  ┊ 3┊@Component({\n+┊  ┊ 4┊  selector: 'app-new-message',\n+┊  ┊ 5┊  template: `\n+┊  ┊ 6┊    <input type=\"text\" [(ngModel)]=\"message\" (keyup)=\"onInputKeyup($event)\"/>\n+┊  ┊ 7┊    <button mat-button (click)=\"emitMessage()\" [disabled]=\"disabled\">\n+┊  ┊ 8┊      <mat-icon aria-label=\"Icon-button with a send icon\">send</mat-icon>\n+┊  ┊ 9┊    </button>\n+┊  ┊10┊  `,\n+┊  ┊11┊  styleUrls: ['new-message.component.scss'],\n+┊  ┊12┊})\n+┊  ┊13┊export class NewMessageComponent {\n+┊  ┊14┊  @Input()\n+┊  ┊15┊  disabled: boolean;\n+┊  ┊16┊\n+┊  ┊17┊  @Output()\n+┊  ┊18┊  newMessage = new EventEmitter<string>();\n+┊  ┊19┊\n+┊  ┊20┊  message = '';\n+┊  ┊21┊\n+┊  ┊22┊  onInputKeyup({ keyCode }: KeyboardEvent) {\n+┊  ┊23┊    if (keyCode === 13) {\n+┊  ┊24┊      this.emitMessage();\n+┊  ┊25┊    }\n+┊  ┊26┊  }\n+┊  ┊27┊\n+┊  ┊28┊  emitMessage() {\n+┊  ┊29┊    if (this.message && !this.disabled) {\n+┊  ┊30┊      this.newMessage.emit(this.message);\n+┊  ┊31┊      this.message = '';\n+┊  ┊32┊    }\n+┊  ┊33┊  }\n+┊  ┊34┊}\n```\n\n##### Added src&#x2F;app&#x2F;chat-viewer&#x2F;containers&#x2F;chat&#x2F;chat.component.scss\n```diff\n@@ -0,0 +1,10 @@\n+┊  ┊ 1┊.container {\n+┊  ┊ 2┊  display: flex;\n+┊  ┊ 3┊  flex-flow: column;\n+┊  ┊ 4┊  justify-content: space-between;\n+┊  ┊ 5┊  height: calc(100vh - 8vh);\n+┊  ┊ 6┊\n+┊  ┊ 7┊  app-confirm-selection {\n+┊  ┊ 8┊    bottom: 10vh;\n+┊  ┊ 9┊  }\n+┊  ┊10┊}\n```\n\n##### Added src&#x2F;app&#x2F;chat-viewer&#x2F;containers&#x2F;chat&#x2F;chat.component.ts\n```diff\n@@ -0,0 +1,45 @@\n+┊  ┊ 1┊import {Component, OnInit} from '@angular/core';\n+┊  ┊ 2┊import {ActivatedRoute, Router} from '@angular/router';\n+┊  ┊ 3┊import {ChatsService} from '../../../services/chats.service';\n+┊  ┊ 4┊\n+┊  ┊ 5┊@Component({\n+┊  ┊ 6┊  template: `\n+┊  ┊ 7┊    <app-toolbar>\n+┊  ┊ 8┊      <button class=\"navigation\" mat-button (click)=\"goToChats()\">\n+┊  ┊ 9┊        <mat-icon aria-label=\"Icon-button with an arrow back icon\">arrow_back</mat-icon>\n+┊  ┊10┊      </button>\n+┊  ┊11┊      <div class=\"title\">{{ name }}</div>\n+┊  ┊12┊    </app-toolbar>\n+┊  ┊13┊    <div class=\"container\">\n+┊  ┊14┊      <app-messages-list [items]=\"messages\" [isGroup]=\"isGroup\"></app-messages-list>\n+┊  ┊15┊      <app-new-message></app-new-message>\n+┊  ┊16┊    </div>\n+┊  ┊17┊  `,\n+┊  ┊18┊  styleUrls: ['./chat.component.scss']\n+┊  ┊19┊})\n+┊  ┊20┊export class ChatComponent implements OnInit {\n+┊  ┊21┊  chatId: string;\n+┊  ┊22┊  messages: any[];\n+┊  ┊23┊  name: string;\n+┊  ┊24┊  isGroup: boolean;\n+┊  ┊25┊\n+┊  ┊26┊  constructor(private route: ActivatedRoute,\n+┊  ┊27┊              private router: Router,\n+┊  ┊28┊              private chatsService: ChatsService) {\n+┊  ┊29┊  }\n+┊  ┊30┊\n+┊  ┊31┊  ngOnInit() {\n+┊  ┊32┊    this.route.params.subscribe(({id: chatId}) => {\n+┊  ┊33┊      this.chatId = chatId;\n+┊  ┊34┊      this.chatsService.getChat(chatId).chat$.subscribe(chat => {\n+┊  ┊35┊        this.messages = chat.messages;\n+┊  ┊36┊        this.name = chat.name;\n+┊  ┊37┊        this.isGroup = chat.isGroup;\n+┊  ┊38┊      });\n+┊  ┊39┊    });\n+┊  ┊40┊  }\n+┊  ┊41┊\n+┊  ┊42┊  goToChats() {\n+┊  ┊43┊    this.router.navigate(['/chats']);\n+┊  ┊44┊  }\n+┊  ┊45┊}\n```\n\n##### Changed src&#x2F;app&#x2F;chats-lister&#x2F;components&#x2F;chat-item&#x2F;chat-item.component.ts\n```diff\n@@ -1,11 +1,11 @@\n-┊ 1┊  ┊import {Component, Input} from '@angular/core';\n+┊  ┊ 1┊import {Component, EventEmitter, Input, Output} from '@angular/core';\n ┊ 2┊ 2┊import {GetChats} from '../../../../types';\n ┊ 3┊ 3┊\n ┊ 4┊ 4┊@Component({\n ┊ 5┊ 5┊  selector: 'app-chat-item',\n ┊ 6┊ 6┊  template: `\n ┊ 7┊ 7┊    <div class=\"chat-row\">\n-┊ 8┊  ┊        <div class=\"chat-recipient\">\n+┊  ┊ 8┊        <div class=\"chat-recipient\" (click)=\"selectChat()\">\n ┊ 9┊ 9┊          <img *ngIf=\"chat.picture\" [src]=\"chat.picture\" width=\"48\" height=\"48\">\n ┊10┊10┊          <div>{{ chat.name }} [id: {{ chat.id }}]</div>\n ┊11┊11┊        </div>\n```\n```diff\n@@ -18,4 +18,11 @@\n ┊18┊18┊  // tslint:disable-next-line:no-input-rename\n ┊19┊19┊  @Input('item')\n ┊20┊20┊  chat: GetChats.Chats;\n+┊  ┊21┊\n+┊  ┊22┊  @Output()\n+┊  ┊23┊  select = new EventEmitter<string>();\n+┊  ┊24┊\n+┊  ┊25┊  selectChat() {\n+┊  ┊26┊    this.select.emit(this.chat.id);\n+┊  ┊27┊  }\n ┊21┊28┊}\n```\n\n##### Changed src&#x2F;app&#x2F;chats-lister&#x2F;components&#x2F;chats-list&#x2F;chats-list.component.ts\n```diff\n@@ -1,4 +1,4 @@\n-┊1┊ ┊import {Component, Input} from '@angular/core';\n+┊ ┊1┊import {Component, EventEmitter, Input, Output} from '@angular/core';\n ┊2┊2┊import {GetChats} from '../../../../types';\n ┊3┊3┊\n ┊4┊4┊@Component({\n```\n```diff\n@@ -6,7 +6,7 @@\n ┊ 6┊ 6┊  template: `\n ┊ 7┊ 7┊    <mat-list>\n ┊ 8┊ 8┊      <mat-list-item *ngFor=\"let chat of chats\">\n-┊ 9┊  ┊        <app-chat-item [item]=\"chat\"></app-chat-item>\n+┊  ┊ 9┊        <app-chat-item [item]=\"chat\" (select)=\"selectChat($event)\"></app-chat-item>\n ┊10┊10┊      </mat-list-item>\n ┊11┊11┊    </mat-list>\n ┊12┊12┊  `,\n```\n```diff\n@@ -17,5 +17,12 @@\n ┊17┊17┊  @Input('items')\n ┊18┊18┊  chats: GetChats.Chats[];\n ┊19┊19┊\n+┊  ┊20┊  @Output()\n+┊  ┊21┊  select = new EventEmitter<string>();\n+┊  ┊22┊\n ┊20┊23┊  constructor() {}\n+┊  ┊24┊\n+┊  ┊25┊  selectChat(id: string) {\n+┊  ┊26┊    this.select.emit(id);\n+┊  ┊27┊  }\n ┊21┊28┊}\n```\n\n##### Changed src&#x2F;app&#x2F;chats-lister&#x2F;containers&#x2F;chats&#x2F;chats.component.ts\n```diff\n@@ -2,6 +2,7 @@\n ┊2┊2┊import {ChatsService} from '../../../services/chats.service';\n ┊3┊3┊import {Observable} from 'rxjs';\n ┊4┊4┊import {GetChats} from '../../../../types';\n+┊ ┊5┊import {Router} from '@angular/router';\n ┊5┊6┊\n ┊6┊7┊@Component({\n ┊7┊8┊  template: `\n```\n```diff\n@@ -27,7 +28,7 @@\n ┊27┊28┊      </button>\n ┊28┊29┊    </mat-menu>\n ┊29┊30┊\n-┊30┊  ┊    <app-chats-list [items]=\"chats$ | async\"></app-chats-list>\n+┊  ┊31┊    <app-chats-list [items]=\"chats$ | async\" (select)=\"goToChat($event)\"></app-chats-list>\n ┊31┊32┊\n ┊32┊33┊    <button class=\"chat-button\" mat-fab color=\"primary\">\n ┊33┊34┊      <mat-icon aria-label=\"Icon-button with a + icon\">add</mat-icon>\n```\n```diff\n@@ -38,10 +39,15 @@\n ┊38┊39┊export class ChatsComponent implements OnInit {\n ┊39┊40┊  chats$: Observable<GetChats.Chats[]>;\n ┊40┊41┊\n-┊41┊  ┊  constructor(private chatsService: ChatsService) {\n+┊  ┊42┊  constructor(private chatsService: ChatsService,\n+┊  ┊43┊              private router: Router) {\n ┊42┊44┊  }\n ┊43┊45┊\n ┊44┊46┊  ngOnInit() {\n ┊45┊47┊    this.chats$ = this.chatsService.getChats().chats$;\n ┊46┊48┊  }\n+┊  ┊49┊\n+┊  ┊50┊  goToChat(chatId: string) {\n+┊  ┊51┊    this.router.navigate(['/chat', chatId]);\n+┊  ┊52┊  }\n ┊47┊53┊}\n```\n\n##### Changed src&#x2F;app&#x2F;services&#x2F;chats.service.ts\n```diff\n@@ -4,6 +4,7 @@\n ┊ 4┊ 4┊import {Injectable} from '@angular/core';\n ┊ 5┊ 5┊import {getChatsQuery} from '../../graphql/getChats.query';\n ┊ 6┊ 6┊import {GetChats} from '../../types';\n+┊  ┊ 7┊import {getChatQuery} from '../../graphql/getChat.query';\n ┊ 7┊ 8┊\n ┊ 8┊ 9┊@Injectable()\n ┊ 9┊10┊export class ChatsService {\n```\n```diff\n@@ -24,4 +25,19 @@\n ┊24┊25┊\n ┊25┊26┊    return {query, chats$};\n ┊26┊27┊  }\n+┊  ┊28┊\n+┊  ┊29┊  getChat(chatId: string) {\n+┊  ┊30┊    const query = this.apollo.watchQuery<any>({\n+┊  ┊31┊      query: getChatQuery,\n+┊  ┊32┊      variables: {\n+┊  ┊33┊        chatId: chatId,\n+┊  ┊34┊      }\n+┊  ┊35┊    });\n+┊  ┊36┊\n+┊  ┊37┊    const chat$ = query.valueChanges.pipe(\n+┊  ┊38┊      map((result: ApolloQueryResult<any>) => result.data.chat)\n+┊  ┊39┊    );\n+┊  ┊40┊\n+┊  ┊41┊    return {query, chat$};\n+┊  ┊42┊  }\n ┊27┊43┊}\n```\n\n##### Added src&#x2F;graphql&#x2F;getChat.query.ts\n```diff\n@@ -0,0 +1,17 @@\n+┊  ┊ 1┊import gql from 'graphql-tag';\n+┊  ┊ 2┊import {fragments} from './fragment';\n+┊  ┊ 3┊\n+┊  ┊ 4┊// We use the gql tag to parse our query string into a query document\n+┊  ┊ 5┊export const getChatQuery = gql`\n+┊  ┊ 6┊  query GetChat($chatId: ID!) {\n+┊  ┊ 7┊    chat(chatId: $chatId) {\n+┊  ┊ 8┊      ...ChatWithoutMessages\n+┊  ┊ 9┊      messages {\n+┊  ┊10┊        ...Message\n+┊  ┊11┊      }\n+┊  ┊12┊    }\n+┊  ┊13┊  }\n+┊  ┊14┊\n+┊  ┊15┊  ${fragments['chatWithoutMessages']}\n+┊  ┊16┊  ${fragments['message']}\n+┊  ┊17┊`;\n```\n\n[}]: #\n\nIt's time to generate our types:\n\n    $ npm run generator\n\nAnd use them:\n\n[{]: <helper> (diffStep \"4.2\" files=\"^\\(?!src/types.d.ts$\\).*\" module=\"client\")\n\n#### Step 4.2: Add generated types\n\n##### Changed src&#x2F;app&#x2F;chat-viewer&#x2F;components&#x2F;message-item&#x2F;message-item.component.ts\n```diff\n@@ -1,4 +1,5 @@\n ┊1┊1┊import {Component, Input} from '@angular/core';\n+┊ ┊2┊import {GetChat} from '../../../../types';\n ┊2┊3┊\n ┊3┊4┊@Component({\n ┊4┊5┊  selector: 'app-message-item',\n```\n```diff\n@@ -14,7 +15,7 @@\n ┊14┊15┊export class MessageItemComponent {\n ┊15┊16┊  // tslint:disable-next-line:no-input-rename\n ┊16┊17┊  @Input('item')\n-┊17┊  ┊  message: any;\n+┊  ┊18┊  message: GetChat.Messages;\n ┊18┊19┊\n ┊19┊20┊  @Input()\n ┊20┊21┊  isGroup: boolean;\n```\n\n##### Changed src&#x2F;app&#x2F;chat-viewer&#x2F;components&#x2F;messages-list&#x2F;messages-list.component.ts\n```diff\n@@ -1,4 +1,5 @@\n ┊1┊1┊import {Component, Input} from '@angular/core';\n+┊ ┊2┊import {GetChat} from '../../../../types';\n ┊2┊3┊\n ┊3┊4┊@Component({\n ┊4┊5┊  selector: 'app-messages-list',\n```\n```diff\n@@ -14,7 +15,7 @@\n ┊14┊15┊export class MessagesListComponent {\n ┊15┊16┊  // tslint:disable-next-line:no-input-rename\n ┊16┊17┊  @Input('items')\n-┊17┊  ┊  messages: any[];\n+┊  ┊18┊  messages: GetChat.Messages[];\n ┊18┊19┊\n ┊19┊20┊  @Input()\n ┊20┊21┊  isGroup: boolean;\n```\n\n##### Changed src&#x2F;app&#x2F;chat-viewer&#x2F;containers&#x2F;chat&#x2F;chat.component.ts\n```diff\n@@ -1,6 +1,7 @@\n ┊1┊1┊import {Component, OnInit} from '@angular/core';\n ┊2┊2┊import {ActivatedRoute, Router} from '@angular/router';\n ┊3┊3┊import {ChatsService} from '../../../services/chats.service';\n+┊ ┊4┊import {GetChat} from '../../../../types';\n ┊4┊5┊\n ┊5┊6┊@Component({\n ┊6┊7┊  template: `\n```\n```diff\n@@ -19,7 +20,7 @@\n ┊19┊20┊})\n ┊20┊21┊export class ChatComponent implements OnInit {\n ┊21┊22┊  chatId: string;\n-┊22┊  ┊  messages: any[];\n+┊  ┊23┊  messages: GetChat.Messages[];\n ┊23┊24┊  name: string;\n ┊24┊25┊  isGroup: boolean;\n ┊25┊26┊\n```\n\n##### Changed src&#x2F;app&#x2F;services&#x2F;chats.service.ts\n```diff\n@@ -3,7 +3,7 @@\n ┊3┊3┊import {Apollo} from 'apollo-angular';\n ┊4┊4┊import {Injectable} from '@angular/core';\n ┊5┊5┊import {getChatsQuery} from '../../graphql/getChats.query';\n-┊6┊ ┊import {GetChats} from '../../types';\n+┊ ┊6┊import {GetChat, GetChats} from '../../types';\n ┊7┊7┊import {getChatQuery} from '../../graphql/getChat.query';\n ┊8┊8┊\n ┊9┊9┊@Injectable()\n```\n```diff\n@@ -27,7 +27,7 @@\n ┊27┊27┊  }\n ┊28┊28┊\n ┊29┊29┊  getChat(chatId: string) {\n-┊30┊  ┊    const query = this.apollo.watchQuery<any>({\n+┊  ┊30┊    const query = this.apollo.watchQuery<GetChat.Query>({\n ┊31┊31┊      query: getChatQuery,\n ┊32┊32┊      variables: {\n ┊33┊33┊        chatId: chatId,\n```\n```diff\n@@ -35,7 +35,7 @@\n ┊35┊35┊    });\n ┊36┊36┊\n ┊37┊37┊    const chat$ = query.valueChanges.pipe(\n-┊38┊  ┊      map((result: ApolloQueryResult<any>) => result.data.chat)\n+┊  ┊38┊      map((result: ApolloQueryResult<GetChat.Query>) => result.data.chat)\n ┊39┊39┊    );\n ┊40┊40┊\n ┊41┊41┊    return {query, chat$};\n```\n\n[}]: #\n\nWe will also create some more tests for the newly created Chat container component:\n\n[{]: <helper> (diffStep \"4.3\" module=\"client\")\n\n#### Step 4.3: Testing\n\n##### Added src&#x2F;app&#x2F;chat-viewer&#x2F;containers&#x2F;chat&#x2F;chat.component.spec.ts\n```diff\n@@ -0,0 +1,170 @@\n+┊   ┊  1┊import { async, ComponentFixture, TestBed } from '@angular/core/testing';\n+┊   ┊  2┊\n+┊   ┊  3┊import { ChatComponent } from './chat.component';\n+┊   ┊  4┊import {DebugElement, NO_ERRORS_SCHEMA} from '@angular/core';\n+┊   ┊  5┊import {MatButtonModule, MatGridListModule, MatIconModule, MatListModule, MatMenuModule, MatToolbarModule} from '@angular/material';\n+┊   ┊  6┊import {ChatsService} from '../../../services/chats.service';\n+┊   ┊  7┊import {Apollo} from 'apollo-angular';\n+┊   ┊  8┊import {HttpClientTestingModule, HttpTestingController} from '@angular/common/http/testing';\n+┊   ┊  9┊import {HttpLink, HttpLinkModule, Options} from 'apollo-angular-link-http';\n+┊   ┊ 10┊import {defaultDataIdFromObject, InMemoryCache} from 'apollo-cache-inmemory';\n+┊   ┊ 11┊import {RouterTestingModule} from '@angular/router/testing';\n+┊   ┊ 12┊import {ActivatedRoute} from '@angular/router';\n+┊   ┊ 13┊import {of} from 'rxjs';\n+┊   ┊ 14┊import {By} from '@angular/platform-browser';\n+┊   ┊ 15┊import {FormsModule} from '@angular/forms';\n+┊   ┊ 16┊import {SharedModule} from '../../../shared/shared.module';\n+┊   ┊ 17┊import {NewMessageComponent} from '../../components/new-message/new-message.component';\n+┊   ┊ 18┊import {MessagesListComponent} from '../../components/messages-list/messages-list.component';\n+┊   ┊ 19┊import {MessageItemComponent} from '../../components/message-item/message-item.component';\n+┊   ┊ 20┊\n+┊   ┊ 21┊describe('ChatComponent', () => {\n+┊   ┊ 22┊  let component: ChatComponent;\n+┊   ┊ 23┊  let fixture: ComponentFixture<ChatComponent>;\n+┊   ┊ 24┊  let el: DebugElement;\n+┊   ┊ 25┊\n+┊   ┊ 26┊  let httpMock: HttpTestingController;\n+┊   ┊ 27┊  let httpLink: HttpLink;\n+┊   ┊ 28┊  let apollo: Apollo;\n+┊   ┊ 29┊\n+┊   ┊ 30┊  const chat: any = {\n+┊   ┊ 31┊    id: '1',\n+┊   ┊ 32┊    __typename: 'Chat',\n+┊   ┊ 33┊    name: 'Avery Stewart',\n+┊   ┊ 34┊    picture: 'https://randomuser.me/api/portraits/thumb/women/1.jpg',\n+┊   ┊ 35┊    allTimeMembers: [\n+┊   ┊ 36┊      {\n+┊   ┊ 37┊        id: '1',\n+┊   ┊ 38┊        __typename: 'User',\n+┊   ┊ 39┊      },\n+┊   ┊ 40┊      {\n+┊   ┊ 41┊        id: '3',\n+┊   ┊ 42┊        __typename: 'User',\n+┊   ┊ 43┊      }\n+┊   ┊ 44┊    ],\n+┊   ┊ 45┊    unreadMessages: 1,\n+┊   ┊ 46┊    isGroup: false,\n+┊   ┊ 47┊    messages: [\n+┊   ┊ 48┊      {\n+┊   ┊ 49┊        id: '1',\n+┊   ┊ 50┊        chat: {\n+┊   ┊ 51┊          id: '1',\n+┊   ┊ 52┊          __typename: 'Chat',\n+┊   ┊ 53┊        },\n+┊   ┊ 54┊        __typename: 'Message',\n+┊   ┊ 55┊        sender: {\n+┊   ┊ 56┊          id: '3',\n+┊   ┊ 57┊          __typename: 'User',\n+┊   ┊ 58┊          name: 'Avery Stewart'\n+┊   ┊ 59┊        },\n+┊   ┊ 60┊        content: 'Yep!',\n+┊   ┊ 61┊        createdAt: '1514035700',\n+┊   ┊ 62┊        type: 0,\n+┊   ┊ 63┊        recipients: [\n+┊   ┊ 64┊          {\n+┊   ┊ 65┊            user: {\n+┊   ┊ 66┊              id: '1',\n+┊   ┊ 67┊              __typename: 'User',\n+┊   ┊ 68┊            },\n+┊   ┊ 69┊            message: {\n+┊   ┊ 70┊              id: '1',\n+┊   ┊ 71┊              __typename: 'Message',\n+┊   ┊ 72┊              chat: {\n+┊   ┊ 73┊                id: '1',\n+┊   ┊ 74┊                __typename: 'Chat',\n+┊   ┊ 75┊              },\n+┊   ┊ 76┊            },\n+┊   ┊ 77┊            __typename: 'Recipient',\n+┊   ┊ 78┊            chat: {\n+┊   ┊ 79┊              id: '1',\n+┊   ┊ 80┊              __typename: 'Chat',\n+┊   ┊ 81┊            },\n+┊   ┊ 82┊            receivedAt: null,\n+┊   ┊ 83┊            readAt: null\n+┊   ┊ 84┊          }\n+┊   ┊ 85┊        ],\n+┊   ┊ 86┊        ownership: false\n+┊   ┊ 87┊      }\n+┊   ┊ 88┊    ],\n+┊   ┊ 89┊  };\n+┊   ┊ 90┊\n+┊   ┊ 91┊  beforeEach(async(() => {\n+┊   ┊ 92┊    TestBed.configureTestingModule({\n+┊   ┊ 93┊      declarations: [\n+┊   ┊ 94┊        ChatComponent,\n+┊   ┊ 95┊        MessagesListComponent,\n+┊   ┊ 96┊        MessageItemComponent,\n+┊   ┊ 97┊        NewMessageComponent,\n+┊   ┊ 98┊      ],\n+┊   ┊ 99┊      imports: [\n+┊   ┊100┊        MatToolbarModule,\n+┊   ┊101┊        MatMenuModule,\n+┊   ┊102┊        MatIconModule,\n+┊   ┊103┊        MatButtonModule,\n+┊   ┊104┊        MatListModule,\n+┊   ┊105┊        MatGridListModule,\n+┊   ┊106┊        FormsModule,\n+┊   ┊107┊        SharedModule,\n+┊   ┊108┊        HttpLinkModule,\n+┊   ┊109┊        HttpClientTestingModule,\n+┊   ┊110┊        RouterTestingModule\n+┊   ┊111┊      ],\n+┊   ┊112┊      providers: [\n+┊   ┊113┊        ChatsService,\n+┊   ┊114┊        Apollo,\n+┊   ┊115┊        {\n+┊   ┊116┊          provide: ActivatedRoute,\n+┊   ┊117┊          useValue: { params: of({ id: chat.id }) }\n+┊   ┊118┊        }\n+┊   ┊119┊      ],\n+┊   ┊120┊      schemas: [NO_ERRORS_SCHEMA]\n+┊   ┊121┊    })\n+┊   ┊122┊      .compileComponents();\n+┊   ┊123┊\n+┊   ┊124┊    httpMock = TestBed.get(HttpTestingController);\n+┊   ┊125┊    httpLink = TestBed.get(HttpLink);\n+┊   ┊126┊    apollo = TestBed.get(Apollo);\n+┊   ┊127┊\n+┊   ┊128┊    apollo.create({\n+┊   ┊129┊      link: httpLink.create(<Options>{ uri: 'http://localhost:3000/graphql' }),\n+┊   ┊130┊      cache: new InMemoryCache({\n+┊   ┊131┊        dataIdFromObject: (object: any) => {\n+┊   ┊132┊          switch (object.__typename) {\n+┊   ┊133┊            case 'Message': return `${object.chat.id}:${object.id}`; // use `chatId` prefix and `messageId` as the primary key\n+┊   ┊134┊            default: return defaultDataIdFromObject(object); // fall back to default handling\n+┊   ┊135┊          }\n+┊   ┊136┊        }\n+┊   ┊137┊      }),\n+┊   ┊138┊    });\n+┊   ┊139┊  }));\n+┊   ┊140┊\n+┊   ┊141┊  beforeEach(() => {\n+┊   ┊142┊    fixture = TestBed.createComponent(ChatComponent);\n+┊   ┊143┊    component = fixture.componentInstance;\n+┊   ┊144┊    fixture.detectChanges();\n+┊   ┊145┊    const req = httpMock.expectOne('http://localhost:3000/graphql', 'call to api');\n+┊   ┊146┊    req.flush({\n+┊   ┊147┊      data: {\n+┊   ┊148┊        chat\n+┊   ┊149┊      }\n+┊   ┊150┊    });\n+┊   ┊151┊  });\n+┊   ┊152┊\n+┊   ┊153┊  it('should create', () => {\n+┊   ┊154┊    expect(component).toBeTruthy();\n+┊   ┊155┊  });\n+┊   ┊156┊\n+┊   ┊157┊  it('should display the chat', () => {\n+┊   ┊158┊    fixture.whenStable().then(() => {\n+┊   ┊159┊      fixture.detectChanges();\n+┊   ┊160┊      el = fixture.debugElement;\n+┊   ┊161┊      expect(el.query(By.css(`app-toolbar > mat-toolbar > div > div`)).nativeElement.textContent).toContain(chat.name);\n+┊   ┊162┊      for (let i = 0; i < chat.messages.length; i++) {\n+┊   ┊163┊        expect(el.query(By.css(`app-messages-list > mat-list > mat-list-item:nth-child(${i + 1}) > div > app-message-item > div`))\n+┊   ┊164┊          .nativeElement.textContent).toContain(chat.messages[i].content);\n+┊   ┊165┊      }\n+┊   ┊166┊    });\n+┊   ┊167┊\n+┊   ┊168┊    httpMock.verify();\n+┊   ┊169┊  });\n+┊   ┊170┊});\n```\n\n[}]: #"
          },
          {
            "manualTitle": "Step 9: Mutations",
            "stepRevision": "a39d96f8239744f231c9107ebbd0e4bbb5428792",
            "manualView": "In addition to fetching data using queries, Apollo also helps you handle GraphQL mutations. In GraphQL, mutations are identical to queries in syntax, the only difference being that you use the keyword mutation instead of query to indicate that the root fields on this query are going to be performing writes to the backend.\nGraphQL mutations represent two things in one query string:\n\n1. The mutation field name with arguments, which represents the actual operation to be done on the server.\n2. The fields you want back from the result of the mutation to update the client.\n\nWhen we use mutations in Apollo, the result is typically integrated into the cache automatically based on the id of the result, which in turn updates the UI automatically, so we often don't need to explicitly handle the results. In order for the client to correctly do this, we need to ensure we select the necessary fields in the result. One good strategy can be to simply ask for any fields that might have been affected by the mutation. Alternatively, you can use fragments to share the fields between a query and a mutation that updates that query.\n\n## Server\n\nFinally we're going to create our mutations in the server:\n\n[{]: <helper> (diffStep \"3.1\" module=\"server\")\n\n#### Step 3.1: Add mutations\n\n##### Changed schema&#x2F;resolvers.ts\n```diff\n@@ -1,6 +1,7 @@\n-┊1┊ ┊import { Chat, db, Message, Recipient, User } from \"../db\";\n+┊ ┊1┊import { Chat, db, Message, MessageType, Recipient, User } from \"../db\";\n ┊2┊2┊import { IResolvers } from \"graphql-tools/dist/Interfaces\";\n ┊3┊3┊import { ChatQueryArgs } from \"../types\";\n+┊ ┊4┊import * as moment from \"moment\";\n ┊4┊5┊\n ┊5┊6┊let users = db.users;\n ┊6┊7┊let chats = db.chats;\n```\n```diff\n@@ -13,6 +14,276 @@\n ┊ 13┊ 14┊    chats: (): Chat[] => chats.filter(chat => chat.listingMemberIds.includes(currentUser)),\n ┊ 14┊ 15┊    chat: (obj: any, {chatId}: ChatQueryArgs): Chat | null => chats.find(chat => chat.id === Number(chatId)) || null,\n ┊ 15┊ 16┊  },\n+┊   ┊ 17┊  Mutation: {\n+┊   ┊ 18┊    addChat: (obj: any, {recipientId}: any): Chat => {\n+┊   ┊ 19┊      if (!users.find(user => user.id === recipientId)) {\n+┊   ┊ 20┊        throw new Error(`Recipient ${recipientId} doesn't exist.`);\n+┊   ┊ 21┊      }\n+┊   ┊ 22┊\n+┊   ┊ 23┊      const chat = chats.find(chat => !chat.name && chat.allTimeMemberIds.includes(currentUser) && chat.allTimeMemberIds.includes(recipientId));\n+┊   ┊ 24┊      if (chat) {\n+┊   ┊ 25┊        // Chat already exists. Both users are already in the allTimeMemberIds array\n+┊   ┊ 26┊        const chatId = chat.id;\n+┊   ┊ 27┊        if (!chat.listingMemberIds.includes(currentUser)) {\n+┊   ┊ 28┊          // The chat isn't listed for the current user. Add him to the memberIds\n+┊   ┊ 29┊          chat.listingMemberIds.push(currentUser);\n+┊   ┊ 30┊          chats.find(chat => chat.id === chatId)!.listingMemberIds.push(currentUser);\n+┊   ┊ 31┊          return chat;\n+┊   ┊ 32┊        } else {\n+┊   ┊ 33┊          throw new Error(`Chat already exists.`);\n+┊   ┊ 34┊        }\n+┊   ┊ 35┊      } else {\n+┊   ┊ 36┊        // Create the chat\n+┊   ┊ 37┊        const id = (chats.length && chats[chats.length - 1].id + 1) || 1;\n+┊   ┊ 38┊        const chat: Chat = {\n+┊   ┊ 39┊          id,\n+┊   ┊ 40┊          name: null,\n+┊   ┊ 41┊          picture: null,\n+┊   ┊ 42┊          adminIds: null,\n+┊   ┊ 43┊          ownerId: null,\n+┊   ┊ 44┊          allTimeMemberIds: [currentUser, recipientId],\n+┊   ┊ 45┊          // Chat will not be listed to the other user until the first message gets written\n+┊   ┊ 46┊          listingMemberIds: [currentUser],\n+┊   ┊ 47┊          actualGroupMemberIds: null,\n+┊   ┊ 48┊          messages: [],\n+┊   ┊ 49┊        };\n+┊   ┊ 50┊        chats.push(chat);\n+┊   ┊ 51┊        return chat;\n+┊   ┊ 52┊      }\n+┊   ┊ 53┊    },\n+┊   ┊ 54┊    addGroup: (obj: any, {recipientIds, groupName}: any): Chat => {\n+┊   ┊ 55┊      recipientIds.forEach((recipientId: any) => {\n+┊   ┊ 56┊        if (!users.find(user => user.id === recipientId)) {\n+┊   ┊ 57┊          throw new Error(`Recipient ${recipientId} doesn't exist.`);\n+┊   ┊ 58┊        }\n+┊   ┊ 59┊      });\n+┊   ┊ 60┊\n+┊   ┊ 61┊      const id = (chats.length && chats[chats.length - 1].id + 1) || 1;\n+┊   ┊ 62┊      const chat: Chat = {\n+┊   ┊ 63┊        id,\n+┊   ┊ 64┊        name: groupName,\n+┊   ┊ 65┊        picture: null,\n+┊   ┊ 66┊        adminIds: [currentUser],\n+┊   ┊ 67┊        ownerId: currentUser,\n+┊   ┊ 68┊        allTimeMemberIds: [currentUser, ...recipientIds],\n+┊   ┊ 69┊        listingMemberIds: [currentUser, ...recipientIds],\n+┊   ┊ 70┊        actualGroupMemberIds: [currentUser, ...recipientIds],\n+┊   ┊ 71┊        messages: [],\n+┊   ┊ 72┊      };\n+┊   ┊ 73┊      chats.push(chat);\n+┊   ┊ 74┊      return chat;\n+┊   ┊ 75┊    },\n+┊   ┊ 76┊    removeChat: (obj: any, {chatId}: any): number => {\n+┊   ┊ 77┊      const chat = chats.find(chat => chat.id === chatId);\n+┊   ┊ 78┊\n+┊   ┊ 79┊      if (!chat) {\n+┊   ┊ 80┊        throw new Error(`The chat ${chatId} doesn't exist.`);\n+┊   ┊ 81┊      }\n+┊   ┊ 82┊\n+┊   ┊ 83┊      if (!chat.name) {\n+┊   ┊ 84┊        // Chat\n+┊   ┊ 85┊        if (!chat.listingMemberIds.includes(currentUser)) {\n+┊   ┊ 86┊          throw new Error(`The user is not a member of the chat ${chatId}.`);\n+┊   ┊ 87┊        }\n+┊   ┊ 88┊\n+┊   ┊ 89┊        // Instead of chaining map and filter we can loop once using reduce\n+┊   ┊ 90┊        const messages = chat.messages.reduce<Message[]>((filtered, message) => {\n+┊   ┊ 91┊          // Remove the current user from the message holders\n+┊   ┊ 92┊          message.holderIds = message.holderIds.filter(holderId => holderId !== currentUser);\n+┊   ┊ 93┊\n+┊   ┊ 94┊          if (message.holderIds.length !== 0) {\n+┊   ┊ 95┊            filtered.push(message);\n+┊   ┊ 96┊          } // else discard the message\n+┊   ┊ 97┊\n+┊   ┊ 98┊          return filtered;\n+┊   ┊ 99┊        }, []);\n+┊   ┊100┊\n+┊   ┊101┊        // Remove the current user from who gets the chat listed. The chat will no longer appear in his list\n+┊   ┊102┊        const listingMemberIds = chat.listingMemberIds.filter(listingId => listingId !== currentUser);\n+┊   ┊103┊\n+┊   ┊104┊        // Check how many members are left\n+┊   ┊105┊        if (listingMemberIds.length === 0) {\n+┊   ┊106┊          // Delete the chat\n+┊   ┊107┊          chats = chats.filter(chat => chat.id !== chatId);\n+┊   ┊108┊        } else {\n+┊   ┊109┊          // Update the chat\n+┊   ┊110┊          chats = chats.map(chat => {\n+┊   ┊111┊            if (chat.id === chatId) {\n+┊   ┊112┊              chat = {...chat, listingMemberIds, messages};\n+┊   ┊113┊            }\n+┊   ┊114┊            return chat;\n+┊   ┊115┊          });\n+┊   ┊116┊        }\n+┊   ┊117┊        return chatId;\n+┊   ┊118┊      } else {\n+┊   ┊119┊        // Group\n+┊   ┊120┊        if (chat.ownerId !== currentUser) {\n+┊   ┊121┊          throw new Error(`Group ${chatId} is not owned by the user.`);\n+┊   ┊122┊        }\n+┊   ┊123┊\n+┊   ┊124┊        // Instead of chaining map and filter we can loop once using reduce\n+┊   ┊125┊        const messages = chat.messages.reduce<Message[]>((filtered, message) => {\n+┊   ┊126┊          // Remove the current user from the message holders\n+┊   ┊127┊          message.holderIds = message.holderIds.filter(holderId => holderId !== currentUser);\n+┊   ┊128┊\n+┊   ┊129┊          if (message.holderIds.length !== 0) {\n+┊   ┊130┊            filtered.push(message);\n+┊   ┊131┊          } // else discard the message\n+┊   ┊132┊\n+┊   ┊133┊          return filtered;\n+┊   ┊134┊        }, []);\n+┊   ┊135┊\n+┊   ┊136┊        // Remove the current user from who gets the group listed. The group will no longer appear in his list\n+┊   ┊137┊        const listingMemberIds = chat.listingMemberIds.filter(listingId => listingId !== currentUser);\n+┊   ┊138┊\n+┊   ┊139┊        // Check how many members (including previous ones who can still access old messages) are left\n+┊   ┊140┊        if (listingMemberIds.length === 0) {\n+┊   ┊141┊          // Remove the group\n+┊   ┊142┊          chats = chats.filter(chat => chat.id !== chatId);\n+┊   ┊143┊        } else {\n+┊   ┊144┊          // Update the group\n+┊   ┊145┊\n+┊   ┊146┊          // Remove the current user from the chat members. He is no longer a member of the group\n+┊   ┊147┊          const actualGroupMemberIds = chat.actualGroupMemberIds!.filter(memberId => memberId !== currentUser);\n+┊   ┊148┊          // Remove the current user from the chat admins\n+┊   ┊149┊          const adminIds = chat.adminIds!.filter(memberId => memberId !== currentUser);\n+┊   ┊150┊          // Set the owner id to be null. A null owner means the group is read-only\n+┊   ┊151┊          let ownerId: number | null = null;\n+┊   ┊152┊\n+┊   ┊153┊          // Check if there is any admin left\n+┊   ┊154┊          if (adminIds!.length) {\n+┊   ┊155┊            // Pick an admin as the new owner. The group is no longer read-only\n+┊   ┊156┊            ownerId = chat.adminIds![0];\n+┊   ┊157┊          }\n+┊   ┊158┊\n+┊   ┊159┊          chats = chats.map(chat => {\n+┊   ┊160┊            if (chat.id === chatId) {\n+┊   ┊161┊              chat = {...chat, messages, listingMemberIds, actualGroupMemberIds, adminIds, ownerId};\n+┊   ┊162┊            }\n+┊   ┊163┊            return chat;\n+┊   ┊164┊          });\n+┊   ┊165┊        }\n+┊   ┊166┊        return chatId;\n+┊   ┊167┊      }\n+┊   ┊168┊    },\n+┊   ┊169┊    addMessage: (obj: any, {chatId, content}: any): Message => {\n+┊   ┊170┊      if (content === null || content === '') {\n+┊   ┊171┊        throw new Error(`Cannot add empty or null messages.`);\n+┊   ┊172┊      }\n+┊   ┊173┊\n+┊   ┊174┊      let chat = chats.find(chat => chat.id === chatId);\n+┊   ┊175┊\n+┊   ┊176┊      if (!chat) {\n+┊   ┊177┊        throw new Error(`Cannot find chat ${chatId}.`);\n+┊   ┊178┊      }\n+┊   ┊179┊\n+┊   ┊180┊      let holderIds = chat.listingMemberIds;\n+┊   ┊181┊\n+┊   ┊182┊      if (!chat.name) {\n+┊   ┊183┊        // Chat\n+┊   ┊184┊        if (!chat.listingMemberIds.find(listingId => listingId === currentUser)) {\n+┊   ┊185┊          throw new Error(`The chat ${chatId} must be listed for the current user before adding a message.`);\n+┊   ┊186┊        }\n+┊   ┊187┊\n+┊   ┊188┊        const recipientId = chat.allTimeMemberIds.filter(userId => userId !== currentUser)[0];\n+┊   ┊189┊\n+┊   ┊190┊        if (!chat.listingMemberIds.find(listingId => listingId === recipientId)) {\n+┊   ┊191┊          // Chat is not listed for the recipient. Add him to the listingMemberIds\n+┊   ┊192┊          const listingMemberIds = chat.listingMemberIds.concat(recipientId);\n+┊   ┊193┊\n+┊   ┊194┊          chats = chats.map(chat => {\n+┊   ┊195┊            if (chat.id === chatId) {\n+┊   ┊196┊              chat = {...chat, listingMemberIds};\n+┊   ┊197┊            }\n+┊   ┊198┊            return chat;\n+┊   ┊199┊          });\n+┊   ┊200┊\n+┊   ┊201┊          holderIds = listingMemberIds;\n+┊   ┊202┊        }\n+┊   ┊203┊      } else {\n+┊   ┊204┊        // Group\n+┊   ┊205┊        if (!chat.actualGroupMemberIds!.find(memberId => memberId === currentUser)) {\n+┊   ┊206┊          throw new Error(`The user is not a member of the group ${chatId}. Cannot add message.`);\n+┊   ┊207┊        }\n+┊   ┊208┊\n+┊   ┊209┊        holderIds = chat.actualGroupMemberIds!;\n+┊   ┊210┊      }\n+┊   ┊211┊\n+┊   ┊212┊      const id = (chat.messages.length && chat.messages[chat.messages.length - 1].id + 1) || 1;\n+┊   ┊213┊\n+┊   ┊214┊      let recipients: Recipient[] = [];\n+┊   ┊215┊\n+┊   ┊216┊      holderIds.forEach(holderId => {\n+┊   ┊217┊        if (holderId !== currentUser) {\n+┊   ┊218┊          recipients.push({\n+┊   ┊219┊            userId: holderId,\n+┊   ┊220┊            messageId: id,\n+┊   ┊221┊            chatId: chatId,\n+┊   ┊222┊            receivedAt: null,\n+┊   ┊223┊            readAt: null,\n+┊   ┊224┊          });\n+┊   ┊225┊        }\n+┊   ┊226┊      });\n+┊   ┊227┊\n+┊   ┊228┊      const message: Message = {\n+┊   ┊229┊        id,\n+┊   ┊230┊        chatId,\n+┊   ┊231┊        senderId: currentUser,\n+┊   ┊232┊        content,\n+┊   ┊233┊        createdAt: moment().unix(),\n+┊   ┊234┊        type: MessageType.TEXT,\n+┊   ┊235┊        recipients,\n+┊   ┊236┊        holderIds,\n+┊   ┊237┊      };\n+┊   ┊238┊\n+┊   ┊239┊      chats = chats.map(chat => {\n+┊   ┊240┊        if (chat.id === chatId) {\n+┊   ┊241┊          chat = {...chat, messages: chat.messages.concat(message)}\n+┊   ┊242┊        }\n+┊   ┊243┊        return chat;\n+┊   ┊244┊      });\n+┊   ┊245┊\n+┊   ┊246┊      return message;\n+┊   ┊247┊    },\n+┊   ┊248┊    removeMessages: (obj: any, {chatId, messageIds, all}: any): number[] => {\n+┊   ┊249┊      const chat = chats.find(chat => chat.id === chatId);\n+┊   ┊250┊\n+┊   ┊251┊      if (!chat) {\n+┊   ┊252┊        throw new Error(`Cannot find chat ${chatId}.`);\n+┊   ┊253┊      }\n+┊   ┊254┊\n+┊   ┊255┊      if (!chat.listingMemberIds.find(listingId => listingId === currentUser)) {\n+┊   ┊256┊        throw new Error(`The chat/group ${chatId} is not listed for the current user, so there is nothing to delete.`);\n+┊   ┊257┊      }\n+┊   ┊258┊\n+┊   ┊259┊      if (all && messageIds) {\n+┊   ┊260┊        throw new Error(`Cannot specify both 'all' and 'messageIds'.`);\n+┊   ┊261┊      }\n+┊   ┊262┊\n+┊   ┊263┊      let deletedIds: number[] = [];\n+┊   ┊264┊      chats = chats.map(chat => {\n+┊   ┊265┊        if (chat.id === chatId) {\n+┊   ┊266┊          // Instead of chaining map and filter we can loop once using reduce\n+┊   ┊267┊          const messages = chat.messages.reduce<Message[]>((filtered, message) => {\n+┊   ┊268┊            if (all || messageIds!.includes(message.id)) {\n+┊   ┊269┊              deletedIds.push(message.id);\n+┊   ┊270┊              // Remove the current user from the message holders\n+┊   ┊271┊              message.holderIds = message.holderIds.filter(holderId => holderId !== currentUser);\n+┊   ┊272┊            }\n+┊   ┊273┊\n+┊   ┊274┊            if (message.holderIds.length !== 0) {\n+┊   ┊275┊              filtered.push(message);\n+┊   ┊276┊            } // else discard the message\n+┊   ┊277┊\n+┊   ┊278┊            return filtered;\n+┊   ┊279┊          }, []);\n+┊   ┊280┊          chat = {...chat, messages};\n+┊   ┊281┊        }\n+┊   ┊282┊        return chat;\n+┊   ┊283┊      });\n+┊   ┊284┊      return deletedIds;\n+┊   ┊285┊    },\n+┊   ┊286┊  },\n ┊ 16┊287┊  Chat: {\n ┊ 17┊288┊    name: (chat: Chat): string => chat.name ? chat.name : users\n ┊ 18┊289┊      .find(user => user.id === chat.allTimeMemberIds.find(userId => userId !== currentUser))!.name,\n```\n\n##### Changed schema&#x2F;typeDefs.ts\n```diff\n@@ -67,4 +67,20 @@\n ┊67┊67┊    picture: String\n ┊68┊68┊    phone: String\n ┊69┊69┊  }\n+┊  ┊70┊\n+┊  ┊71┊  type Mutation {\n+┊  ┊72┊    addChat(recipientId: ID!): Chat\n+┊  ┊73┊    addGroup(recipientIds: [ID!]!, groupName: String!): Chat\n+┊  ┊74┊    removeChat(chatId: ID!): ID\n+┊  ┊75┊    addMessage(chatId: ID!, content: String!): Message\n+┊  ┊76┊    removeMessages(chatId: ID!, messageIds: [ID], all: Boolean): [ID]\n+┊  ┊77┊    addMembers(groupId: ID!, userIds: [ID!]!): [ID]\n+┊  ┊78┊    removeMembers(groupId: ID!, userIds: [ID!]!): [ID]\n+┊  ┊79┊    addAdmins(groupId: ID!, userIds: [ID!]!): [ID]\n+┊  ┊80┊    removeAdmins(groupId: ID!, userIds: [ID!]!): [ID]\n+┊  ┊81┊    setGroupName(groupId: ID!): String\n+┊  ┊82┊    setGroupPicture(groupId: ID!): String\n+┊  ┊83┊    markAsReceived(chatId: ID!): Boolean\n+┊  ┊84┊    markAsRead(chatId: ID!): Boolean\n+┊  ┊85┊  }\n ┊70┊86┊`;\n```\n\n[}]: #\n\nLet me briefly explain what's going on here.\nFor each chat/group we store the `allTimeMemberIds`, `listingMemberIds` and `actualGroupMemberIds` properties in our NoSQL-like fake db.\nWhat's the difference between `allTimeMemberIds` and `listingMemberIds`? When a chat gets created only the user who created it will be able too see it, the chat will be displayed to the other user only once the first messaged gets sent. `allTimeMemberIds` is an array which always contain both the users, while `listingMemberIds` contains only the users which get the chat listed (initially the creator, later both users). `actualGroupMemberIds` is only used for groups.\nGroups, instead, get listed by all members immediately since the creation. So initially both `allTimeMemberIds`, `listingMemberIds` and `actualGroupMemberIds` are similar. Later users can leave the group or get deleted (so they will be removed from `actualGroupMemberIds`) but they will still be able to list the group in read-only mode, thus remaining in the `listingMemberIds`. Once they remove the group they will also be remove from the `listingMemberIds` array.\nThat's why we have to check for several different conditions before adding/deleting messages: it could be necessary to add the other peer to the `listingMemberIds` (for example if we are writing the first message of a chat) or it could be necessary to physically remove the messages instead of simply removing the current user from the `holderIds`. `holderIds` is a field in each message which states which user will currently display that specific message. In fact each user can delete a specific message without affecting what the others will see. Once there will be no more users in the `holderIds` array it will be safe to delete the message.\nEach message has also a `recipients` array containing the receiving date and the viewing date of that particular message for all the other users. That's necessary to implement the single, double and blue ticks used by the real Whatsapp.\n\nIt may seem a bit overwhelming at first, but you should keep in mind that the real Whatsapp has tons of features and also takes advantage of a local database to store messages, so it's easier for them to implement features like per-user messages: their source of truth is not the server because once downloaded the messages are kept in the client itself, so deleting messages doesn't affect anyone else. On the contrary our source of truth is the server, so our approach is more similar to Telegram instead. This is a better approach in my opinion because it allows us to show the messages for the same user on multiple clients, instead of having to rely on questionable approaches like Whatsapp Web.\nAlso we already implemented our mutations to take care of future use cases (like reading notifications) which we still didn't implement.\n\nI said we were going to take greater advantage of `graphql-code-generator` once we started writing our first mutation and I'm going to show you why. Let's run the generator first:\n\n    $ npm run generator\n\nThen let's use the generated types:\n\n[{]: <helper> (diffStep \"3.3\" module=\"server\")\n\n#### Step 3.3: Use generated types\n\n##### Changed schema&#x2F;resolvers.ts\n```diff\n@@ -1,6 +1,9 @@\n ┊1┊1┊import { Chat, db, Message, MessageType, Recipient, User } from \"../db\";\n ┊2┊2┊import { IResolvers } from \"graphql-tools/dist/Interfaces\";\n-┊3┊ ┊import { ChatQueryArgs } from \"../types\";\n+┊ ┊3┊import {\n+┊ ┊4┊  AddChatMutationArgs, AddGroupMutationArgs, AddMessageMutationArgs, ChatQueryArgs,\n+┊ ┊5┊  RemoveChatMutationArgs, RemoveMessagesMutationArgs\n+┊ ┊6┊} from \"../types\";\n ┊4┊7┊import * as moment from \"moment\";\n ┊5┊8┊\n ┊6┊9┊let users = db.users;\n```\n```diff\n@@ -15,12 +18,12 @@\n ┊15┊18┊    chat: (obj: any, {chatId}: ChatQueryArgs): Chat | null => chats.find(chat => chat.id === Number(chatId)) || null,\n ┊16┊19┊  },\n ┊17┊20┊  Mutation: {\n-┊18┊  ┊    addChat: (obj: any, {recipientId}: any): Chat => {\n-┊19┊  ┊      if (!users.find(user => user.id === recipientId)) {\n+┊  ┊21┊    addChat: (obj: any, {recipientId}: AddChatMutationArgs): Chat => {\n+┊  ┊22┊      if (!users.find(user => user.id === Number(recipientId))) {\n ┊20┊23┊        throw new Error(`Recipient ${recipientId} doesn't exist.`);\n ┊21┊24┊      }\n ┊22┊25┊\n-┊23┊  ┊      const chat = chats.find(chat => !chat.name && chat.allTimeMemberIds.includes(currentUser) && chat.allTimeMemberIds.includes(recipientId));\n+┊  ┊26┊      const chat = chats.find(chat => !chat.name && chat.allTimeMemberIds.includes(currentUser) && chat.allTimeMemberIds.includes(Number(recipientId)));\n ┊24┊27┊      if (chat) {\n ┊25┊28┊        // Chat already exists. Both users are already in the allTimeMemberIds array\n ┊26┊29┊        const chatId = chat.id;\n```\n```diff\n@@ -41,7 +44,7 @@\n ┊41┊44┊          picture: null,\n ┊42┊45┊          adminIds: null,\n ┊43┊46┊          ownerId: null,\n-┊44┊  ┊          allTimeMemberIds: [currentUser, recipientId],\n+┊  ┊47┊          allTimeMemberIds: [currentUser, Number(recipientId)],\n ┊45┊48┊          // Chat will not be listed to the other user until the first message gets written\n ┊46┊49┊          listingMemberIds: [currentUser],\n ┊47┊50┊          actualGroupMemberIds: null,\n```\n```diff\n@@ -51,9 +54,9 @@\n ┊51┊54┊        return chat;\n ┊52┊55┊      }\n ┊53┊56┊    },\n-┊54┊  ┊    addGroup: (obj: any, {recipientIds, groupName}: any): Chat => {\n-┊55┊  ┊      recipientIds.forEach((recipientId: any) => {\n-┊56┊  ┊        if (!users.find(user => user.id === recipientId)) {\n+┊  ┊57┊    addGroup: (obj: any, {recipientIds, groupName}: AddGroupMutationArgs): Chat => {\n+┊  ┊58┊      recipientIds.forEach(recipientId => {\n+┊  ┊59┊        if (!users.find(user => user.id === Number(recipientId))) {\n ┊57┊60┊          throw new Error(`Recipient ${recipientId} doesn't exist.`);\n ┊58┊61┊        }\n ┊59┊62┊      });\n```\n```diff\n@@ -65,16 +68,16 @@\n ┊65┊68┊        picture: null,\n ┊66┊69┊        adminIds: [currentUser],\n ┊67┊70┊        ownerId: currentUser,\n-┊68┊  ┊        allTimeMemberIds: [currentUser, ...recipientIds],\n-┊69┊  ┊        listingMemberIds: [currentUser, ...recipientIds],\n-┊70┊  ┊        actualGroupMemberIds: [currentUser, ...recipientIds],\n+┊  ┊71┊        allTimeMemberIds: [currentUser, ...recipientIds.map(id => Number(id))],\n+┊  ┊72┊        listingMemberIds: [currentUser, ...recipientIds.map(id => Number(id))],\n+┊  ┊73┊        actualGroupMemberIds: [currentUser, ...recipientIds.map(id => Number(id))],\n ┊71┊74┊        messages: [],\n ┊72┊75┊      };\n ┊73┊76┊      chats.push(chat);\n ┊74┊77┊      return chat;\n ┊75┊78┊    },\n-┊76┊  ┊    removeChat: (obj: any, {chatId}: any): number => {\n-┊77┊  ┊      const chat = chats.find(chat => chat.id === chatId);\n+┊  ┊79┊    removeChat: (obj: any, {chatId}: RemoveChatMutationArgs): number => {\n+┊  ┊80┊      const chat = chats.find(chat => chat.id === Number(chatId));\n ┊78┊81┊\n ┊79┊82┊      if (!chat) {\n ┊80┊83┊        throw new Error(`The chat ${chatId} doesn't exist.`);\n```\n```diff\n@@ -104,17 +107,17 @@\n ┊104┊107┊        // Check how many members are left\n ┊105┊108┊        if (listingMemberIds.length === 0) {\n ┊106┊109┊          // Delete the chat\n-┊107┊   ┊          chats = chats.filter(chat => chat.id !== chatId);\n+┊   ┊110┊          chats = chats.filter(chat => chat.id !== Number(chatId));\n ┊108┊111┊        } else {\n ┊109┊112┊          // Update the chat\n ┊110┊113┊          chats = chats.map(chat => {\n-┊111┊   ┊            if (chat.id === chatId) {\n+┊   ┊114┊            if (chat.id === Number(chatId)) {\n ┊112┊115┊              chat = {...chat, listingMemberIds, messages};\n ┊113┊116┊            }\n ┊114┊117┊            return chat;\n ┊115┊118┊          });\n ┊116┊119┊        }\n-┊117┊   ┊        return chatId;\n+┊   ┊120┊        return Number(chatId);\n ┊118┊121┊      } else {\n ┊119┊122┊        // Group\n ┊120┊123┊        if (chat.ownerId !== currentUser) {\n```\n```diff\n@@ -139,7 +142,7 @@\n ┊139┊142┊        // Check how many members (including previous ones who can still access old messages) are left\n ┊140┊143┊        if (listingMemberIds.length === 0) {\n ┊141┊144┊          // Remove the group\n-┊142┊   ┊          chats = chats.filter(chat => chat.id !== chatId);\n+┊   ┊145┊          chats = chats.filter(chat => chat.id !== Number(chatId));\n ┊143┊146┊        } else {\n ┊144┊147┊          // Update the group\n ┊145┊148┊\n```\n```diff\n@@ -157,21 +160,21 @@\n ┊157┊160┊          }\n ┊158┊161┊\n ┊159┊162┊          chats = chats.map(chat => {\n-┊160┊   ┊            if (chat.id === chatId) {\n+┊   ┊163┊            if (chat.id === Number(chatId)) {\n ┊161┊164┊              chat = {...chat, messages, listingMemberIds, actualGroupMemberIds, adminIds, ownerId};\n ┊162┊165┊            }\n ┊163┊166┊            return chat;\n ┊164┊167┊          });\n ┊165┊168┊        }\n-┊166┊   ┊        return chatId;\n+┊   ┊169┊        return Number(chatId);\n ┊167┊170┊      }\n ┊168┊171┊    },\n-┊169┊   ┊    addMessage: (obj: any, {chatId, content}: any): Message => {\n+┊   ┊172┊    addMessage: (obj: any, {chatId, content}: AddMessageMutationArgs): Message => {\n ┊170┊173┊      if (content === null || content === '') {\n ┊171┊174┊        throw new Error(`Cannot add empty or null messages.`);\n ┊172┊175┊      }\n ┊173┊176┊\n-┊174┊   ┊      let chat = chats.find(chat => chat.id === chatId);\n+┊   ┊177┊      let chat = chats.find(chat => chat.id === Number(chatId));\n ┊175┊178┊\n ┊176┊179┊      if (!chat) {\n ┊177┊180┊        throw new Error(`Cannot find chat ${chatId}.`);\n```\n```diff\n@@ -192,7 +195,7 @@\n ┊192┊195┊          const listingMemberIds = chat.listingMemberIds.concat(recipientId);\n ┊193┊196┊\n ┊194┊197┊          chats = chats.map(chat => {\n-┊195┊   ┊            if (chat.id === chatId) {\n+┊   ┊198┊            if (chat.id === Number(chatId)) {\n ┊196┊199┊              chat = {...chat, listingMemberIds};\n ┊197┊200┊            }\n ┊198┊201┊            return chat;\n```\n```diff\n@@ -218,7 +221,7 @@\n ┊218┊221┊          recipients.push({\n ┊219┊222┊            userId: holderId,\n ┊220┊223┊            messageId: id,\n-┊221┊   ┊            chatId: chatId,\n+┊   ┊224┊            chatId: Number(chatId),\n ┊222┊225┊            receivedAt: null,\n ┊223┊226┊            readAt: null,\n ┊224┊227┊          });\n```\n```diff\n@@ -227,7 +230,7 @@\n ┊227┊230┊\n ┊228┊231┊      const message: Message = {\n ┊229┊232┊        id,\n-┊230┊   ┊        chatId,\n+┊   ┊233┊        chatId: Number(chatId),\n ┊231┊234┊        senderId: currentUser,\n ┊232┊235┊        content,\n ┊233┊236┊        createdAt: moment().unix(),\n```\n```diff\n@@ -237,7 +240,7 @@\n ┊237┊240┊      };\n ┊238┊241┊\n ┊239┊242┊      chats = chats.map(chat => {\n-┊240┊   ┊        if (chat.id === chatId) {\n+┊   ┊243┊        if (chat.id === Number(chatId)) {\n ┊241┊244┊          chat = {...chat, messages: chat.messages.concat(message)}\n ┊242┊245┊        }\n ┊243┊246┊        return chat;\n```\n```diff\n@@ -245,8 +248,8 @@\n ┊245┊248┊\n ┊246┊249┊      return message;\n ┊247┊250┊    },\n-┊248┊   ┊    removeMessages: (obj: any, {chatId, messageIds, all}: any): number[] => {\n-┊249┊   ┊      const chat = chats.find(chat => chat.id === chatId);\n+┊   ┊251┊    removeMessages: (obj: any, {chatId, messageIds, all}: RemoveMessagesMutationArgs): number[] => {\n+┊   ┊252┊      const chat = chats.find(chat => chat.id === Number(chatId));\n ┊250┊253┊\n ┊251┊254┊      if (!chat) {\n ┊252┊255┊        throw new Error(`Cannot find chat ${chatId}.`);\n```\n```diff\n@@ -262,10 +265,10 @@\n ┊262┊265┊\n ┊263┊266┊      let deletedIds: number[] = [];\n ┊264┊267┊      chats = chats.map(chat => {\n-┊265┊   ┊        if (chat.id === chatId) {\n+┊   ┊268┊        if (chat.id === Number(chatId)) {\n ┊266┊269┊          // Instead of chaining map and filter we can loop once using reduce\n ┊267┊270┊          const messages = chat.messages.reduce<Message[]>((filtered, message) => {\n-┊268┊   ┊            if (all || messageIds!.includes(message.id)) {\n+┊   ┊271┊            if (all || messageIds!.includes(String(message.id))) {\n ┊269┊272┊              deletedIds.push(message.id);\n ┊270┊273┊              // Remove the current user from the message holders\n ┊271┊274┊              message.holderIds = message.holderIds.filter(holderId => holderId !== currentUser);\n```\n\n[}]: #\n\n## Client\n\nFor the client I'll only show you how to make use of the addMessage mutation in this chapters. The other mutations will require much more boilerplate so I left them for their own chapter.\n\nLet's start by wiring the addMessage mutation. We're going to write the GraphQL query and then use the generator to generate the types:\n\n[{]: <helper> (diffStep \"5.1\" files=\"^\\(?!src/types.d.ts$\\).*\" module=\"client\")\n\n#### Step 5.1: Create addMessage mutation and generate types\n\n##### Added src&#x2F;graphql&#x2F;addMessage.mutation.ts\n```diff\n@@ -0,0 +1,13 @@\n+┊  ┊ 1┊import gql from 'graphql-tag';\n+┊  ┊ 2┊import {fragments} from './fragment';\n+┊  ┊ 3┊\n+┊  ┊ 4┊// We use the gql tag to parse our query string into a query document\n+┊  ┊ 5┊export const addMessageMutation = gql`\n+┊  ┊ 6┊  mutation AddMessage($chatId: ID!, $content: String!) {\n+┊  ┊ 7┊    addMessage(chatId: $chatId, content: $content) {\n+┊  ┊ 8┊      ...Message\n+┊  ┊ 9┊    }\n+┊  ┊10┊  }\n+┊  ┊11┊\n+┊  ┊12┊  ${fragments['message']}\n+┊  ┊13┊`;\n```\n\n[}]: #\n\nRun the generator:\n\n    $ npm run generator\n\nNow let's use the just-created query:\n\n[{]: <helper> (diffStep \"5.2\" module=\"client\")\n\n#### Step 5.2: Modify chat component and service\n\n##### Changed src&#x2F;app&#x2F;chat-viewer&#x2F;containers&#x2F;chat&#x2F;chat.component.ts\n```diff\n@@ -13,7 +13,7 @@\n ┊13┊13┊    </app-toolbar>\n ┊14┊14┊    <div class=\"container\">\n ┊15┊15┊      <app-messages-list [items]=\"messages\" [isGroup]=\"isGroup\"></app-messages-list>\n-┊16┊  ┊      <app-new-message></app-new-message>\n+┊  ┊16┊      <app-new-message (newMessage)=\"addMessage($event)\"></app-new-message>\n ┊17┊17┊    </div>\n ┊18┊18┊  `,\n ┊19┊19┊  styleUrls: ['./chat.component.scss']\n```\n```diff\n@@ -43,4 +43,8 @@\n ┊43┊43┊  goToChats() {\n ┊44┊44┊    this.router.navigate(['/chats']);\n ┊45┊45┊  }\n+┊  ┊46┊\n+┊  ┊47┊  addMessage(content: string) {\n+┊  ┊48┊    this.chatsService.addMessage(this.chatId, content).subscribe();\n+┊  ┊49┊  }\n ┊46┊50┊}\n```\n\n##### Changed src&#x2F;app&#x2F;services&#x2F;chats.service.ts\n```diff\n@@ -3,8 +3,9 @@\n ┊ 3┊ 3┊import {Apollo} from 'apollo-angular';\n ┊ 4┊ 4┊import {Injectable} from '@angular/core';\n ┊ 5┊ 5┊import {getChatsQuery} from '../../graphql/getChats.query';\n-┊ 6┊  ┊import {GetChat, GetChats} from '../../types';\n+┊  ┊ 6┊import {AddMessage, GetChat, GetChats} from '../../types';\n ┊ 7┊ 7┊import {getChatQuery} from '../../graphql/getChat.query';\n+┊  ┊ 8┊import {addMessageMutation} from '../../graphql/addMessage.mutation';\n ┊ 8┊ 9┊\n ┊ 9┊10┊@Injectable()\n ┊10┊11┊export class ChatsService {\n```\n```diff\n@@ -40,4 +41,14 @@\n ┊40┊41┊\n ┊41┊42┊    return {query, chat$};\n ┊42┊43┊  }\n+┊  ┊44┊\n+┊  ┊45┊  addMessage(chatId: string, content: string) {\n+┊  ┊46┊    return this.apollo.mutate({\n+┊  ┊47┊      mutation: addMessageMutation,\n+┊  ┊48┊      variables: <AddMessage.Variables>{\n+┊  ┊49┊        chatId,\n+┊  ┊50┊        content,\n+┊  ┊51┊      },\n+┊  ┊52┊    });\n+┊  ┊53┊  }\n ┊43┊54┊}\n```\n\n[}]: #\n\nIt's that simple! You would be tempted to say that it doesn't work, but you should try to refresh the page first ;)"
          },
          {
            "manualTitle": "Step 10: Updating the store",
            "stepRevision": "1edfe891e6cbb61a13430387e74251c5fc0395c0",
            "manualView": "## Client\n\nDid you notice that after creating a new message you'll have to refresh the page in order to see it?\nHow to fix that? If you thought about re-querying the server you would be wrong! The best solution is to use the response provided by the server to update our Apollo local cache.\n\nApollo performs two important core tasks: Executing queries and mutations, and caching the results.\n\nThanks to Apollo’s store design, it’s possible for the results of a query or mutation to update your UI in all the right places. In many cases it’s possible for that to happen automatically, whereas in others you need to help the client out a little in doing so:\n\n[{]: <helper> (diffStep \"6.1\" module=\"client\")\n\n#### Step 6.1: Update the store\n\n##### Changed src&#x2F;app&#x2F;services&#x2F;chats.service.ts\n```diff\n@@ -1,4 +1,4 @@\n-┊1┊ ┊import {ApolloQueryResult, WatchQueryOptions} from 'apollo-client';\n+┊ ┊1┊import {ApolloQueryResult, MutationOptions, WatchQueryOptions} from 'apollo-client';\n ┊2┊2┊import {map} from 'rxjs/operators';\n ┊3┊3┊import {Apollo} from 'apollo-angular';\n ┊4┊4┊import {Injectable} from '@angular/core';\n```\n```diff\n@@ -43,12 +43,49 @@\n ┊43┊43┊  }\n ┊44┊44┊\n ┊45┊45┊  addMessage(chatId: string, content: string) {\n-┊46┊  ┊    return this.apollo.mutate({\n+┊  ┊46┊    return this.apollo.mutate(<MutationOptions>{\n ┊47┊47┊      mutation: addMessageMutation,\n ┊48┊48┊      variables: <AddMessage.Variables>{\n ┊49┊49┊        chatId,\n ┊50┊50┊        content,\n ┊51┊51┊      },\n+┊  ┊52┊      update: (store, { data: { addMessage } }: {data: AddMessage.Mutation}) => {\n+┊  ┊53┊        // Update the messages cache\n+┊  ┊54┊        {\n+┊  ┊55┊          // Read the data from our cache for this query.\n+┊  ┊56┊          const {chat}: GetChat.Query = store.readQuery({\n+┊  ┊57┊            query: getChatQuery, variables: {\n+┊  ┊58┊              chatId,\n+┊  ┊59┊            }\n+┊  ┊60┊          });\n+┊  ┊61┊          // Add our message from the mutation to the end.\n+┊  ┊62┊          chat.messages.push(addMessage);\n+┊  ┊63┊          // Write our data back to the cache.\n+┊  ┊64┊          store.writeQuery({ query: getChatQuery, data: {chat} });\n+┊  ┊65┊        }\n+┊  ┊66┊        // Update last message cache\n+┊  ┊67┊        {\n+┊  ┊68┊          // Read the data from our cache for this query.\n+┊  ┊69┊          const {chats}: GetChats.Query = store.readQuery({\n+┊  ┊70┊            query: getChatsQuery,\n+┊  ┊71┊            variables: <GetChats.Variables>{\n+┊  ┊72┊              amount: this.messagesAmount,\n+┊  ┊73┊            },\n+┊  ┊74┊          });\n+┊  ┊75┊          // Add our comment from the mutation to the end.\n+┊  ┊76┊          chats.find(chat => chat.id === chatId).messages.push(addMessage);\n+┊  ┊77┊          // Write our data back to the cache.\n+┊  ┊78┊          store.writeQuery({\n+┊  ┊79┊            query: getChatsQuery,\n+┊  ┊80┊            variables: <GetChats.Variables>{\n+┊  ┊81┊              amount: this.messagesAmount,\n+┊  ┊82┊            },\n+┊  ┊83┊            data: {\n+┊  ┊84┊              chats,\n+┊  ┊85┊            },\n+┊  ┊86┊          });\n+┊  ┊87┊        }\n+┊  ┊88┊      },\n ┊52┊89┊    });\n ┊53┊90┊  }\n ┊54┊91┊}\n```\n\n[}]: #\n\nNow you won't need to reload the page in order to see the new message. What's even more interesting is that the message you wrote would also be shown as the last message in the chats list, just hit the back button in the top-left corner to find out!\nThis is because we updated our store for both the `GetChat` and the `GetChats` query."
          },
          {
            "manualTitle": "Step 11: Messages and chats removal",
            "stepRevision": "4584fbc4c24ce912cff02b547a96db4b6d6bc253",
            "manualView": "## Client\n\nSince we're now familiar with the way mutations work, it's time to add messages and chats removal to our list of features!\nSince the most annoying part is going to be dealing with the user interface (because a multiple selection started by a press event is involved), I created an Angular directive to ease the process.\nLet's start by installing it:\n\n    $ npm install ngx-selectable-list\n\nNow let's import it:\n\n[{]: <helper> (diffStep \"7.1\" files=\"^\\(?!package.json$\\).*\" module=\"client\")\n\n#### Step 7.1: Add SelectableListModule\n\n##### Changed src&#x2F;app&#x2F;chats-lister&#x2F;chats-lister.module.ts\n```diff\n@@ -11,6 +11,7 @@\n ┊11┊11┊import {ChatsListComponent} from './components/chats-list/chats-list.component';\n ┊12┊12┊import {TruncateModule} from 'ng2-truncate';\n ┊13┊13┊import {SharedModule} from '../shared/shared.module';\n+┊  ┊14┊import {NgxSelectableListModule} from 'ngx-selectable-list';\n ┊14┊15┊\n ┊15┊16┊const routes: Routes = [\n ┊16┊17┊  {path: '', redirectTo: 'chats', pathMatch: 'full'},\n```\n```diff\n@@ -40,6 +41,7 @@\n ┊40┊41┊    TruncateModule,\n ┊41┊42┊    // Feature modules\n ┊42┊43┊    SharedModule,\n+┊  ┊44┊    NgxSelectableListModule,\n ┊43┊45┊  ],\n ┊44┊46┊  providers: [\n ┊45┊47┊    ChatsService,\n```\n\n[}]: #\n\nLet's create the mutations:\n\n[{]: <helper> (diffStep \"7.2\" files=\"src/graphql\" module=\"client\")\n\n#### Step 7.2: Remove messages and chats\n\n##### Added src&#x2F;graphql&#x2F;removeAllMessages.mutation.ts\n```diff\n@@ -0,0 +1,8 @@\n+┊ ┊1┊import gql from 'graphql-tag';\n+┊ ┊2┊\n+┊ ┊3┊// We use the gql tag to parse our query string into a query document\n+┊ ┊4┊export const removeAllMessagesMutation = gql`\n+┊ ┊5┊  mutation RemoveAllMessages($chatId: ID!, $all: Boolean) {\n+┊ ┊6┊    removeMessages(chatId: $chatId, all: $all)\n+┊ ┊7┊  }\n+┊ ┊8┊`;\n```\n\n##### Added src&#x2F;graphql&#x2F;removeChat.mutation.ts\n```diff\n@@ -0,0 +1,8 @@\n+┊ ┊1┊import gql from 'graphql-tag';\n+┊ ┊2┊\n+┊ ┊3┊// We use the gql tag to parse our query string into a query document\n+┊ ┊4┊export const removeChatMutation = gql`\n+┊ ┊5┊  mutation RemoveChat($chatId: ID!) {\n+┊ ┊6┊    removeChat(chatId: $chatId)\n+┊ ┊7┊  }\n+┊ ┊8┊`;\n```\n\n##### Added src&#x2F;graphql&#x2F;removeMessages.mutation.ts\n```diff\n@@ -0,0 +1,8 @@\n+┊ ┊1┊import gql from 'graphql-tag';\n+┊ ┊2┊\n+┊ ┊3┊// We use the gql tag to parse our query string into a query document\n+┊ ┊4┊export const removeMessagesMutation = gql`\n+┊ ┊5┊  mutation RemoveMessages($chatId: ID!, $messageIds: [ID]) {\n+┊ ┊6┊    removeMessages(chatId: $chatId, messageIds: $messageIds)\n+┊ ┊7┊  }\n+┊ ┊8┊`;\n```\n\n[}]: #\n\nNow let's update our service:\n\n[{]: <helper> (diffStep \"7.2\" files=\"chats.service.ts\" module=\"client\")\n\n#### Step 7.2: Remove messages and chats\n\n##### Changed src&#x2F;app&#x2F;services&#x2F;chats.service.ts\n```diff\n@@ -3,9 +3,13 @@\n ┊ 3┊ 3┊import {Apollo} from 'apollo-angular';\n ┊ 4┊ 4┊import {Injectable} from '@angular/core';\n ┊ 5┊ 5┊import {getChatsQuery} from '../../graphql/getChats.query';\n-┊ 6┊  ┊import {AddMessage, GetChat, GetChats} from '../../types';\n+┊  ┊ 6┊import {AddMessage, GetChat, GetChats, RemoveAllMessages, RemoveChat, RemoveMessages} from '../../types';\n ┊ 7┊ 7┊import {getChatQuery} from '../../graphql/getChat.query';\n ┊ 8┊ 8┊import {addMessageMutation} from '../../graphql/addMessage.mutation';\n+┊  ┊ 9┊import {removeChatMutation} from '../../graphql/removeChat.mutation';\n+┊  ┊10┊import {DocumentNode} from 'graphql';\n+┊  ┊11┊import {removeAllMessagesMutation} from '../../graphql/removeAllMessages.mutation';\n+┊  ┊12┊import {removeMessagesMutation} from '../../graphql/removeMessages.mutation';\n ┊ 9┊13┊\n ┊10┊14┊@Injectable()\n ┊11┊15┊export class ChatsService {\n```\n```diff\n@@ -88,4 +92,104 @@\n ┊ 88┊ 92┊      },\n ┊ 89┊ 93┊    });\n ┊ 90┊ 94┊  }\n+┊   ┊ 95┊\n+┊   ┊ 96┊  removeChat(chatId: string) {\n+┊   ┊ 97┊    return this.apollo.mutate({\n+┊   ┊ 98┊      mutation: removeChatMutation,\n+┊   ┊ 99┊      variables: <RemoveChat.Variables>{\n+┊   ┊100┊        chatId,\n+┊   ┊101┊      },\n+┊   ┊102┊      update: (store, { data: { removeChat } }) => {\n+┊   ┊103┊        // Read the data from our cache for this query.\n+┊   ┊104┊        const {chats}: GetChats.Query = store.readQuery({\n+┊   ┊105┊          query: getChatsQuery,\n+┊   ┊106┊          variables: <GetChats.Variables>{\n+┊   ┊107┊            amount: this.messagesAmount,\n+┊   ┊108┊          },\n+┊   ┊109┊        });\n+┊   ┊110┊        // Remove the chat (mutable)\n+┊   ┊111┊        for (const index of chats.keys()) {\n+┊   ┊112┊          if (chats[index].id === removeChat) {\n+┊   ┊113┊            chats.splice(index, 1);\n+┊   ┊114┊          }\n+┊   ┊115┊        }\n+┊   ┊116┊        // Write our data back to the cache.\n+┊   ┊117┊        store.writeQuery({\n+┊   ┊118┊          query: getChatsQuery,\n+┊   ┊119┊          variables: <GetChats.Variables>{\n+┊   ┊120┊            amount: this.messagesAmount,\n+┊   ┊121┊          },\n+┊   ┊122┊          data: {\n+┊   ┊123┊            chats,\n+┊   ┊124┊          },\n+┊   ┊125┊        });\n+┊   ┊126┊      },\n+┊   ┊127┊    });\n+┊   ┊128┊  }\n+┊   ┊129┊\n+┊   ┊130┊  removeMessages(chatId: string, messages: GetChat.Messages[], messageIdsOrAll: string[] | boolean) {\n+┊   ┊131┊    let variables: RemoveMessages.Variables | RemoveAllMessages.Variables;\n+┊   ┊132┊    let ids: string[] = [];\n+┊   ┊133┊    let mutation: DocumentNode;\n+┊   ┊134┊\n+┊   ┊135┊    if (typeof messageIdsOrAll === 'boolean') {\n+┊   ┊136┊      variables = {chatId, all: messageIdsOrAll} as RemoveAllMessages.Variables;\n+┊   ┊137┊      ids = messages.map(message => message.id);\n+┊   ┊138┊      mutation = removeAllMessagesMutation;\n+┊   ┊139┊    } else {\n+┊   ┊140┊      variables = {chatId, messageIds: messageIdsOrAll} as RemoveMessages.Variables;\n+┊   ┊141┊      ids = messageIdsOrAll;\n+┊   ┊142┊      mutation = removeMessagesMutation;\n+┊   ┊143┊    }\n+┊   ┊144┊\n+┊   ┊145┊    return this.apollo.mutate(<MutationOptions>{\n+┊   ┊146┊      mutation,\n+┊   ┊147┊      variables,\n+┊   ┊148┊      update: (store, { data: { removeMessages } }: {data: RemoveMessages.Mutation | RemoveAllMessages.Mutation}) => {\n+┊   ┊149┊        // Update the messages cache\n+┊   ┊150┊        {\n+┊   ┊151┊          // Read the data from our cache for this query.\n+┊   ┊152┊          const {chat}: GetChat.Query = store.readQuery({\n+┊   ┊153┊            query: getChatQuery, variables: {\n+┊   ┊154┊              chatId,\n+┊   ┊155┊            }\n+┊   ┊156┊          });\n+┊   ┊157┊          // Remove the messages (mutable)\n+┊   ┊158┊          removeMessages.forEach(messageId => {\n+┊   ┊159┊            for (const index of chat.messages.keys()) {\n+┊   ┊160┊              if (chat.messages[index].id === messageId) {\n+┊   ┊161┊                chat.messages.splice(index, 1);\n+┊   ┊162┊              }\n+┊   ┊163┊            }\n+┊   ┊164┊          });\n+┊   ┊165┊          // Write our data back to the cache.\n+┊   ┊166┊          store.writeQuery({ query: getChatQuery, data: {chat} });\n+┊   ┊167┊        }\n+┊   ┊168┊        // Update last message cache\n+┊   ┊169┊        {\n+┊   ┊170┊          // Read the data from our cache for this query.\n+┊   ┊171┊          const {chats}: GetChats.Query = store.readQuery({\n+┊   ┊172┊            query: getChatsQuery,\n+┊   ┊173┊            variables: <GetChats.Variables>{\n+┊   ┊174┊              amount: this.messagesAmount,\n+┊   ┊175┊            },\n+┊   ┊176┊          });\n+┊   ┊177┊          // Fix last message\n+┊   ┊178┊          chats.find(chat => chat.id === chatId).messages = messages\n+┊   ┊179┊            .filter(message => !ids.includes(message.id))\n+┊   ┊180┊            .sort((a, b) => Number(b.createdAt) - Number(a.createdAt)) || [];\n+┊   ┊181┊          // Write our data back to the cache.\n+┊   ┊182┊          store.writeQuery({\n+┊   ┊183┊            query: getChatsQuery,\n+┊   ┊184┊            variables: <GetChats.Variables>{\n+┊   ┊185┊              amount: this.messagesAmount,\n+┊   ┊186┊            },\n+┊   ┊187┊            data: {\n+┊   ┊188┊              chats,\n+┊   ┊189┊            },\n+┊   ┊190┊          });\n+┊   ┊191┊        }\n+┊   ┊192┊      },\n+┊   ┊193┊    });\n+┊   ┊194┊  }\n ┊ 91┊195┊}\n```\n\n[}]: #\n\nAs you can see every time that we remove a message we also have to update the last message in the chats list.\n\nFinally we can wire everything up into our components:\n\n[{]: <helper> (diffStep \"7.2\" files=\"src/app/chat-viewer, src/app/chats-lister, src/app/shared\" module=\"client\")\n\n#### Step 7.2: Remove messages and chats\n\n##### Changed src&#x2F;app&#x2F;chat-viewer&#x2F;chat-viewer.module.ts\n```diff\n@@ -11,6 +11,7 @@\n ┊11┊11┊import {MessageItemComponent} from './components/message-item/message-item.component';\n ┊12┊12┊import {NewMessageComponent} from './components/new-message/new-message.component';\n ┊13┊13┊import {SharedModule} from '../shared/shared.module';\n+┊  ┊14┊import {NgxSelectableListModule} from 'ngx-selectable-list';\n ┊14┊15┊\n ┊15┊16┊const routes: Routes = [\n ┊16┊17┊  {\n```\n```diff\n@@ -44,6 +45,7 @@\n ┊44┊45┊    FormsModule,\n ┊45┊46┊    // Feature modules\n ┊46┊47┊    SharedModule,\n+┊  ┊48┊    NgxSelectableListModule,\n ┊47┊49┊  ],\n ┊48┊50┊  providers: [\n ┊49┊51┊    ChatsService,\n```\n\n##### Changed src&#x2F;app&#x2F;chat-viewer&#x2F;components&#x2F;messages-list&#x2F;messages-list.component.ts\n```diff\n@@ -1,14 +1,17 @@\n ┊ 1┊ 1┊import {Component, Input} from '@angular/core';\n ┊ 2┊ 2┊import {GetChat} from '../../../../types';\n+┊  ┊ 3┊import {SelectableListDirective} from 'ngx-selectable-list';\n ┊ 3┊ 4┊\n ┊ 4┊ 5┊@Component({\n ┊ 5┊ 6┊  selector: 'app-messages-list',\n ┊ 6┊ 7┊  template: `\n ┊ 7┊ 8┊    <mat-list>\n ┊ 8┊ 9┊      <mat-list-item *ngFor=\"let message of messages\">\n-┊ 9┊  ┊        <app-message-item [item]=\"message\" [isGroup]=\"isGroup\"></app-message-item>\n+┊  ┊10┊        <app-message-item [item]=\"message\" [isGroup]=\"isGroup\"\n+┊  ┊11┊                          libSelectableItem></app-message-item>\n ┊10┊12┊      </mat-list-item>\n ┊11┊13┊    </mat-list>\n+┊  ┊14┊    <ng-content *ngIf=\"selectableListDirective.selecting\"></ng-content>\n ┊12┊15┊  `,\n ┊13┊16┊  styleUrls: ['messages-list.component.scss'],\n ┊14┊17┊})\n```\n```diff\n@@ -20,5 +23,5 @@\n ┊20┊23┊  @Input()\n ┊21┊24┊  isGroup: boolean;\n ┊22┊25┊\n-┊23┊  ┊  constructor() {}\n+┊  ┊26┊  constructor(public selectableListDirective: SelectableListDirective) {}\n ┊24┊27┊}\n```\n\n##### Changed src&#x2F;app&#x2F;chat-viewer&#x2F;containers&#x2F;chat&#x2F;chat.component.spec.ts\n```diff\n@@ -17,6 +17,7 @@\n ┊17┊17┊import {NewMessageComponent} from '../../components/new-message/new-message.component';\n ┊18┊18┊import {MessagesListComponent} from '../../components/messages-list/messages-list.component';\n ┊19┊19┊import {MessageItemComponent} from '../../components/message-item/message-item.component';\n+┊  ┊20┊import {NgxSelectableListModule} from 'ngx-selectable-list';\n ┊20┊21┊\n ┊21┊22┊describe('ChatComponent', () => {\n ┊22┊23┊  let component: ChatComponent;\n```\n```diff\n@@ -107,7 +108,8 @@\n ┊107┊108┊        SharedModule,\n ┊108┊109┊        HttpLinkModule,\n ┊109┊110┊        HttpClientTestingModule,\n-┊110┊   ┊        RouterTestingModule\n+┊   ┊111┊        RouterTestingModule,\n+┊   ┊112┊        NgxSelectableListModule,\n ┊111┊113┊      ],\n ┊112┊114┊      providers: [\n ┊113┊115┊        ChatsService,\n```\n\n##### Changed src&#x2F;app&#x2F;chat-viewer&#x2F;containers&#x2F;chat&#x2F;chat.component.ts\n```diff\n@@ -12,7 +12,10 @@\n ┊12┊12┊      <div class=\"title\">{{ name }}</div>\n ┊13┊13┊    </app-toolbar>\n ┊14┊14┊    <div class=\"container\">\n-┊15┊  ┊      <app-messages-list [items]=\"messages\" [isGroup]=\"isGroup\"></app-messages-list>\n+┊  ┊15┊      <app-messages-list [items]=\"messages\" [isGroup]=\"isGroup\"\n+┊  ┊16┊                         libSelectableList=\"multiple_press\" (multiple)=\"deleteMessages($event)\">\n+┊  ┊17┊        <app-confirm-selection #confirmSelection></app-confirm-selection>\n+┊  ┊18┊      </app-messages-list>\n ┊16┊19┊      <app-new-message (newMessage)=\"addMessage($event)\"></app-new-message>\n ┊17┊20┊    </div>\n ┊18┊21┊  `,\n```\n```diff\n@@ -47,4 +50,8 @@\n ┊47┊50┊  addMessage(content: string) {\n ┊48┊51┊    this.chatsService.addMessage(this.chatId, content).subscribe();\n ┊49┊52┊  }\n+┊  ┊53┊\n+┊  ┊54┊  deleteMessages(messageIds: string[]) {\n+┊  ┊55┊    this.chatsService.removeMessages(this.chatId, this.messages, messageIds).subscribe();\n+┊  ┊56┊  }\n ┊50┊57┊}\n```\n\n##### Changed src&#x2F;app&#x2F;chats-lister&#x2F;components&#x2F;chat-item&#x2F;chat-item.component.ts\n```diff\n@@ -5,7 +5,7 @@\n ┊ 5┊ 5┊  selector: 'app-chat-item',\n ┊ 6┊ 6┊  template: `\n ┊ 7┊ 7┊    <div class=\"chat-row\">\n-┊ 8┊  ┊        <div class=\"chat-recipient\" (click)=\"selectChat()\">\n+┊  ┊ 8┊        <div class=\"chat-recipient\">\n ┊ 9┊ 9┊          <img *ngIf=\"chat.picture\" [src]=\"chat.picture\" width=\"48\" height=\"48\">\n ┊10┊10┊          <div>{{ chat.name }} [id: {{ chat.id }}]</div>\n ┊11┊11┊        </div>\n```\n```diff\n@@ -18,11 +18,4 @@\n ┊18┊18┊  // tslint:disable-next-line:no-input-rename\n ┊19┊19┊  @Input('item')\n ┊20┊20┊  chat: GetChats.Chats;\n-┊21┊  ┊\n-┊22┊  ┊  @Output()\n-┊23┊  ┊  select = new EventEmitter<string>();\n-┊24┊  ┊\n-┊25┊  ┊  selectChat() {\n-┊26┊  ┊    this.select.emit(this.chat.id);\n-┊27┊  ┊  }\n ┊28┊21┊}\n```\n\n##### Changed src&#x2F;app&#x2F;chats-lister&#x2F;components&#x2F;chats-list&#x2F;chats-list.component.ts\n```diff\n@@ -1,14 +1,17 @@\n-┊ 1┊  ┊import {Component, EventEmitter, Input, Output} from '@angular/core';\n+┊  ┊ 1┊import {Component, Input} from '@angular/core';\n ┊ 2┊ 2┊import {GetChats} from '../../../../types';\n+┊  ┊ 3┊import {SelectableListDirective} from 'ngx-selectable-list';\n ┊ 3┊ 4┊\n ┊ 4┊ 5┊@Component({\n ┊ 5┊ 6┊  selector: 'app-chats-list',\n ┊ 6┊ 7┊  template: `\n ┊ 7┊ 8┊    <mat-list>\n ┊ 8┊ 9┊      <mat-list-item *ngFor=\"let chat of chats\">\n-┊ 9┊  ┊        <app-chat-item [item]=\"chat\" (select)=\"selectChat($event)\"></app-chat-item>\n+┊  ┊10┊        <app-chat-item [item]=\"chat\"\n+┊  ┊11┊                       libSelectableItem></app-chat-item>\n ┊10┊12┊      </mat-list-item>\n ┊11┊13┊    </mat-list>\n+┊  ┊14┊    <ng-content *ngIf=\"selectableListDirective.selecting\"></ng-content>\n ┊12┊15┊  `,\n ┊13┊16┊  styleUrls: ['chats-list.component.scss'],\n ┊14┊17┊})\n```\n```diff\n@@ -17,12 +20,5 @@\n ┊17┊20┊  @Input('items')\n ┊18┊21┊  chats: GetChats.Chats[];\n ┊19┊22┊\n-┊20┊  ┊  @Output()\n-┊21┊  ┊  select = new EventEmitter<string>();\n-┊22┊  ┊\n-┊23┊  ┊  constructor() {}\n-┊24┊  ┊\n-┊25┊  ┊  selectChat(id: string) {\n-┊26┊  ┊    this.select.emit(id);\n-┊27┊  ┊  }\n+┊  ┊23┊  constructor(public selectableListDirective: SelectableListDirective) {}\n ┊28┊24┊}\n```\n\n##### Changed src&#x2F;app&#x2F;chats-lister&#x2F;containers&#x2F;chats&#x2F;chats.component.spec.ts\n```diff\n@@ -13,6 +13,7 @@\n ┊13┊13┊import {defaultDataIdFromObject, InMemoryCache} from 'apollo-cache-inmemory';\n ┊14┊14┊import {By} from '@angular/platform-browser';\n ┊15┊15┊import {RouterTestingModule} from '@angular/router/testing';\n+┊  ┊16┊import {NgxSelectableListModule} from 'ngx-selectable-list';\n ┊16┊17┊\n ┊17┊18┊describe('ChatsComponent', () => {\n ┊18┊19┊  let component: ChatsComponent;\n```\n```diff\n@@ -329,7 +330,8 @@\n ┊329┊330┊        TruncateModule,\n ┊330┊331┊        HttpLinkModule,\n ┊331┊332┊        HttpClientTestingModule,\n-┊332┊   ┊        RouterTestingModule\n+┊   ┊333┊        RouterTestingModule,\n+┊   ┊334┊        NgxSelectableListModule,\n ┊333┊335┊      ],\n ┊334┊336┊      providers: [\n ┊335┊337┊        ChatsService,\n```\n\n##### Changed src&#x2F;app&#x2F;chats-lister&#x2F;containers&#x2F;chats&#x2F;chats.component.ts\n```diff\n@@ -28,9 +28,13 @@\n ┊28┊28┊      </button>\n ┊29┊29┊    </mat-menu>\n ┊30┊30┊\n-┊31┊  ┊    <app-chats-list [items]=\"chats$ | async\" (select)=\"goToChat($event)\"></app-chats-list>\n+┊  ┊31┊    <app-chats-list [items]=\"chats$ | async\"\n+┊  ┊32┊                    libSelectableList=\"both\"\n+┊  ┊33┊                    (single)=\"goToChat($event)\" (multiple)=\"deleteChats($event)\" (isSelecting)=\"isSelecting = $event\">\n+┊  ┊34┊      <app-confirm-selection #confirmSelection></app-confirm-selection>\n+┊  ┊35┊    </app-chats-list>\n ┊32┊36┊\n-┊33┊  ┊    <button class=\"chat-button\" mat-fab color=\"primary\">\n+┊  ┊37┊    <button *ngIf=\"!isSelecting\" class=\"chat-button\" mat-fab color=\"primary\">\n ┊34┊38┊      <mat-icon aria-label=\"Icon-button with a + icon\">add</mat-icon>\n ┊35┊39┊    </button>\n ┊36┊40┊  `,\n```\n```diff\n@@ -38,6 +42,7 @@\n ┊38┊42┊})\n ┊39┊43┊export class ChatsComponent implements OnInit {\n ┊40┊44┊  chats$: Observable<GetChats.Chats[]>;\n+┊  ┊45┊  isSelecting = false;\n ┊41┊46┊\n ┊42┊47┊  constructor(private chatsService: ChatsService,\n ┊43┊48┊              private router: Router) {\n```\n```diff\n@@ -50,4 +55,10 @@\n ┊50┊55┊  goToChat(chatId: string) {\n ┊51┊56┊    this.router.navigate(['/chat', chatId]);\n ┊52┊57┊  }\n+┊  ┊58┊\n+┊  ┊59┊  deleteChats(chatIds: string[]) {\n+┊  ┊60┊    chatIds.forEach(chatId => {\n+┊  ┊61┊      this.chatsService.removeChat(chatId).subscribe();\n+┊  ┊62┊    });\n+┊  ┊63┊  }\n ┊53┊64┊}\n```\n\n##### Added src&#x2F;app&#x2F;shared&#x2F;components&#x2F;confirm-selection&#x2F;confirm-selection.component.scss\n```diff\n@@ -0,0 +1,6 @@\n+┊ ┊1┊:host {\n+┊ ┊2┊  display: block;\n+┊ ┊3┊  position: absolute;\n+┊ ┊4┊  bottom: 5vw;\n+┊ ┊5┊  right: 5vw;\n+┊ ┊6┊}\n```\n\n##### Added src&#x2F;app&#x2F;shared&#x2F;components&#x2F;confirm-selection&#x2F;confirm-selection.component.ts\n```diff\n@@ -0,0 +1,21 @@\n+┊  ┊ 1┊import {Component, EventEmitter, Input, Output} from '@angular/core';\n+┊  ┊ 2┊\n+┊  ┊ 3┊@Component({\n+┊  ┊ 4┊  selector: 'app-confirm-selection',\n+┊  ┊ 5┊  template: `\n+┊  ┊ 6┊    <button mat-fab color=\"primary\" (click)=\"handleClick()\">\n+┊  ┊ 7┊      <mat-icon aria-label=\"Icon-button\">{{ icon }}</mat-icon>\n+┊  ┊ 8┊    </button>\n+┊  ┊ 9┊  `,\n+┊  ┊10┊  styleUrls: ['./confirm-selection.component.scss'],\n+┊  ┊11┊})\n+┊  ┊12┊export class ConfirmSelectionComponent {\n+┊  ┊13┊  @Input()\n+┊  ┊14┊  icon = 'delete';\n+┊  ┊15┊  @Output()\n+┊  ┊16┊  emitClick = new EventEmitter<null>();\n+┊  ┊17┊\n+┊  ┊18┊  handleClick() {\n+┊  ┊19┊    this.emitClick.emit();\n+┊  ┊20┊  }\n+┊  ┊21┊}\n```\n\n##### Changed src&#x2F;app&#x2F;shared&#x2F;shared.module.ts\n```diff\n@@ -1,19 +1,23 @@\n ┊ 1┊ 1┊import {BrowserModule} from '@angular/platform-browser';\n ┊ 2┊ 2┊import {NgModule} from '@angular/core';\n ┊ 3┊ 3┊\n-┊ 4┊  ┊import {MatToolbarModule} from '@angular/material';\n+┊  ┊ 4┊import {MatButtonModule, MatIconModule, MatToolbarModule} from '@angular/material';\n ┊ 5┊ 5┊import {ToolbarComponent} from './components/toolbar/toolbar.component';\n ┊ 6┊ 6┊import {FormsModule} from '@angular/forms';\n ┊ 7┊ 7┊import {BrowserAnimationsModule} from '@angular/platform-browser/animations';\n+┊  ┊ 8┊import {ConfirmSelectionComponent} from './components/confirm-selection/confirm-selection.component';\n ┊ 8┊ 9┊\n ┊ 9┊10┊@NgModule({\n ┊10┊11┊  declarations: [\n ┊11┊12┊    ToolbarComponent,\n+┊  ┊13┊    ConfirmSelectionComponent,\n ┊12┊14┊  ],\n ┊13┊15┊  imports: [\n ┊14┊16┊    BrowserModule,\n ┊15┊17┊    // Material\n ┊16┊18┊    MatToolbarModule,\n+┊  ┊19┊    MatIconModule,\n+┊  ┊20┊    MatButtonModule,\n ┊17┊21┊    // Animations\n ┊18┊22┊    BrowserAnimationsModule,\n ┊19┊23┊    // Forms\n```\n```diff\n@@ -22,6 +26,7 @@\n ┊22┊26┊  providers: [],\n ┊23┊27┊  exports: [\n ┊24┊28┊    ToolbarComponent,\n+┊  ┊29┊    ConfirmSelectionComponent,\n ┊25┊30┊  ],\n ┊26┊31┊})\n ┊27┊32┊export class SharedModule {\n```\n\n[}]: #\n\nWe also created a `ConfirmSelectionComponent` to use for content projection, since our selectable list directive will be able to listen to its events.\nThe selectable list directive supports much more different use cases, for info please read the documentation.\n\nAs you can see `ngx-selectable-list` takes care of most of the boilerplate, giving us the freedom to concentrate on the actual code."
          },
          {
            "manualTitle": "Step 12: Chats creation",
            "stepRevision": "57082efc72b5ef980e8832726b0f8c22d0b3f1ce",
            "manualView": "We still cannot create new chats or groups, so let's implement it.\nWe're going to create a `ChatsCreation` module, with a `NewChat` and a `NewGroup` containers, along with several presentational components.\nWe're going to make use of the selectable list directive once again, to ease selecting the users when we're creating a new group.\nYou should also notice that we are looking for existing chats before creating a new one: if it already exists we're are simply redirecting to that chat instead of creating a new one (the server wouldn't allow that anyway and it will simply\nreturn the chat id).\n\n[{]: <helper> (diffStep \"8.1\" files=\"src/graphql\" module=\"client\")\n\n#### Step 8.1: New chats and groups\n\n##### Added src&#x2F;graphql&#x2F;addChat.mutation.ts\n```diff\n@@ -0,0 +1,17 @@\n+┊  ┊ 1┊import gql from 'graphql-tag';\n+┊  ┊ 2┊import {fragments} from './fragment';\n+┊  ┊ 3┊\n+┊  ┊ 4┊// We use the gql tag to parse our query string into a query document\n+┊  ┊ 5┊export const addChatMutation = gql`\n+┊  ┊ 6┊  mutation AddChat($recipientId: ID!) {\n+┊  ┊ 7┊    addChat(recipientId: $recipientId) {\n+┊  ┊ 8┊      ...ChatWithoutMessages\n+┊  ┊ 9┊      messages {\n+┊  ┊10┊        ...Message\n+┊  ┊11┊      }\n+┊  ┊12┊    }\n+┊  ┊13┊  }\n+┊  ┊14┊\n+┊  ┊15┊  ${fragments['chatWithoutMessages']}\n+┊  ┊16┊  ${fragments['message']}\n+┊  ┊17┊`;\n```\n\n##### Added src&#x2F;graphql&#x2F;addGroup.mutation.ts\n```diff\n@@ -0,0 +1,17 @@\n+┊  ┊ 1┊import gql from 'graphql-tag';\n+┊  ┊ 2┊import {fragments} from './fragment';\n+┊  ┊ 3┊\n+┊  ┊ 4┊// We use the gql tag to parse our query string into a query document\n+┊  ┊ 5┊export const addGroupMutation = gql`\n+┊  ┊ 6┊  mutation AddGroup($recipientIds: [ID!]!, $groupName: String!) {\n+┊  ┊ 7┊    addGroup(recipientIds: $recipientIds, groupName: $groupName) {\n+┊  ┊ 8┊      ...ChatWithoutMessages\n+┊  ┊ 9┊      messages {\n+┊  ┊10┊        ...Message\n+┊  ┊11┊      }\n+┊  ┊12┊    }\n+┊  ┊13┊  }\n+┊  ┊14┊\n+┊  ┊15┊  ${fragments['chatWithoutMessages']}\n+┊  ┊16┊  ${fragments['message']}\n+┊  ┊17┊`;\n```\n\n##### Added src&#x2F;graphql&#x2F;getUsers.query.ts\n```diff\n@@ -0,0 +1,12 @@\n+┊  ┊ 1┊import gql from 'graphql-tag';\n+┊  ┊ 2┊\n+┊  ┊ 3┊// We use the gql tag to parse our query string into a query document\n+┊  ┊ 4┊export const getUsersQuery = gql`\n+┊  ┊ 5┊  query GetUsers {\n+┊  ┊ 6┊    users {\n+┊  ┊ 7┊      id,\n+┊  ┊ 8┊      name,\n+┊  ┊ 9┊      picture,\n+┊  ┊10┊    }\n+┊  ┊11┊  }\n+┊  ┊12┊`;\n```\n\n[}]: #\n\nAfter creating the mutations we should run the generator to create the corresponding types:\n\n    npm run generator\n\n[{]: <helper> (diffStep \"8.1\" files=\"src/app/app.module.ts, src/app/chats-creation, src/app/services\" module=\"client\")\n\n#### Step 8.1: New chats and groups\n\n##### Changed src&#x2F;app&#x2F;app.module.ts\n```diff\n@@ -9,6 +9,7 @@\n ┊ 9┊ 9┊import {ChatsListerModule} from './chats-lister/chats-lister.module';\n ┊10┊10┊import {RouterModule, Routes} from '@angular/router';\n ┊11┊11┊import {ChatViewerModule} from './chat-viewer/chat-viewer.module';\n+┊  ┊12┊import {ChatsCreationModule} from './chats-creation/chats-creation.module';\n ┊12┊13┊const routes: Routes = [];\n ┊13┊14┊\n ┊14┊15┊@NgModule({\n```\n```diff\n@@ -26,6 +27,7 @@\n ┊26┊27┊    // Feature modules\n ┊27┊28┊    ChatsListerModule,\n ┊28┊29┊    ChatViewerModule,\n+┊  ┊30┊    ChatsCreationModule,\n ┊29┊31┊  ],\n ┊30┊32┊  providers: [],\n ┊31┊33┊  bootstrap: [AppComponent]\n```\n\n##### Added src&#x2F;app&#x2F;chats-creation&#x2F;chats-creation.module.ts\n```diff\n@@ -0,0 +1,60 @@\n+┊  ┊ 1┊import { BrowserModule } from '@angular/platform-browser';\n+┊  ┊ 2┊import { NgModule } from '@angular/core';\n+┊  ┊ 3┊\n+┊  ┊ 4┊import {BrowserAnimationsModule} from '@angular/platform-browser/animations';\n+┊  ┊ 5┊import {\n+┊  ┊ 6┊  MatButtonModule, MatFormFieldModule, MatGridListModule, MatIconModule, MatInputModule, MatListModule, MatMenuModule,\n+┊  ┊ 7┊  MatToolbarModule\n+┊  ┊ 8┊} from '@angular/material';\n+┊  ┊ 9┊import {RouterModule, Routes} from '@angular/router';\n+┊  ┊10┊import {FormsModule} from '@angular/forms';\n+┊  ┊11┊import {ChatsService} from '../services/chats.service';\n+┊  ┊12┊import {UserItemComponent} from './components/user-item/user-item.component';\n+┊  ┊13┊import {UsersListComponent} from './components/users-list/users-list.component';\n+┊  ┊14┊import {NewGroupComponent} from './containers/new-group/new-group.component';\n+┊  ┊15┊import {NewChatComponent} from './containers/new-chat/new-chat.component';\n+┊  ┊16┊import {NewGroupDetailsComponent} from './components/new-group-details/new-group-details.component';\n+┊  ┊17┊import {SharedModule} from '../shared/shared.module';\n+┊  ┊18┊import {NgxSelectableListModule} from 'ngx-selectable-list';\n+┊  ┊19┊\n+┊  ┊20┊const routes: Routes = [\n+┊  ┊21┊  {path: 'new-chat', component: NewChatComponent},\n+┊  ┊22┊  {path: 'new-group', component: NewGroupComponent},\n+┊  ┊23┊];\n+┊  ┊24┊\n+┊  ┊25┊@NgModule({\n+┊  ┊26┊  declarations: [\n+┊  ┊27┊    NewChatComponent,\n+┊  ┊28┊    UsersListComponent,\n+┊  ┊29┊    NewGroupComponent,\n+┊  ┊30┊    UserItemComponent,\n+┊  ┊31┊    NewGroupDetailsComponent,\n+┊  ┊32┊  ],\n+┊  ┊33┊  imports: [\n+┊  ┊34┊    BrowserModule,\n+┊  ┊35┊    // Animations (for Material)\n+┊  ┊36┊    BrowserAnimationsModule,\n+┊  ┊37┊    // Material\n+┊  ┊38┊    MatToolbarModule,\n+┊  ┊39┊    MatMenuModule,\n+┊  ┊40┊    MatIconModule,\n+┊  ┊41┊    MatButtonModule,\n+┊  ┊42┊    MatListModule,\n+┊  ┊43┊    MatGridListModule,\n+┊  ┊44┊    MatInputModule,\n+┊  ┊45┊    MatFormFieldModule,\n+┊  ┊46┊    MatGridListModule,\n+┊  ┊47┊    // Routing\n+┊  ┊48┊    RouterModule.forChild(routes),\n+┊  ┊49┊    // Forms\n+┊  ┊50┊    FormsModule,\n+┊  ┊51┊    // Feature modules\n+┊  ┊52┊    NgxSelectableListModule,\n+┊  ┊53┊    SharedModule,\n+┊  ┊54┊  ],\n+┊  ┊55┊  providers: [\n+┊  ┊56┊    ChatsService,\n+┊  ┊57┊  ],\n+┊  ┊58┊})\n+┊  ┊59┊export class ChatsCreationModule {\n+┊  ┊60┊}\n```\n\n##### Added src&#x2F;app&#x2F;chats-creation&#x2F;components&#x2F;new-group-details&#x2F;new-group-details.component.scss\n```diff\n@@ -0,0 +1,25 @@\n+┊  ┊ 1┊:host {\n+┊  ┊ 2┊  display: block;\n+┊  ┊ 3┊}\n+┊  ┊ 4┊\n+┊  ┊ 5┊div {\n+┊  ┊ 6┊  padding: 16px;\n+┊  ┊ 7┊  mat-form-field {\n+┊  ┊ 8┊    width: 100%;\n+┊  ┊ 9┊  }\n+┊  ┊10┊}\n+┊  ┊11┊\n+┊  ┊12┊.new-group {\n+┊  ┊13┊  position: absolute;\n+┊  ┊14┊  bottom: 5vw;\n+┊  ┊15┊  right: 5vw;\n+┊  ┊16┊}\n+┊  ┊17┊\n+┊  ┊18┊.users {\n+┊  ┊19┊  display: flex;\n+┊  ┊20┊  flex-flow: row wrap;\n+┊  ┊21┊  img {\n+┊  ┊22┊    flex: 0 1 8vh;\n+┊  ┊23┊    height: 8vh;\n+┊  ┊24┊  }\n+┊  ┊25┊}\n```\n\n##### Added src&#x2F;app&#x2F;chats-creation&#x2F;components&#x2F;new-group-details&#x2F;new-group-details.component.ts\n```diff\n@@ -0,0 +1,34 @@\n+┊  ┊ 1┊import {Component, EventEmitter, Input, Output} from '@angular/core';\n+┊  ┊ 2┊import {GetUsers} from '../../../../types';\n+┊  ┊ 3┊\n+┊  ┊ 4┊@Component({\n+┊  ┊ 5┊  selector: 'app-new-group-details',\n+┊  ┊ 6┊  template: `\n+┊  ┊ 7┊    <div>\n+┊  ┊ 8┊      <mat-form-field>\n+┊  ┊ 9┊        <input matInput placeholder=\"Group name\" [(ngModel)]=\"groupName\">\n+┊  ┊10┊      </mat-form-field>\n+┊  ┊11┊    </div>\n+┊  ┊12┊    <button [disabled]=\"!groupName\" class=\"new-group\" mat-fab color=\"primary\" (click)=\"emitGroupDetails()\">\n+┊  ┊13┊      <mat-icon aria-label=\"Icon-button with a + icon\">arrow_forward</mat-icon>\n+┊  ┊14┊    </button>\n+┊  ┊15┊    <div>Members</div>\n+┊  ┊16┊    <div class=\"users\">\n+┊  ┊17┊      <img *ngFor=\"let user of users;\" [src]=\"user.picture\"/>\n+┊  ┊18┊    </div>\n+┊  ┊19┊  `,\n+┊  ┊20┊  styleUrls: ['new-group-details.component.scss'],\n+┊  ┊21┊})\n+┊  ┊22┊export class NewGroupDetailsComponent {\n+┊  ┊23┊  groupName: string;\n+┊  ┊24┊  @Input()\n+┊  ┊25┊  users: GetUsers.Users[];\n+┊  ┊26┊  @Output()\n+┊  ┊27┊  groupDetails = new EventEmitter<string>();\n+┊  ┊28┊\n+┊  ┊29┊  emitGroupDetails() {\n+┊  ┊30┊    if (this.groupDetails) {\n+┊  ┊31┊      this.groupDetails.emit(this.groupName);\n+┊  ┊32┊    }\n+┊  ┊33┊  }\n+┊  ┊34┊}\n```\n\n##### Added src&#x2F;app&#x2F;chats-creation&#x2F;components&#x2F;user-item&#x2F;user-item.component.scss\n```diff\n@@ -0,0 +1,28 @@\n+┊  ┊ 1┊:host {\n+┊  ┊ 2┊  display: block;\n+┊  ┊ 3┊  width: 100%;\n+┊  ┊ 4┊  height: 100%;\n+┊  ┊ 5┊}\n+┊  ┊ 6┊\n+┊  ┊ 7┊button {\n+┊  ┊ 8┊  padding: 0;\n+┊  ┊ 9┊  display: flex;\n+┊  ┊10┊  align-items: center;\n+┊  ┊11┊  height: 100%;\n+┊  ┊12┊  width: 100%;\n+┊  ┊13┊  border: none;\n+┊  ┊14┊\n+┊  ┊15┊  div:first-of-type {\n+┊  ┊16┊    display: flex;\n+┊  ┊17┊    justify-content: center;\n+┊  ┊18┊    align-items: center;\n+┊  ┊19┊\n+┊  ┊20┊    img {\n+┊  ┊21┊      max-width: 100%;\n+┊  ┊22┊    }\n+┊  ┊23┊  }\n+┊  ┊24┊\n+┊  ┊25┊  div:nth-of-type(2) {\n+┊  ┊26┊    padding-left: 16px;\n+┊  ┊27┊  }\n+┊  ┊28┊}\n```\n\n##### Added src&#x2F;app&#x2F;chats-creation&#x2F;components&#x2F;user-item&#x2F;user-item.component.ts\n```diff\n@@ -0,0 +1,20 @@\n+┊  ┊ 1┊import {Component, Input} from '@angular/core';\n+┊  ┊ 2┊import {GetUsers} from '../../../../types';\n+┊  ┊ 3┊\n+┊  ┊ 4┊@Component({\n+┊  ┊ 5┊  selector: 'app-user-item',\n+┊  ┊ 6┊  template: `\n+┊  ┊ 7┊    <button mat-menu-item>\n+┊  ┊ 8┊      <div>\n+┊  ┊ 9┊        <img [src]=\"user.picture\" *ngIf=\"user.picture\">\n+┊  ┊10┊      </div>\n+┊  ┊11┊      <div>{{ user.name }}</div>\n+┊  ┊12┊    </button>\n+┊  ┊13┊  `,\n+┊  ┊14┊  styleUrls: ['user-item.component.scss']\n+┊  ┊15┊})\n+┊  ┊16┊export class UserItemComponent {\n+┊  ┊17┊  // tslint:disable-next-line:no-input-rename\n+┊  ┊18┊  @Input('item')\n+┊  ┊19┊  user: GetUsers.Users;\n+┊  ┊20┊}\n```\n\n##### Added src&#x2F;app&#x2F;chats-creation&#x2F;components&#x2F;users-list&#x2F;users-list.component.scss\n```diff\n@@ -0,0 +1,3 @@\n+┊ ┊1┊:host {\n+┊ ┊2┊  display: block;\n+┊ ┊3┊}\n```\n\n##### Added src&#x2F;app&#x2F;chats-creation&#x2F;components&#x2F;users-list&#x2F;users-list.component.ts\n```diff\n@@ -0,0 +1,24 @@\n+┊  ┊ 1┊import {Component, Input} from '@angular/core';\n+┊  ┊ 2┊import {GetUsers} from '../../../../types';\n+┊  ┊ 3┊import {SelectableListDirective} from 'ngx-selectable-list';\n+┊  ┊ 4┊\n+┊  ┊ 5┊@Component({\n+┊  ┊ 6┊  selector: 'app-users-list',\n+┊  ┊ 7┊  template: `\n+┊  ┊ 8┊    <mat-list>\n+┊  ┊ 9┊      <mat-list-item *ngFor=\"let user of users\">\n+┊  ┊10┊        <app-user-item [item]=\"user\"\n+┊  ┊11┊                       libSelectableItem></app-user-item>\n+┊  ┊12┊      </mat-list-item>\n+┊  ┊13┊    </mat-list>\n+┊  ┊14┊    <ng-content *ngIf=\"selectableListDirective.selecting\"></ng-content>\n+┊  ┊15┊  `,\n+┊  ┊16┊  styleUrls: ['users-list.component.scss'],\n+┊  ┊17┊})\n+┊  ┊18┊export class UsersListComponent {\n+┊  ┊19┊  // tslint:disable-next-line:no-input-rename\n+┊  ┊20┊  @Input('items')\n+┊  ┊21┊  users: GetUsers.Users[];\n+┊  ┊22┊\n+┊  ┊23┊  constructor(public selectableListDirective: SelectableListDirective) {}\n+┊  ┊24┊}\n```\n\n##### Added src&#x2F;app&#x2F;chats-creation&#x2F;containers&#x2F;new-chat&#x2F;new-chat.component.scss\n```diff\n@@ -0,0 +1,23 @@\n+┊  ┊ 1┊.new-group {\n+┊  ┊ 2┊  display: flex;\n+┊  ┊ 3┊  height: 8vh;\n+┊  ┊ 4┊  align-items: center;\n+┊  ┊ 5┊\n+┊  ┊ 6┊  div:first-of-type {\n+┊  ┊ 7┊    height: 8vh;\n+┊  ┊ 8┊    width: 8vh;\n+┊  ┊ 9┊    display: flex;\n+┊  ┊10┊    justify-content: center;\n+┊  ┊11┊    align-items: center;\n+┊  ┊12┊\n+┊  ┊13┊    mat-icon {\n+┊  ┊14┊      height: 5vh;\n+┊  ┊15┊      width: 5vh;\n+┊  ┊16┊      font-size: 5vh;\n+┊  ┊17┊    }\n+┊  ┊18┊  }\n+┊  ┊19┊\n+┊  ┊20┊  div:nth-of-type(2) {\n+┊  ┊21┊    padding: 16px;\n+┊  ┊22┊  }\n+┊  ┊23┊}\n```\n\n##### Added src&#x2F;app&#x2F;chats-creation&#x2F;containers&#x2F;new-chat&#x2F;new-chat.component.ts\n```diff\n@@ -0,0 +1,59 @@\n+┊  ┊ 1┊import {Component, OnInit} from '@angular/core';\n+┊  ┊ 2┊import {Location} from '@angular/common';\n+┊  ┊ 3┊import {Router} from '@angular/router';\n+┊  ┊ 4┊import {AddChat, GetUsers} from '../../../../types';\n+┊  ┊ 5┊import {ChatsService} from '../../../services/chats.service';\n+┊  ┊ 6┊\n+┊  ┊ 7┊@Component({\n+┊  ┊ 8┊  template: `\n+┊  ┊ 9┊    <app-toolbar>\n+┊  ┊10┊      <button class=\"navigation\" mat-button (click)=\"goBack()\">\n+┊  ┊11┊        <mat-icon aria-label=\"Icon-button with an arrow back icon\">arrow_back</mat-icon>\n+┊  ┊12┊      </button>\n+┊  ┊13┊      <div class=\"title\">New chat</div>\n+┊  ┊14┊    </app-toolbar>\n+┊  ┊15┊\n+┊  ┊16┊    <div class=\"new-group\" (click)=\"goToNewGroup()\">\n+┊  ┊17┊      <div>\n+┊  ┊18┊        <mat-icon aria-label=\"Icon-button with a group add icon\">group_add</mat-icon>\n+┊  ┊19┊      </div>\n+┊  ┊20┊      <div>New group</div>\n+┊  ┊21┊    </div>\n+┊  ┊22┊\n+┊  ┊23┊    <app-users-list [items]=\"users\"\n+┊  ┊24┊                    libSelectableList=\"single\" (single)=\"addChat($event)\">\n+┊  ┊25┊    </app-users-list>\n+┊  ┊26┊  `,\n+┊  ┊27┊  styleUrls: ['new-chat.component.scss'],\n+┊  ┊28┊})\n+┊  ┊29┊export class NewChatComponent implements OnInit {\n+┊  ┊30┊  users: GetUsers.Users[];\n+┊  ┊31┊\n+┊  ┊32┊  constructor(private router: Router,\n+┊  ┊33┊              private location: Location,\n+┊  ┊34┊              private chatsService: ChatsService) {}\n+┊  ┊35┊\n+┊  ┊36┊  ngOnInit () {\n+┊  ┊37┊    this.chatsService.getUsers().users$.subscribe(users => this.users = users);\n+┊  ┊38┊  }\n+┊  ┊39┊\n+┊  ┊40┊  goBack() {\n+┊  ┊41┊    this.location.back();\n+┊  ┊42┊  }\n+┊  ┊43┊\n+┊  ┊44┊  goToNewGroup() {\n+┊  ┊45┊    this.router.navigate(['/new-group']);\n+┊  ┊46┊  }\n+┊  ┊47┊\n+┊  ┊48┊  addChat(recipientId: string) {\n+┊  ┊49┊    const chatId = this.chatsService.getChatId(recipientId);\n+┊  ┊50┊    if (chatId) {\n+┊  ┊51┊      // Chat is already listed for the current user\n+┊  ┊52┊      this.router.navigate(['/chat', chatId]);\n+┊  ┊53┊    } else {\n+┊  ┊54┊      this.chatsService.addChat(recipientId).subscribe(({data: {addChat: {id}}}: { data: AddChat.Mutation }) => {\n+┊  ┊55┊        this.router.navigate(['/chat', id]);\n+┊  ┊56┊      });\n+┊  ┊57┊    }\n+┊  ┊58┊  }\n+┊  ┊59┊}\n```\n\n##### Added src&#x2F;app&#x2F;chats-creation&#x2F;containers&#x2F;new-group&#x2F;new-group.component.scss\n\n\n##### Added src&#x2F;app&#x2F;chats-creation&#x2F;containers&#x2F;new-group&#x2F;new-group.component.ts\n```diff\n@@ -0,0 +1,60 @@\n+┊  ┊ 1┊import {Component, OnInit} from '@angular/core';\n+┊  ┊ 2┊import {Location} from '@angular/common';\n+┊  ┊ 3┊import {Router} from '@angular/router';\n+┊  ┊ 4┊import {AddGroup, GetUsers} from '../../../../types';\n+┊  ┊ 5┊import {ChatsService} from '../../../services/chats.service';\n+┊  ┊ 6┊\n+┊  ┊ 7┊@Component({\n+┊  ┊ 8┊  template: `\n+┊  ┊ 9┊    <app-toolbar>\n+┊  ┊10┊      <button class=\"navigation\" mat-button (click)=\"goBack()\">\n+┊  ┊11┊        <mat-icon aria-label=\"Icon-button with an arrow back icon\">arrow_back</mat-icon>\n+┊  ┊12┊      </button>\n+┊  ┊13┊      <div class=\"title\">New group</div>\n+┊  ┊14┊    </app-toolbar>\n+┊  ┊15┊\n+┊  ┊16┊    <app-users-list *ngIf=\"!recipientIds.length\" [items]=\"users\"\n+┊  ┊17┊                    libSelectableList=\"multiple_tap\" (multiple)=\"selectUsers($event)\">\n+┊  ┊18┊      <app-confirm-selection #confirmSelection icon=\"arrow_forward\"></app-confirm-selection>\n+┊  ┊19┊    </app-users-list>\n+┊  ┊20┊    <app-new-group-details *ngIf=\"recipientIds.length\" [users]=\"getSelectedUsers()\"\n+┊  ┊21┊                           (groupDetails)=\"addGroup($event)\"></app-new-group-details>\n+┊  ┊22┊  `,\n+┊  ┊23┊  styleUrls: ['new-group.component.scss'],\n+┊  ┊24┊})\n+┊  ┊25┊export class NewGroupComponent implements OnInit {\n+┊  ┊26┊  users: GetUsers.Users[];\n+┊  ┊27┊  recipientIds: string[] = [];\n+┊  ┊28┊\n+┊  ┊29┊  constructor(private router: Router,\n+┊  ┊30┊              private location: Location,\n+┊  ┊31┊              private chatsService: ChatsService) {}\n+┊  ┊32┊\n+┊  ┊33┊  ngOnInit () {\n+┊  ┊34┊    this.chatsService.getUsers().users$.subscribe(users => this.users = users);\n+┊  ┊35┊  }\n+┊  ┊36┊\n+┊  ┊37┊  goBack() {\n+┊  ┊38┊    if (this.recipientIds.length) {\n+┊  ┊39┊      this.recipientIds = [];\n+┊  ┊40┊    } else {\n+┊  ┊41┊      this.location.back();\n+┊  ┊42┊    }\n+┊  ┊43┊  }\n+┊  ┊44┊\n+┊  ┊45┊  selectUsers(recipientIds: string[]) {\n+┊  ┊46┊    this.recipientIds = recipientIds;\n+┊  ┊47┊  }\n+┊  ┊48┊\n+┊  ┊49┊  getSelectedUsers() {\n+┊  ┊50┊    return this.users.filter(user => this.recipientIds.includes(user.id));\n+┊  ┊51┊  }\n+┊  ┊52┊\n+┊  ┊53┊  addGroup(groupName: string) {\n+┊  ┊54┊    if (groupName && this.recipientIds.length) {\n+┊  ┊55┊      this.chatsService.addGroup(this.recipientIds, groupName).subscribe(({data: {addGroup: {id}}}: { data: AddGroup.Mutation }) => {\n+┊  ┊56┊        this.router.navigate(['/chat', id]);\n+┊  ┊57┊      });\n+┊  ┊58┊    }\n+┊  ┊59┊  }\n+┊  ┊60┊}\n```\n\n##### Changed src&#x2F;app&#x2F;services&#x2F;chats.service.ts\n```diff\n@@ -1,34 +1,44 @@\n ┊ 1┊ 1┊import {ApolloQueryResult, MutationOptions, WatchQueryOptions} from 'apollo-client';\n ┊ 2┊ 2┊import {map} from 'rxjs/operators';\n-┊ 3┊  ┊import {Apollo} from 'apollo-angular';\n+┊  ┊ 3┊import {Apollo, QueryRef} from 'apollo-angular';\n ┊ 4┊ 4┊import {Injectable} from '@angular/core';\n ┊ 5┊ 5┊import {getChatsQuery} from '../../graphql/getChats.query';\n-┊ 6┊  ┊import {AddMessage, GetChat, GetChats, RemoveAllMessages, RemoveChat, RemoveMessages} from '../../types';\n+┊  ┊ 6┊import {AddChat, AddGroup, AddMessage, GetChat, GetChats, GetUsers, RemoveAllMessages, RemoveChat, RemoveMessages} from '../../types';\n ┊ 7┊ 7┊import {getChatQuery} from '../../graphql/getChat.query';\n ┊ 8┊ 8┊import {addMessageMutation} from '../../graphql/addMessage.mutation';\n ┊ 9┊ 9┊import {removeChatMutation} from '../../graphql/removeChat.mutation';\n ┊10┊10┊import {DocumentNode} from 'graphql';\n ┊11┊11┊import {removeAllMessagesMutation} from '../../graphql/removeAllMessages.mutation';\n ┊12┊12┊import {removeMessagesMutation} from '../../graphql/removeMessages.mutation';\n+┊  ┊13┊import {getUsersQuery} from '../../graphql/getUsers.query';\n+┊  ┊14┊import {Observable} from 'rxjs';\n+┊  ┊15┊import {addChatMutation} from '../../graphql/addChat.mutation';\n+┊  ┊16┊import {addGroupMutation} from '../../graphql/addGroup.mutation';\n+┊  ┊17┊\n+┊  ┊18┊const currentUserId = '1';\n ┊13┊19┊\n ┊14┊20┊@Injectable()\n ┊15┊21┊export class ChatsService {\n ┊16┊22┊  messagesAmount = 3;\n+┊  ┊23┊  getChatsWq: QueryRef<GetChats.Query>;\n+┊  ┊24┊  chats$: Observable<GetChats.Chats[]>;\n+┊  ┊25┊  chats: GetChats.Chats[];\n ┊17┊26┊\n-┊18┊  ┊  constructor(private apollo: Apollo) {}\n-┊19┊  ┊\n-┊20┊  ┊  getChats() {\n-┊21┊  ┊    const query = this.apollo.watchQuery<GetChats.Query>(<WatchQueryOptions>{\n+┊  ┊27┊  constructor(private apollo: Apollo) {\n+┊  ┊28┊    this.getChatsWq = this.apollo.watchQuery<GetChats.Query>(<WatchQueryOptions>{\n ┊22┊29┊      query: getChatsQuery,\n ┊23┊30┊      variables: {\n ┊24┊31┊        amount: this.messagesAmount,\n ┊25┊32┊      },\n ┊26┊33┊    });\n-┊27┊  ┊    const chats$ = query.valueChanges.pipe(\n+┊  ┊34┊    this.chats$ = this.getChatsWq.valueChanges.pipe(\n ┊28┊35┊      map((result: ApolloQueryResult<GetChats.Query>) => result.data.chats)\n ┊29┊36┊    );\n+┊  ┊37┊    this.chats$.subscribe(chats => this.chats = chats);\n+┊  ┊38┊  }\n ┊30┊39┊\n-┊31┊  ┊    return {query, chats$};\n+┊  ┊40┊  getChats() {\n+┊  ┊41┊    return {query: this.getChatsWq, chats$: this.chats$};\n ┊32┊42┊  }\n ┊33┊43┊\n ┊34┊44┊  getChat(chatId: string) {\n```\n```diff\n@@ -192,4 +202,85 @@\n ┊192┊202┊      },\n ┊193┊203┊    });\n ┊194┊204┊  }\n+┊   ┊205┊\n+┊   ┊206┊  getUsers() {\n+┊   ┊207┊    const query = this.apollo.watchQuery<GetUsers.Query>(<WatchQueryOptions>{\n+┊   ┊208┊      query: getUsersQuery,\n+┊   ┊209┊    });\n+┊   ┊210┊    const users$ = query.valueChanges.pipe(\n+┊   ┊211┊      map((result: ApolloQueryResult<GetUsers.Query>) => result.data.users)\n+┊   ┊212┊    );\n+┊   ┊213┊\n+┊   ┊214┊    return {query, users$};\n+┊   ┊215┊  }\n+┊   ┊216┊\n+┊   ┊217┊  // Checks if the chat is listed for the current user and returns the id\n+┊   ┊218┊  getChatId(recipientId: string) {\n+┊   ┊219┊    const _chat = this.chats.find(chat => {\n+┊   ┊220┊      return !chat.isGroup && !!chat.allTimeMembers.find(user => user.id === currentUserId) &&\n+┊   ┊221┊        !!chat.allTimeMembers.find(user => user.id === recipientId);\n+┊   ┊222┊    });\n+┊   ┊223┊    return _chat ? _chat.id : false;\n+┊   ┊224┊  }\n+┊   ┊225┊\n+┊   ┊226┊  addChat(recipientId: string) {\n+┊   ┊227┊    return this.apollo.mutate({\n+┊   ┊228┊      mutation: addChatMutation,\n+┊   ┊229┊      variables: <AddChat.Variables>{\n+┊   ┊230┊        recipientId,\n+┊   ┊231┊      },\n+┊   ┊232┊      update: (store, { data: { addChat } }) => {\n+┊   ┊233┊        // Read the data from our cache for this query.\n+┊   ┊234┊        const {chats}: GetChats.Query = store.readQuery({\n+┊   ┊235┊          query: getChatsQuery,\n+┊   ┊236┊          variables: <GetChats.Variables>{\n+┊   ┊237┊            amount: this.messagesAmount,\n+┊   ┊238┊          },\n+┊   ┊239┊        });\n+┊   ┊240┊        // Add our comment from the mutation to the end.\n+┊   ┊241┊        chats.push(addChat);\n+┊   ┊242┊        // Write our data back to the cache.\n+┊   ┊243┊        store.writeQuery({\n+┊   ┊244┊          query: getChatsQuery,\n+┊   ┊245┊          variables: <GetChats.Variables>{\n+┊   ┊246┊            amount: this.messagesAmount,\n+┊   ┊247┊          },\n+┊   ┊248┊          data: {\n+┊   ┊249┊            chats,\n+┊   ┊250┊          },\n+┊   ┊251┊        });\n+┊   ┊252┊      },\n+┊   ┊253┊    });\n+┊   ┊254┊  }\n+┊   ┊255┊\n+┊   ┊256┊  addGroup(recipientIds: string[], groupName: string) {\n+┊   ┊257┊    return this.apollo.mutate({\n+┊   ┊258┊      mutation: addGroupMutation,\n+┊   ┊259┊      variables: <AddGroup.Variables>{\n+┊   ┊260┊        recipientIds,\n+┊   ┊261┊        groupName,\n+┊   ┊262┊      },\n+┊   ┊263┊      update: (store, { data: { addGroup } }) => {\n+┊   ┊264┊        // Read the data from our cache for this query.\n+┊   ┊265┊        const {chats}: GetChats.Query = store.readQuery({\n+┊   ┊266┊          query: getChatsQuery,\n+┊   ┊267┊          variables: <GetChats.Variables>{\n+┊   ┊268┊            amount: this.messagesAmount,\n+┊   ┊269┊          },\n+┊   ┊270┊        });\n+┊   ┊271┊        // Add our comment from the mutation to the end.\n+┊   ┊272┊        chats.push(addGroup);\n+┊   ┊273┊        // Write our data back to the cache.\n+┊   ┊274┊        store.writeQuery({\n+┊   ┊275┊          query: getChatsQuery,\n+┊   ┊276┊          variables: <GetChats.Variables>{\n+┊   ┊277┊            amount: this.messagesAmount,\n+┊   ┊278┊          },\n+┊   ┊279┊          data: {\n+┊   ┊280┊            chats,\n+┊   ┊281┊          },\n+┊   ┊282┊        });\n+┊   ┊283┊      },\n+┊   ┊284┊    });\n+┊   ┊285┊  }\n ┊195┊286┊}\n```\n\n[}]: #\n\nFinally we should update our tests:\n\n[{]: <helper> (diffStep \"8.1\" files=\"src/app/chat-viewer/containers/chat/chat.component.spec.ts\" module=\"client\")\n\n#### Step 8.1: New chats and groups\n\n##### Changed src&#x2F;app&#x2F;chat-viewer&#x2F;containers&#x2F;chat&#x2F;chat.component.spec.ts\n```diff\n@@ -144,7 +144,8 @@\n ┊144┊144┊    fixture = TestBed.createComponent(ChatComponent);\n ┊145┊145┊    component = fixture.componentInstance;\n ┊146┊146┊    fixture.detectChanges();\n-┊147┊   ┊    const req = httpMock.expectOne('http://localhost:3000/graphql', 'call to api');\n+┊   ┊147┊    httpMock.expectOne(httpReq => httpReq.body.operationName === 'GetChats', 'call to getChats api');\n+┊   ┊148┊    const req = httpMock.expectOne(httpReq => httpReq.body.operationName === 'GetChat', 'call to getChat api');\n ┊148┊149┊    req.flush({\n ┊149┊150┊      data: {\n ┊150┊151┊        chat\n```\n\n[}]: #"
          },
          {
            "manualTitle": "Step 13: Zero latency on slow 3g networks",
            "stepRevision": "db273fc21d1316b6264d55cfb2d672436634a655",
            "manualView": "## Client\n\nNow let's start our client in production mode:\n\n    $ ng serve --prod\n\nNow open the Chrome Developers Tools and, in the Network tab, select 'Slow 3G Network' and 'Disable cache'.\nNow refresh the page and look at the DOMContentLoaded time and at the transferred size. You'll notice that our bundle size is quite small and so the loads time.\nNow let's click on a specific chat. It will take some time to load the data. Now let's add a new message. Once again it will take some time to load the data. We could also create a new chat and the result would be the same. The whole app doesn't\nfeel as snappier as the real Whatsapp on a slow 3G Network.\n\"That's normal, it's a web application with a remote db while Whatsapp is a native app with a local database...\"\nThat's just an excuse, because we can do as good as Whatsapp thanks to Apollo!\n\nLet's install `moment`, we will soon need it:\n\n    $ npm install moment\n\nLet's start by making our UI optimistic. We can predict most of the response we will get from our server, except for a few things like `id` of newly created messages. But since we don't really need that id, we can simply generate a fake one\nwhich will be later overridden once we get the response from the server:\n\n[{]: <helper> (diffStep \"9.1\" files=\"^\\(?!package.json$\\).*\" module=\"client\")\n\n#### Step 9.1: Optimistic updates\n\n##### Changed src&#x2F;app&#x2F;chats-creation&#x2F;containers&#x2F;new-chat&#x2F;new-chat.component.ts\n```diff\n@@ -51,7 +51,7 @@\n ┊51┊51┊      // Chat is already listed for the current user\n ┊52┊52┊      this.router.navigate(['/chat', chatId]);\n ┊53┊53┊    } else {\n-┊54┊  ┊      this.chatsService.addChat(recipientId).subscribe(({data: {addChat: {id}}}: { data: AddChat.Mutation }) => {\n+┊  ┊54┊      this.chatsService.addChat(recipientId, this.users).subscribe(({data: {addChat: {id}}}: { data: AddChat.Mutation }) => {\n ┊55┊55┊        this.router.navigate(['/chat', id]);\n ┊56┊56┊      });\n ┊57┊57┊    }\n```\n\n##### Changed src&#x2F;app&#x2F;services&#x2F;chats.service.ts\n```diff\n@@ -14,8 +14,10 @@\n ┊14┊14┊import {Observable} from 'rxjs';\n ┊15┊15┊import {addChatMutation} from '../../graphql/addChat.mutation';\n ┊16┊16┊import {addGroupMutation} from '../../graphql/addGroup.mutation';\n+┊  ┊17┊import * as moment from 'moment';\n ┊17┊18┊\n ┊18┊19┊const currentUserId = '1';\n+┊  ┊20┊const currentUserName = 'Ethan Gonzalez';\n ┊19┊21┊\n ┊20┊22┊@Injectable()\n ┊21┊23┊export class ChatsService {\n```\n```diff\n@@ -37,6 +39,10 @@\n ┊37┊39┊    this.chats$.subscribe(chats => this.chats = chats);\n ┊38┊40┊  }\n ┊39┊41┊\n+┊  ┊42┊  static getRandomId() {\n+┊  ┊43┊    return String(Math.round(Math.random() * 1000000000000));\n+┊  ┊44┊  }\n+┊  ┊45┊\n ┊40┊46┊  getChats() {\n ┊41┊47┊    return {query: this.getChatsWq, chats$: this.chats$};\n ┊42┊48┊  }\n```\n```diff\n@@ -63,6 +69,24 @@\n ┊63┊69┊        chatId,\n ┊64┊70┊        content,\n ┊65┊71┊      },\n+┊  ┊72┊      optimisticResponse: {\n+┊  ┊73┊        __typename: 'Mutation',\n+┊  ┊74┊        addMessage: {\n+┊  ┊75┊          id: ChatsService.getRandomId(),\n+┊  ┊76┊          __typename: 'Message',\n+┊  ┊77┊          senderId: currentUserId,\n+┊  ┊78┊          sender: {\n+┊  ┊79┊            id: currentUserId,\n+┊  ┊80┊            __typename: 'User',\n+┊  ┊81┊            name: currentUserName,\n+┊  ┊82┊          },\n+┊  ┊83┊          content,\n+┊  ┊84┊          createdAt: moment().unix(),\n+┊  ┊85┊          type: 0,\n+┊  ┊86┊          recipients: [],\n+┊  ┊87┊          ownership: true,\n+┊  ┊88┊        },\n+┊  ┊89┊      },\n ┊66┊90┊      update: (store, { data: { addMessage } }: {data: AddMessage.Mutation}) => {\n ┊67┊91┊        // Update the messages cache\n ┊68┊92┊        {\n```\n```diff\n@@ -109,6 +133,10 @@\n ┊109┊133┊      variables: <RemoveChat.Variables>{\n ┊110┊134┊        chatId,\n ┊111┊135┊      },\n+┊   ┊136┊      optimisticResponse: {\n+┊   ┊137┊        __typename: 'Mutation',\n+┊   ┊138┊        removeChat: chatId,\n+┊   ┊139┊      },\n ┊112┊140┊      update: (store, { data: { removeChat } }) => {\n ┊113┊141┊        // Read the data from our cache for this query.\n ┊114┊142┊        const {chats}: GetChats.Query = store.readQuery({\n```\n```diff\n@@ -155,6 +183,10 @@\n ┊155┊183┊    return this.apollo.mutate(<MutationOptions>{\n ┊156┊184┊      mutation,\n ┊157┊185┊      variables,\n+┊   ┊186┊      optimisticResponse: {\n+┊   ┊187┊        __typename: 'Mutation',\n+┊   ┊188┊        removeMessages: ids,\n+┊   ┊189┊      },\n ┊158┊190┊      update: (store, { data: { removeMessages } }: {data: RemoveMessages.Mutation | RemoveAllMessages.Mutation}) => {\n ┊159┊191┊        // Update the messages cache\n ┊160┊192┊        {\n```\n```diff\n@@ -223,12 +255,34 @@\n ┊223┊255┊    return _chat ? _chat.id : false;\n ┊224┊256┊  }\n ┊225┊257┊\n-┊226┊   ┊  addChat(recipientId: string) {\n+┊   ┊258┊  addChat(recipientId: string, users: GetUsers.Users[]) {\n ┊227┊259┊    return this.apollo.mutate({\n ┊228┊260┊      mutation: addChatMutation,\n ┊229┊261┊      variables: <AddChat.Variables>{\n ┊230┊262┊        recipientId,\n ┊231┊263┊      },\n+┊   ┊264┊      optimisticResponse: {\n+┊   ┊265┊        __typename: 'Mutation',\n+┊   ┊266┊        addChat: {\n+┊   ┊267┊          id: ChatsService.getRandomId(),\n+┊   ┊268┊          __typename: 'Chat',\n+┊   ┊269┊          name: users.find(user => user.id === recipientId).name,\n+┊   ┊270┊          picture: users.find(user => user.id === recipientId).picture,\n+┊   ┊271┊          allTimeMembers: [\n+┊   ┊272┊            {\n+┊   ┊273┊              id: currentUserId,\n+┊   ┊274┊              __typename: 'User',\n+┊   ┊275┊            },\n+┊   ┊276┊            {\n+┊   ┊277┊              id: recipientId,\n+┊   ┊278┊              __typename: 'User',\n+┊   ┊279┊            }\n+┊   ┊280┊          ],\n+┊   ┊281┊          unreadMessages: 0,\n+┊   ┊282┊          messages: [],\n+┊   ┊283┊          isGroup: false,\n+┊   ┊284┊        },\n+┊   ┊285┊      },\n ┊232┊286┊      update: (store, { data: { addChat } }) => {\n ┊233┊287┊        // Read the data from our cache for this query.\n ┊234┊288┊        const {chats}: GetChats.Query = store.readQuery({\n```\n```diff\n@@ -260,6 +314,26 @@\n ┊260┊314┊        recipientIds,\n ┊261┊315┊        groupName,\n ┊262┊316┊      },\n+┊   ┊317┊      optimisticResponse: {\n+┊   ┊318┊        __typename: 'Mutation',\n+┊   ┊319┊        addGroup: {\n+┊   ┊320┊          id: ChatsService.getRandomId(),\n+┊   ┊321┊          __typename: 'Chat',\n+┊   ┊322┊          name: groupName,\n+┊   ┊323┊          picture: 'https://randomuser.me/api/portraits/thumb/lego/1.jpg',\n+┊   ┊324┊          userIds: [currentUserId, recipientIds],\n+┊   ┊325┊          allTimeMembers: [\n+┊   ┊326┊            {\n+┊   ┊327┊              id: currentUserId,\n+┊   ┊328┊              __typename: 'User',\n+┊   ┊329┊            },\n+┊   ┊330┊            ...recipientIds.map(id => ({id, __typename: 'User'})),\n+┊   ┊331┊          ],\n+┊   ┊332┊          unreadMessages: 0,\n+┊   ┊333┊          messages: [],\n+┊   ┊334┊          isGroup: true,\n+┊   ┊335┊        },\n+┊   ┊336┊      },\n ┊263┊337┊      update: (store, { data: { addGroup } }) => {\n ┊264┊338┊        // Read the data from our cache for this query.\n ┊265┊339┊        const {chats}: GetChats.Query = store.readQuery({\n```\n\n[}]: #\n\nWhen we open a specific chat we can also preload some data from our chats list cache while waiting for the server response. We will initially be able to show only the chat name, the last message or the last few messages and a few more informations instead of the whole content from the server, but that would be more than enough to entertain the user while waiting for the server response:\n\n[{]: <helper> (diffStep \"9.2\" module=\"client\")\n\n#### Step 9.2: Get chat data from chats cache while waiting for server response\n\n##### Changed src&#x2F;app&#x2F;services&#x2F;chats.service.ts\n```diff\n@@ -1,5 +1,5 @@\n ┊1┊1┊import {ApolloQueryResult, MutationOptions, WatchQueryOptions} from 'apollo-client';\n-┊2┊ ┊import {map} from 'rxjs/operators';\n+┊ ┊2┊import {concat, map} from 'rxjs/operators';\n ┊3┊3┊import {Apollo, QueryRef} from 'apollo-angular';\n ┊4┊4┊import {Injectable} from '@angular/core';\n ┊5┊5┊import {getChatsQuery} from '../../graphql/getChats.query';\n```\n```diff\n@@ -11,7 +11,7 @@\n ┊11┊11┊import {removeAllMessagesMutation} from '../../graphql/removeAllMessages.mutation';\n ┊12┊12┊import {removeMessagesMutation} from '../../graphql/removeMessages.mutation';\n ┊13┊13┊import {getUsersQuery} from '../../graphql/getUsers.query';\n-┊14┊  ┊import {Observable} from 'rxjs';\n+┊  ┊14┊import {Observable, AsyncSubject, of} from 'rxjs';\n ┊15┊15┊import {addChatMutation} from '../../graphql/addChat.mutation';\n ┊16┊16┊import {addGroupMutation} from '../../graphql/addGroup.mutation';\n ┊17┊17┊import * as moment from 'moment';\n```\n```diff\n@@ -25,6 +25,7 @@\n ┊25┊25┊  getChatsWq: QueryRef<GetChats.Query>;\n ┊26┊26┊  chats$: Observable<GetChats.Chats[]>;\n ┊27┊27┊  chats: GetChats.Chats[];\n+┊  ┊28┊  getChatWqSubject: AsyncSubject<QueryRef<GetChat.Query>>;\n ┊28┊29┊\n ┊29┊30┊  constructor(private apollo: Apollo) {\n ┊30┊31┊    this.getChatsWq = this.apollo.watchQuery<GetChats.Query>(<WatchQueryOptions>{\n```\n```diff\n@@ -48,18 +49,34 @@\n ┊48┊49┊  }\n ┊49┊50┊\n ┊50┊51┊  getChat(chatId: string) {\n+┊  ┊52┊    const _chat = this.chats && this.chats.find(chat => chat.id === chatId) || {\n+┊  ┊53┊      id: chatId,\n+┊  ┊54┊      name: '',\n+┊  ┊55┊      picture: null,\n+┊  ┊56┊      allTimeMembers: [],\n+┊  ┊57┊      unreadMessages: 0,\n+┊  ┊58┊      isGroup: false,\n+┊  ┊59┊      messages: [],\n+┊  ┊60┊    };\n+┊  ┊61┊    const chat$FromCache = of<GetChat.Chat>(_chat);\n+┊  ┊62┊\n ┊51┊63┊    const query = this.apollo.watchQuery<GetChat.Query>({\n ┊52┊64┊      query: getChatQuery,\n ┊53┊65┊      variables: {\n-┊54┊  ┊        chatId: chatId,\n+┊  ┊66┊        chatId,\n ┊55┊67┊      }\n ┊56┊68┊    });\n ┊57┊69┊\n-┊58┊  ┊    const chat$ = query.valueChanges.pipe(\n-┊59┊  ┊      map((result: ApolloQueryResult<GetChat.Query>) => result.data.chat)\n-┊60┊  ┊    );\n+┊  ┊70┊    const chat$ = chat$FromCache.pipe(\n+┊  ┊71┊      concat(query.valueChanges.pipe(\n+┊  ┊72┊        map((result: ApolloQueryResult<GetChat.Query>) => result.data.chat)\n+┊  ┊73┊      )));\n+┊  ┊74┊\n+┊  ┊75┊    this.getChatWqSubject = new AsyncSubject();\n+┊  ┊76┊    this.getChatWqSubject.next(query);\n+┊  ┊77┊    this.getChatWqSubject.complete();\n ┊61┊78┊\n-┊62┊  ┊    return {query, chat$};\n+┊  ┊79┊    return {query$: this.getChatWqSubject.asObservable(), chat$};\n ┊63┊80┊  }\n ┊64┊81┊\n ┊65┊82┊  addMessage(chatId: string, content: string) {\n```\n\n[}]: #\n\nNow let's deal with the most difficult part: what about chats creation? We cannot predict the `id` of the new chat and so we cannot navigate to the chat page because it contains the chat id in the url. We could simply navigate to the \"optimistic\" id, but then the user wouldn't be able to reach that url if he refreshes the page or bookmarks it. That's a problem we care about. How to solve it? We're going to create a landing page and we will later override the url once we get the response from the server!\n\n[{]: <helper> (diffStep \"9.3\" module=\"client\")\n\n#### Step 9.3: Landing page for new chats/groups\n\n##### Changed src&#x2F;app&#x2F;chat-viewer&#x2F;containers&#x2F;chat&#x2F;chat.component.spec.ts\n```diff\n@@ -116,7 +116,10 @@\n ┊116┊116┊        Apollo,\n ┊117┊117┊        {\n ┊118┊118┊          provide: ActivatedRoute,\n-┊119┊   ┊          useValue: { params: of({ id: chat.id }) }\n+┊   ┊119┊          useValue: {\n+┊   ┊120┊            params: of({ id: chat.id }),\n+┊   ┊121┊            queryParams: of({}),\n+┊   ┊122┊          }\n ┊120┊123┊        }\n ┊121┊124┊      ],\n ┊122┊125┊      schemas: [NO_ERRORS_SCHEMA]\n```\n\n##### Changed src&#x2F;app&#x2F;chat-viewer&#x2F;containers&#x2F;chat&#x2F;chat.component.ts\n```diff\n@@ -2,6 +2,8 @@\n ┊2┊2┊import {ActivatedRoute, Router} from '@angular/router';\n ┊3┊3┊import {ChatsService} from '../../../services/chats.service';\n ┊4┊4┊import {GetChat} from '../../../../types';\n+┊ ┊5┊import {combineLatest} from 'rxjs';\n+┊ ┊6┊import {Location} from '@angular/common';\n ┊5┊7┊\n ┊6┊8┊@Component({\n ┊7┊9┊  template: `\n```\n```diff\n@@ -26,21 +28,40 @@\n ┊26┊28┊  messages: GetChat.Messages[];\n ┊27┊29┊  name: string;\n ┊28┊30┊  isGroup: boolean;\n+┊  ┊31┊  optimisticUI: boolean;\n ┊29┊32┊\n ┊30┊33┊  constructor(private route: ActivatedRoute,\n ┊31┊34┊              private router: Router,\n+┊  ┊35┊              private location: Location,\n ┊32┊36┊              private chatsService: ChatsService) {\n ┊33┊37┊  }\n ┊34┊38┊\n ┊35┊39┊  ngOnInit() {\n-┊36┊  ┊    this.route.params.subscribe(({id: chatId}) => {\n-┊37┊  ┊      this.chatId = chatId;\n-┊38┊  ┊      this.chatsService.getChat(chatId).chat$.subscribe(chat => {\n-┊39┊  ┊        this.messages = chat.messages;\n-┊40┊  ┊        this.name = chat.name;\n-┊41┊  ┊        this.isGroup = chat.isGroup;\n+┊  ┊40┊    combineLatest(this.route.params, this.route.queryParams,\n+┊  ┊41┊      (params: { id: string }, queryParams: { oui?: boolean }) => ({params, queryParams}))\n+┊  ┊42┊      .subscribe(({params: {id: chatId}, queryParams: {oui}}) => {\n+┊  ┊43┊        this.chatId = chatId;\n+┊  ┊44┊\n+┊  ┊45┊        this.optimisticUI = oui;\n+┊  ┊46┊\n+┊  ┊47┊        if (this.optimisticUI) {\n+┊  ┊48┊          // We are using fake IDs generated by the Optimistic UI\n+┊  ┊49┊          this.chatsService.addChat$.subscribe(({data: {addChat, addGroup}}) => {\n+┊  ┊50┊            this.chatId = addChat ? addChat.id : addGroup.id;\n+┊  ┊51┊            console.log(`Switching from the Optimistic UI id ${chatId} to ${this.chatId}`);\n+┊  ┊52┊            // Rewrite the URL\n+┊  ┊53┊            this.location.go(`chat/${this.chatId}`);\n+┊  ┊54┊            // Optimistic UI no more\n+┊  ┊55┊            this.optimisticUI = false;\n+┊  ┊56┊          });\n+┊  ┊57┊        }\n+┊  ┊58┊\n+┊  ┊59┊        this.chatsService.getChat(chatId, this.optimisticUI).chat$.subscribe(chat => {\n+┊  ┊60┊          this.messages = chat.messages;\n+┊  ┊61┊          this.name = chat.name;\n+┊  ┊62┊          this.isGroup = chat.isGroup;\n+┊  ┊63┊        });\n ┊42┊64┊      });\n-┊43┊  ┊    });\n ┊44┊65┊  }\n ┊45┊66┊\n ┊46┊67┊  goToChats() {\n```\n\n##### Changed src&#x2F;app&#x2F;chats-creation&#x2F;containers&#x2F;new-chat&#x2F;new-chat.component.ts\n```diff\n@@ -51,9 +51,10 @@\n ┊51┊51┊      // Chat is already listed for the current user\n ┊52┊52┊      this.router.navigate(['/chat', chatId]);\n ┊53┊53┊    } else {\n-┊54┊  ┊      this.chatsService.addChat(recipientId, this.users).subscribe(({data: {addChat: {id}}}: { data: AddChat.Mutation }) => {\n-┊55┊  ┊        this.router.navigate(['/chat', id]);\n-┊56┊  ┊      });\n+┊  ┊54┊      // Generate id for Optimistic UI\n+┊  ┊55┊      const ouiId = ChatsService.getRandomId();\n+┊  ┊56┊      this.chatsService.addChat(recipientId, this.users, ouiId).subscribe();\n+┊  ┊57┊      this.router.navigate(['/chat', ouiId], {queryParams: {oui: true}, skipLocationChange: true});\n ┊57┊58┊    }\n ┊58┊59┊  }\n ┊59┊60┊}\n```\n\n##### Changed src&#x2F;app&#x2F;chats-creation&#x2F;containers&#x2F;new-group&#x2F;new-group.component.ts\n```diff\n@@ -52,9 +52,9 @@\n ┊52┊52┊\n ┊53┊53┊  addGroup(groupName: string) {\n ┊54┊54┊    if (groupName && this.recipientIds.length) {\n-┊55┊  ┊      this.chatsService.addGroup(this.recipientIds, groupName).subscribe(({data: {addGroup: {id}}}: { data: AddGroup.Mutation }) => {\n-┊56┊  ┊        this.router.navigate(['/chat', id]);\n-┊57┊  ┊      });\n+┊  ┊55┊      const ouiId = ChatsService.getRandomId();\n+┊  ┊56┊      this.chatsService.addGroup(this.recipientIds, groupName, ouiId).subscribe();\n+┊  ┊57┊      this.router.navigate(['/chat', ouiId], {queryParams: {oui: true}, skipLocationChange: true});\n ┊58┊58┊    }\n ┊59┊59┊  }\n ┊60┊60┊}\n```\n\n##### Changed src&#x2F;app&#x2F;services&#x2F;chats.service.ts\n```diff\n@@ -1,5 +1,5 @@\n ┊1┊1┊import {ApolloQueryResult, MutationOptions, WatchQueryOptions} from 'apollo-client';\n-┊2┊ ┊import {concat, map} from 'rxjs/operators';\n+┊ ┊2┊import {concat, map, share, switchMap} from 'rxjs/operators';\n ┊3┊3┊import {Apollo, QueryRef} from 'apollo-angular';\n ┊4┊4┊import {Injectable} from '@angular/core';\n ┊5┊5┊import {getChatsQuery} from '../../graphql/getChats.query';\n```\n```diff\n@@ -15,6 +15,7 @@\n ┊15┊15┊import {addChatMutation} from '../../graphql/addChat.mutation';\n ┊16┊16┊import {addGroupMutation} from '../../graphql/addGroup.mutation';\n ┊17┊17┊import * as moment from 'moment';\n+┊  ┊18┊import {FetchResult} from 'apollo-link';\n ┊18┊19┊\n ┊19┊20┊const currentUserId = '1';\n ┊20┊21┊const currentUserName = 'Ethan Gonzalez';\n```\n```diff\n@@ -26,6 +27,7 @@\n ┊26┊27┊  chats$: Observable<GetChats.Chats[]>;\n ┊27┊28┊  chats: GetChats.Chats[];\n ┊28┊29┊  getChatWqSubject: AsyncSubject<QueryRef<GetChat.Query>>;\n+┊  ┊30┊  addChat$: Observable<FetchResult<AddChat.Mutation | AddGroup.Mutation>>;\n ┊29┊31┊\n ┊30┊32┊  constructor(private apollo: Apollo) {\n ┊31┊33┊    this.getChatsWq = this.apollo.watchQuery<GetChats.Query>(<WatchQueryOptions>{\n```\n```diff\n@@ -48,7 +50,7 @@\n ┊48┊50┊    return {query: this.getChatsWq, chats$: this.chats$};\n ┊49┊51┊  }\n ┊50┊52┊\n-┊51┊  ┊  getChat(chatId: string) {\n+┊  ┊53┊  getChat(chatId: string, oui?: boolean) {\n ┊52┊54┊    const _chat = this.chats && this.chats.find(chat => chat.id === chatId) || {\n ┊53┊55┊      id: chatId,\n ┊54┊56┊      name: '',\n```\n```diff\n@@ -60,21 +62,39 @@\n ┊ 60┊ 62┊    };\n ┊ 61┊ 63┊    const chat$FromCache = of<GetChat.Chat>(_chat);\n ┊ 62┊ 64┊\n-┊ 63┊   ┊    const query = this.apollo.watchQuery<GetChat.Query>({\n-┊ 64┊   ┊      query: getChatQuery,\n-┊ 65┊   ┊      variables: {\n-┊ 66┊   ┊        chatId,\n-┊ 67┊   ┊      }\n-┊ 68┊   ┊    });\n-┊ 69┊   ┊\n-┊ 70┊   ┊    const chat$ = chat$FromCache.pipe(\n-┊ 71┊   ┊      concat(query.valueChanges.pipe(\n-┊ 72┊   ┊        map((result: ApolloQueryResult<GetChat.Query>) => result.data.chat)\n-┊ 73┊   ┊      )));\n+┊   ┊ 65┊    const getApolloWatchQuery = (id: string) => {\n+┊   ┊ 66┊      return this.apollo.watchQuery<GetChat.Query>({\n+┊   ┊ 67┊        query: getChatQuery,\n+┊   ┊ 68┊        variables: {\n+┊   ┊ 69┊          chatId: id,\n+┊   ┊ 70┊        }\n+┊   ┊ 71┊      });\n+┊   ┊ 72┊    };\n ┊ 74┊ 73┊\n+┊   ┊ 74┊    let chat$: Observable<GetChat.Chat>;\n ┊ 75┊ 75┊    this.getChatWqSubject = new AsyncSubject();\n-┊ 76┊   ┊    this.getChatWqSubject.next(query);\n-┊ 77┊   ┊    this.getChatWqSubject.complete();\n+┊   ┊ 76┊\n+┊   ┊ 77┊    if (oui) {\n+┊   ┊ 78┊      chat$ = chat$FromCache.pipe(\n+┊   ┊ 79┊        concat(this.addChat$.pipe(\n+┊   ┊ 80┊          switchMap(({ data: { addChat, addGroup } }) => {\n+┊   ┊ 81┊            const query = getApolloWatchQuery(addChat ? addChat.id : addGroup.id);\n+┊   ┊ 82┊            this.getChatWqSubject.next(query);\n+┊   ┊ 83┊            this.getChatWqSubject.complete();\n+┊   ┊ 84┊            return query.valueChanges.pipe(\n+┊   ┊ 85┊              map((result: ApolloQueryResult<GetChat.Query>) => result.data.chat)\n+┊   ┊ 86┊            );\n+┊   ┊ 87┊          }))\n+┊   ┊ 88┊        ));\n+┊   ┊ 89┊    } else {\n+┊   ┊ 90┊      const query = getApolloWatchQuery(chatId);\n+┊   ┊ 91┊      this.getChatWqSubject.next(query);\n+┊   ┊ 92┊      this.getChatWqSubject.complete();\n+┊   ┊ 93┊      chat$ = chat$FromCache.pipe(\n+┊   ┊ 94┊        concat(query.valueChanges.pipe(\n+┊   ┊ 95┊          map((result: ApolloQueryResult<GetChat.Query>) => result.data.chat)\n+┊   ┊ 96┊        )));\n+┊   ┊ 97┊    }\n ┊ 78┊ 98┊\n ┊ 79┊ 99┊    return {query$: this.getChatWqSubject.asObservable(), chat$};\n ┊ 80┊100┊  }\n```\n```diff\n@@ -272,8 +292,8 @@\n ┊272┊292┊    return _chat ? _chat.id : false;\n ┊273┊293┊  }\n ┊274┊294┊\n-┊275┊   ┊  addChat(recipientId: string, users: GetUsers.Users[]) {\n-┊276┊   ┊    return this.apollo.mutate({\n+┊   ┊295┊  addChat(recipientId: string, users: GetUsers.Users[], ouiId: string) {\n+┊   ┊296┊    this.addChat$ = this.apollo.mutate({\n ┊277┊297┊      mutation: addChatMutation,\n ┊278┊298┊      variables: <AddChat.Variables>{\n ┊279┊299┊        recipientId,\n```\n```diff\n@@ -281,7 +301,7 @@\n ┊281┊301┊      optimisticResponse: {\n ┊282┊302┊        __typename: 'Mutation',\n ┊283┊303┊        addChat: {\n-┊284┊   ┊          id: ChatsService.getRandomId(),\n+┊   ┊304┊          id: ouiId,\n ┊285┊305┊          __typename: 'Chat',\n ┊286┊306┊          name: users.find(user => user.id === recipientId).name,\n ┊287┊307┊          picture: users.find(user => user.id === recipientId).picture,\n```\n```diff\n@@ -321,11 +341,12 @@\n ┊321┊341┊          },\n ┊322┊342┊        });\n ┊323┊343┊      },\n-┊324┊   ┊    });\n+┊   ┊344┊    }).pipe(share());\n+┊   ┊345┊    return this.addChat$;\n ┊325┊346┊  }\n ┊326┊347┊\n-┊327┊   ┊  addGroup(recipientIds: string[], groupName: string) {\n-┊328┊   ┊    return this.apollo.mutate({\n+┊   ┊348┊  addGroup(recipientIds: string[], groupName: string, ouiId: string) {\n+┊   ┊349┊    this.addChat$ = this.apollo.mutate({\n ┊329┊350┊      mutation: addGroupMutation,\n ┊330┊351┊      variables: <AddGroup.Variables>{\n ┊331┊352┊        recipientIds,\n```\n```diff\n@@ -334,7 +355,7 @@\n ┊334┊355┊      optimisticResponse: {\n ┊335┊356┊        __typename: 'Mutation',\n ┊336┊357┊        addGroup: {\n-┊337┊   ┊          id: ChatsService.getRandomId(),\n+┊   ┊358┊          id: ouiId,\n ┊338┊359┊          __typename: 'Chat',\n ┊339┊360┊          name: groupName,\n ┊340┊361┊          picture: 'https://randomuser.me/api/portraits/thumb/lego/1.jpg',\n```\n```diff\n@@ -372,6 +393,7 @@\n ┊372┊393┊          },\n ┊373┊394┊        });\n ┊374┊395┊      },\n-┊375┊   ┊    });\n+┊   ┊396┊    }).pipe(share());\n+┊   ┊397┊    return this.addChat$;\n ┊376┊398┊  }\n ┊377┊399┊}\n```\n\n[}]: #"
          },
          {
            "manualTitle": "Step 14: Authentication",
            "stepRevision": "a35c0a7c78e96333e22f7f9e2be2960079660d00",
            "manualView": "## Server\n\nAuthentication is an hot topic in the GraphQL world and there are some projects which aim at authenticating through GraphQL.\nSince often you will be required to use a specific auth framework (because of a feature you need or because of an existing authorization infrastructure) I will show you how to use a classic REST API framework within your GraphQL application.\nThis approach is completely fine and in line with the official GraphQL best practices.\nWe will use `Passport` for the authentication and `BasicAuth` as the auth mechanism:\n\n    npm install bcrypt-nodejs passport passport-http\n    npm install --save-dev @types/bcrypt-nodejs @types/passport @types/passport-http\n\n`BasicAuth` basically involves to send username e password in an Authorization Header together with each request and is fully supported by any browser (meaning that we will be able to use `Graphiql` simply by proving username and password in the login window provided by the browser itself).\nIt's the most simple auth mechanism but it's completely fine for our needs. Later we could decide to use something more complicated like `JWT`, but it's outside of the scope of this tutorial.\n\n[{]: <helper> (diffStep \"4.1\" files=\"index.ts\" module=\"server\")\n\n#### Step 4.1: Authentication\n\n##### Changed index.ts\n```diff\n@@ -3,6 +3,47 @@\n ┊ 3┊ 3┊import * as cors from 'cors';\n ┊ 4┊ 4┊import * as express from 'express';\n ┊ 5┊ 5┊import { graphiqlExpress, graphqlExpress } from \"apollo-server-express\";\n+┊  ┊ 6┊import * as passport from \"passport\";\n+┊  ┊ 7┊import * as basicStrategy from 'passport-http';\n+┊  ┊ 8┊import * as bcrypt from 'bcrypt-nodejs';\n+┊  ┊ 9┊import { db, User } from \"./db\";\n+┊  ┊10┊\n+┊  ┊11┊let users = db.users;\n+┊  ┊12┊\n+┊  ┊13┊function generateHash(password: string) {\n+┊  ┊14┊  return bcrypt.hashSync(password, bcrypt.genSaltSync(8));\n+┊  ┊15┊}\n+┊  ┊16┊\n+┊  ┊17┊function validPassword(password: string, localPassword: string) {\n+┊  ┊18┊  return bcrypt.compareSync(password, localPassword);\n+┊  ┊19┊}\n+┊  ┊20┊\n+┊  ┊21┊passport.use('basic-signin', new basicStrategy.BasicStrategy(\n+┊  ┊22┊  function (username, password, done) {\n+┊  ┊23┊    const user = users.find(user => user.username == username);\n+┊  ┊24┊    if (user && validPassword(password, user.password)) {\n+┊  ┊25┊      return done(null, user);\n+┊  ┊26┊    }\n+┊  ┊27┊    return done(null, false);\n+┊  ┊28┊  }\n+┊  ┊29┊));\n+┊  ┊30┊\n+┊  ┊31┊passport.use('basic-signup', new basicStrategy.BasicStrategy({passReqToCallback: true},\n+┊  ┊32┊  function (req: any, username: any, password: any, done: any) {\n+┊  ┊33┊    const userExists = !!users.find(user => user.username === username);\n+┊  ┊34┊    if (!userExists && password && req.body.name) {\n+┊  ┊35┊      const user: User = {\n+┊  ┊36┊        id: (users.length && users[users.length - 1].id + 1) || 1,\n+┊  ┊37┊        username,\n+┊  ┊38┊        password: generateHash(password),\n+┊  ┊39┊        name: req.body.name,\n+┊  ┊40┊      };\n+┊  ┊41┊      users.push(user);\n+┊  ┊42┊      return done(null, user);\n+┊  ┊43┊    }\n+┊  ┊44┊    return done(null, false);\n+┊  ┊45┊  }\n+┊  ┊46┊));\n ┊ 6┊47┊\n ┊ 7┊48┊const PORT = 3000;\n ┊ 8┊49┊\n```\n```diff\n@@ -10,10 +51,25 @@\n ┊10┊51┊\n ┊11┊52┊app.use(cors());\n ┊12┊53┊app.use(bodyParser.json());\n+┊  ┊54┊app.use(passport.initialize());\n+┊  ┊55┊\n+┊  ┊56┊app.post('/signup',\n+┊  ┊57┊  passport.authenticate('basic-signup', {session: false}),\n+┊  ┊58┊  function (req, res) {\n+┊  ┊59┊    res.json(req.user);\n+┊  ┊60┊  });\n+┊  ┊61┊\n+┊  ┊62┊app.use(passport.authenticate('basic-signin', {session: false}));\n+┊  ┊63┊\n+┊  ┊64┊app.post('/signin', function (req, res) {\n+┊  ┊65┊  res.json(req.user);\n+┊  ┊66┊});\n ┊13┊67┊\n ┊14┊68┊app.use('/graphql', graphqlExpress(req => ({\n ┊15┊69┊  schema: schema,\n-┊16┊  ┊  context: req,\n+┊  ┊70┊  context: {\n+┊  ┊71┊    user: req!['user'],\n+┊  ┊72┊  },\n ┊17┊73┊})));\n ┊18┊74┊\n ┊19┊75┊app.use('/graphiql', graphiqlExpress({\n```\n\n[}]: #\n\nWe are going to store hashes instead of plain passwords, that's why we're using `bcrypt-nodejs`.\nWith `passport.use('basic-signin')` and `passport.use('basic-signup')` we define how the auth framework deals with our database (well, our JSON file for the moment).\n`app.post('/signup')` is the endpoint for creating new accounts, so we left it out of the authentication middleware (`app.use(passport.authenticate('basic-signin')`).\nWhat's of particular interest is that we're passing the user object to the GraphQL context.\n\n[{]: <helper> (diffStep \"4.1\" files=\"schema/resolvers.ts\" module=\"server\")\n\n#### Step 4.1: Authentication\n\n##### Changed schema&#x2F;resolvers.ts\n```diff\n@@ -8,29 +8,28 @@\n ┊ 8┊ 8┊\n ┊ 9┊ 9┊let users = db.users;\n ┊10┊10┊let chats = db.chats;\n-┊11┊  ┊const currentUser = 1;\n ┊12┊11┊\n ┊13┊12┊export const resolvers: IResolvers = {\n ┊14┊13┊  Query: {\n ┊15┊14┊    // Show all users for the moment.\n-┊16┊  ┊    users: (): User[] => users.filter(user => user.id !== currentUser),\n-┊17┊  ┊    chats: (): Chat[] => chats.filter(chat => chat.listingMemberIds.includes(currentUser)),\n+┊  ┊15┊    users: (obj: any, args: any, {user: currentUser}: {user: User}): User[] => users.filter(user => user.id !== currentUser.id),\n+┊  ┊16┊    chats: (obj: any, args: any, {user: currentUser}: {user: User}): Chat[] => chats.filter(chat => chat.listingMemberIds.includes(currentUser.id)),\n ┊18┊17┊    chat: (obj: any, {chatId}: ChatQueryArgs): Chat | null => chats.find(chat => chat.id === Number(chatId)) || null,\n ┊19┊18┊  },\n ┊20┊19┊  Mutation: {\n-┊21┊  ┊    addChat: (obj: any, {recipientId}: AddChatMutationArgs): Chat => {\n+┊  ┊20┊    addChat: (obj: any, {recipientId}: AddChatMutationArgs, {user: currentUser}: {user: User}): Chat => {\n ┊22┊21┊      if (!users.find(user => user.id === Number(recipientId))) {\n ┊23┊22┊        throw new Error(`Recipient ${recipientId} doesn't exist.`);\n ┊24┊23┊      }\n ┊25┊24┊\n-┊26┊  ┊      const chat = chats.find(chat => !chat.name && chat.allTimeMemberIds.includes(currentUser) && chat.allTimeMemberIds.includes(Number(recipientId)));\n+┊  ┊25┊      const chat = chats.find(chat => !chat.name && chat.allTimeMemberIds.includes(currentUser.id) && chat.allTimeMemberIds.includes(Number(recipientId)));\n ┊27┊26┊      if (chat) {\n ┊28┊27┊        // Chat already exists. Both users are already in the allTimeMemberIds array\n ┊29┊28┊        const chatId = chat.id;\n-┊30┊  ┊        if (!chat.listingMemberIds.includes(currentUser)) {\n+┊  ┊29┊        if (!chat.listingMemberIds.includes(currentUser.id)) {\n ┊31┊30┊          // The chat isn't listed for the current user. Add him to the memberIds\n-┊32┊  ┊          chat.listingMemberIds.push(currentUser);\n-┊33┊  ┊          chats.find(chat => chat.id === chatId)!.listingMemberIds.push(currentUser);\n+┊  ┊31┊          chat.listingMemberIds.push(currentUser.id);\n+┊  ┊32┊          chats.find(chat => chat.id === chatId)!.listingMemberIds.push(currentUser.id);\n ┊34┊33┊          return chat;\n ┊35┊34┊        } else {\n ┊36┊35┊          throw new Error(`Chat already exists.`);\n```\n```diff\n@@ -44,9 +43,9 @@\n ┊44┊43┊          picture: null,\n ┊45┊44┊          adminIds: null,\n ┊46┊45┊          ownerId: null,\n-┊47┊  ┊          allTimeMemberIds: [currentUser, Number(recipientId)],\n+┊  ┊46┊          allTimeMemberIds: [currentUser.id, Number(recipientId)],\n ┊48┊47┊          // Chat will not be listed to the other user until the first message gets written\n-┊49┊  ┊          listingMemberIds: [currentUser],\n+┊  ┊48┊          listingMemberIds: [currentUser.id],\n ┊50┊49┊          actualGroupMemberIds: null,\n ┊51┊50┊          messages: [],\n ┊52┊51┊        };\n```\n```diff\n@@ -54,7 +53,7 @@\n ┊54┊53┊        return chat;\n ┊55┊54┊      }\n ┊56┊55┊    },\n-┊57┊  ┊    addGroup: (obj: any, {recipientIds, groupName}: AddGroupMutationArgs): Chat => {\n+┊  ┊56┊    addGroup: (obj: any, {recipientIds, groupName}: AddGroupMutationArgs, {user: currentUser}: {user: User}): Chat => {\n ┊58┊57┊      recipientIds.forEach(recipientId => {\n ┊59┊58┊        if (!users.find(user => user.id === Number(recipientId))) {\n ┊60┊59┊          throw new Error(`Recipient ${recipientId} doesn't exist.`);\n```\n```diff\n@@ -66,17 +65,17 @@\n ┊66┊65┊        id,\n ┊67┊66┊        name: groupName,\n ┊68┊67┊        picture: null,\n-┊69┊  ┊        adminIds: [currentUser],\n-┊70┊  ┊        ownerId: currentUser,\n-┊71┊  ┊        allTimeMemberIds: [currentUser, ...recipientIds.map(id => Number(id))],\n-┊72┊  ┊        listingMemberIds: [currentUser, ...recipientIds.map(id => Number(id))],\n-┊73┊  ┊        actualGroupMemberIds: [currentUser, ...recipientIds.map(id => Number(id))],\n+┊  ┊68┊        adminIds: [currentUser.id],\n+┊  ┊69┊        ownerId: currentUser.id,\n+┊  ┊70┊        allTimeMemberIds: [currentUser.id, ...recipientIds.map(id => Number(id))],\n+┊  ┊71┊        listingMemberIds: [currentUser.id, ...recipientIds.map(id => Number(id))],\n+┊  ┊72┊        actualGroupMemberIds: [currentUser.id, ...recipientIds.map(id => Number(id))],\n ┊74┊73┊        messages: [],\n ┊75┊74┊      };\n ┊76┊75┊      chats.push(chat);\n ┊77┊76┊      return chat;\n ┊78┊77┊    },\n-┊79┊  ┊    removeChat: (obj: any, {chatId}: RemoveChatMutationArgs): number => {\n+┊  ┊78┊    removeChat: (obj: any, {chatId}: RemoveChatMutationArgs, {user: currentUser}: {user: User}): number => {\n ┊80┊79┊      const chat = chats.find(chat => chat.id === Number(chatId));\n ┊81┊80┊\n ┊82┊81┊      if (!chat) {\n```\n```diff\n@@ -85,14 +84,14 @@\n ┊85┊84┊\n ┊86┊85┊      if (!chat.name) {\n ┊87┊86┊        // Chat\n-┊88┊  ┊        if (!chat.listingMemberIds.includes(currentUser)) {\n+┊  ┊87┊        if (!chat.listingMemberIds.includes(currentUser.id)) {\n ┊89┊88┊          throw new Error(`The user is not a member of the chat ${chatId}.`);\n ┊90┊89┊        }\n ┊91┊90┊\n ┊92┊91┊        // Instead of chaining map and filter we can loop once using reduce\n ┊93┊92┊        const messages = chat.messages.reduce<Message[]>((filtered, message) => {\n ┊94┊93┊          // Remove the current user from the message holders\n-┊95┊  ┊          message.holderIds = message.holderIds.filter(holderId => holderId !== currentUser);\n+┊  ┊94┊          message.holderIds = message.holderIds.filter(holderId => holderId !== currentUser.id);\n ┊96┊95┊\n ┊97┊96┊          if (message.holderIds.length !== 0) {\n ┊98┊97┊            filtered.push(message);\n```\n```diff\n@@ -102,7 +101,7 @@\n ┊102┊101┊        }, []);\n ┊103┊102┊\n ┊104┊103┊        // Remove the current user from who gets the chat listed. The chat will no longer appear in his list\n-┊105┊   ┊        const listingMemberIds = chat.listingMemberIds.filter(listingId => listingId !== currentUser);\n+┊   ┊104┊        const listingMemberIds = chat.listingMemberIds.filter(listingId => listingId !== currentUser.id);\n ┊106┊105┊\n ┊107┊106┊        // Check how many members are left\n ┊108┊107┊        if (listingMemberIds.length === 0) {\n```\n```diff\n@@ -120,14 +119,14 @@\n ┊120┊119┊        return Number(chatId);\n ┊121┊120┊      } else {\n ┊122┊121┊        // Group\n-┊123┊   ┊        if (chat.ownerId !== currentUser) {\n+┊   ┊122┊        if (chat.ownerId !== currentUser.id) {\n ┊124┊123┊          throw new Error(`Group ${chatId} is not owned by the user.`);\n ┊125┊124┊        }\n ┊126┊125┊\n ┊127┊126┊        // Instead of chaining map and filter we can loop once using reduce\n ┊128┊127┊        const messages = chat.messages.reduce<Message[]>((filtered, message) => {\n ┊129┊128┊          // Remove the current user from the message holders\n-┊130┊   ┊          message.holderIds = message.holderIds.filter(holderId => holderId !== currentUser);\n+┊   ┊129┊          message.holderIds = message.holderIds.filter(holderId => holderId !== currentUser.id);\n ┊131┊130┊\n ┊132┊131┊          if (message.holderIds.length !== 0) {\n ┊133┊132┊            filtered.push(message);\n```\n```diff\n@@ -137,7 +136,7 @@\n ┊137┊136┊        }, []);\n ┊138┊137┊\n ┊139┊138┊        // Remove the current user from who gets the group listed. The group will no longer appear in his list\n-┊140┊   ┊        const listingMemberIds = chat.listingMemberIds.filter(listingId => listingId !== currentUser);\n+┊   ┊139┊        const listingMemberIds = chat.listingMemberIds.filter(listingId => listingId !== currentUser.id);\n ┊141┊140┊\n ┊142┊141┊        // Check how many members (including previous ones who can still access old messages) are left\n ┊143┊142┊        if (listingMemberIds.length === 0) {\n```\n```diff\n@@ -147,9 +146,9 @@\n ┊147┊146┊          // Update the group\n ┊148┊147┊\n ┊149┊148┊          // Remove the current user from the chat members. He is no longer a member of the group\n-┊150┊   ┊          const actualGroupMemberIds = chat.actualGroupMemberIds!.filter(memberId => memberId !== currentUser);\n+┊   ┊149┊          const actualGroupMemberIds = chat.actualGroupMemberIds!.filter(memberId => memberId !== currentUser.id);\n ┊151┊150┊          // Remove the current user from the chat admins\n-┊152┊   ┊          const adminIds = chat.adminIds!.filter(memberId => memberId !== currentUser);\n+┊   ┊151┊          const adminIds = chat.adminIds!.filter(memberId => memberId !== currentUser.id);\n ┊153┊152┊          // Set the owner id to be null. A null owner means the group is read-only\n ┊154┊153┊          let ownerId: number | null = null;\n ┊155┊154┊\n```\n```diff\n@@ -169,7 +168,7 @@\n ┊169┊168┊        return Number(chatId);\n ┊170┊169┊      }\n ┊171┊170┊    },\n-┊172┊   ┊    addMessage: (obj: any, {chatId, content}: AddMessageMutationArgs): Message => {\n+┊   ┊171┊    addMessage: (obj: any, {chatId, content}: AddMessageMutationArgs, {user: currentUser}: {user: User}): Message => {\n ┊173┊172┊      if (content === null || content === '') {\n ┊174┊173┊        throw new Error(`Cannot add empty or null messages.`);\n ┊175┊174┊      }\n```\n```diff\n@@ -184,11 +183,11 @@\n ┊184┊183┊\n ┊185┊184┊      if (!chat.name) {\n ┊186┊185┊        // Chat\n-┊187┊   ┊        if (!chat.listingMemberIds.find(listingId => listingId === currentUser)) {\n+┊   ┊186┊        if (!chat.listingMemberIds.find(listingId => listingId === currentUser.id)) {\n ┊188┊187┊          throw new Error(`The chat ${chatId} must be listed for the current user before adding a message.`);\n ┊189┊188┊        }\n ┊190┊189┊\n-┊191┊   ┊        const recipientId = chat.allTimeMemberIds.filter(userId => userId !== currentUser)[0];\n+┊   ┊190┊        const recipientId = chat.allTimeMemberIds.filter(userId => userId !== currentUser.id)[0];\n ┊192┊191┊\n ┊193┊192┊        if (!chat.listingMemberIds.find(listingId => listingId === recipientId)) {\n ┊194┊193┊          // Chat is not listed for the recipient. Add him to the listingMemberIds\n```\n```diff\n@@ -205,7 +204,7 @@\n ┊205┊204┊        }\n ┊206┊205┊      } else {\n ┊207┊206┊        // Group\n-┊208┊   ┊        if (!chat.actualGroupMemberIds!.find(memberId => memberId === currentUser)) {\n+┊   ┊207┊        if (!chat.actualGroupMemberIds!.find(memberId => memberId === currentUser.id)) {\n ┊209┊208┊          throw new Error(`The user is not a member of the group ${chatId}. Cannot add message.`);\n ┊210┊209┊        }\n ┊211┊210┊\n```\n```diff\n@@ -217,7 +216,7 @@\n ┊217┊216┊      let recipients: Recipient[] = [];\n ┊218┊217┊\n ┊219┊218┊      holderIds.forEach(holderId => {\n-┊220┊   ┊        if (holderId !== currentUser) {\n+┊   ┊219┊        if (holderId !== currentUser.id) {\n ┊221┊220┊          recipients.push({\n ┊222┊221┊            userId: holderId,\n ┊223┊222┊            messageId: id,\n```\n```diff\n@@ -231,7 +230,7 @@\n ┊231┊230┊      const message: Message = {\n ┊232┊231┊        id,\n ┊233┊232┊        chatId: Number(chatId),\n-┊234┊   ┊        senderId: currentUser,\n+┊   ┊233┊        senderId: currentUser.id,\n ┊235┊234┊        content,\n ┊236┊235┊        createdAt: moment().unix(),\n ┊237┊236┊        type: MessageType.TEXT,\n```\n```diff\n@@ -248,14 +247,14 @@\n ┊248┊247┊\n ┊249┊248┊      return message;\n ┊250┊249┊    },\n-┊251┊   ┊    removeMessages: (obj: any, {chatId, messageIds, all}: RemoveMessagesMutationArgs): number[] => {\n+┊   ┊250┊    removeMessages: (obj: any, {chatId, messageIds, all}: RemoveMessagesMutationArgs, {user: currentUser}: {user: User}): number[] => {\n ┊252┊251┊      const chat = chats.find(chat => chat.id === Number(chatId));\n ┊253┊252┊\n ┊254┊253┊      if (!chat) {\n ┊255┊254┊        throw new Error(`Cannot find chat ${chatId}.`);\n ┊256┊255┊      }\n ┊257┊256┊\n-┊258┊   ┊      if (!chat.listingMemberIds.find(listingId => listingId === currentUser)) {\n+┊   ┊257┊      if (!chat.listingMemberIds.find(listingId => listingId === currentUser.id)) {\n ┊259┊258┊        throw new Error(`The chat/group ${chatId} is not listed for the current user, so there is nothing to delete.`);\n ┊260┊259┊      }\n ┊261┊260┊\n```\n```diff\n@@ -271,7 +270,7 @@\n ┊271┊270┊            if (all || messageIds!.includes(String(message.id))) {\n ┊272┊271┊              deletedIds.push(message.id);\n ┊273┊272┊              // Remove the current user from the message holders\n-┊274┊   ┊              message.holderIds = message.holderIds.filter(holderId => holderId !== currentUser);\n+┊   ┊273┊              message.holderIds = message.holderIds.filter(holderId => holderId !== currentUser.id);\n ┊275┊274┊            }\n ┊276┊275┊\n ┊277┊276┊            if (message.holderIds.length !== 0) {\n```\n```diff\n@@ -288,24 +287,24 @@\n ┊288┊287┊    },\n ┊289┊288┊  },\n ┊290┊289┊  Chat: {\n-┊291┊   ┊    name: (chat: Chat): string => chat.name ? chat.name : users\n-┊292┊   ┊      .find(user => user.id === chat.allTimeMemberIds.find(userId => userId !== currentUser))!.name,\n-┊293┊   ┊    picture: (chat: Chat) => chat.name ? chat.picture : users\n-┊294┊   ┊      .find(user => user.id === chat.allTimeMemberIds.find(userId => userId !== currentUser))!.picture,\n+┊   ┊290┊    name: (chat: Chat, args: any, {user: currentUser}: {user: User}): string => chat.name ? chat.name : users\n+┊   ┊291┊      .find(user => user.id === chat.allTimeMemberIds.find(userId => userId !== currentUser.id))!.name,\n+┊   ┊292┊    picture: (chat: Chat, args: any, {user: currentUser}: {user: User}) => chat.name ? chat.picture : users\n+┊   ┊293┊      .find(user => user.id === chat.allTimeMemberIds.find(userId => userId !== currentUser.id))!.picture,\n ┊295┊294┊    allTimeMembers: (chat: Chat): User[] => users.filter(user => chat.allTimeMemberIds.includes(user.id)),\n ┊296┊295┊    listingMembers: (chat: Chat): User[] => users.filter(user => chat.listingMemberIds.includes(user.id)),\n ┊297┊296┊    actualGroupMembers: (chat: Chat): User[] => users.filter(user => chat.actualGroupMemberIds && chat.actualGroupMemberIds.includes(user.id)),\n ┊298┊297┊    admins: (chat: Chat): User[] => users.filter(user => chat.adminIds && chat.adminIds.includes(user.id)),\n ┊299┊298┊    owner: (chat: Chat): User | null => users.find(user => chat.ownerId === user.id) || null,\n-┊300┊   ┊    messages: (chat: Chat, {amount = null}: {amount: number}): Message[] => {\n+┊   ┊299┊    messages: (chat: Chat, {amount = null}: {amount: number}, {user: currentUser}: {user: User}): Message[] => {\n ┊301┊300┊      const messages = chat.messages\n-┊302┊   ┊      .filter(message => message.holderIds.includes(currentUser))\n+┊   ┊301┊      .filter(message => message.holderIds.includes(currentUser.id))\n ┊303┊302┊      .sort((a, b) => b.createdAt - a.createdAt) || <Message[]>[];\n ┊304┊303┊      return (amount ? messages.slice(0, amount) : messages).reverse();\n ┊305┊304┊    },\n-┊306┊   ┊    unreadMessages: (chat: Chat): number => chat.messages\n-┊307┊   ┊      .filter(message => message.holderIds.includes(currentUser) &&\n-┊308┊   ┊        message.recipients.find(recipient => recipient.userId === currentUser && !recipient.readAt))\n+┊   ┊305┊    unreadMessages: (chat: Chat, args: any, {user: currentUser}: {user: User}): number => chat.messages\n+┊   ┊306┊      .filter(message => message.holderIds.includes(currentUser.id) &&\n+┊   ┊307┊        message.recipients.find(recipient => recipient.userId === currentUser.id && !recipient.readAt))\n ┊309┊308┊      .length,\n ┊310┊309┊    isGroup: (chat: Chat): boolean => !!chat.name,\n ┊311┊310┊  },\n```\n```diff\n@@ -313,7 +312,7 @@\n ┊313┊312┊    chat: (message: Message): Chat | null => chats.find(chat => message.chatId === chat.id) || null,\n ┊314┊313┊    sender: (message: Message): User | null => users.find(user => user.id === message.senderId) || null,\n ┊315┊314┊    holders: (message: Message): User[] => users.filter(user => message.holderIds.includes(user.id)),\n-┊316┊   ┊    ownership: (message: Message): boolean => message.senderId === currentUser,\n+┊   ┊315┊    ownership: (message: Message, args: any, {user: currentUser}: {user: User}): boolean => message.senderId === currentUser.id,\n ┊317┊316┊  },\n ┊318┊317┊  Recipient: {\n ┊319┊318┊    user: (recipient: Recipient): User | null => users.find(user => recipient.userId === user.id) || null,\n```\n\n[}]: #\n\nIn the resolvers we're basically making use of the user object taken from the context.\n\n## Client\n\nLet's start installing `@angular/flex-layout`, because we will use it later:\n\n    $ npm install @angular/flex-layout\n\nFirst of all we need to create an HTTP Interceptor, which will intercept every HTTP request and will add authentication headers.\nFor the moment we still don't have those headers, but we are going to store them in the LocalStorage later.\nWe are also creating an AuthGuard, which we will use to stop the user from reaching unauthorized Routes.\nThe AuthGuard will simply look for the presence of the Authentication Header, but will not guarantee that the header is authentic.\nThis is no problem, because client side AuthGuards are not safe by design and the real authentication will be done server side anyway.\nAuthGuards are here just to redirect the user to the Login page.\nThe service we are going to create will contain some auth methods we are going to use across the app.\n\n[{]: <helper> (diffStep \"10.1\" files=\"src/app/login/services\" module=\"client\")\n\n#### Step 10.1: Authentication\n\n##### Added src&#x2F;app&#x2F;login&#x2F;services&#x2F;auth.guard.ts\n```diff\n@@ -0,0 +1,18 @@\n+┊  ┊ 1┊import {Injectable} from '@angular/core';\n+┊  ┊ 2┊import {CanActivate, Router} from '@angular/router';\n+┊  ┊ 3┊import {LoginService} from './login.service';\n+┊  ┊ 4┊\n+┊  ┊ 5┊@Injectable()\n+┊  ┊ 6┊export class AuthGuard implements CanActivate {\n+┊  ┊ 7┊  constructor(private router: Router,\n+┊  ┊ 8┊              private loginService: LoginService) {}\n+┊  ┊ 9┊\n+┊  ┊10┊  canActivate() {\n+┊  ┊11┊    if (this.loginService.getAuthHeader()) {\n+┊  ┊12┊      return true;\n+┊  ┊13┊    } else {\n+┊  ┊14┊      this.router.navigate(['/login']);\n+┊  ┊15┊      return false;\n+┊  ┊16┊    }\n+┊  ┊17┊  }\n+┊  ┊18┊}\n```\n\n##### Added src&#x2F;app&#x2F;login&#x2F;services&#x2F;auth.interceptor.ts\n```diff\n@@ -0,0 +1,20 @@\n+┊  ┊ 1┊import {Injectable} from '@angular/core';\n+┊  ┊ 2┊import {HttpEvent, HttpHandler, HttpInterceptor, HttpRequest} from '@angular/common/http';\n+┊  ┊ 3┊import {Observable} from 'rxjs';\n+┊  ┊ 4┊import {LoginService} from './login.service';\n+┊  ┊ 5┊\n+┊  ┊ 6┊@Injectable()\n+┊  ┊ 7┊export class AuthInterceptor implements HttpInterceptor {\n+┊  ┊ 8┊  constructor(private loginService: LoginService) {}\n+┊  ┊ 9┊  intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n+┊  ┊10┊    const auth = this.loginService.getAuthHeader();\n+┊  ┊11┊    if (auth) {\n+┊  ┊12┊      request = request.clone({\n+┊  ┊13┊        setHeaders: {\n+┊  ┊14┊          Authorization: auth,\n+┊  ┊15┊        }\n+┊  ┊16┊      });\n+┊  ┊17┊    }\n+┊  ┊18┊    return next.handle(request);\n+┊  ┊19┊  }\n+┊  ┊20┊}\n```\n\n##### Added src&#x2F;app&#x2F;login&#x2F;services&#x2F;login.service.ts\n```diff\n@@ -0,0 +1,24 @@\n+┊  ┊ 1┊import { Injectable } from '@angular/core';\n+┊  ┊ 2┊import {User} from '../../../types';\n+┊  ┊ 3┊\n+┊  ┊ 4┊@Injectable()\n+┊  ┊ 5┊export class LoginService {\n+┊  ┊ 6┊\n+┊  ┊ 7┊  constructor() { }\n+┊  ┊ 8┊\n+┊  ┊ 9┊  storeAuthHeader(auth: string) {\n+┊  ┊10┊    localStorage.setItem('Authorization', auth);\n+┊  ┊11┊  }\n+┊  ┊12┊\n+┊  ┊13┊  getAuthHeader(): string {\n+┊  ┊14┊    return localStorage.getItem('Authorization');\n+┊  ┊15┊  }\n+┊  ┊16┊\n+┊  ┊17┊  storeUser(user: User) {\n+┊  ┊18┊    localStorage.setItem('user', JSON.stringify(user));\n+┊  ┊19┊  }\n+┊  ┊20┊\n+┊  ┊21┊  getUser(): User {\n+┊  ┊22┊    return JSON.parse(localStorage.getItem('user'));\n+┊  ┊23┊  }\n+┊  ┊24┊}\n```\n\n[}]: #\n\nNow it's time to create a SignIn/SignUp component. Since we use Passport in the server we are going to make REST calls for the authentication, instead of using GraphQL.\nSince we use Basic Auth we will simply combine the username and the password together to create the authentication header.\nWe will also store the response from the server, which will contain the user information like the ID, etc. which we are going to need later.\n\n[{]: <helper> (diffStep \"10.1\" files=\"src/app/login/containers, src/app/login/login.module.ts\" module=\"client\")\n\n#### Step 10.1: Authentication\n\n##### Added src&#x2F;app&#x2F;login&#x2F;containers&#x2F;login.component.scss\n```diff\n@@ -0,0 +1,18 @@\n+┊  ┊ 1┊:host {\n+┊  ┊ 2┊  display: block;\n+┊  ┊ 3┊}\n+┊  ┊ 4┊\n+┊  ┊ 5┊form:first-of-type {\n+┊  ┊ 6┊  margin-top: 24px;\n+┊  ┊ 7┊  margin-bottom: 48px;\n+┊  ┊ 8┊}\n+┊  ┊ 9┊\n+┊  ┊10┊label {\n+┊  ┊11┊  display: block;\n+┊  ┊12┊  margin-top: 4px;\n+┊  ┊13┊  margin-bottom: 4px;\n+┊  ┊14┊}\n+┊  ┊15┊\n+┊  ┊16┊.error {\n+┊  ┊17┊  color: red;\n+┊  ┊18┊}\n```\n\n##### Added src&#x2F;app&#x2F;login&#x2F;containers&#x2F;login.component.ts\n```diff\n@@ -0,0 +1,133 @@\n+┊   ┊  1┊import {Component} from '@angular/core';\n+┊   ┊  2┊import {HttpClient} from '@angular/common/http';\n+┊   ┊  3┊import {FormBuilder, Validators} from '@angular/forms';\n+┊   ┊  4┊// import {matchOtherValidator} from '@moebius/ng-validators';\n+┊   ┊  5┊import {Router} from '@angular/router';\n+┊   ┊  6┊import {User} from '../../../types';\n+┊   ┊  7┊import {LoginService} from '../services/login.service';\n+┊   ┊  8┊\n+┊   ┊  9┊@Component({\n+┊   ┊ 10┊  selector: 'app-login',\n+┊   ┊ 11┊  template: `\n+┊   ┊ 12┊    <form (ngSubmit)=\"signIn()\" [formGroup]=\"signInForm\" novalidate>\n+┊   ┊ 13┊      <fieldset fxLayout=\"column\" fxLayoutGap=\"17px\">\n+┊   ┊ 14┊        <legend>Sign in</legend>\n+┊   ┊ 15┊        <div>\n+┊   ┊ 16┊          <label>Username</label>\n+┊   ┊ 17┊          <input formControlName=\"username\" autocomplete=\"username\" type=\"text\">\n+┊   ┊ 18┊        </div>\n+┊   ┊ 19┊        <div class=\"error\" *ngIf=\"signInForm.get('username').hasError('required') && signInForm.get('username').touched\">\n+┊   ┊ 20┊          Username is required\n+┊   ┊ 21┊        </div>\n+┊   ┊ 22┊\n+┊   ┊ 23┊        <div>\n+┊   ┊ 24┊          <label>Password</label>\n+┊   ┊ 25┊          <input formControlName=\"password\" autocomplete=\"current-password\" type=\"password\">\n+┊   ┊ 26┊        </div>\n+┊   ┊ 27┊        <div class=\"error\" *ngIf=\"signInForm.get('password').hasError('required') && signInForm.get('password').touched\">\n+┊   ┊ 28┊          Password is required\n+┊   ┊ 29┊        </div>\n+┊   ┊ 30┊\n+┊   ┊ 31┊        <button type=\"submit\" [disabled]=\"signInForm.invalid\">Sign in</button>\n+┊   ┊ 32┊      </fieldset>\n+┊   ┊ 33┊    </form>\n+┊   ┊ 34┊\n+┊   ┊ 35┊    <form (ngSubmit)=\"signUp()\" [formGroup]=\"signUpForm\" novalidate>\n+┊   ┊ 36┊      <fieldset fxLayout=\"column\" fxLayoutGap=\"17px\">\n+┊   ┊ 37┊        <legend>Sign up</legend>\n+┊   ┊ 38┊        <div>\n+┊   ┊ 39┊          <label>Name</label>\n+┊   ┊ 40┊          <input formControlName=\"name\" type=\"text\">\n+┊   ┊ 41┊        </div>\n+┊   ┊ 42┊\n+┊   ┊ 43┊        <div>\n+┊   ┊ 44┊          <label>Username</label>\n+┊   ┊ 45┊          <input formControlName=\"username\" autocomplete=\"username\" type=\"text\">\n+┊   ┊ 46┊        </div>\n+┊   ┊ 47┊        <div class=\"error\" *ngIf=\"signUpForm.get('username').hasError('required') && signUpForm.get('username').touched\">\n+┊   ┊ 48┊          Username is required\n+┊   ┊ 49┊        </div>\n+┊   ┊ 50┊\n+┊   ┊ 51┊        <div>\n+┊   ┊ 52┊          <label>Password</label>\n+┊   ┊ 53┊          <input formControlName=\"newPassword\" autocomplete=\"new-password\" type=\"password\">\n+┊   ┊ 54┊        </div>\n+┊   ┊ 55┊        <div class=\"error\" *ngIf=\"signUpForm.get('newPassword').hasError('required') && signUpForm.get('newPassword').touched\">\n+┊   ┊ 56┊          Password is required\n+┊   ┊ 57┊        </div>\n+┊   ┊ 58┊\n+┊   ┊ 59┊        <div>\n+┊   ┊ 60┊          <label>Password</label>\n+┊   ┊ 61┊          <input formControlName=\"confirmPassword\" type=\"password\">\n+┊   ┊ 62┊        </div>\n+┊   ┊ 63┊        <div class=\"error\" *ngIf=\"signUpForm.get('confirmPassword').hasError('required') && signUpForm.get('confirmPassword').touched\">\n+┊   ┊ 64┊          Passwords must match\n+┊   ┊ 65┊        </div>\n+┊   ┊ 66┊\n+┊   ┊ 67┊        <button type=\"submit\" [disabled]=\"signUpForm.invalid\">Sign up</button>\n+┊   ┊ 68┊      </fieldset>\n+┊   ┊ 69┊    </form>\n+┊   ┊ 70┊  `,\n+┊   ┊ 71┊  styleUrls: ['./login.component.scss'],\n+┊   ┊ 72┊})\n+┊   ┊ 73┊export class LoginComponent {\n+┊   ┊ 74┊  signInForm = this.fb.group({\n+┊   ┊ 75┊    username: [null, [\n+┊   ┊ 76┊      Validators.required,\n+┊   ┊ 77┊    ]],\n+┊   ┊ 78┊    password: [null, [\n+┊   ┊ 79┊      Validators.required,\n+┊   ┊ 80┊    ]],\n+┊   ┊ 81┊  });\n+┊   ┊ 82┊\n+┊   ┊ 83┊  signUpForm = this.fb.group({\n+┊   ┊ 84┊    name: [null, [\n+┊   ┊ 85┊      Validators.required,\n+┊   ┊ 86┊    ]],\n+┊   ┊ 87┊    username: [null, [\n+┊   ┊ 88┊      Validators.required,\n+┊   ┊ 89┊    ]],\n+┊   ┊ 90┊    newPassword: [null, [\n+┊   ┊ 91┊      Validators.required,\n+┊   ┊ 92┊    ]],\n+┊   ┊ 93┊    confirmPassword: [null, [\n+┊   ┊ 94┊      Validators.required,\n+┊   ┊ 95┊      // matchOtherValidator('newPassword'),\n+┊   ┊ 96┊    ]],\n+┊   ┊ 97┊  });\n+┊   ┊ 98┊\n+┊   ┊ 99┊  constructor(private http: HttpClient,\n+┊   ┊100┊              private fb: FormBuilder,\n+┊   ┊101┊              private router: Router,\n+┊   ┊102┊              private loginService: LoginService) {}\n+┊   ┊103┊\n+┊   ┊104┊  signIn() {\n+┊   ┊105┊    const {username, password} = this.signInForm.value;\n+┊   ┊106┊    const auth = `Basic ${btoa(`${username}:${password}`)}`;\n+┊   ┊107┊    this.http.post('http://localhost:3000/signin', null, {\n+┊   ┊108┊      headers: {\n+┊   ┊109┊        Authorization: auth,\n+┊   ┊110┊      }\n+┊   ┊111┊    }).subscribe((user: User) => {\n+┊   ┊112┊      this.loginService.storeAuthHeader(auth);\n+┊   ┊113┊      this.loginService.storeUser(user);\n+┊   ┊114┊      this.router.navigate(['/chats']);\n+┊   ┊115┊    }, err => console.error(err));\n+┊   ┊116┊  }\n+┊   ┊117┊\n+┊   ┊118┊  signUp() {\n+┊   ┊119┊    const {username, newPassword: password, name} = this.signInForm.value;\n+┊   ┊120┊    const auth = `Basic ${btoa(`${username}:${password}`)}`;\n+┊   ┊121┊    this.http.post('http://localhost:3000/signup', {\n+┊   ┊122┊      name,\n+┊   ┊123┊    }, {\n+┊   ┊124┊      headers: {\n+┊   ┊125┊        Authorization: auth,\n+┊   ┊126┊      }\n+┊   ┊127┊    }).subscribe((user: User) => {\n+┊   ┊128┊      this.loginService.storeAuthHeader(auth);\n+┊   ┊129┊      this.loginService.storeUser(user);\n+┊   ┊130┊      this.router.navigate(['/chats']);\n+┊   ┊131┊    }, err => console.error(err));\n+┊   ┊132┊  }\n+┊   ┊133┊}\n```\n\n##### Added src&#x2F;app&#x2F;login&#x2F;login.module.ts\n```diff\n@@ -0,0 +1,52 @@\n+┊  ┊ 1┊import {RouterModule, Routes} from '@angular/router';\n+┊  ┊ 2┊import {NgModule} from '@angular/core';\n+┊  ┊ 3┊import {TruncateModule} from 'ng2-truncate';\n+┊  ┊ 4┊import {MatButtonModule, MatIconModule, MatListModule, MatMenuModule} from '@angular/material';\n+┊  ┊ 5┊import {SharedModule} from '../shared/shared.module';\n+┊  ┊ 6┊import {BrowserModule} from '@angular/platform-browser';\n+┊  ┊ 7┊import {FormsModule, ReactiveFormsModule} from '@angular/forms';\n+┊  ┊ 8┊import {BrowserAnimationsModule} from '@angular/platform-browser/animations';\n+┊  ┊ 9┊import {LoginComponent} from './containers/login.component';\n+┊  ┊10┊import {FlexLayoutModule} from '@angular/flex-layout';\n+┊  ┊11┊import {AuthInterceptor} from './services/auth.interceptor';\n+┊  ┊12┊import {AuthGuard} from './services/auth.guard';\n+┊  ┊13┊import {LoginService} from './services/login.service';\n+┊  ┊14┊\n+┊  ┊15┊\n+┊  ┊16┊const routes: Routes = [\n+┊  ┊17┊  {path: 'login', component: LoginComponent},\n+┊  ┊18┊];\n+┊  ┊19┊\n+┊  ┊20┊@NgModule({\n+┊  ┊21┊  declarations: [\n+┊  ┊22┊    LoginComponent,\n+┊  ┊23┊  ],\n+┊  ┊24┊  imports: [\n+┊  ┊25┊    BrowserModule,\n+┊  ┊26┊    // Material\n+┊  ┊27┊    MatMenuModule,\n+┊  ┊28┊    MatIconModule,\n+┊  ┊29┊    MatButtonModule,\n+┊  ┊30┊    MatListModule,\n+┊  ┊31┊    // Animations\n+┊  ┊32┊    BrowserAnimationsModule,\n+┊  ┊33┊    // Flex layout\n+┊  ┊34┊    FlexLayoutModule,\n+┊  ┊35┊    // Routing\n+┊  ┊36┊    RouterModule.forChild(routes),\n+┊  ┊37┊    // Forms\n+┊  ┊38┊    FormsModule,\n+┊  ┊39┊    ReactiveFormsModule,\n+┊  ┊40┊    // Truncate Pipe\n+┊  ┊41┊    TruncateModule,\n+┊  ┊42┊    // Feature modules\n+┊  ┊43┊    SharedModule,\n+┊  ┊44┊  ],\n+┊  ┊45┊  providers: [\n+┊  ┊46┊    LoginService,\n+┊  ┊47┊    AuthInterceptor,\n+┊  ┊48┊    AuthGuard,\n+┊  ┊49┊  ],\n+┊  ┊50┊})\n+┊  ┊51┊export class LoginModule {\n+┊  ┊52┊}\n```\n\n[}]: #\n\nNow it's time use the Interceptor we just created:\n\n[{]: <helper> (diffStep \"10.1\" files=\"src/app/app.module.ts\" module=\"client\")\n\n#### Step 10.1: Authentication\n\n##### Changed src&#x2F;app&#x2F;app.module.ts\n```diff\n@@ -2,7 +2,7 @@\n ┊2┊2┊import { NgModule } from '@angular/core';\n ┊3┊3┊\n ┊4┊4┊import { AppComponent } from './app.component';\n-┊5┊ ┊import {HttpClientModule} from '@angular/common/http';\n+┊ ┊5┊import {HTTP_INTERCEPTORS, HttpClientModule} from '@angular/common/http';\n ┊6┊6┊import {HttpLink, HttpLinkModule, Options} from 'apollo-angular-link-http';\n ┊7┊7┊import {Apollo, ApolloModule} from 'apollo-angular';\n ┊8┊8┊import {defaultDataIdFromObject, InMemoryCache} from 'apollo-cache-inmemory';\n```\n```diff\n@@ -10,6 +10,8 @@\n ┊10┊10┊import {RouterModule, Routes} from '@angular/router';\n ┊11┊11┊import {ChatViewerModule} from './chat-viewer/chat-viewer.module';\n ┊12┊12┊import {ChatsCreationModule} from './chats-creation/chats-creation.module';\n+┊  ┊13┊import {LoginModule} from './login/login.module';\n+┊  ┊14┊import {AuthInterceptor} from './login/services/auth.interceptor';\n ┊13┊15┊const routes: Routes = [];\n ┊14┊16┊\n ┊15┊17┊@NgModule({\n```\n```diff\n@@ -28,8 +30,15 @@\n ┊28┊30┊    ChatsListerModule,\n ┊29┊31┊    ChatViewerModule,\n ┊30┊32┊    ChatsCreationModule,\n+┊  ┊33┊    LoginModule,\n+┊  ┊34┊  ],\n+┊  ┊35┊  providers: [\n+┊  ┊36┊    {\n+┊  ┊37┊      provide: HTTP_INTERCEPTORS,\n+┊  ┊38┊      useClass: AuthInterceptor,\n+┊  ┊39┊      multi: true,\n+┊  ┊40┊    },\n ┊31┊41┊  ],\n-┊32┊  ┊  providers: [],\n ┊33┊42┊  bootstrap: [AppComponent]\n ┊34┊43┊})\n ┊35┊44┊export class AppModule {\n```\n\n[}]: #\n\nAs well as the AuthGuard:\n\n[{]: <helper> (diffStep \"10.1\" files=\"src/app/chat-viewer/chat-viewer.module.ts, src/app/chats-creation/chats-creation.module.ts, src/app/chats-lister/chats-lister.module.ts\" module=\"client\")\n\n#### Step 10.1: Authentication\n\n##### Changed src&#x2F;app&#x2F;chat-viewer&#x2F;chat-viewer.module.ts\n```diff\n@@ -12,11 +12,12 @@\n ┊12┊12┊import {NewMessageComponent} from './components/new-message/new-message.component';\n ┊13┊13┊import {SharedModule} from '../shared/shared.module';\n ┊14┊14┊import {NgxSelectableListModule} from 'ngx-selectable-list';\n+┊  ┊15┊import {AuthGuard} from '../login/services/auth.guard';\n ┊15┊16┊\n ┊16┊17┊const routes: Routes = [\n ┊17┊18┊  {\n ┊18┊19┊    path: 'chat', children: [\n-┊19┊  ┊      {path: ':id', component: ChatComponent},\n+┊  ┊20┊      {path: ':id', canActivate: [AuthGuard], component: ChatComponent},\n ┊20┊21┊    ],\n ┊21┊22┊  },\n ┊22┊23┊];\n```\n\n##### Changed src&#x2F;app&#x2F;chats-creation&#x2F;chats-creation.module.ts\n```diff\n@@ -16,10 +16,11 @@\n ┊16┊16┊import {NewGroupDetailsComponent} from './components/new-group-details/new-group-details.component';\n ┊17┊17┊import {SharedModule} from '../shared/shared.module';\n ┊18┊18┊import {NgxSelectableListModule} from 'ngx-selectable-list';\n+┊  ┊19┊import {AuthGuard} from '../login/services/auth.guard';\n ┊19┊20┊\n ┊20┊21┊const routes: Routes = [\n-┊21┊  ┊  {path: 'new-chat', component: NewChatComponent},\n-┊22┊  ┊  {path: 'new-group', component: NewGroupComponent},\n+┊  ┊22┊  {path: 'new-chat', canActivate: [AuthGuard], component: NewChatComponent},\n+┊  ┊23┊  {path: 'new-group', canActivate: [AuthGuard], component: NewGroupComponent},\n ┊23┊24┊];\n ┊24┊25┊\n ┊25┊26┊@NgModule({\n```\n\n##### Changed src&#x2F;app&#x2F;chats-lister&#x2F;chats-lister.module.ts\n```diff\n@@ -12,10 +12,11 @@\n ┊12┊12┊import {TruncateModule} from 'ng2-truncate';\n ┊13┊13┊import {SharedModule} from '../shared/shared.module';\n ┊14┊14┊import {NgxSelectableListModule} from 'ngx-selectable-list';\n+┊  ┊15┊import {AuthGuard} from '../login/services/auth.guard';\n ┊15┊16┊\n ┊16┊17┊const routes: Routes = [\n ┊17┊18┊  {path: '', redirectTo: 'chats', pathMatch: 'full'},\n-┊18┊  ┊  {path: 'chats', component: ChatsComponent},\n+┊  ┊19┊  {path: 'chats', canActivate: [AuthGuard], component: ChatsComponent},\n ┊19┊20┊];\n ┊20┊21┊\n ┊21┊22┊@NgModule({\n```\n\n[}]: #\n\nLast but not the least we need to fix our main service in order to not use the hardcoded user anymore. Instead we will use our Login service to read the user info from the LocalStorage.\n\n[{]: <helper> (diffStep \"10.1\" files=\"src/app/services/chats.service.ts\" module=\"client\")\n\n#### Step 10.1: Authentication\n\n##### Changed src&#x2F;app&#x2F;services&#x2F;chats.service.ts\n```diff\n@@ -16,9 +16,7 @@\n ┊16┊16┊import {addGroupMutation} from '../../graphql/addGroup.mutation';\n ┊17┊17┊import * as moment from 'moment';\n ┊18┊18┊import {FetchResult} from 'apollo-link';\n-┊19┊  ┊\n-┊20┊  ┊const currentUserId = '1';\n-┊21┊  ┊const currentUserName = 'Ethan Gonzalez';\n+┊  ┊19┊import {LoginService} from '../login/services/login.service';\n ┊22┊20┊\n ┊23┊21┊@Injectable()\n ┊24┊22┊export class ChatsService {\n```\n```diff\n@@ -29,7 +27,8 @@\n ┊29┊27┊  getChatWqSubject: AsyncSubject<QueryRef<GetChat.Query>>;\n ┊30┊28┊  addChat$: Observable<FetchResult<AddChat.Mutation | AddGroup.Mutation>>;\n ┊31┊29┊\n-┊32┊  ┊  constructor(private apollo: Apollo) {\n+┊  ┊30┊  constructor(private apollo: Apollo,\n+┊  ┊31┊              private loginService: LoginService) {\n ┊33┊32┊    this.getChatsWq = this.apollo.watchQuery<GetChats.Query>(<WatchQueryOptions>{\n ┊34┊33┊      query: getChatsQuery,\n ┊35┊34┊      variables: {\n```\n```diff\n@@ -111,11 +110,11 @@\n ┊111┊110┊        addMessage: {\n ┊112┊111┊          id: ChatsService.getRandomId(),\n ┊113┊112┊          __typename: 'Message',\n-┊114┊   ┊          senderId: currentUserId,\n+┊   ┊113┊          senderId: this.loginService.getUser().id,\n ┊115┊114┊          sender: {\n-┊116┊   ┊            id: currentUserId,\n+┊   ┊115┊            id: this.loginService.getUser().id,\n ┊117┊116┊            __typename: 'User',\n-┊118┊   ┊            name: currentUserName,\n+┊   ┊117┊            name: this.loginService.getUser().name,\n ┊119┊118┊          },\n ┊120┊119┊          content,\n ┊121┊120┊          createdAt: moment().unix(),\n```\n```diff\n@@ -286,7 +285,7 @@\n ┊286┊285┊  // Checks if the chat is listed for the current user and returns the id\n ┊287┊286┊  getChatId(recipientId: string) {\n ┊288┊287┊    const _chat = this.chats.find(chat => {\n-┊289┊   ┊      return !chat.isGroup && !!chat.allTimeMembers.find(user => user.id === currentUserId) &&\n+┊   ┊288┊      return !chat.isGroup && !!chat.allTimeMembers.find(user => user.id === this.loginService.getUser().id) &&\n ┊290┊289┊        !!chat.allTimeMembers.find(user => user.id === recipientId);\n ┊291┊290┊    });\n ┊292┊291┊    return _chat ? _chat.id : false;\n```\n```diff\n@@ -307,7 +306,7 @@\n ┊307┊306┊          picture: users.find(user => user.id === recipientId).picture,\n ┊308┊307┊          allTimeMembers: [\n ┊309┊308┊            {\n-┊310┊   ┊              id: currentUserId,\n+┊   ┊309┊              id: this.loginService.getUser().id,\n ┊311┊310┊              __typename: 'User',\n ┊312┊311┊            },\n ┊313┊312┊            {\n```\n```diff\n@@ -359,10 +358,10 @@\n ┊359┊358┊          __typename: 'Chat',\n ┊360┊359┊          name: groupName,\n ┊361┊360┊          picture: 'https://randomuser.me/api/portraits/thumb/lego/1.jpg',\n-┊362┊   ┊          userIds: [currentUserId, recipientIds],\n+┊   ┊361┊          userIds: [this.loginService.getUser().id, recipientIds],\n ┊363┊362┊          allTimeMembers: [\n ┊364┊363┊            {\n-┊365┊   ┊              id: currentUserId,\n+┊   ┊364┊              id: this.loginService.getUser().id,\n ┊366┊365┊              __typename: 'User',\n ┊367┊366┊            },\n ┊368┊367┊            ...recipientIds.map(id => ({id, __typename: 'User'})),\n```\n\n[}]: #\n\nWe also need to fix our tests:\n\n[{]: <helper> (diffStep \"10.1\" files=\"src/app/chat-viewer/containers/chat/chat.component.spec.ts, src/app/chats-lister/containers/chats/chats.component.spec.ts, src/app/services/chats.service.spec.ts\" module=\"client\")\n\n#### Step 10.1: Authentication\n\n##### Changed src&#x2F;app&#x2F;chat-viewer&#x2F;containers&#x2F;chat&#x2F;chat.component.spec.ts\n```diff\n@@ -18,6 +18,7 @@\n ┊18┊18┊import {MessagesListComponent} from '../../components/messages-list/messages-list.component';\n ┊19┊19┊import {MessageItemComponent} from '../../components/message-item/message-item.component';\n ┊20┊20┊import {NgxSelectableListModule} from 'ngx-selectable-list';\n+┊  ┊21┊import {LoginService} from '../../../login/services/login.service';\n ┊21┊22┊\n ┊22┊23┊describe('ChatComponent', () => {\n ┊23┊24┊  let component: ChatComponent;\n```\n```diff\n@@ -120,7 +121,8 @@\n ┊120┊121┊            params: of({ id: chat.id }),\n ┊121┊122┊            queryParams: of({}),\n ┊122┊123┊          }\n-┊123┊   ┊        }\n+┊   ┊124┊        },\n+┊   ┊125┊        LoginService,\n ┊124┊126┊      ],\n ┊125┊127┊      schemas: [NO_ERRORS_SCHEMA]\n ┊126┊128┊    })\n```\n\n##### Changed src&#x2F;app&#x2F;chats-lister&#x2F;containers&#x2F;chats&#x2F;chats.component.spec.ts\n```diff\n@@ -14,6 +14,7 @@\n ┊14┊14┊import {By} from '@angular/platform-browser';\n ┊15┊15┊import {RouterTestingModule} from '@angular/router/testing';\n ┊16┊16┊import {NgxSelectableListModule} from 'ngx-selectable-list';\n+┊  ┊17┊import {LoginService} from '../../../login/services/login.service';\n ┊17┊18┊\n ┊18┊19┊describe('ChatsComponent', () => {\n ┊19┊20┊  let component: ChatsComponent;\n```\n```diff\n@@ -336,6 +337,7 @@\n ┊336┊337┊      providers: [\n ┊337┊338┊        ChatsService,\n ┊338┊339┊        Apollo,\n+┊   ┊340┊        LoginService,\n ┊339┊341┊      ],\n ┊340┊342┊      schemas: [NO_ERRORS_SCHEMA]\n ┊341┊343┊    })\n```\n\n##### Changed src&#x2F;app&#x2F;services&#x2F;chats.service.spec.ts\n```diff\n@@ -5,6 +5,7 @@\n ┊ 5┊ 5┊import {HttpLink, HttpLinkModule, Options} from 'apollo-angular-link-http';\n ┊ 6┊ 6┊import {HttpClientTestingModule, HttpTestingController} from '@angular/common/http/testing';\n ┊ 7┊ 7┊import {defaultDataIdFromObject, InMemoryCache} from 'apollo-cache-inmemory';\n+┊  ┊ 8┊import {LoginService} from '../login/services/login.service';\n ┊ 8┊ 9┊\n ┊ 9┊10┊describe('ChatsService', () => {\n ┊10┊11┊  let httpMock: HttpTestingController;\n```\n```diff\n@@ -312,6 +313,7 @@\n ┊312┊313┊      providers: [\n ┊313┊314┊        ChatsService,\n ┊314┊315┊        Apollo,\n+┊   ┊316┊        LoginService,\n ┊315┊317┊      ]\n ┊316┊318┊    });\n ┊317┊319┊\n```\n\n[}]: #"
          },
          {
            "manualTitle": "Step 15: Subscriptions",
            "stepRevision": "a708db2a7c7dc2853bca2678b64389821efe4b95",
            "manualView": "## Server\n\nIn order to use WebSockets we will need to install a couple of packages:\n\n    npm install graphql-subscriptions subscriptions-transport-ws\n\nOur GraphQL server will use WebSockets only for subscriptions, while using HTTP for everything else. That means that we will have to add subscriptions on a specific path.\nWe're using `connectionParams` for the authentication over WebSockets, that means that we won't be using the `Passport` framework at all. Instead we will use the `onConnect` hook to manually validate the parameters provided by the user to either validate the WebSocket connection or throw an error.\nWe will also return the user object we retrieved from the db, to let the resolvers know who is the current user.\n\n[{]: <helper> (diffStep \"5.1\" files=\"index.ts\" module=\"server\")\n\n#### Step 5.1: Subscriptions\n\n##### Changed index.ts\n```diff\n@@ -7,6 +7,9 @@\n ┊ 7┊ 7┊import * as basicStrategy from 'passport-http';\n ┊ 8┊ 8┊import * as bcrypt from 'bcrypt-nodejs';\n ┊ 9┊ 9┊import { db, User } from \"./db\";\n+┊  ┊10┊import { createServer } from \"http\";\n+┊  ┊11┊import { SubscriptionServer } from \"subscriptions-transport-ws\";\n+┊  ┊12┊import { execute, subscribe } from \"graphql\";\n ┊10┊13┊\n ┊11┊14┊let users = db.users;\n ┊12┊15┊\n```\n```diff\n@@ -76,4 +79,36 @@\n ┊ 76┊ 79┊  endpointURL: '/graphql',\n ┊ 77┊ 80┊}));\n ┊ 78┊ 81┊\n-┊ 79┊   ┊app.listen(PORT);\n+┊   ┊ 82┊// Wrap the Express server\n+┊   ┊ 83┊const ws = createServer(app);\n+┊   ┊ 84┊ws.listen(PORT, () => {\n+┊   ┊ 85┊  console.log(`Apollo Server is now running on http://localhost:${PORT}`);\n+┊   ┊ 86┊  // Set up the WebSocket for handling GraphQL subscriptions\n+┊   ┊ 87┊  new SubscriptionServer({\n+┊   ┊ 88┊    onConnect: (connectionParams: any, webSocket: any) => {\n+┊   ┊ 89┊      if (connectionParams.authToken) {\n+┊   ┊ 90┊        // create a buffer and tell it the data coming in is base64\n+┊   ┊ 91┊        const buf = new Buffer(connectionParams.authToken.split(' ')[1], 'base64');\n+┊   ┊ 92┊        // read it back out as a string\n+┊   ┊ 93┊        const [username, password]: string[] = buf.toString().split(':');\n+┊   ┊ 94┊        if (username && password) {\n+┊   ┊ 95┊          const user = users.find(user => user.username == username);\n+┊   ┊ 96┊\n+┊   ┊ 97┊          if (user && validPassword(password, user.password)) {\n+┊   ┊ 98┊            // Set context for the WebSocket\n+┊   ┊ 99┊            return {user};\n+┊   ┊100┊          } else {\n+┊   ┊101┊            throw new Error('Wrong credentials!');\n+┊   ┊102┊          }\n+┊   ┊103┊        }\n+┊   ┊104┊      }\n+┊   ┊105┊      throw new Error('Missing auth token!');\n+┊   ┊106┊    },\n+┊   ┊107┊    execute,\n+┊   ┊108┊    subscribe,\n+┊   ┊109┊    schema\n+┊   ┊110┊  }, {\n+┊   ┊111┊    server: ws,\n+┊   ┊112┊    path: '/subscriptions',\n+┊   ┊113┊  });\n+┊   ┊114┊});\n```\n\n[}]: #\n\nWe will use the `PubSub` implementation from `graphql-subscriptions`, and we will connect it to `subscribe` executor of `graphql`, and publish the data using `subscriptions-transport-ws` (a WebSocket server and client library for GraphQL that can be used directly in a JavaScript app or wired up to a fully-featured GraphQL client like Apollo).\n\nThe process of setting up a GraphQL subscriptions server consist of the following steps:\n\n1. Declaring subscriptions in the GraphQL schema\n2. Setup a PubSub instance that our server will publish new events to\n3. Hook together `PubSub` event and GraphQL subscription.\n4. Setting up `SubscriptionsServer`, a transport between the server and the clients\n\n[{]: <helper> (diffStep \"5.1\" files=\"schema/typeDefs.ts\" module=\"server\")\n\n#### Step 5.1: Subscriptions\n\n##### Changed schema&#x2F;typeDefs.ts\n```diff\n@@ -7,6 +7,11 @@\n ┊ 7┊ 7┊    chat(chatId: ID!): Chat\n ┊ 8┊ 8┊  }\n ┊ 9┊ 9┊\n+┊  ┊10┊  type Subscription {\n+┊  ┊11┊    messageAdded(chatId: ID): Message\n+┊  ┊12┊    chatAdded: Chat\n+┊  ┊13┊  }\n+┊  ┊14┊\n ┊10┊15┊  enum MessageType {\n ┊11┊16┊    LOCATION\n ┊12┊17┊    TEXT\n```\n\n[}]: #\n\nWe created two subscriptions: one to notify for new chats and one to notify for new messages.\n\n[{]: <helper> (diffStep \"5.1\" files=\"schema/resolvers.ts\" module=\"server\")\n\n#### Step 5.1: Subscriptions\n\n##### Changed schema&#x2F;resolvers.ts\n```diff\n@@ -1,14 +1,17 @@\n ┊ 1┊ 1┊import { Chat, db, Message, MessageType, Recipient, User } from \"../db\";\n ┊ 2┊ 2┊import { IResolvers } from \"graphql-tools/dist/Interfaces\";\n ┊ 3┊ 3┊import {\n-┊ 4┊  ┊  AddChatMutationArgs, AddGroupMutationArgs, AddMessageMutationArgs, ChatQueryArgs,\n+┊  ┊ 4┊  AddChatMutationArgs, AddGroupMutationArgs, AddMessageMutationArgs, ChatQueryArgs, MessageAddedSubscriptionArgs,\n ┊ 5┊ 5┊  RemoveChatMutationArgs, RemoveMessagesMutationArgs\n ┊ 6┊ 6┊} from \"../types\";\n ┊ 7┊ 7┊import * as moment from \"moment\";\n+┊  ┊ 8┊import { PubSub, withFilter } from \"graphql-subscriptions\";\n ┊ 8┊ 9┊\n ┊ 9┊10┊let users = db.users;\n ┊10┊11┊let chats = db.chats;\n ┊11┊12┊\n+┊  ┊13┊export const pubsub = new PubSub();\n+┊  ┊14┊\n ┊12┊15┊export const resolvers: IResolvers = {\n ┊13┊16┊  Query: {\n ┊14┊17┊    // Show all users for the moment.\n```\n```diff\n@@ -50,6 +53,7 @@\n ┊50┊53┊          messages: [],\n ┊51┊54┊        };\n ┊52┊55┊        chats.push(chat);\n+┊  ┊56┊\n ┊53┊57┊        return chat;\n ┊54┊58┊      }\n ┊55┊59┊    },\n```\n```diff\n@@ -73,6 +77,12 @@\n ┊73┊77┊        messages: [],\n ┊74┊78┊      };\n ┊75┊79┊      chats.push(chat);\n+┊  ┊80┊\n+┊  ┊81┊      pubsub.publish('chatAdded', {\n+┊  ┊82┊        creatorId: currentUser.id,\n+┊  ┊83┊        chatAdded: chat,\n+┊  ┊84┊      });\n+┊  ┊85┊\n ┊76┊86┊      return chat;\n ┊77┊87┊    },\n ┊78┊88┊    removeChat: (obj: any, {chatId}: RemoveChatMutationArgs, {user: currentUser}: {user: User}): number => {\n```\n```diff\n@@ -201,6 +211,11 @@\n ┊201┊211┊          });\n ┊202┊212┊\n ┊203┊213┊          holderIds = listingMemberIds;\n+┊   ┊214┊\n+┊   ┊215┊          pubsub.publish('chatAdded', {\n+┊   ┊216┊            creatorId: currentUser.id,\n+┊   ┊217┊            chatAdded: chat,\n+┊   ┊218┊          });\n ┊204┊219┊        }\n ┊205┊220┊      } else {\n ┊206┊221┊        // Group\n```\n```diff\n@@ -245,6 +260,10 @@\n ┊245┊260┊        return chat;\n ┊246┊261┊      });\n ┊247┊262┊\n+┊   ┊263┊      pubsub.publish('messageAdded', {\n+┊   ┊264┊        messageAdded: message,\n+┊   ┊265┊      });\n+┊   ┊266┊\n ┊248┊267┊      return message;\n ┊249┊268┊    },\n ┊250┊269┊    removeMessages: (obj: any, {chatId, messageIds, all}: RemoveMessagesMutationArgs, {user: currentUser}: {user: User}): number[] => {\n```\n```diff\n@@ -286,6 +305,21 @@\n ┊286┊305┊      return deletedIds;\n ┊287┊306┊    },\n ┊288┊307┊  },\n+┊   ┊308┊  Subscription: {\n+┊   ┊309┊    messageAdded: {\n+┊   ┊310┊      subscribe: withFilter(() => pubsub.asyncIterator('messageAdded'),\n+┊   ┊311┊        ({messageAdded}: {messageAdded: Message & {chat: {id: number}}}, {chatId}: MessageAddedSubscriptionArgs, {user: currentUser}: { user: User }) => {\n+┊   ┊312┊          return (!chatId || messageAdded.chat.id === Number(chatId)) &&\n+┊   ┊313┊            !!messageAdded.recipients.find((recipient: Recipient) => recipient.userId === currentUser.id);\n+┊   ┊314┊        }),\n+┊   ┊315┊    },\n+┊   ┊316┊    chatAdded: {\n+┊   ┊317┊      subscribe: withFilter(() => pubsub.asyncIterator('chatAdded'),\n+┊   ┊318┊        ({creatorId, chatAdded}: {creatorId: string, chatAdded: Chat}, variables: any, {user: currentUser}: { user: User }) => {\n+┊   ┊319┊          return Number(creatorId) !== currentUser.id && !chatAdded.listingMemberIds.includes(currentUser.id);\n+┊   ┊320┊        }),\n+┊   ┊321┊    }\n+┊   ┊322┊  },\n ┊289┊323┊  Chat: {\n ┊290┊324┊    name: (chat: Chat, args: any, {user: currentUser}: {user: User}): string => chat.name ? chat.name : users\n ┊291┊325┊      .find(user => user.id === chat.allTimeMemberIds.find(userId => userId !== currentUser.id))!.name,\n```\n\n[}]: #\n\nWe will publish a message to the `messageAdded` subscription every time that a user sends a message, then we will filter them according to the current user (we don't want to send someone else's messages).\nThe `chatAdded` subscription is similar: we will publish each time that a group gets created, but not when chats get created. This is because when a user creates a chat the chat doesn't appear to the other peer until he writes the first message. That's why we also publish when new messages get added (we first look if the other peer already gets the chat listed).\n\n## Client\n\nIn order to use WebSockets we will need to install a couple of dependencies:\n\n    $ npm install apollo-link-ws apollo-utilities subscriptions-transport-ws\n\nFirst let's create the queries for the GraphQL Subscriptions:\n\n[{]: <helper> (diffStep \"11.1\" files=\"src/graphql\" module=\"client\")\n\n#### Step 11.1: Subscriptions\n\n##### Added src&#x2F;graphql&#x2F;chatAdded.subscription.ts\n```diff\n@@ -0,0 +1,17 @@\n+┊  ┊ 1┊import gql from 'graphql-tag';\n+┊  ┊ 2┊import {fragments} from './fragment';\n+┊  ┊ 3┊\n+┊  ┊ 4┊// We use the gql tag to parse our query string into a query document\n+┊  ┊ 5┊export const chatAddedSubscription = gql`\n+┊  ┊ 6┊  subscription chatAdded {\n+┊  ┊ 7┊    chatAdded {\n+┊  ┊ 8┊      ...ChatWithoutMessages\n+┊  ┊ 9┊      messages {\n+┊  ┊10┊        ...Message\n+┊  ┊11┊      }\n+┊  ┊12┊    }\n+┊  ┊13┊  }\n+┊  ┊14┊\n+┊  ┊15┊  ${fragments['chatWithoutMessages']}\n+┊  ┊16┊  ${fragments['message']}\n+┊  ┊17┊`;\n```\n\n##### Added src&#x2F;graphql&#x2F;messageAdded.subscription.ts\n```diff\n@@ -0,0 +1,16 @@\n+┊  ┊ 1┊import gql from 'graphql-tag';\n+┊  ┊ 2┊import {fragments} from './fragment';\n+┊  ┊ 3┊\n+┊  ┊ 4┊// We use the gql tag to parse our query string into a query document\n+┊  ┊ 5┊export const messageAddedSubscription = gql`\n+┊  ┊ 6┊  subscription messageAdded($chatId: ID) {\n+┊  ┊ 7┊    messageAdded(chatId: $chatId) {\n+┊  ┊ 8┊      ...Message\n+┊  ┊ 9┊      chat {\n+┊  ┊10┊        id,\n+┊  ┊11┊      },\n+┊  ┊12┊    }\n+┊  ┊13┊  }\n+┊  ┊14┊\n+┊  ┊15┊  ${fragments['message']}\n+┊  ┊16┊`;\n```\n\n[}]: #\n\nThen we need to run `graphql-code-generator` to generate the types:\n\n    $ npm run generator\n\nNow we can update the chats service to update the getChats query every time that we receive a new chat from the subscription.\nWith GraphQL subscriptions your client will be alerted on push from the server and you should choose the pattern that fits your application the most:\n\n- Use it as a notification and run any logic you want when it fires, for example alerting the user or refetching data\n- Use the data sent along with the notification and merge it directly into the store (existing queries are automatically notified)\n\nWith subscribeToMore, you can easily do the latter. We will manipulate the store to add the newly created chat.\n\nWe will do to do the same for the newMessage subscription, but this time we will have to update two different queries in the store: getChats and getChat.\n\n[{]: <helper> (diffStep \"11.1\" files=\"src/app/services/chats.service.ts\" module=\"client\")\n\n#### Step 11.1: Subscriptions\n\n##### Changed src&#x2F;app&#x2F;services&#x2F;chats.service.ts\n```diff\n@@ -3,7 +3,10 @@\n ┊ 3┊ 3┊import {Apollo, QueryRef} from 'apollo-angular';\n ┊ 4┊ 4┊import {Injectable} from '@angular/core';\n ┊ 5┊ 5┊import {getChatsQuery} from '../../graphql/getChats.query';\n-┊ 6┊  ┊import {AddChat, AddGroup, AddMessage, GetChat, GetChats, GetUsers, RemoveAllMessages, RemoveChat, RemoveMessages} from '../../types';\n+┊  ┊ 6┊import {\n+┊  ┊ 7┊  AddChat, AddGroup, AddMessage, GetChat, GetChats, GetUsers, MessageAdded, RemoveAllMessages, RemoveChat,\n+┊  ┊ 8┊  RemoveMessages\n+┊  ┊ 9┊} from '../../types';\n ┊ 7┊10┊import {getChatQuery} from '../../graphql/getChat.query';\n ┊ 8┊11┊import {addMessageMutation} from '../../graphql/addMessage.mutation';\n ┊ 9┊12┊import {removeChatMutation} from '../../graphql/removeChat.mutation';\n```\n```diff\n@@ -17,6 +20,8 @@\n ┊17┊20┊import * as moment from 'moment';\n ┊18┊21┊import {FetchResult} from 'apollo-link';\n ┊19┊22┊import {LoginService} from '../login/services/login.service';\n+┊  ┊23┊import {chatAddedSubscription} from '../../graphql/chatAdded.subscription';\n+┊  ┊24┊import {messageAddedSubscription} from '../../graphql/messageAdded.subscription';\n ┊20┊25┊\n ┊21┊26┊@Injectable()\n ┊22┊27┊export class ChatsService {\n```\n```diff\n@@ -35,6 +40,55 @@\n ┊35┊40┊        amount: this.messagesAmount,\n ┊36┊41┊      },\n ┊37┊42┊    });\n+┊  ┊43┊\n+┊  ┊44┊    this.getChatsWq.subscribeToMore({\n+┊  ┊45┊      document: chatAddedSubscription,\n+┊  ┊46┊      updateQuery: (prev: GetChats.Query, { subscriptionData }) => {\n+┊  ┊47┊        if (!subscriptionData.data) {\n+┊  ┊48┊          return prev;\n+┊  ┊49┊        }\n+┊  ┊50┊\n+┊  ┊51┊        const newChat: GetChats.Chats = subscriptionData.data.chatAdded;\n+┊  ┊52┊\n+┊  ┊53┊        return Object.assign({}, prev, {\n+┊  ┊54┊          chats: [...prev.chats, newChat]\n+┊  ┊55┊        });\n+┊  ┊56┊      }\n+┊  ┊57┊    });\n+┊  ┊58┊\n+┊  ┊59┊    this.getChatsWq.subscribeToMore({\n+┊  ┊60┊      document: messageAddedSubscription,\n+┊  ┊61┊      updateQuery: (prev: GetChats.Query, { subscriptionData }) => {\n+┊  ┊62┊        if (!subscriptionData.data) {\n+┊  ┊63┊          return prev;\n+┊  ┊64┊        }\n+┊  ┊65┊\n+┊  ┊66┊        const newMessage: MessageAdded.MessageAdded = subscriptionData.data.messageAdded;\n+┊  ┊67┊\n+┊  ┊68┊        // We need to update the cache for both Chat and Chats. The following updates the cache for Chat.\n+┊  ┊69┊        try {\n+┊  ┊70┊          // Read the data from our cache for this query.\n+┊  ┊71┊          const {chat}: GetChat.Query = this.apollo.getClient().readQuery({\n+┊  ┊72┊            query: getChatQuery, variables: {\n+┊  ┊73┊              chatId: newMessage.chat.id,\n+┊  ┊74┊            }\n+┊  ┊75┊          });\n+┊  ┊76┊\n+┊  ┊77┊          // Add our message from the mutation to the end.\n+┊  ┊78┊          chat.messages.push(newMessage);\n+┊  ┊79┊          // Write our data back to the cache.\n+┊  ┊80┊          this.apollo.getClient().writeQuery({ query: getChatQuery, data: {chat} });\n+┊  ┊81┊        } catch {\n+┊  ┊82┊          console.error('The chat we received an update for does not exist in the store');\n+┊  ┊83┊        }\n+┊  ┊84┊\n+┊  ┊85┊        return Object.assign({}, prev, {\n+┊  ┊86┊          chats: [...prev.chats.map(_chat =>\n+┊  ┊87┊            _chat.id === newMessage.chat.id ? {..._chat, messages: [..._chat.messages, newMessage]} : _chat)]\n+┊  ┊88┊        });\n+┊  ┊89┊      }\n+┊  ┊90┊    });\n+┊  ┊91┊\n ┊38┊92┊    this.chats$ = this.getChatsWq.valueChanges.pipe(\n ┊39┊93┊      map((result: ApolloQueryResult<GetChats.Query>) => result.data.chats)\n ┊40┊94┊    );\n```\n```diff\n@@ -110,6 +164,10 @@\n ┊110┊164┊        addMessage: {\n ┊111┊165┊          id: ChatsService.getRandomId(),\n ┊112┊166┊          __typename: 'Message',\n+┊   ┊167┊          chat: {\n+┊   ┊168┊            id: chatId,\n+┊   ┊169┊            __typename: 'Chat',\n+┊   ┊170┊          },\n ┊113┊171┊          senderId: this.loginService.getUser().id,\n ┊114┊172┊          sender: {\n ┊115┊173┊            id: this.loginService.getUser().id,\n```\n\n[}]: #\n\nWe can finally configure the WebSocket in the app module. Please notice that the WebSocket has its own authentication instead of using the HttpInterceptor, in fact we use `connectionParams` to send the authorization.\nAll queries will go through HTTP except the Subscriptions, which will use the WebSocket.\n\n[{]: <helper> (diffStep \"11.1\" files=\"src/app/app.module.ts\" module=\"client\")\n\n#### Step 11.1: Subscriptions\n\n##### Changed src&#x2F;app&#x2F;app.module.ts\n```diff\n@@ -12,6 +12,11 @@\n ┊12┊12┊import {ChatsCreationModule} from './chats-creation/chats-creation.module';\n ┊13┊13┊import {LoginModule} from './login/login.module';\n ┊14┊14┊import {AuthInterceptor} from './login/services/auth.interceptor';\n+┊  ┊15┊import {getMainDefinition} from 'apollo-utilities';\n+┊  ┊16┊import {OperationDefinitionNode} from 'graphql';\n+┊  ┊17┊import {split} from 'apollo-link';\n+┊  ┊18┊import {WebSocketLink} from 'apollo-link-ws';\n+┊  ┊19┊import {LoginService} from './login/services/login.service';\n ┊15┊20┊const routes: Routes = [];\n ┊16┊21┊\n ┊17┊22┊@NgModule({\n```\n```diff\n@@ -45,9 +50,30 @@\n ┊45┊50┊  constructor(\n ┊46┊51┊    apollo: Apollo,\n ┊47┊52┊    httpLink: HttpLink,\n+┊  ┊53┊    loginService: LoginService,\n ┊48┊54┊  ) {\n+┊  ┊55┊    const subscriptionLink = new WebSocketLink({\n+┊  ┊56┊      uri:\n+┊  ┊57┊        'ws://localhost:3000/subscriptions',\n+┊  ┊58┊      options: {\n+┊  ┊59┊        reconnect: true,\n+┊  ┊60┊        connectionParams: () => ({\n+┊  ┊61┊          authToken: loginService.getAuthHeader() || null\n+┊  ┊62┊        })\n+┊  ┊63┊      }\n+┊  ┊64┊    });\n+┊  ┊65┊\n+┊  ┊66┊    const link = split(\n+┊  ┊67┊      ({ query }) => {\n+┊  ┊68┊        const { kind, operation } = <OperationDefinitionNode>getMainDefinition(<any>query);\n+┊  ┊69┊        return kind === 'OperationDefinition' && operation === 'subscription';\n+┊  ┊70┊      },\n+┊  ┊71┊      subscriptionLink,\n+┊  ┊72┊      httpLink.create(<Options>{uri: 'http://localhost:3000/graphql'})\n+┊  ┊73┊    );\n+┊  ┊74┊\n ┊49┊75┊    apollo.create({\n-┊50┊  ┊      link: httpLink.create(<Options>{uri: 'http://localhost:3000/graphql'}),\n+┊  ┊76┊      link,\n ┊51┊77┊      cache: new InMemoryCache({\n ┊52┊78┊        dataIdFromObject: (object: any) => {\n ┊53┊79┊          switch (object.__typename) {\n```\n\n[}]: #\n\nFinally, let's fix the tests:\n\n[{]: <helper> (diffStep \"11.1\" files=\"src/app/chat-viewer/containers/chat/chat.component.spec.ts, src/app/chats-lister/containers/chats/chats.component.spec.ts, src/app/services/chats.service.spec.ts\" module=\"client\")\n\n#### Step 11.1: Subscriptions\n\n##### Changed src&#x2F;app&#x2F;chat-viewer&#x2F;containers&#x2F;chat&#x2F;chat.component.spec.ts\n```diff\n@@ -149,6 +149,8 @@\n ┊149┊149┊    fixture = TestBed.createComponent(ChatComponent);\n ┊150┊150┊    component = fixture.componentInstance;\n ┊151┊151┊    fixture.detectChanges();\n+┊   ┊152┊    httpMock.expectOne(httpReq => httpReq.body.operationName === 'chatAdded', 'call to chatAdded api');\n+┊   ┊153┊    httpMock.expectOne(httpReq => httpReq.body.operationName === 'messageAdded', 'call to messageAdded api');\n ┊152┊154┊    httpMock.expectOne(httpReq => httpReq.body.operationName === 'GetChats', 'call to getChats api');\n ┊153┊155┊    const req = httpMock.expectOne(httpReq => httpReq.body.operationName === 'GetChat', 'call to getChat api');\n ┊154┊156┊    req.flush({\n```\n\n##### Changed src&#x2F;app&#x2F;chats-lister&#x2F;containers&#x2F;chats&#x2F;chats.component.spec.ts\n```diff\n@@ -364,7 +364,9 @@\n ┊364┊364┊    fixture = TestBed.createComponent(ChatsComponent);\n ┊365┊365┊    component = fixture.componentInstance;\n ┊366┊366┊    fixture.detectChanges();\n-┊367┊   ┊    const req = httpMock.expectOne('http://localhost:3000/graphql', 'call to api');\n+┊   ┊367┊    httpMock.expectOne(httpReq => httpReq.body.operationName === 'chatAdded', 'call to chatAdded api');\n+┊   ┊368┊    httpMock.expectOne(httpReq => httpReq.body.operationName === 'messageAdded', 'call to messageAdded api');\n+┊   ┊369┊    const req = httpMock.expectOne(httpReq => httpReq.body.operationName === 'GetChats', 'call to getChats api');\n ┊368┊370┊    req.flush({\n ┊369┊371┊      data: {\n ┊370┊372┊        chats\n```\n\n##### Changed src&#x2F;app&#x2F;services&#x2F;chats.service.spec.ts\n```diff\n@@ -346,7 +346,9 @@\n ┊346┊346┊      }\n ┊347┊347┊    });\n ┊348┊348┊\n-┊349┊   ┊    const req = httpMock.expectOne('http://localhost:3000/graphql', 'call to api');\n+┊   ┊349┊    httpMock.expectOne(httpReq => httpReq.body.operationName === 'chatAdded', 'call to chatAdded api');\n+┊   ┊350┊    httpMock.expectOne(httpReq => httpReq.body.operationName === 'messageAdded', 'call to messageAdded api');\n+┊   ┊351┊    const req = httpMock.expectOne(httpReq => httpReq.body.operationName === 'GetChats', 'call to getChats api');\n ┊350┊352┊    expect(req.request.method).toBe('POST');\n ┊351┊353┊    req.flush({\n ┊352┊354┊      data: {\n```\n\n[}]: #"
          },
          {
            "manualTitle": "Step 16: TypeORM with PostgreSQL",
            "stepRevision": "b18e5d766b19cc773340b6bd35aa85ccc930ad1d",
            "manualView": "## Server\n\nFirst of all you will have to install PostgreSQL on your operating system. Since there so many options (different Linux distributions, MacOS X, Windows...) I will assume that you already know how to install a software in your OS and take that part for granted.\n\nThen you will have to install a couple of packages:\n\n    npm install pg reflect-metadata typeorm\n    npm install --save-dev @types/pg\n\nWe aren't going to use plain SQL, instead we will use an Object-relational mapping framework (ORM) called `TypeORM`.\n`TypeORM` takes advantage of Typescript classes and type declarations in order to infer the db structure.\n\nWe will need to enable support for experimental decorators, emit type metadata for decorators and disable strict property initialization:\n\n[{]: <helper> (diffStep \"6.1\" files=\"tsconfig.json\" module=\"server\")\n\n#### Step 6.1: TypeORM with PostgreSQL\n\n##### Changed tsconfig.json\n```diff\n@@ -22,11 +22,11 @@\n ┊22┊22┊    // \"isolatedModules\": true,               /* Transpile each file as a separate module (similar to 'ts.transpileModule'). */\n ┊23┊23┊\n ┊24┊24┊    /* Strict Type-Checking Options */\n-┊25┊  ┊    \"strict\": true,                            /* Enable all strict type-checking options. */\n+┊  ┊25┊    \"strict\": true,                           /* Enable all strict type-checking options. */\n ┊26┊26┊    // \"noImplicitAny\": true,                 /* Raise error on expressions and declarations with an implied 'any' type. */\n ┊27┊27┊    // \"strictNullChecks\": true,              /* Enable strict null checks. */\n ┊28┊28┊    // See https://github.com/DefinitelyTyped/DefinitelyTyped/issues/21359\n-┊29┊  ┊    \"strictFunctionTypes\": false              /* Enable strict checking of function types. */\n+┊  ┊29┊    \"strictFunctionTypes\": false,             /* Enable strict checking of function types. */\n ┊30┊30┊    // \"noImplicitThis\": true,                /* Raise error on 'this' expressions with an implied 'any' type. */\n ┊31┊31┊    // \"alwaysStrict\": true,                  /* Parse in strict mode and emit \"use strict\" for each source file. */\n ┊32┊32┊\n```\n```diff\n@@ -53,7 +53,8 @@\n ┊53┊53┊    // \"inlineSources\": true,                 /* Emit the source alongside the sourcemaps within a single file; requires '--inlineSourceMap' or '--sourceMap' to be set. */\n ┊54┊54┊\n ┊55┊55┊    /* Experimental Options */\n-┊56┊  ┊    // \"experimentalDecorators\": true,        /* Enables experimental support for ES7 decorators. */\n-┊57┊  ┊    // \"emitDecoratorMetadata\": true,         /* Enables experimental support for emitting type metadata for decorators. */\n+┊  ┊56┊    \"experimentalDecorators\": true,           /* Enables experimental support for ES7 decorators. */\n+┊  ┊57┊    \"emitDecoratorMetadata\": true,            /* Enables experimental support for emitting type metadata for decorators. */\n+┊  ┊58┊    \"strictPropertyInitialization\": false\n ┊58┊59┊  }\n ┊59┊60┊}🚫↵\n```\n\n[}]: #\n\nThe next step is to create Entities. An Entity is a class that maps to a database table. You can create a entity by defining a new class and mark it with @Entity():\n\n[{]: <helper> (diffStep \"6.1\" files=\"entity\" module=\"server\")\n\n#### Step 6.1: TypeORM with PostgreSQL\n\n##### Added entity&#x2F;Chat.ts\n```diff\n@@ -0,0 +1,79 @@\n+┊  ┊ 1┊import { Entity, Column, PrimaryGeneratedColumn, OneToMany, JoinTable, ManyToMany, ManyToOne } from \"typeorm\";\n+┊  ┊ 2┊import { Message } from \"./Message\";\n+┊  ┊ 3┊import { User } from \"./User\";\n+┊  ┊ 4┊import { Recipient } from \"./Recipient\";\n+┊  ┊ 5┊\n+┊  ┊ 6┊interface ChatConstructor {\n+┊  ┊ 7┊  name?: string;\n+┊  ┊ 8┊  picture?: string;\n+┊  ┊ 9┊  allTimeMembers?: User[];\n+┊  ┊10┊  listingMembers?: User[];\n+┊  ┊11┊  actualGroupMembers?: User[];\n+┊  ┊12┊  admins?: User[];\n+┊  ┊13┊  owner?: User;\n+┊  ┊14┊  messages?: Message[];\n+┊  ┊15┊}\n+┊  ┊16┊\n+┊  ┊17┊@Entity()\n+┊  ┊18┊export class Chat {\n+┊  ┊19┊  @PrimaryGeneratedColumn()\n+┊  ┊20┊  id: number;\n+┊  ┊21┊\n+┊  ┊22┊  @Column({nullable: true})\n+┊  ┊23┊  name: string;\n+┊  ┊24┊\n+┊  ┊25┊  @Column({nullable: true})\n+┊  ┊26┊  picture: string;\n+┊  ┊27┊\n+┊  ┊28┊  @ManyToMany(type => User, user => user.allTimeMemberChats, {cascade: [\"insert\", \"update\"], eager: false})\n+┊  ┊29┊  @JoinTable()\n+┊  ┊30┊  allTimeMembers: User[];\n+┊  ┊31┊\n+┊  ┊32┊  @ManyToMany(type => User, user => user.listingMemberChats, {cascade: [\"insert\", \"update\"], eager: false})\n+┊  ┊33┊  @JoinTable()\n+┊  ┊34┊  listingMembers: User[];\n+┊  ┊35┊\n+┊  ┊36┊  @ManyToMany(type => User, user => user.actualGroupMemberChats, {cascade: [\"insert\", \"update\"], eager: false})\n+┊  ┊37┊  @JoinTable()\n+┊  ┊38┊  actualGroupMembers?: User[];\n+┊  ┊39┊\n+┊  ┊40┊  @ManyToMany(type => User, user => user.adminChats, {cascade: [\"insert\", \"update\"], eager: false})\n+┊  ┊41┊  @JoinTable()\n+┊  ┊42┊  admins?: User[];\n+┊  ┊43┊\n+┊  ┊44┊  @ManyToOne(type => User, user => user.ownerChats, {cascade: [\"insert\", \"update\"], eager: false})\n+┊  ┊45┊  owner?: User | null;\n+┊  ┊46┊\n+┊  ┊47┊  @OneToMany(type => Message, message => message.chat, {cascade: [\"insert\", \"update\"], eager: true})\n+┊  ┊48┊  messages: Message[];\n+┊  ┊49┊\n+┊  ┊50┊  @OneToMany(type => Recipient, recipient => recipient.chat)\n+┊  ┊51┊  recipients: Recipient[];\n+┊  ┊52┊\n+┊  ┊53┊  constructor({name, picture, allTimeMembers, listingMembers, actualGroupMembers, admins, owner, messages}: ChatConstructor = {}) {\n+┊  ┊54┊    if (name) {\n+┊  ┊55┊      this.name = name;\n+┊  ┊56┊    }\n+┊  ┊57┊    if (picture) {\n+┊  ┊58┊      this.picture = picture;\n+┊  ┊59┊    }\n+┊  ┊60┊    if (allTimeMembers) {\n+┊  ┊61┊      this.allTimeMembers = allTimeMembers;\n+┊  ┊62┊    }\n+┊  ┊63┊    if (listingMembers) {\n+┊  ┊64┊      this.listingMembers = listingMembers;\n+┊  ┊65┊    }\n+┊  ┊66┊    if (actualGroupMembers) {\n+┊  ┊67┊      this.actualGroupMembers = actualGroupMembers;\n+┊  ┊68┊    }\n+┊  ┊69┊    if (admins) {\n+┊  ┊70┊      this.admins = admins;\n+┊  ┊71┊    }\n+┊  ┊72┊    if (owner) {\n+┊  ┊73┊      this.owner = owner;\n+┊  ┊74┊    }\n+┊  ┊75┊    if (messages) {\n+┊  ┊76┊      this.messages = messages;\n+┊  ┊77┊    }\n+┊  ┊78┊  }\n+┊  ┊79┊}\n```\n\n##### Added entity&#x2F;Message.ts\n```diff\n@@ -0,0 +1,70 @@\n+┊  ┊ 1┊import {\n+┊  ┊ 2┊  Entity, Column, PrimaryGeneratedColumn, OneToMany, ManyToOne, ManyToMany, JoinTable, CreateDateColumn\n+┊  ┊ 3┊} from \"typeorm\";\n+┊  ┊ 4┊import { Chat } from \"./Chat\";\n+┊  ┊ 5┊import { User } from \"./User\";\n+┊  ┊ 6┊import { Recipient } from \"./Recipient\";\n+┊  ┊ 7┊import { MessageType } from \"../db\";\n+┊  ┊ 8┊\n+┊  ┊ 9┊interface MessageConstructor {\n+┊  ┊10┊  sender?: User;\n+┊  ┊11┊  content?: string;\n+┊  ┊12┊  createdAt?: Date,\n+┊  ┊13┊  type?: MessageType;\n+┊  ┊14┊  recipients?: Recipient[];\n+┊  ┊15┊  holders?: User[];\n+┊  ┊16┊  chat?: Chat;\n+┊  ┊17┊}\n+┊  ┊18┊\n+┊  ┊19┊@Entity()\n+┊  ┊20┊export class Message {\n+┊  ┊21┊  @PrimaryGeneratedColumn()\n+┊  ┊22┊  id: number;\n+┊  ┊23┊\n+┊  ┊24┊  @ManyToOne(type => User, user => user.senderMessages, {eager: true})\n+┊  ┊25┊  sender: User;\n+┊  ┊26┊\n+┊  ┊27┊  @Column()\n+┊  ┊28┊  content: string;\n+┊  ┊29┊\n+┊  ┊30┊  @CreateDateColumn({nullable: true})\n+┊  ┊31┊  createdAt: Date;\n+┊  ┊32┊\n+┊  ┊33┊  @Column()\n+┊  ┊34┊  type: number;\n+┊  ┊35┊\n+┊  ┊36┊  @OneToMany(type => Recipient, recipient => recipient.message, {cascade: [\"insert\", \"update\"], eager: true})\n+┊  ┊37┊  recipients: Recipient[];\n+┊  ┊38┊\n+┊  ┊39┊  @ManyToMany(type => User, user => user.holderMessages, {cascade: [\"insert\", \"update\"], eager: true})\n+┊  ┊40┊  @JoinTable()\n+┊  ┊41┊  holders: User[];\n+┊  ┊42┊\n+┊  ┊43┊  @ManyToOne(type => Chat, chat => chat.messages)\n+┊  ┊44┊  chat: Chat;\n+┊  ┊45┊\n+┊  ┊46┊  constructor({sender, content, createdAt, type, recipients, holders, chat}: MessageConstructor = {}) {\n+┊  ┊47┊    if (sender) {\n+┊  ┊48┊      this.sender = sender;\n+┊  ┊49┊    }\n+┊  ┊50┊    if (content) {\n+┊  ┊51┊      this.content = content;\n+┊  ┊52┊    }\n+┊  ┊53┊    if (createdAt) {\n+┊  ┊54┊      this.createdAt = createdAt;\n+┊  ┊55┊    }\n+┊  ┊56┊    if (type) {\n+┊  ┊57┊      this.type = type;\n+┊  ┊58┊    }\n+┊  ┊59┊    if (recipients) {\n+┊  ┊60┊      recipients.forEach(recipient => recipient.message = this);\n+┊  ┊61┊      this.recipients = recipients;\n+┊  ┊62┊    }\n+┊  ┊63┊    if (holders) {\n+┊  ┊64┊      this.holders = holders;\n+┊  ┊65┊    }\n+┊  ┊66┊    if (chat) {\n+┊  ┊67┊      this.chat = chat;\n+┊  ┊68┊    }\n+┊  ┊69┊  }\n+┊  ┊70┊}\n```\n\n##### Added entity&#x2F;Recipient.ts\n```diff\n@@ -0,0 +1,44 @@\n+┊  ┊ 1┊import { Entity, ManyToOne, Column } from \"typeorm\";\n+┊  ┊ 2┊import { Message } from \"./Message\";\n+┊  ┊ 3┊import { User } from \"./User\";\n+┊  ┊ 4┊import { Chat } from \"./Chat\";\n+┊  ┊ 5┊\n+┊  ┊ 6┊interface RecipientConstructor {\n+┊  ┊ 7┊  user?: User;\n+┊  ┊ 8┊  message?: Message;\n+┊  ┊ 9┊  receivedAt?: Date;\n+┊  ┊10┊  readAt?: Date;\n+┊  ┊11┊}\n+┊  ┊12┊\n+┊  ┊13┊@Entity()\n+┊  ┊14┊export class Recipient {\n+┊  ┊15┊  @ManyToOne(type => User, user => user.recipients, { primary: true })\n+┊  ┊16┊  user: User;\n+┊  ┊17┊\n+┊  ┊18┊  @ManyToOne(type => Message, message => message.recipients, { primary: true })\n+┊  ┊19┊  message: Message;\n+┊  ┊20┊\n+┊  ┊21┊  @ManyToOne(type => Chat, chat => chat.recipients)\n+┊  ┊22┊  chat: Chat;\n+┊  ┊23┊\n+┊  ┊24┊  @Column({nullable: true})\n+┊  ┊25┊  receivedAt: Date;\n+┊  ┊26┊\n+┊  ┊27┊  @Column({nullable: true})\n+┊  ┊28┊  readAt: Date;\n+┊  ┊29┊\n+┊  ┊30┊  constructor({user, message, receivedAt, readAt}: RecipientConstructor = {}) {\n+┊  ┊31┊    if (user) {\n+┊  ┊32┊      this.user = user;\n+┊  ┊33┊    }\n+┊  ┊34┊    if (message) {\n+┊  ┊35┊      this.message = message;\n+┊  ┊36┊    }\n+┊  ┊37┊    if (receivedAt) {\n+┊  ┊38┊      this.receivedAt = receivedAt;\n+┊  ┊39┊    }\n+┊  ┊40┊    if (readAt) {\n+┊  ┊41┊      this.readAt = readAt;\n+┊  ┊42┊    }\n+┊  ┊43┊  }\n+┊  ┊44┊}\n```\n\n##### Added entity&#x2F;User.ts\n```diff\n@@ -0,0 +1,75 @@\n+┊  ┊ 1┊import { Entity, Column, PrimaryGeneratedColumn, ManyToMany, OneToMany } from \"typeorm\";\n+┊  ┊ 2┊import { Chat } from \"./Chat\";\n+┊  ┊ 3┊import { Message } from \"./Message\";\n+┊  ┊ 4┊import { Recipient } from \"./Recipient\";\n+┊  ┊ 5┊\n+┊  ┊ 6┊interface UserConstructor {\n+┊  ┊ 7┊  username?: string;\n+┊  ┊ 8┊  password?: string;\n+┊  ┊ 9┊  name?: string;\n+┊  ┊10┊  picture?: string;\n+┊  ┊11┊  phone?: string;\n+┊  ┊12┊}\n+┊  ┊13┊\n+┊  ┊14┊@Entity()\n+┊  ┊15┊export class User {\n+┊  ┊16┊  @PrimaryGeneratedColumn()\n+┊  ┊17┊  id: number;\n+┊  ┊18┊\n+┊  ┊19┊  @Column()\n+┊  ┊20┊  username: string;\n+┊  ┊21┊\n+┊  ┊22┊  @Column()\n+┊  ┊23┊  password: string;\n+┊  ┊24┊\n+┊  ┊25┊  @Column()\n+┊  ┊26┊  name: string;\n+┊  ┊27┊\n+┊  ┊28┊  @Column({nullable: true})\n+┊  ┊29┊  picture: string;\n+┊  ┊30┊\n+┊  ┊31┊  @Column({nullable: true})\n+┊  ┊32┊  phone?: string;\n+┊  ┊33┊\n+┊  ┊34┊  @ManyToMany(type => Chat, chat => chat.allTimeMembers)\n+┊  ┊35┊  allTimeMemberChats: Chat[];\n+┊  ┊36┊\n+┊  ┊37┊  @ManyToMany(type => Chat, chat => chat.listingMembers)\n+┊  ┊38┊  listingMemberChats: Chat[];\n+┊  ┊39┊\n+┊  ┊40┊  @ManyToMany(type => Chat, chat => chat.actualGroupMembers)\n+┊  ┊41┊  actualGroupMemberChats: Chat[];\n+┊  ┊42┊\n+┊  ┊43┊  @ManyToMany(type => Chat, chat => chat.admins)\n+┊  ┊44┊  adminChats: Chat[];\n+┊  ┊45┊\n+┊  ┊46┊  @ManyToMany(type => Message, message => message.holders)\n+┊  ┊47┊  holderMessages: Message[];\n+┊  ┊48┊\n+┊  ┊49┊  @OneToMany(type => Chat, chat => chat.owner)\n+┊  ┊50┊  ownerChats: Chat[];\n+┊  ┊51┊\n+┊  ┊52┊  @OneToMany(type => Message, message => message.sender)\n+┊  ┊53┊  senderMessages: Message[];\n+┊  ┊54┊\n+┊  ┊55┊  @OneToMany(type => Recipient, recipient => recipient.user)\n+┊  ┊56┊  recipients: Recipient[];\n+┊  ┊57┊\n+┊  ┊58┊  constructor({username, password, name, picture, phone}: UserConstructor = {}) {\n+┊  ┊59┊    if (username) {\n+┊  ┊60┊      this.username = username;\n+┊  ┊61┊    }\n+┊  ┊62┊    if (password) {\n+┊  ┊63┊      this.password = password;\n+┊  ┊64┊    }\n+┊  ┊65┊    if (name) {\n+┊  ┊66┊      this.name = name;\n+┊  ┊67┊    }\n+┊  ┊68┊    if (picture) {\n+┊  ┊69┊      this.picture = picture;\n+┊  ┊70┊    }\n+┊  ┊71┊    if (phone) {\n+┊  ┊72┊      this.phone = phone;\n+┊  ┊73┊    }\n+┊  ┊74┊  }\n+┊  ┊75┊}\n```\n\n[}]: #\n\nBasic entities consist of columns and relations. Each entity MUST have a primary column.\n\nEach entity must be registered in your connection options:\n\n[{]: <helper> (diffStep \"6.1\" files=\"ormconfig.json\" module=\"server\")\n\n#### Step 6.1: TypeORM with PostgreSQL\n\n##### Added ormconfig.json\n```diff\n@@ -0,0 +1,24 @@\n+┊  ┊ 1┊{\n+┊  ┊ 2┊   \"type\": \"postgres\",\n+┊  ┊ 3┊   \"host\": \"localhost\",\n+┊  ┊ 4┊   \"port\": 5432,\n+┊  ┊ 5┊   \"username\": \"test\",\n+┊  ┊ 6┊   \"password\": \"\",\n+┊  ┊ 7┊   \"database\": \"test\",\n+┊  ┊ 8┊   \"synchronize\": true,\n+┊  ┊ 9┊   \"logging\": false,\n+┊  ┊10┊   \"entities\": [\n+┊  ┊11┊      \"entity/**/*.ts\"\n+┊  ┊12┊   ],\n+┊  ┊13┊   \"migrations\": [\n+┊  ┊14┊      \"migration/**/*.ts\"\n+┊  ┊15┊   ],\n+┊  ┊16┊   \"subscribers\": [\n+┊  ┊17┊      \"subscriber/**/*.ts\"\n+┊  ┊18┊   ],\n+┊  ┊19┊   \"cli\": {\n+┊  ┊20┊      \"entitiesDir\": \"entity\",\n+┊  ┊21┊      \"migrationsDir\": \"migration\",\n+┊  ┊22┊      \"subscribersDir\": \"subscriber\"\n+┊  ┊23┊   }\n+┊  ┊24┊}🚫↵\n```\n\n[}]: #\n\nSince database table consist of columns your entities must consist of columns too. Each entity class property you marked with @Column will be mapped to a database table column.\nEach entity must have at least one primary column. There are several types of primary columns, but in our case `@PrimaryGeneratedColumn()` creates a primary column which value will be automatically generated with an auto-increment value.\n`@CreateDateColumn` is a special column that is automatically set to the entity's insertion date. You don't need set this column - it will be automatically set.\nFor the Recipient Entity we use a composite primary key that consists of two foreign keys.\n\nThe next thing to do is to create a connection with the database before firing up the web server:\n\n[{]: <helper> (diffStep \"6.1\" files=\"index.ts\" module=\"server\")\n\n#### Step 6.1: TypeORM with PostgreSQL\n\n##### Changed index.ts\n```diff\n@@ -1,3 +1,5 @@\n+┊ ┊1┊// For TypeORM\n+┊ ┊2┊import \"reflect-metadata\";\n ┊1┊3┊import { schema } from \"./schema\";\n ┊2┊4┊import * as bodyParser from \"body-parser\";\n ┊3┊5┊import * as cors from 'cors';\n```\n```diff\n@@ -6,12 +8,12 @@\n ┊ 6┊ 8┊import * as passport from \"passport\";\n ┊ 7┊ 9┊import * as basicStrategy from 'passport-http';\n ┊ 8┊10┊import * as bcrypt from 'bcrypt-nodejs';\n-┊ 9┊  ┊import { db, User } from \"./db\";\n ┊10┊11┊import { createServer } from \"http\";\n ┊11┊12┊import { SubscriptionServer } from \"subscriptions-transport-ws\";\n ┊12┊13┊import { execute, subscribe } from \"graphql\";\n-┊13┊  ┊\n-┊14┊  ┊let users = db.users;\n+┊  ┊14┊import { createConnection } from \"typeorm\";\n+┊  ┊15┊import { User } from \"./entity/User\";\n+┊  ┊16┊import { addSampleData } from \"./db\";\n ┊15┊17┊\n ┊16┊18┊function generateHash(password: string) {\n ┊17┊19┊  return bcrypt.hashSync(password, bcrypt.genSaltSync(8));\n```\n```diff\n@@ -21,94 +23,97 @@\n ┊ 21┊ 23┊  return bcrypt.compareSync(password, localPassword);\n ┊ 22┊ 24┊}\n ┊ 23┊ 25┊\n-┊ 24┊   ┊passport.use('basic-signin', new basicStrategy.BasicStrategy(\n-┊ 25┊   ┊  function (username, password, done) {\n-┊ 26┊   ┊    const user = users.find(user => user.username == username);\n-┊ 27┊   ┊    if (user && validPassword(password, user.password)) {\n-┊ 28┊   ┊      return done(null, user);\n+┊   ┊ 26┊createConnection().then(async connection => {\n+┊   ┊ 27┊  await addSampleData(connection);\n+┊   ┊ 28┊\n+┊   ┊ 29┊  passport.use('basic-signin', new basicStrategy.BasicStrategy(\n+┊   ┊ 30┊    async function (username, password, done) {\n+┊   ┊ 31┊      const user = await connection.getRepository(User).findOne({where: { username }});\n+┊   ┊ 32┊      if (user && validPassword(password, user.password)) {\n+┊   ┊ 33┊        return done(null, user);\n+┊   ┊ 34┊      }\n+┊   ┊ 35┊      return done(null, false);\n ┊ 29┊ 36┊    }\n-┊ 30┊   ┊    return done(null, false);\n-┊ 31┊   ┊  }\n-┊ 32┊   ┊));\n+┊   ┊ 37┊  ));\n ┊ 33┊ 38┊\n-┊ 34┊   ┊passport.use('basic-signup', new basicStrategy.BasicStrategy({passReqToCallback: true},\n-┊ 35┊   ┊  function (req: any, username: any, password: any, done: any) {\n-┊ 36┊   ┊    const userExists = !!users.find(user => user.username === username);\n-┊ 37┊   ┊    if (!userExists && password && req.body.name) {\n-┊ 38┊   ┊      const user: User = {\n-┊ 39┊   ┊        id: (users.length && users[users.length - 1].id + 1) || 1,\n-┊ 40┊   ┊        username,\n-┊ 41┊   ┊        password: generateHash(password),\n-┊ 42┊   ┊        name: req.body.name,\n-┊ 43┊   ┊      };\n-┊ 44┊   ┊      users.push(user);\n-┊ 45┊   ┊      return done(null, user);\n+┊   ┊ 39┊  passport.use('basic-signup', new basicStrategy.BasicStrategy({passReqToCallback: true},\n+┊   ┊ 40┊    async function (req: any, username: any, password: any, done: any) {\n+┊   ┊ 41┊      const userExists = !!(await connection.getRepository(User).findOne({where: { username }}));\n+┊   ┊ 42┊      if (!userExists && password && req.body.name) {\n+┊   ┊ 43┊        const user = await connection.manager.save(new User({\n+┊   ┊ 44┊          username,\n+┊   ┊ 45┊          password: generateHash(password),\n+┊   ┊ 46┊          name: req.body.name,\n+┊   ┊ 47┊        }));\n+┊   ┊ 48┊        return done(null, user);\n+┊   ┊ 49┊      }\n+┊   ┊ 50┊      return done(null, false);\n ┊ 46┊ 51┊    }\n-┊ 47┊   ┊    return done(null, false);\n-┊ 48┊   ┊  }\n-┊ 49┊   ┊));\n+┊   ┊ 52┊  ));\n ┊ 50┊ 53┊\n-┊ 51┊   ┊const PORT = 3000;\n+┊   ┊ 54┊  const PORT = 3000;\n ┊ 52┊ 55┊\n-┊ 53┊   ┊const app = express();\n+┊   ┊ 56┊  const app = express();\n ┊ 54┊ 57┊\n-┊ 55┊   ┊app.use(cors());\n-┊ 56┊   ┊app.use(bodyParser.json());\n-┊ 57┊   ┊app.use(passport.initialize());\n+┊   ┊ 58┊  app.use(cors());\n+┊   ┊ 59┊  app.use(bodyParser.json());\n+┊   ┊ 60┊  app.use(passport.initialize());\n ┊ 58┊ 61┊\n-┊ 59┊   ┊app.post('/signup',\n-┊ 60┊   ┊  passport.authenticate('basic-signup', {session: false}),\n-┊ 61┊   ┊  function (req, res) {\n-┊ 62┊   ┊    res.json(req.user);\n-┊ 63┊   ┊  });\n+┊   ┊ 62┊  app.post('/signup',\n+┊   ┊ 63┊    passport.authenticate('basic-signup', {session: false}),\n+┊   ┊ 64┊    function (req, res) {\n+┊   ┊ 65┊      res.json(req.user);\n+┊   ┊ 66┊    });\n ┊ 64┊ 67┊\n-┊ 65┊   ┊app.use(passport.authenticate('basic-signin', {session: false}));\n+┊   ┊ 68┊  app.use(passport.authenticate('basic-signin', {session: false}));\n ┊ 66┊ 69┊\n-┊ 67┊   ┊app.post('/signin', function (req, res) {\n-┊ 68┊   ┊  res.json(req.user);\n-┊ 69┊   ┊});\n+┊   ┊ 70┊  app.post('/signin', function (req, res) {\n+┊   ┊ 71┊    res.json(req.user);\n+┊   ┊ 72┊  });\n ┊ 70┊ 73┊\n-┊ 71┊   ┊app.use('/graphql', graphqlExpress(req => ({\n-┊ 72┊   ┊  schema: schema,\n-┊ 73┊   ┊  context: {\n-┊ 74┊   ┊    user: req!['user'],\n-┊ 75┊   ┊  },\n-┊ 76┊   ┊})));\n+┊   ┊ 74┊  app.use('/graphql', graphqlExpress(req => ({\n+┊   ┊ 75┊    schema: schema,\n+┊   ┊ 76┊    context: {\n+┊   ┊ 77┊      user: req!['user'],\n+┊   ┊ 78┊      connection,\n+┊   ┊ 79┊    },\n+┊   ┊ 80┊  })));\n ┊ 77┊ 81┊\n-┊ 78┊   ┊app.use('/graphiql', graphiqlExpress({\n-┊ 79┊   ┊  endpointURL: '/graphql',\n-┊ 80┊   ┊}));\n+┊   ┊ 82┊  app.use('/graphiql', graphiqlExpress({\n+┊   ┊ 83┊    endpointURL: '/graphql',\n+┊   ┊ 84┊  }));\n ┊ 81┊ 85┊\n ┊ 82┊ 86┊// Wrap the Express server\n-┊ 83┊   ┊const ws = createServer(app);\n-┊ 84┊   ┊ws.listen(PORT, () => {\n-┊ 85┊   ┊  console.log(`Apollo Server is now running on http://localhost:${PORT}`);\n-┊ 86┊   ┊  // Set up the WebSocket for handling GraphQL subscriptions\n-┊ 87┊   ┊  new SubscriptionServer({\n-┊ 88┊   ┊    onConnect: (connectionParams: any, webSocket: any) => {\n-┊ 89┊   ┊      if (connectionParams.authToken) {\n-┊ 90┊   ┊        // create a buffer and tell it the data coming in is base64\n-┊ 91┊   ┊        const buf = new Buffer(connectionParams.authToken.split(' ')[1], 'base64');\n-┊ 92┊   ┊        // read it back out as a string\n-┊ 93┊   ┊        const [username, password]: string[] = buf.toString().split(':');\n-┊ 94┊   ┊        if (username && password) {\n-┊ 95┊   ┊          const user = users.find(user => user.username == username);\n+┊   ┊ 87┊  const ws = createServer(app);\n+┊   ┊ 88┊  ws.listen(PORT, () => {\n+┊   ┊ 89┊    console.log(`Apollo Server is now running on http://localhost:${PORT}`);\n+┊   ┊ 90┊    // Set up the WebSocket for handling GraphQL subscriptions\n+┊   ┊ 91┊    new SubscriptionServer({\n+┊   ┊ 92┊      onConnect: async (connectionParams: any, webSocket: any) => {\n+┊   ┊ 93┊        if (connectionParams.authToken) {\n+┊   ┊ 94┊          // Create a buffer and tell it the data coming in is base64\n+┊   ┊ 95┊          const buf = new Buffer(connectionParams.authToken.split(' ')[1], 'base64');\n+┊   ┊ 96┊          // Read it back out as a string\n+┊   ┊ 97┊          const [username, password]: string[] = buf.toString().split(':');\n+┊   ┊ 98┊          if (username && password) {\n+┊   ┊ 99┊            const user = await connection.getRepository(User).findOne({where: { username }});\n ┊ 96┊100┊\n-┊ 97┊   ┊          if (user && validPassword(password, user.password)) {\n-┊ 98┊   ┊            // Set context for the WebSocket\n-┊ 99┊   ┊            return {user};\n-┊100┊   ┊          } else {\n-┊101┊   ┊            throw new Error('Wrong credentials!');\n+┊   ┊101┊            if (user && validPassword(password, user.password)) {\n+┊   ┊102┊              // Set context for the WebSocket\n+┊   ┊103┊              return {user, connection};\n+┊   ┊104┊            } else {\n+┊   ┊105┊              throw new Error('Wrong credentials!');\n+┊   ┊106┊            }\n ┊102┊107┊          }\n ┊103┊108┊        }\n-┊104┊   ┊      }\n-┊105┊   ┊      throw new Error('Missing auth token!');\n-┊106┊   ┊    },\n-┊107┊   ┊    execute,\n-┊108┊   ┊    subscribe,\n-┊109┊   ┊    schema\n-┊110┊   ┊  }, {\n-┊111┊   ┊    server: ws,\n-┊112┊   ┊    path: '/subscriptions',\n+┊   ┊109┊        throw new Error('Missing auth token!');\n+┊   ┊110┊      },\n+┊   ┊111┊      execute,\n+┊   ┊112┊      subscribe,\n+┊   ┊113┊      schema\n+┊   ┊114┊    }, {\n+┊   ┊115┊      server: ws,\n+┊   ┊116┊      path: '/subscriptions',\n+┊   ┊117┊    });\n ┊113┊118┊  });\n ┊114┊119┊});\n```\n\n[}]: #\n\nWe will also remove our fake db and replace it with some real data:\n\n[{]: <helper> (diffStep \"6.1\" files=\"db.ts\" module=\"server\")\n\n#### Step 6.1: TypeORM with PostgreSQL\n\n##### Changed db.ts\n```diff\n@@ -1,4 +1,11 @@\n+┊  ┊ 1┊// For TypeORM\n+┊  ┊ 2┊import \"reflect-metadata\";\n+┊  ┊ 3┊import { Chat } from \"./entity/Chat\";\n+┊  ┊ 4┊import { Recipient } from \"./entity/Recipient\";\n ┊ 1┊ 5┊import * as moment from 'moment';\n+┊  ┊ 6┊import { Message } from \"./entity/Message\";\n+┊  ┊ 7┊import { User } from \"./entity/User\";\n+┊  ┊ 8┊import { Connection } from \"typeorm\";\n ┊ 2┊ 9┊\n ┊ 3┊10┊export enum MessageType {\n ┊ 4┊11┊  PICTURE,\n```\n```diff\n@@ -6,433 +13,280 @@\n ┊  6┊ 13┊  LOCATION,\n ┊  7┊ 14┊}\n ┊  8┊ 15┊\n-┊  9┊   ┊export interface User {\n-┊ 10┊   ┊  id: number,\n-┊ 11┊   ┊  username: string,\n-┊ 12┊   ┊  password: string,\n-┊ 13┊   ┊  name: string,\n-┊ 14┊   ┊  picture?: string | null,\n-┊ 15┊   ┊  phone?: string | null,\n-┊ 16┊   ┊}\n-┊ 17┊   ┊\n-┊ 18┊   ┊export interface Chat {\n-┊ 19┊   ┊  id: number,\n-┊ 20┊   ┊  name?: string | null,\n-┊ 21┊   ┊  picture?: string | null,\n-┊ 22┊   ┊  // All members, current and past ones.\n-┊ 23┊   ┊  allTimeMemberIds: number[],\n-┊ 24┊   ┊  // Whoever gets the chat listed. For groups includes past members who still didn't delete the group.\n-┊ 25┊   ┊  listingMemberIds: number[],\n-┊ 26┊   ┊  // Actual members of the group (they are not the only ones who get the group listed). Null for chats.\n-┊ 27┊   ┊  actualGroupMemberIds?: number[] | null,\n-┊ 28┊   ┊  adminIds?: number[] | null,\n-┊ 29┊   ┊  ownerId?: number | null,\n-┊ 30┊   ┊  messages: Message[],\n-┊ 31┊   ┊}\n-┊ 32┊   ┊\n-┊ 33┊   ┊export interface Message {\n-┊ 34┊   ┊  id: number,\n-┊ 35┊   ┊  chatId: number,\n-┊ 36┊   ┊  senderId: number,\n-┊ 37┊   ┊  content: string,\n-┊ 38┊   ┊  createdAt: number,\n-┊ 39┊   ┊  type: MessageType,\n-┊ 40┊   ┊  recipients: Recipient[],\n-┊ 41┊   ┊  holderIds: number[],\n-┊ 42┊   ┊}\n-┊ 43┊   ┊\n-┊ 44┊   ┊export interface Recipient {\n-┊ 45┊   ┊  userId: number,\n-┊ 46┊   ┊  messageId: number,\n-┊ 47┊   ┊  chatId: number,\n-┊ 48┊   ┊  receivedAt: number | null,\n-┊ 49┊   ┊  readAt: number | null,\n-┊ 50┊   ┊}\n-┊ 51┊   ┊\n-┊ 52┊   ┊const users: User[] = [\n-┊ 53┊   ┊  {\n-┊ 54┊   ┊    id: 1,\n+┊   ┊ 16┊export async function addSampleData(connection: Connection) {\n+┊   ┊ 17┊  const user1 = new User({\n ┊ 55┊ 18┊    username: 'ethan',\n ┊ 56┊ 19┊    password: '$2a$08$NO9tkFLCoSqX1c5wk3s7z.JfxaVMKA.m7zUDdDwEquo4rvzimQeJm', // 111\n ┊ 57┊ 20┊    name: 'Ethan Gonzalez',\n ┊ 58┊ 21┊    picture: 'https://randomuser.me/api/portraits/thumb/men/1.jpg',\n ┊ 59┊ 22┊    phone: '+391234567890',\n-┊ 60┊   ┊  },\n-┊ 61┊   ┊  {\n-┊ 62┊   ┊    id: 2,\n+┊   ┊ 23┊  });\n+┊   ┊ 24┊  await connection.manager.save(user1);\n+┊   ┊ 25┊\n+┊   ┊ 26┊  const user2 = new User({\n ┊ 63┊ 27┊    username: 'bryan',\n ┊ 64┊ 28┊    password: '$2a$08$xE4FuCi/ifxjL2S8CzKAmuKLwv18ktksSN.F3XYEnpmcKtpbpeZgO', // 222\n ┊ 65┊ 29┊    name: 'Bryan Wallace',\n ┊ 66┊ 30┊    picture: 'https://randomuser.me/api/portraits/thumb/men/2.jpg',\n ┊ 67┊ 31┊    phone: '+391234567891',\n-┊ 68┊   ┊  },\n-┊ 69┊   ┊  {\n-┊ 70┊   ┊    id: 3,\n+┊   ┊ 32┊  });\n+┊   ┊ 33┊  await connection.manager.save(user2);\n+┊   ┊ 34┊\n+┊   ┊ 35┊  const user3 = new User({\n ┊ 71┊ 36┊    username: 'avery',\n ┊ 72┊ 37┊    password: '$2a$08$UHgH7J8G6z1mGQn2qx2kdeWv0jvgHItyAsL9hpEUI3KJmhVW5Q1d.', // 333\n ┊ 73┊ 38┊    name: 'Avery Stewart',\n ┊ 74┊ 39┊    picture: 'https://randomuser.me/api/portraits/thumb/women/1.jpg',\n ┊ 75┊ 40┊    phone: '+391234567892',\n-┊ 76┊   ┊  },\n-┊ 77┊   ┊  {\n-┊ 78┊   ┊    id: 4,\n+┊   ┊ 41┊  });\n+┊   ┊ 42┊  await connection.manager.save(user3);\n+┊   ┊ 43┊\n+┊   ┊ 44┊  const user4 = new User({\n ┊ 79┊ 45┊    username: 'katie',\n ┊ 80┊ 46┊    password: '$2a$08$wR1k5Q3T9FC7fUgB7Gdb9Os/GV7dGBBf4PLlWT7HERMFhmFDt47xi', // 444\n ┊ 81┊ 47┊    name: 'Katie Peterson',\n ┊ 82┊ 48┊    picture: 'https://randomuser.me/api/portraits/thumb/women/2.jpg',\n ┊ 83┊ 49┊    phone: '+391234567893',\n-┊ 84┊   ┊  },\n-┊ 85┊   ┊  {\n-┊ 86┊   ┊    id: 5,\n+┊   ┊ 50┊  });\n+┊   ┊ 51┊  await connection.manager.save(user4);\n+┊   ┊ 52┊\n+┊   ┊ 53┊  const user5 = new User({\n ┊ 87┊ 54┊    username: 'ray',\n ┊ 88┊ 55┊    password: '$2a$08$6.mbXqsDX82ZZ7q5d8Osb..JrGSsNp4R3IKj7mxgF6YGT0OmMw242', // 555\n ┊ 89┊ 56┊    name: 'Ray Edwards',\n ┊ 90┊ 57┊    picture: 'https://randomuser.me/api/portraits/thumb/men/3.jpg',\n ┊ 91┊ 58┊    phone: '+391234567894',\n-┊ 92┊   ┊  },\n-┊ 93┊   ┊  {\n-┊ 94┊   ┊    id: 6,\n+┊   ┊ 59┊  });\n+┊   ┊ 60┊  await connection.manager.save(user5);\n+┊   ┊ 61┊\n+┊   ┊ 62┊  const user6 = new User({\n ┊ 95┊ 63┊    username: 'niko',\n ┊ 96┊ 64┊    password: '$2a$08$fL5lZR.Rwf9FWWe8XwwlceiPBBim8n9aFtaem.INQhiKT4.Ux3Uq.', // 666\n ┊ 97┊ 65┊    name: 'Niccolò Belli',\n ┊ 98┊ 66┊    picture: 'https://randomuser.me/api/portraits/thumb/men/4.jpg',\n ┊ 99┊ 67┊    phone: '+391234567895',\n-┊100┊   ┊  },\n-┊101┊   ┊  {\n-┊102┊   ┊    id: 7,\n+┊   ┊ 68┊  });\n+┊   ┊ 69┊  await connection.manager.save(user6);\n+┊   ┊ 70┊\n+┊   ┊ 71┊  const user7 = new User({\n ┊103┊ 72┊    username: 'mario',\n ┊104┊ 73┊    password: '$2a$08$nDHDmWcVxDnH5DDT3HMMC.psqcnu6wBiOgkmJUy9IH..qxa3R6YrO', // 777\n ┊105┊ 74┊    name: 'Mario Rossi',\n ┊106┊ 75┊    picture: 'https://randomuser.me/api/portraits/thumb/men/5.jpg',\n ┊107┊ 76┊    phone: '+391234567896',\n-┊108┊   ┊  },\n-┊109┊   ┊];\n+┊   ┊ 77┊  });\n+┊   ┊ 78┊  await connection.manager.save(user7);\n+┊   ┊ 79┊\n+┊   ┊ 80┊\n ┊110┊ 81┊\n-┊111┊   ┊const chats: Chat[] = [\n-┊112┊   ┊  {\n-┊113┊   ┊    id: 1,\n-┊114┊   ┊    name: null,\n-┊115┊   ┊    picture: null,\n-┊116┊   ┊    allTimeMemberIds: [1, 3],\n-┊117┊   ┊    listingMemberIds: [1, 3],\n-┊118┊   ┊    adminIds: null,\n-┊119┊   ┊    ownerId: null,\n+┊   ┊ 82┊\n+┊   ┊ 83┊  await connection.manager.save(new Chat({\n+┊   ┊ 84┊    allTimeMembers: [user1, user3],\n+┊   ┊ 85┊    listingMembers: [user1, user3],\n ┊120┊ 86┊    messages: [\n-┊121┊   ┊      {\n-┊122┊   ┊        id: 1,\n-┊123┊   ┊        chatId: 1,\n-┊124┊   ┊        senderId: 1,\n+┊   ┊ 87┊      new Message({\n+┊   ┊ 88┊        sender: user1,\n ┊125┊ 89┊        content: 'You on your way?',\n-┊126┊   ┊        createdAt: moment().subtract(1, 'hours').unix(),\n+┊   ┊ 90┊        createdAt: moment().subtract(1, 'hours').toDate(),\n ┊127┊ 91┊        type: MessageType.TEXT,\n+┊   ┊ 92┊        holders: [user1, user3],\n ┊128┊ 93┊        recipients: [\n-┊129┊   ┊          {\n-┊130┊   ┊            userId: 3,\n-┊131┊   ┊            messageId: 1,\n-┊132┊   ┊            chatId: 1,\n-┊133┊   ┊            receivedAt: null,\n-┊134┊   ┊            readAt: null,\n-┊135┊   ┊          },\n+┊   ┊ 94┊          new Recipient({\n+┊   ┊ 95┊            user: user3,\n+┊   ┊ 96┊          }),\n ┊136┊ 97┊        ],\n-┊137┊   ┊        holderIds: [1, 3],\n-┊138┊   ┊      },\n-┊139┊   ┊      {\n-┊140┊   ┊        id: 2,\n-┊141┊   ┊        chatId: 1,\n-┊142┊   ┊        senderId: 3,\n+┊   ┊ 98┊      }),\n+┊   ┊ 99┊      new Message({\n+┊   ┊100┊        sender: user3,\n ┊143┊101┊        content: 'Yep!',\n-┊144┊   ┊        createdAt: moment().subtract(1, 'hours').add(5, 'minutes').unix(),\n+┊   ┊102┊        createdAt: moment().subtract(1, 'hours').add(5, 'minutes').toDate(),\n ┊145┊103┊        type: MessageType.TEXT,\n+┊   ┊104┊        holders: [user1, user3],\n ┊146┊105┊        recipients: [\n-┊147┊   ┊          {\n-┊148┊   ┊            userId: 1,\n-┊149┊   ┊            messageId: 2,\n-┊150┊   ┊            chatId: 1,\n-┊151┊   ┊            receivedAt: null,\n-┊152┊   ┊            readAt: null,\n-┊153┊   ┊          },\n+┊   ┊106┊          new Recipient({\n+┊   ┊107┊            user: user1,\n+┊   ┊108┊          }),\n ┊154┊109┊        ],\n-┊155┊   ┊        holderIds: [3, 1],\n-┊156┊   ┊      },\n+┊   ┊110┊      }),\n ┊157┊111┊    ],\n-┊158┊   ┊  },\n-┊159┊   ┊  {\n-┊160┊   ┊    id: 2,\n-┊161┊   ┊    name: null,\n-┊162┊   ┊    picture: null,\n-┊163┊   ┊    allTimeMemberIds: [1, 4],\n-┊164┊   ┊    listingMemberIds: [1, 4],\n-┊165┊   ┊    adminIds: null,\n-┊166┊   ┊    ownerId: null,\n+┊   ┊112┊  }));\n+┊   ┊113┊\n+┊   ┊114┊  await connection.manager.save(new Chat({\n+┊   ┊115┊    allTimeMembers: [user1, user4],\n+┊   ┊116┊    listingMembers: [user1, user4],\n ┊167┊117┊    messages: [\n-┊168┊   ┊      {\n-┊169┊   ┊        id: 1,\n-┊170┊   ┊        chatId: 2,\n-┊171┊   ┊        senderId: 1,\n+┊   ┊118┊      new Message({\n+┊   ┊119┊        sender: user1,\n ┊172┊120┊        content: 'Hey, it\\'s me',\n-┊173┊   ┊        createdAt: moment().subtract(2, 'hours').unix(),\n+┊   ┊121┊        createdAt: moment().subtract(2, 'hours').toDate(),\n ┊174┊122┊        type: MessageType.TEXT,\n+┊   ┊123┊        holders: [user1, user4],\n ┊175┊124┊        recipients: [\n-┊176┊   ┊          {\n-┊177┊   ┊            userId: 4,\n-┊178┊   ┊            messageId: 1,\n-┊179┊   ┊            chatId: 2,\n-┊180┊   ┊            receivedAt: null,\n-┊181┊   ┊            readAt: null,\n-┊182┊   ┊          },\n+┊   ┊125┊          new Recipient({\n+┊   ┊126┊            user: user4,\n+┊   ┊127┊          }),\n ┊183┊128┊        ],\n-┊184┊   ┊        holderIds: [1, 4],\n-┊185┊   ┊      },\n+┊   ┊129┊      }),\n ┊186┊130┊    ],\n-┊187┊   ┊  },\n-┊188┊   ┊  {\n-┊189┊   ┊    id: 3,\n-┊190┊   ┊    name: null,\n-┊191┊   ┊    picture: null,\n-┊192┊   ┊    allTimeMemberIds: [1, 5],\n-┊193┊   ┊    listingMemberIds: [1, 5],\n-┊194┊   ┊    adminIds: null,\n-┊195┊   ┊    ownerId: null,\n+┊   ┊131┊  }));\n+┊   ┊132┊\n+┊   ┊133┊  await connection.manager.save(new Chat({\n+┊   ┊134┊    allTimeMembers: [user1, user5],\n+┊   ┊135┊    listingMembers: [user1, user5],\n ┊196┊136┊    messages: [\n-┊197┊   ┊      {\n-┊198┊   ┊        id: 1,\n-┊199┊   ┊        chatId: 3,\n-┊200┊   ┊        senderId: 1,\n+┊   ┊137┊      new Message({\n+┊   ┊138┊        sender: user1,\n ┊201┊139┊        content: 'I should buy a boat',\n-┊202┊   ┊        createdAt: moment().subtract(1, 'days').unix(),\n+┊   ┊140┊        createdAt: moment().subtract(1, 'days').toDate(),\n ┊203┊141┊        type: MessageType.TEXT,\n+┊   ┊142┊        holders: [user1, user5],\n ┊204┊143┊        recipients: [\n-┊205┊   ┊          {\n-┊206┊   ┊            userId: 5,\n-┊207┊   ┊            messageId: 1,\n-┊208┊   ┊            chatId: 3,\n-┊209┊   ┊            receivedAt: null,\n-┊210┊   ┊            readAt: null,\n-┊211┊   ┊          },\n+┊   ┊144┊          new Recipient({\n+┊   ┊145┊            user: user5,\n+┊   ┊146┊          }),\n ┊212┊147┊        ],\n-┊213┊   ┊        holderIds: [1, 5],\n-┊214┊   ┊      },\n-┊215┊   ┊      {\n-┊216┊   ┊        id: 2,\n-┊217┊   ┊        chatId: 3,\n-┊218┊   ┊        senderId: 1,\n+┊   ┊148┊      }),\n+┊   ┊149┊      new Message({\n+┊   ┊150┊        sender: user1,\n ┊219┊151┊        content: 'You still there?',\n-┊220┊   ┊        createdAt: moment().subtract(1, 'days').add(16, 'hours').unix(),\n+┊   ┊152┊        createdAt: moment().subtract(1, 'days').add(16, 'hours').toDate(),\n ┊221┊153┊        type: MessageType.TEXT,\n+┊   ┊154┊        holders: [user1, user5],\n ┊222┊155┊        recipients: [\n-┊223┊   ┊          {\n-┊224┊   ┊            userId: 5,\n-┊225┊   ┊            messageId: 2,\n-┊226┊   ┊            chatId: 3,\n-┊227┊   ┊            receivedAt: null,\n-┊228┊   ┊            readAt: null,\n-┊229┊   ┊          },\n+┊   ┊156┊          new Recipient({\n+┊   ┊157┊            user: user5,\n+┊   ┊158┊          }),\n ┊230┊159┊        ],\n-┊231┊   ┊        holderIds: [1, 5],\n-┊232┊   ┊      },\n+┊   ┊160┊      }),\n ┊233┊161┊    ],\n-┊234┊   ┊  },\n-┊235┊   ┊  {\n-┊236┊   ┊    id: 4,\n-┊237┊   ┊    name: null,\n-┊238┊   ┊    picture: null,\n-┊239┊   ┊    allTimeMemberIds: [3, 4],\n-┊240┊   ┊    listingMemberIds: [3, 4],\n-┊241┊   ┊    adminIds: null,\n-┊242┊   ┊    ownerId: null,\n+┊   ┊162┊  }));\n+┊   ┊163┊\n+┊   ┊164┊  await connection.manager.save(new Chat({\n+┊   ┊165┊    allTimeMembers: [user3, user4],\n+┊   ┊166┊    listingMembers: [user3, user4],\n ┊243┊167┊    messages: [\n-┊244┊   ┊      {\n-┊245┊   ┊        id: 1,\n-┊246┊   ┊        chatId: 4,\n-┊247┊   ┊        senderId: 3,\n+┊   ┊168┊      new Message({\n+┊   ┊169┊        sender: user3,\n ┊248┊170┊        content: 'Look at my mukluks!',\n-┊249┊   ┊        createdAt: moment().subtract(4, 'days').unix(),\n+┊   ┊171┊        createdAt: moment().subtract(4, 'days').toDate(),\n ┊250┊172┊        type: MessageType.TEXT,\n+┊   ┊173┊        holders: [user3, user4],\n ┊251┊174┊        recipients: [\n-┊252┊   ┊          {\n-┊253┊   ┊            userId: 4,\n-┊254┊   ┊            messageId: 1,\n-┊255┊   ┊            chatId: 4,\n-┊256┊   ┊            receivedAt: null,\n-┊257┊   ┊            readAt: null,\n-┊258┊   ┊          },\n+┊   ┊175┊          new Recipient({\n+┊   ┊176┊            user: user4,\n+┊   ┊177┊          }),\n ┊259┊178┊        ],\n-┊260┊   ┊        holderIds: [3, 4],\n-┊261┊   ┊      },\n+┊   ┊179┊      }),\n ┊262┊180┊    ],\n-┊263┊   ┊  },\n-┊264┊   ┊  {\n-┊265┊   ┊    id: 5,\n-┊266┊   ┊    name: null,\n-┊267┊   ┊    picture: null,\n-┊268┊   ┊    allTimeMemberIds: [2, 5],\n-┊269┊   ┊    listingMemberIds: [2, 5],\n-┊270┊   ┊    adminIds: null,\n-┊271┊   ┊    ownerId: null,\n+┊   ┊181┊  }));\n+┊   ┊182┊\n+┊   ┊183┊  await connection.manager.save(new Chat({\n+┊   ┊184┊    allTimeMembers: [user2, user5],\n+┊   ┊185┊    listingMembers: [user2, user5],\n ┊272┊186┊    messages: [\n-┊273┊   ┊      {\n-┊274┊   ┊        id: 1,\n-┊275┊   ┊        chatId: 5,\n-┊276┊   ┊        senderId: 2,\n+┊   ┊187┊      new Message({\n+┊   ┊188┊        sender: user2,\n ┊277┊189┊        content: 'This is wicked good ice cream.',\n-┊278┊   ┊        createdAt: moment().subtract(2, 'weeks').unix(),\n+┊   ┊190┊        createdAt: moment().subtract(2, 'weeks').toDate(),\n ┊279┊191┊        type: MessageType.TEXT,\n+┊   ┊192┊        holders: [user2, user5],\n ┊280┊193┊        recipients: [\n-┊281┊   ┊          {\n-┊282┊   ┊            userId: 5,\n-┊283┊   ┊            messageId: 1,\n-┊284┊   ┊            chatId: 5,\n-┊285┊   ┊            receivedAt: null,\n-┊286┊   ┊            readAt: null,\n-┊287┊   ┊          },\n+┊   ┊194┊          new Recipient({\n+┊   ┊195┊            user: user5,\n+┊   ┊196┊          }),\n ┊288┊197┊        ],\n-┊289┊   ┊        holderIds: [2, 5],\n-┊290┊   ┊      },\n-┊291┊   ┊      {\n-┊292┊   ┊        id: 2,\n-┊293┊   ┊        chatId: 6,\n-┊294┊   ┊        senderId: 5,\n+┊   ┊198┊      }),\n+┊   ┊199┊      new Message({\n+┊   ┊200┊        sender: user5,\n ┊295┊201┊        content: 'Love it!',\n-┊296┊   ┊        createdAt: moment().subtract(2, 'weeks').add(10, 'minutes').unix(),\n+┊   ┊202┊        createdAt: moment().subtract(2, 'weeks').add(10, 'minutes').toDate(),\n ┊297┊203┊        type: MessageType.TEXT,\n+┊   ┊204┊        holders: [user2, user5],\n ┊298┊205┊        recipients: [\n-┊299┊   ┊          {\n-┊300┊   ┊            userId: 2,\n-┊301┊   ┊            messageId: 2,\n-┊302┊   ┊            chatId: 5,\n-┊303┊   ┊            receivedAt: null,\n-┊304┊   ┊            readAt: null,\n-┊305┊   ┊          },\n+┊   ┊206┊          new Recipient({\n+┊   ┊207┊            user: user2,\n+┊   ┊208┊          }),\n ┊306┊209┊        ],\n-┊307┊   ┊        holderIds: [5, 2],\n-┊308┊   ┊      },\n+┊   ┊210┊      }),\n ┊309┊211┊    ],\n-┊310┊   ┊  },\n-┊311┊   ┊  {\n-┊312┊   ┊    id: 6,\n-┊313┊   ┊    name: null,\n-┊314┊   ┊    picture: null,\n-┊315┊   ┊    allTimeMemberIds: [1, 6],\n-┊316┊   ┊    listingMemberIds: [1],\n-┊317┊   ┊    adminIds: null,\n-┊318┊   ┊    ownerId: null,\n-┊319┊   ┊    messages: [],\n-┊320┊   ┊  },\n-┊321┊   ┊  {\n-┊322┊   ┊    id: 7,\n-┊323┊   ┊    name: null,\n-┊324┊   ┊    picture: null,\n-┊325┊   ┊    allTimeMemberIds: [2, 1],\n-┊326┊   ┊    listingMemberIds: [2],\n-┊327┊   ┊    adminIds: null,\n-┊328┊   ┊    ownerId: null,\n-┊329┊   ┊    messages: [],\n-┊330┊   ┊  },\n-┊331┊   ┊  {\n-┊332┊   ┊    id: 8,\n-┊333┊   ┊    name: 'A user 0 group',\n+┊   ┊212┊  }));\n+┊   ┊213┊\n+┊   ┊214┊  await connection.manager.save(new Chat({\n+┊   ┊215┊    allTimeMembers: [user1, user6],\n+┊   ┊216┊    listingMembers: [user1],\n+┊   ┊217┊  }));\n+┊   ┊218┊\n+┊   ┊219┊  await connection.manager.save(new Chat({\n+┊   ┊220┊    allTimeMembers: [user2, user1],\n+┊   ┊221┊    listingMembers: [user2],\n+┊   ┊222┊  }));\n+┊   ┊223┊\n+┊   ┊224┊  await connection.manager.save(new Chat({\n+┊   ┊225┊    name: 'Ethan\\'s group',\n ┊334┊226┊    picture: 'https://randomuser.me/api/portraits/thumb/lego/1.jpg',\n-┊335┊   ┊    allTimeMemberIds: [1, 3, 4, 6],\n-┊336┊   ┊    listingMemberIds: [1, 3, 4, 6],\n-┊337┊   ┊    actualGroupMemberIds: [1, 4, 6],\n-┊338┊   ┊    adminIds: [1, 6],\n-┊339┊   ┊    ownerId: 1,\n+┊   ┊227┊    allTimeMembers: [user1, user3, user4, user6],\n+┊   ┊228┊    listingMembers: [user1, user3, user4, user6],\n+┊   ┊229┊    actualGroupMembers: [user1, user4, user6],\n+┊   ┊230┊    admins: [user1, user6],\n+┊   ┊231┊    owner: user1,\n ┊340┊232┊    messages: [\n-┊341┊   ┊      {\n-┊342┊   ┊        id: 1,\n-┊343┊   ┊        chatId: 8,\n-┊344┊   ┊        senderId: 1,\n+┊   ┊233┊      new Message({\n+┊   ┊234┊        sender: user1,\n ┊345┊235┊        content: 'I made a group',\n-┊346┊   ┊        createdAt: moment().subtract(2, 'weeks').unix(),\n+┊   ┊236┊        createdAt: moment().subtract(2, 'weeks').toDate(),\n ┊347┊237┊        type: MessageType.TEXT,\n+┊   ┊238┊        holders: [user1, user3, user4, user6],\n ┊348┊239┊        recipients: [\n-┊349┊   ┊          {\n-┊350┊   ┊            userId: 3,\n-┊351┊   ┊            messageId: 1,\n-┊352┊   ┊            chatId: 8,\n-┊353┊   ┊            receivedAt: null,\n-┊354┊   ┊            readAt: null,\n-┊355┊   ┊          },\n-┊356┊   ┊          {\n-┊357┊   ┊            userId: 4,\n-┊358┊   ┊            messageId: 1,\n-┊359┊   ┊            chatId: 8,\n-┊360┊   ┊            receivedAt: moment().subtract(2, 'weeks').add(1, 'minutes').unix(),\n-┊361┊   ┊            readAt: moment().subtract(2, 'weeks').add(5, 'minutes').unix(),\n-┊362┊   ┊          },\n-┊363┊   ┊          {\n-┊364┊   ┊            userId: 6,\n-┊365┊   ┊            messageId: 1,\n-┊366┊   ┊            chatId: 8,\n-┊367┊   ┊            receivedAt: null,\n-┊368┊   ┊            readAt: null,\n-┊369┊   ┊          },\n+┊   ┊240┊          new Recipient({\n+┊   ┊241┊            user: user3,\n+┊   ┊242┊          }),\n+┊   ┊243┊          new Recipient({\n+┊   ┊244┊            user: user4,\n+┊   ┊245┊          }),\n+┊   ┊246┊          new Recipient({\n+┊   ┊247┊            user: user6,\n+┊   ┊248┊          }),\n ┊370┊249┊        ],\n-┊371┊   ┊        holderIds: [1, 3, 4, 6],\n-┊372┊   ┊      },\n-┊373┊   ┊      {\n-┊374┊   ┊        id: 2,\n-┊375┊   ┊        chatId: 8,\n-┊376┊   ┊        senderId: 1,\n-┊377┊   ┊        content: 'Ops, user 3 was not supposed to be here',\n-┊378┊   ┊        createdAt: moment().subtract(2, 'weeks').add(2, 'minutes').unix(),\n+┊   ┊250┊      }),\n+┊   ┊251┊      new Message({\n+┊   ┊252┊        sender: user1,\n+┊   ┊253┊        content: 'Ops, Avery was not supposed to be here',\n+┊   ┊254┊        createdAt: moment().subtract(2, 'weeks').add(2, 'minutes').toDate(),\n ┊379┊255┊        type: MessageType.TEXT,\n+┊   ┊256┊        holders: [user1, user4, user6],\n ┊380┊257┊        recipients: [\n-┊381┊   ┊          {\n-┊382┊   ┊            userId: 4,\n-┊383┊   ┊            messageId: 2,\n-┊384┊   ┊            chatId: 8,\n-┊385┊   ┊            receivedAt: moment().subtract(2, 'weeks').add(3, 'minutes').unix(),\n-┊386┊   ┊            readAt: moment().subtract(2, 'weeks').add(5, 'minutes').unix(),\n-┊387┊   ┊          },\n-┊388┊   ┊          {\n-┊389┊   ┊            userId: 6,\n-┊390┊   ┊            messageId: 2,\n-┊391┊   ┊            chatId: 8,\n-┊392┊   ┊            receivedAt: null,\n-┊393┊   ┊            readAt: null,\n-┊394┊   ┊          },\n+┊   ┊258┊          new Recipient({\n+┊   ┊259┊            user: user4,\n+┊   ┊260┊          }),\n+┊   ┊261┊          new Recipient({\n+┊   ┊262┊            user: user6,\n+┊   ┊263┊          }),\n ┊395┊264┊        ],\n-┊396┊   ┊        holderIds: [1, 4, 6],\n-┊397┊   ┊      },\n-┊398┊   ┊      {\n-┊399┊   ┊        id: 3,\n-┊400┊   ┊        chatId: 8,\n-┊401┊   ┊        senderId: 4,\n+┊   ┊265┊      }),\n+┊   ┊266┊      new Message({\n+┊   ┊267┊        sender: user4,\n ┊402┊268┊        content: 'Awesome!',\n-┊403┊   ┊        createdAt: moment().subtract(2, 'weeks').add(10, 'minutes').unix(),\n+┊   ┊269┊        createdAt: moment().subtract(2, 'weeks').add(10, 'minutes').toDate(),\n ┊404┊270┊        type: MessageType.TEXT,\n+┊   ┊271┊        holders: [user1, user4, user6],\n ┊405┊272┊        recipients: [\n-┊406┊   ┊          {\n-┊407┊   ┊            userId: 1,\n-┊408┊   ┊            messageId: 3,\n-┊409┊   ┊            chatId: 8,\n-┊410┊   ┊            receivedAt: null,\n-┊411┊   ┊            readAt: null,\n-┊412┊   ┊          },\n-┊413┊   ┊          {\n-┊414┊   ┊            userId: 6,\n-┊415┊   ┊            messageId: 3,\n-┊416┊   ┊            chatId: 8,\n-┊417┊   ┊            receivedAt: null,\n-┊418┊   ┊            readAt: null,\n-┊419┊   ┊          },\n+┊   ┊273┊          new Recipient({\n+┊   ┊274┊            user: user1,\n+┊   ┊275┊          }),\n+┊   ┊276┊          new Recipient({\n+┊   ┊277┊            user: user6,\n+┊   ┊278┊          }),\n ┊420┊279┊        ],\n-┊421┊   ┊        holderIds: [1, 4, 6],\n-┊422┊   ┊      },\n+┊   ┊280┊      }),\n ┊423┊281┊    ],\n-┊424┊   ┊  },\n-┊425┊   ┊  {\n-┊426┊   ┊    id: 9,\n-┊427┊   ┊    name: 'A user 5 group',\n-┊428┊   ┊    picture: null,\n-┊429┊   ┊    allTimeMemberIds: [6, 3],\n-┊430┊   ┊    listingMemberIds: [6, 3],\n-┊431┊   ┊    actualGroupMemberIds: [6, 3],\n-┊432┊   ┊    adminIds: [6],\n-┊433┊   ┊    ownerId: 6,\n-┊434┊   ┊    messages: [],\n-┊435┊   ┊  },\n-┊436┊   ┊];\n+┊   ┊282┊  }));\n ┊437┊283┊\n-┊438┊   ┊export const db = {users, chats};\n+┊   ┊284┊  await connection.manager.save(new Chat({\n+┊   ┊285┊    name: 'Ray\\'s group',\n+┊   ┊286┊    allTimeMembers: [user3, user6],\n+┊   ┊287┊    listingMembers: [user3, user6],\n+┊   ┊288┊    actualGroupMembers: [user3, user6],\n+┊   ┊289┊    admins: [user6],\n+┊   ┊290┊    owner: user6,\n+┊   ┊291┊  }));\n+┊   ┊292┊}\n```\n\n[}]: #\n\nIt's time to deal with resolvers:\n\n[{]: <helper> (diffStep \"6.1\" files=\"schema/resolvers.ts\" module=\"server\")\n\n#### Step 6.1: TypeORM with PostgreSQL\n\n##### Changed schema&#x2F;resolvers.ts\n```diff\n@@ -1,4 +1,4 @@\n-┊1┊ ┊import { Chat, db, Message, MessageType, Recipient, User } from \"../db\";\n+┊ ┊1┊import { MessageType } from \"../db\";\n ┊2┊2┊import { IResolvers } from \"graphql-tools/dist/Interfaces\";\n ┊3┊3┊import {\n ┊4┊4┊  AddChatMutationArgs, AddGroupMutationArgs, AddMessageMutationArgs, ChatQueryArgs, MessageAddedSubscriptionArgs,\n```\n```diff\n@@ -6,87 +6,123 @@\n ┊  6┊  6┊} from \"../types\";\n ┊  7┊  7┊import * as moment from \"moment\";\n ┊  8┊  8┊import { PubSub, withFilter } from \"graphql-subscriptions\";\n-┊  9┊   ┊\n-┊ 10┊   ┊let users = db.users;\n-┊ 11┊   ┊let chats = db.chats;\n+┊   ┊  9┊import { User } from \"../entity/User\";\n+┊   ┊ 10┊import { Chat } from \"../entity/Chat\";\n+┊   ┊ 11┊import { Message } from \"../entity/Message\";\n+┊   ┊ 12┊import { Recipient } from \"../entity/Recipient\";\n+┊   ┊ 13┊import { Connection } from \"typeorm\";\n ┊ 12┊ 14┊\n ┊ 13┊ 15┊export const pubsub = new PubSub();\n ┊ 14┊ 16┊\n ┊ 15┊ 17┊export const resolvers: IResolvers = {\n ┊ 16┊ 18┊  Query: {\n ┊ 17┊ 19┊    // Show all users for the moment.\n-┊ 18┊   ┊    users: (obj: any, args: any, {user: currentUser}: {user: User}): User[] => users.filter(user => user.id !== currentUser.id),\n-┊ 19┊   ┊    chats: (obj: any, args: any, {user: currentUser}: {user: User}): Chat[] => chats.filter(chat => chat.listingMemberIds.includes(currentUser.id)),\n-┊ 20┊   ┊    chat: (obj: any, {chatId}: ChatQueryArgs): Chat | null => chats.find(chat => chat.id === Number(chatId)) || null,\n+┊   ┊ 20┊    users: async (obj: any, args: any, {user: currentUser, connection}: { user: User, connection: Connection }): Promise<User[]> => {\n+┊   ┊ 21┊      return await connection\n+┊   ┊ 22┊        .createQueryBuilder(User, \"user\")\n+┊   ┊ 23┊        .where('user.id != :id', {id: currentUser.id})\n+┊   ┊ 24┊        .getMany();\n+┊   ┊ 25┊    },\n+┊   ┊ 26┊    chats: async (obj: any, args: any, {user: currentUser, connection}: { user: User, connection: Connection }): Promise<any[]> => {\n+┊   ┊ 27┊      return await connection\n+┊   ┊ 28┊        .createQueryBuilder(Chat, \"chat\")\n+┊   ┊ 29┊        .leftJoin('chat.listingMembers', 'listingMembers')\n+┊   ┊ 30┊        .where('listingMembers.id = :id', {id: currentUser.id})\n+┊   ┊ 31┊        .getMany();\n+┊   ┊ 32┊    },\n+┊   ┊ 33┊    chat: async (obj: any, {chatId}: ChatQueryArgs, {connection}: { user: User, connection: Connection }): Promise<any> => {\n+┊   ┊ 34┊      return await connection\n+┊   ┊ 35┊        .createQueryBuilder(Chat, \"chat\")\n+┊   ┊ 36┊        .whereInIds(chatId)\n+┊   ┊ 37┊        .getOne();\n+┊   ┊ 38┊    },\n ┊ 21┊ 39┊  },\n ┊ 22┊ 40┊  Mutation: {\n-┊ 23┊   ┊    addChat: (obj: any, {recipientId}: AddChatMutationArgs, {user: currentUser}: {user: User}): Chat => {\n-┊ 24┊   ┊      if (!users.find(user => user.id === Number(recipientId))) {\n+┊   ┊ 41┊    addChat: async (obj: any, {recipientId}: AddChatMutationArgs, {user: currentUser, connection}: { user: User, connection: Connection }): Promise<Chat | null> => {\n+┊   ┊ 42┊      const recipient = await connection\n+┊   ┊ 43┊        .createQueryBuilder(User, \"user\")\n+┊   ┊ 44┊        .whereInIds(recipientId)\n+┊   ┊ 45┊        .getOne();\n+┊   ┊ 46┊\n+┊   ┊ 47┊      if (!recipient) {\n ┊ 25┊ 48┊        throw new Error(`Recipient ${recipientId} doesn't exist.`);\n ┊ 26┊ 49┊      }\n ┊ 27┊ 50┊\n-┊ 28┊   ┊      const chat = chats.find(chat => !chat.name && chat.allTimeMemberIds.includes(currentUser.id) && chat.allTimeMemberIds.includes(Number(recipientId)));\n+┊   ┊ 51┊      let chat = await connection\n+┊   ┊ 52┊        .createQueryBuilder(Chat, \"chat\")\n+┊   ┊ 53┊        .where('chat.name IS NULL')\n+┊   ┊ 54┊        .innerJoin('chat.allTimeMembers', 'allTimeMembers1', 'allTimeMembers1.id = :currentUserId', {currentUserId: currentUser.id})\n+┊   ┊ 55┊        .innerJoin('chat.allTimeMembers', 'allTimeMembers2', 'allTimeMembers2.id = :recipientId', {recipientId})\n+┊   ┊ 56┊        .innerJoinAndSelect('chat.listingMembers', 'listingMembers')\n+┊   ┊ 57┊        .getOne();\n+┊   ┊ 58┊\n ┊ 29┊ 59┊      if (chat) {\n-┊ 30┊   ┊        // Chat already exists. Both users are already in the allTimeMemberIds array\n-┊ 31┊   ┊        const chatId = chat.id;\n-┊ 32┊   ┊        if (!chat.listingMemberIds.includes(currentUser.id)) {\n+┊   ┊ 60┊        // Chat already exists. Both users are already in the userIds array\n+┊   ┊ 61┊        const listingMembers = await connection\n+┊   ┊ 62┊          .createQueryBuilder(User, \"user\")\n+┊   ┊ 63┊          .innerJoin('user.listingMemberChats', 'listingMemberChats', 'listingMemberChats.id = :chatId', {chatId: chat.id})\n+┊   ┊ 64┊          .getMany();\n+┊   ┊ 65┊\n+┊   ┊ 66┊        if (!listingMembers.find(user => user.id === currentUser.id)) {\n ┊ 33┊ 67┊          // The chat isn't listed for the current user. Add him to the memberIds\n-┊ 34┊   ┊          chat.listingMemberIds.push(currentUser.id);\n-┊ 35┊   ┊          chats.find(chat => chat.id === chatId)!.listingMemberIds.push(currentUser.id);\n-┊ 36┊   ┊          return chat;\n+┊   ┊ 68┊          chat.listingMembers.push(currentUser);\n+┊   ┊ 69┊          chat = await connection.getRepository(Chat).save(chat);\n+┊   ┊ 70┊\n+┊   ┊ 71┊          return chat || null;\n ┊ 37┊ 72┊        } else {\n ┊ 38┊ 73┊          throw new Error(`Chat already exists.`);\n ┊ 39┊ 74┊        }\n ┊ 40┊ 75┊      } else {\n ┊ 41┊ 76┊        // Create the chat\n-┊ 42┊   ┊        const id = (chats.length && chats[chats.length - 1].id + 1) || 1;\n-┊ 43┊   ┊        const chat: Chat = {\n-┊ 44┊   ┊          id,\n-┊ 45┊   ┊          name: null,\n-┊ 46┊   ┊          picture: null,\n-┊ 47┊   ┊          adminIds: null,\n-┊ 48┊   ┊          ownerId: null,\n-┊ 49┊   ┊          allTimeMemberIds: [currentUser.id, Number(recipientId)],\n+┊   ┊ 77┊        chat = await connection.getRepository(Chat).save(new Chat({\n+┊   ┊ 78┊          allTimeMembers: [currentUser, recipient],\n ┊ 50┊ 79┊          // Chat will not be listed to the other user until the first message gets written\n-┊ 51┊   ┊          listingMemberIds: [currentUser.id],\n-┊ 52┊   ┊          actualGroupMemberIds: null,\n-┊ 53┊   ┊          messages: [],\n-┊ 54┊   ┊        };\n-┊ 55┊   ┊        chats.push(chat);\n+┊   ┊ 80┊          listingMembers: [currentUser],\n+┊   ┊ 81┊        }));\n ┊ 56┊ 82┊\n-┊ 57┊   ┊        return chat;\n+┊   ┊ 83┊        return chat || null;\n ┊ 58┊ 84┊      }\n ┊ 59┊ 85┊    },\n-┊ 60┊   ┊    addGroup: (obj: any, {recipientIds, groupName}: AddGroupMutationArgs, {user: currentUser}: {user: User}): Chat => {\n-┊ 61┊   ┊      recipientIds.forEach(recipientId => {\n-┊ 62┊   ┊        if (!users.find(user => user.id === Number(recipientId))) {\n+┊   ┊ 86┊    addGroup: async (obj: any, {recipientIds, groupName}: AddGroupMutationArgs, {user: currentUser, connection}: { user: User, connection: Connection }): Promise<Chat | null> => {\n+┊   ┊ 87┊      let recipients: User[] = [];\n+┊   ┊ 88┊      for (let recipientId of recipientIds) {\n+┊   ┊ 89┊        const recipient = await connection\n+┊   ┊ 90┊          .createQueryBuilder(User, \"user\")\n+┊   ┊ 91┊          .whereInIds(recipientId)\n+┊   ┊ 92┊          .getOne();\n+┊   ┊ 93┊        if (!recipient) {\n ┊ 63┊ 94┊          throw new Error(`Recipient ${recipientId} doesn't exist.`);\n ┊ 64┊ 95┊        }\n-┊ 65┊   ┊      });\n+┊   ┊ 96┊        recipients.push(recipient);\n+┊   ┊ 97┊      }\n ┊ 66┊ 98┊\n-┊ 67┊   ┊      const id = (chats.length && chats[chats.length - 1].id + 1) || 1;\n-┊ 68┊   ┊      const chat: Chat = {\n-┊ 69┊   ┊        id,\n+┊   ┊ 99┊      const chat = await connection.getRepository(Chat).save(new Chat({\n ┊ 70┊100┊        name: groupName,\n-┊ 71┊   ┊        picture: null,\n-┊ 72┊   ┊        adminIds: [currentUser.id],\n-┊ 73┊   ┊        ownerId: currentUser.id,\n-┊ 74┊   ┊        allTimeMemberIds: [currentUser.id, ...recipientIds.map(id => Number(id))],\n-┊ 75┊   ┊        listingMemberIds: [currentUser.id, ...recipientIds.map(id => Number(id))],\n-┊ 76┊   ┊        actualGroupMemberIds: [currentUser.id, ...recipientIds.map(id => Number(id))],\n-┊ 77┊   ┊        messages: [],\n-┊ 78┊   ┊      };\n-┊ 79┊   ┊      chats.push(chat);\n+┊   ┊101┊        admins: [currentUser],\n+┊   ┊102┊        owner: currentUser,\n+┊   ┊103┊        allTimeMembers: [...recipients, currentUser],\n+┊   ┊104┊        listingMembers: [...recipients, currentUser],\n+┊   ┊105┊        actualGroupMembers: [...recipients, currentUser],\n+┊   ┊106┊      }));\n ┊ 80┊107┊\n ┊ 81┊108┊      pubsub.publish('chatAdded', {\n ┊ 82┊109┊        creatorId: currentUser.id,\n ┊ 83┊110┊        chatAdded: chat,\n ┊ 84┊111┊      });\n ┊ 85┊112┊\n-┊ 86┊   ┊      return chat;\n+┊   ┊113┊      return chat || null;\n ┊ 87┊114┊    },\n-┊ 88┊   ┊    removeChat: (obj: any, {chatId}: RemoveChatMutationArgs, {user: currentUser}: {user: User}): number => {\n-┊ 89┊   ┊      const chat = chats.find(chat => chat.id === Number(chatId));\n+┊   ┊115┊    removeChat: async (obj: any, {chatId}: RemoveChatMutationArgs, {user: currentUser, connection}: { user: User, connection: Connection }) => {\n+┊   ┊116┊      const chat = await connection\n+┊   ┊117┊        .createQueryBuilder(Chat, \"chat\")\n+┊   ┊118┊        .whereInIds(Number(chatId))\n+┊   ┊119┊        .innerJoinAndSelect('chat.listingMembers', 'listingMembers')\n+┊   ┊120┊        .leftJoinAndSelect('chat.actualGroupMembers', 'actualGroupMembers')\n+┊   ┊121┊        .leftJoinAndSelect('chat.admins', 'admins')\n+┊   ┊122┊        .leftJoinAndSelect('chat.owner', 'owner')\n+┊   ┊123┊        .leftJoinAndSelect('chat.messages', 'messages')\n+┊   ┊124┊        .leftJoinAndSelect('messages.holders', 'holders')\n+┊   ┊125┊        .getOne();\n ┊ 90┊126┊\n ┊ 91┊127┊      if (!chat) {\n ┊ 92┊128┊        throw new Error(`The chat ${chatId} doesn't exist.`);\n```\n```diff\n@@ -94,186 +130,188 @@\n ┊ 94┊130┊\n ┊ 95┊131┊      if (!chat.name) {\n ┊ 96┊132┊        // Chat\n-┊ 97┊   ┊        if (!chat.listingMemberIds.includes(currentUser.id)) {\n-┊ 98┊   ┊          throw new Error(`The user is not a member of the chat ${chatId}.`);\n+┊   ┊133┊        if (!chat.listingMembers.find(user => user.id === currentUser.id)) {\n+┊   ┊134┊          throw new Error(`The user is not a listing member of the chat ${chatId}.`);\n ┊ 99┊135┊        }\n ┊100┊136┊\n ┊101┊137┊        // Instead of chaining map and filter we can loop once using reduce\n-┊102┊   ┊        const messages = chat.messages.reduce<Message[]>((filtered, message) => {\n-┊103┊   ┊          // Remove the current user from the message holders\n-┊104┊   ┊          message.holderIds = message.holderIds.filter(holderId => holderId !== currentUser.id);\n+┊   ┊138┊        chat.messages = await chat.messages.reduce<Promise<Message[]>>(async (filtered$, message) => {\n+┊   ┊139┊          const filtered = await filtered$;\n ┊105┊140┊\n-┊106┊   ┊          if (message.holderIds.length !== 0) {\n+┊   ┊141┊          message.holders = message.holders.filter(user => user.id !== currentUser.id);\n+┊   ┊142┊\n+┊   ┊143┊          if (message.holders.length !== 0) {\n+┊   ┊144┊            // Remove the current user from the message holders\n+┊   ┊145┊            await connection.getRepository(Message).save(message);\n ┊107┊146┊            filtered.push(message);\n-┊108┊   ┊          } // else discard the message\n+┊   ┊147┊          } else {\n+┊   ┊148┊            // Simply remove the message\n+┊   ┊149┊            const recipients = await connection\n+┊   ┊150┊              .createQueryBuilder(Recipient, \"recipient\")\n+┊   ┊151┊              .innerJoinAndSelect('recipient.message', 'message', 'message.id = :messageId', {messageId: message.id})\n+┊   ┊152┊              .innerJoinAndSelect('recipient.user', 'user')\n+┊   ┊153┊              .getMany();\n+┊   ┊154┊            for (let recipient of recipients) {\n+┊   ┊155┊              await connection.getRepository(Recipient).remove(recipient);\n+┊   ┊156┊            }\n+┊   ┊157┊            await connection.getRepository(Message).remove(message);\n+┊   ┊158┊          }\n ┊109┊159┊\n ┊110┊160┊          return filtered;\n-┊111┊   ┊        }, []);\n+┊   ┊161┊        }, Promise.resolve([]));\n ┊112┊162┊\n ┊113┊163┊        // Remove the current user from who gets the chat listed. The chat will no longer appear in his list\n-┊114┊   ┊        const listingMemberIds = chat.listingMemberIds.filter(listingId => listingId !== currentUser.id);\n+┊   ┊164┊        chat.listingMembers = chat.listingMembers.filter(user => user.id !== currentUser.id);\n ┊115┊165┊\n ┊116┊166┊        // Check how many members are left\n-┊117┊   ┊        if (listingMemberIds.length === 0) {\n+┊   ┊167┊        if (chat.listingMembers.length === 0) {\n ┊118┊168┊          // Delete the chat\n-┊119┊   ┊          chats = chats.filter(chat => chat.id !== Number(chatId));\n+┊   ┊169┊          await connection.getRepository(Chat).remove(chat);\n ┊120┊170┊        } else {\n ┊121┊171┊          // Update the chat\n-┊122┊   ┊          chats = chats.map(chat => {\n-┊123┊   ┊            if (chat.id === Number(chatId)) {\n-┊124┊   ┊              chat = {...chat, listingMemberIds, messages};\n-┊125┊   ┊            }\n-┊126┊   ┊            return chat;\n-┊127┊   ┊          });\n+┊   ┊172┊          await connection.getRepository(Chat).save(chat);\n ┊128┊173┊        }\n-┊129┊   ┊        return Number(chatId);\n+┊   ┊174┊        return chatId;\n ┊130┊175┊      } else {\n ┊131┊176┊        // Group\n-┊132┊   ┊        if (chat.ownerId !== currentUser.id) {\n-┊133┊   ┊          throw new Error(`Group ${chatId} is not owned by the user.`);\n-┊134┊   ┊        }\n ┊135┊177┊\n ┊136┊178┊        // Instead of chaining map and filter we can loop once using reduce\n-┊137┊   ┊        const messages = chat.messages.reduce<Message[]>((filtered, message) => {\n-┊138┊   ┊          // Remove the current user from the message holders\n-┊139┊   ┊          message.holderIds = message.holderIds.filter(holderId => holderId !== currentUser.id);\n+┊   ┊179┊        chat.messages = await chat.messages.reduce<Promise<Message[]>>(async (filtered$, message) => {\n+┊   ┊180┊          const filtered = await filtered$;\n+┊   ┊181┊\n+┊   ┊182┊          message.holders = message.holders.filter(user => user.id !== currentUser.id);\n ┊140┊183┊\n-┊141┊   ┊          if (message.holderIds.length !== 0) {\n+┊   ┊184┊          if (message.holders.length !== 0) {\n+┊   ┊185┊            // Remove the current user from the message holders\n+┊   ┊186┊            await connection.getRepository(Message).save(message);\n ┊142┊187┊            filtered.push(message);\n-┊143┊   ┊          } // else discard the message\n+┊   ┊188┊          } else {\n+┊   ┊189┊            // Simply remove the message\n+┊   ┊190┊            const recipients = await connection\n+┊   ┊191┊              .createQueryBuilder(Recipient, \"recipient\")\n+┊   ┊192┊              .innerJoinAndSelect('recipient.message', 'message', 'message.id = :messageId', {messageId: message.id})\n+┊   ┊193┊              .innerJoinAndSelect('recipient.user', 'user')\n+┊   ┊194┊              .getMany();\n+┊   ┊195┊            for (let recipient of recipients) {\n+┊   ┊196┊              await connection.getRepository(Recipient).remove(recipient);\n+┊   ┊197┊            }\n+┊   ┊198┊            await connection.getRepository(Message).remove(message);\n+┊   ┊199┊          }\n ┊144┊200┊\n ┊145┊201┊          return filtered;\n-┊146┊   ┊        }, []);\n+┊   ┊202┊        }, Promise.resolve([]));\n ┊147┊203┊\n ┊148┊204┊        // Remove the current user from who gets the group listed. The group will no longer appear in his list\n-┊149┊   ┊        const listingMemberIds = chat.listingMemberIds.filter(listingId => listingId !== currentUser.id);\n+┊   ┊205┊        chat.listingMembers = chat.listingMembers.filter(user => user.id !== currentUser.id);\n ┊150┊206┊\n ┊151┊207┊        // Check how many members (including previous ones who can still access old messages) are left\n-┊152┊   ┊        if (listingMemberIds.length === 0) {\n+┊   ┊208┊        if (chat.listingMembers.length === 0) {\n ┊153┊209┊          // Remove the group\n-┊154┊   ┊          chats = chats.filter(chat => chat.id !== Number(chatId));\n+┊   ┊210┊          await connection.getRepository(Chat).remove(chat);\n ┊155┊211┊        } else {\n ┊156┊212┊          // Update the group\n ┊157┊213┊\n ┊158┊214┊          // Remove the current user from the chat members. He is no longer a member of the group\n-┊159┊   ┊          const actualGroupMemberIds = chat.actualGroupMemberIds!.filter(memberId => memberId !== currentUser.id);\n+┊   ┊215┊          chat.actualGroupMembers = chat.actualGroupMembers && chat.actualGroupMembers.filter(user => user.id !== currentUser.id);\n ┊160┊216┊          // Remove the current user from the chat admins\n-┊161┊   ┊          const adminIds = chat.adminIds!.filter(memberId => memberId !== currentUser.id);\n-┊162┊   ┊          // Set the owner id to be null. A null owner means the group is read-only\n-┊163┊   ┊          let ownerId: number | null = null;\n-┊164┊   ┊\n-┊165┊   ┊          // Check if there is any admin left\n-┊166┊   ┊          if (adminIds!.length) {\n-┊167┊   ┊            // Pick an admin as the new owner. The group is no longer read-only\n-┊168┊   ┊            ownerId = chat.adminIds![0];\n-┊169┊   ┊          }\n+┊   ┊217┊          chat.admins = chat.admins && chat.admins.filter(user => user.id !== currentUser.id);\n+┊   ┊218┊          // If there are no more admins left the group goes read only\n+┊   ┊219┊          chat.owner = chat.admins && chat.admins[0] || null; // A null owner means the group is read-only\n ┊170┊220┊\n-┊171┊   ┊          chats = chats.map(chat => {\n-┊172┊   ┊            if (chat.id === Number(chatId)) {\n-┊173┊   ┊              chat = {...chat, messages, listingMemberIds, actualGroupMemberIds, adminIds, ownerId};\n-┊174┊   ┊            }\n-┊175┊   ┊            return chat;\n-┊176┊   ┊          });\n+┊   ┊221┊          await connection.getRepository(Chat).save(chat);\n ┊177┊222┊        }\n-┊178┊   ┊        return Number(chatId);\n+┊   ┊223┊        return chatId;\n ┊179┊224┊      }\n ┊180┊225┊    },\n-┊181┊   ┊    addMessage: (obj: any, {chatId, content}: AddMessageMutationArgs, {user: currentUser}: {user: User}): Message => {\n+┊   ┊226┊    addMessage: async (obj: any, {chatId, content}: AddMessageMutationArgs, {user: currentUser, connection}: { user: User, connection: Connection }): Promise<Message | null> => {\n ┊182┊227┊      if (content === null || content === '') {\n ┊183┊228┊        throw new Error(`Cannot add empty or null messages.`);\n ┊184┊229┊      }\n ┊185┊230┊\n-┊186┊   ┊      let chat = chats.find(chat => chat.id === Number(chatId));\n+┊   ┊231┊      let chat = await connection\n+┊   ┊232┊        .createQueryBuilder(Chat, \"chat\")\n+┊   ┊233┊        .whereInIds(chatId)\n+┊   ┊234┊        .innerJoinAndSelect('chat.allTimeMembers', 'allTimeMembers')\n+┊   ┊235┊        .innerJoinAndSelect('chat.listingMembers', 'listingMembers')\n+┊   ┊236┊        .leftJoinAndSelect('chat.actualGroupMembers', 'actualGroupMembers')\n+┊   ┊237┊        .getOne();\n ┊187┊238┊\n ┊188┊239┊      if (!chat) {\n ┊189┊240┊        throw new Error(`Cannot find chat ${chatId}.`);\n ┊190┊241┊      }\n ┊191┊242┊\n-┊192┊   ┊      let holderIds = chat.listingMemberIds;\n+┊   ┊243┊      let holders: User[];\n ┊193┊244┊\n ┊194┊245┊      if (!chat.name) {\n ┊195┊246┊        // Chat\n-┊196┊   ┊        if (!chat.listingMemberIds.find(listingId => listingId === currentUser.id)) {\n+┊   ┊247┊        if (!chat.listingMembers.map(user => user.id).includes(currentUser.id)) {\n ┊197┊248┊          throw new Error(`The chat ${chatId} must be listed for the current user before adding a message.`);\n ┊198┊249┊        }\n ┊199┊250┊\n-┊200┊   ┊        const recipientId = chat.allTimeMemberIds.filter(userId => userId !== currentUser.id)[0];\n+┊   ┊251┊        const recipientUser = chat.allTimeMembers.find(user => user.id !== currentUser.id);\n ┊201┊252┊\n-┊202┊   ┊        if (!chat.listingMemberIds.find(listingId => listingId === recipientId)) {\n-┊203┊   ┊          // Chat is not listed for the recipient. Add him to the listingMemberIds\n-┊204┊   ┊          const listingMemberIds = chat.listingMemberIds.concat(recipientId);\n+┊   ┊253┊        if (!recipientUser) {\n+┊   ┊254┊          throw new Error(`Cannot find recipient user.`);\n+┊   ┊255┊        }\n ┊205┊256┊\n-┊206┊   ┊          chats = chats.map(chat => {\n-┊207┊   ┊            if (chat.id === Number(chatId)) {\n-┊208┊   ┊              chat = {...chat, listingMemberIds};\n-┊209┊   ┊            }\n-┊210┊   ┊            return chat;\n-┊211┊   ┊          });\n+┊   ┊257┊        if (!chat.listingMembers.find(user => user.id === recipientUser.id)) {\n+┊   ┊258┊          // Chat is not listed for the recipient. Add him to the listingIds\n+┊   ┊259┊          chat.listingMembers.push(recipientUser);\n ┊212┊260┊\n-┊213┊   ┊          holderIds = listingMemberIds;\n+┊   ┊261┊          await connection.getRepository(Chat).save(chat);\n ┊214┊262┊\n ┊215┊263┊          pubsub.publish('chatAdded', {\n ┊216┊264┊            creatorId: currentUser.id,\n ┊217┊265┊            chatAdded: chat,\n ┊218┊266┊          });\n ┊219┊267┊        }\n+┊   ┊268┊\n+┊   ┊269┊        holders = chat.listingMembers;\n ┊220┊270┊      } else {\n ┊221┊271┊        // Group\n-┊222┊   ┊        if (!chat.actualGroupMemberIds!.find(memberId => memberId === currentUser.id)) {\n+┊   ┊272┊        if (!chat.actualGroupMembers || !chat.actualGroupMembers.find(user => user.id === currentUser.id)) {\n ┊223┊273┊          throw new Error(`The user is not a member of the group ${chatId}. Cannot add message.`);\n ┊224┊274┊        }\n ┊225┊275┊\n-┊226┊   ┊        holderIds = chat.actualGroupMemberIds!;\n+┊   ┊276┊        holders = chat.actualGroupMembers;\n ┊227┊277┊      }\n ┊228┊278┊\n-┊229┊   ┊      const id = (chat.messages.length && chat.messages[chat.messages.length - 1].id + 1) || 1;\n-┊230┊   ┊\n-┊231┊   ┊      let recipients: Recipient[] = [];\n-┊232┊   ┊\n-┊233┊   ┊      holderIds.forEach(holderId => {\n-┊234┊   ┊        if (holderId !== currentUser.id) {\n-┊235┊   ┊          recipients.push({\n-┊236┊   ┊            userId: holderId,\n-┊237┊   ┊            messageId: id,\n-┊238┊   ┊            chatId: Number(chatId),\n-┊239┊   ┊            receivedAt: null,\n-┊240┊   ┊            readAt: null,\n-┊241┊   ┊          });\n-┊242┊   ┊        }\n-┊243┊   ┊      });\n-┊244┊   ┊\n-┊245┊   ┊      const message: Message = {\n-┊246┊   ┊        id,\n-┊247┊   ┊        chatId: Number(chatId),\n-┊248┊   ┊        senderId: currentUser.id,\n+┊   ┊279┊      const message = await connection.getRepository(Message).save(new Message({\n+┊   ┊280┊        chat: chat,\n+┊   ┊281┊        sender: currentUser,\n ┊249┊282┊        content,\n-┊250┊   ┊        createdAt: moment().unix(),\n ┊251┊283┊        type: MessageType.TEXT,\n-┊252┊   ┊        recipients,\n-┊253┊   ┊        holderIds,\n-┊254┊   ┊      };\n-┊255┊   ┊\n-┊256┊   ┊      chats = chats.map(chat => {\n-┊257┊   ┊        if (chat.id === Number(chatId)) {\n-┊258┊   ┊          chat = {...chat, messages: chat.messages.concat(message)}\n-┊259┊   ┊        }\n-┊260┊   ┊        return chat;\n-┊261┊   ┊      });\n+┊   ┊284┊        holders,\n+┊   ┊285┊        recipients: holders.reduce<Recipient[]>((filtered, user) => {\n+┊   ┊286┊          if (user.id !== currentUser.id) {\n+┊   ┊287┊            filtered.push(new Recipient({\n+┊   ┊288┊              user,\n+┊   ┊289┊            }));\n+┊   ┊290┊          }\n+┊   ┊291┊          return filtered;\n+┊   ┊292┊        }, []),\n+┊   ┊293┊      }));\n ┊262┊294┊\n ┊263┊295┊      pubsub.publish('messageAdded', {\n ┊264┊296┊        messageAdded: message,\n ┊265┊297┊      });\n ┊266┊298┊\n-┊267┊   ┊      return message;\n+┊   ┊299┊      return message || null;\n ┊268┊300┊    },\n-┊269┊   ┊    removeMessages: (obj: any, {chatId, messageIds, all}: RemoveMessagesMutationArgs, {user: currentUser}: {user: User}): number[] => {\n-┊270┊   ┊      const chat = chats.find(chat => chat.id === Number(chatId));\n+┊   ┊301┊    removeMessages: async (obj: any, {chatId, messageIds, all}: RemoveMessagesMutationArgs, {user: currentUser, connection}: { user: User, connection: Connection }) => {\n+┊   ┊302┊      const chat = await connection\n+┊   ┊303┊        .createQueryBuilder(Chat, \"chat\")\n+┊   ┊304┊        .whereInIds(chatId)\n+┊   ┊305┊        .innerJoinAndSelect('chat.listingMembers', 'listingMembers')\n+┊   ┊306┊        .innerJoinAndSelect('chat.messages', 'messages')\n+┊   ┊307┊        .innerJoinAndSelect('messages.holders', 'holders')\n+┊   ┊308┊        .getOne();\n ┊271┊309┊\n ┊272┊310┊      if (!chat) {\n ┊273┊311┊        throw new Error(`Cannot find chat ${chatId}.`);\n ┊274┊312┊      }\n ┊275┊313┊\n-┊276┊   ┊      if (!chat.listingMemberIds.find(listingId => listingId === currentUser.id)) {\n+┊   ┊314┊      if (!chat.listingMembers.find(user => user.id === currentUser.id)) {\n ┊277┊315┊        throw new Error(`The chat/group ${chatId} is not listed for the current user, so there is nothing to delete.`);\n ┊278┊316┊      }\n ┊279┊317┊\n```\n```diff\n@@ -281,79 +319,166 @@\n ┊281┊319┊        throw new Error(`Cannot specify both 'all' and 'messageIds'.`);\n ┊282┊320┊      }\n ┊283┊321┊\n+┊   ┊322┊      if (!all && !(messageIds && messageIds.length)) {\n+┊   ┊323┊        throw new Error(`'all' and 'messageIds' cannot be both null`);\n+┊   ┊324┊      }\n+┊   ┊325┊\n ┊284┊326┊      let deletedIds: number[] = [];\n-┊285┊   ┊      chats = chats.map(chat => {\n-┊286┊   ┊        if (chat.id === Number(chatId)) {\n-┊287┊   ┊          // Instead of chaining map and filter we can loop once using reduce\n-┊288┊   ┊          const messages = chat.messages.reduce<Message[]>((filtered, message) => {\n-┊289┊   ┊            if (all || messageIds!.includes(String(message.id))) {\n-┊290┊   ┊              deletedIds.push(message.id);\n-┊291┊   ┊              // Remove the current user from the message holders\n-┊292┊   ┊              message.holderIds = message.holderIds.filter(holderId => holderId !== currentUser.id);\n-┊293┊   ┊            }\n+┊   ┊327┊      // Instead of chaining map and filter we can loop once using reduce\n+┊   ┊328┊      chat.messages = await chat.messages.reduce<Promise<Message[]>>(async (filtered$, message) => {\n+┊   ┊329┊        const filtered = await filtered$;\n ┊294┊330┊\n-┊295┊   ┊            if (message.holderIds.length !== 0) {\n-┊296┊   ┊              filtered.push(message);\n-┊297┊   ┊            } // else discard the message\n+┊   ┊331┊        if (all || messageIds!.includes(String(message.id))) {\n+┊   ┊332┊          deletedIds.push(message.id);\n+┊   ┊333┊          // Remove the current user from the message holders\n+┊   ┊334┊          message.holders = message.holders.filter(user => user.id !== currentUser.id);\n ┊298┊335┊\n-┊299┊   ┊            return filtered;\n-┊300┊   ┊          }, []);\n-┊301┊   ┊          chat = {...chat, messages};\n ┊302┊336┊        }\n-┊303┊   ┊        return chat;\n-┊304┊   ┊      });\n+┊   ┊337┊\n+┊   ┊338┊        if (message.holders.length !== 0) {\n+┊   ┊339┊          // Remove the current user from the message holders\n+┊   ┊340┊          await connection.getRepository(Message).save(message);\n+┊   ┊341┊          filtered.push(message);\n+┊   ┊342┊        } else {\n+┊   ┊343┊          // Simply remove the message\n+┊   ┊344┊          const recipients = await connection\n+┊   ┊345┊            .createQueryBuilder(Recipient, \"recipient\")\n+┊   ┊346┊            .innerJoinAndSelect('recipient.message', 'message', 'message.id = :messageId', {messageId: message.id})\n+┊   ┊347┊            .innerJoinAndSelect('recipient.user', 'user')\n+┊   ┊348┊            .getMany();\n+┊   ┊349┊          for (let recipient of recipients) {\n+┊   ┊350┊            await connection.getRepository(Recipient).remove(recipient);\n+┊   ┊351┊          }\n+┊   ┊352┊          await connection.getRepository(Message).remove(message);\n+┊   ┊353┊        }\n+┊   ┊354┊\n+┊   ┊355┊        return filtered;\n+┊   ┊356┊      }, Promise.resolve([]));\n+┊   ┊357┊\n+┊   ┊358┊      await connection.getRepository(Chat).save(chat);\n+┊   ┊359┊\n ┊305┊360┊      return deletedIds;\n ┊306┊361┊    },\n ┊307┊362┊  },\n ┊308┊363┊  Subscription: {\n ┊309┊364┊    messageAdded: {\n ┊310┊365┊      subscribe: withFilter(() => pubsub.asyncIterator('messageAdded'),\n-┊311┊   ┊        ({messageAdded}: {messageAdded: Message & {chat: {id: number}}}, {chatId}: MessageAddedSubscriptionArgs, {user: currentUser}: { user: User }) => {\n+┊   ┊366┊        ({messageAdded}: {messageAdded: Message}, {chatId}: MessageAddedSubscriptionArgs, {user: currentUser}: { user: User }) => {\n ┊312┊367┊          return (!chatId || messageAdded.chat.id === Number(chatId)) &&\n-┊313┊   ┊            !!messageAdded.recipients.find((recipient: Recipient) => recipient.userId === currentUser.id);\n+┊   ┊368┊            !!messageAdded.recipients.find((recipient: Recipient) => recipient.user.id === currentUser.id);\n ┊314┊369┊        }),\n ┊315┊370┊    },\n ┊316┊371┊    chatAdded: {\n ┊317┊372┊      subscribe: withFilter(() => pubsub.asyncIterator('chatAdded'),\n-┊318┊   ┊        ({creatorId, chatAdded}: {creatorId: string, chatAdded: Chat}, variables: any, {user: currentUser}: { user: User }) => {\n-┊319┊   ┊          return Number(creatorId) !== currentUser.id && !chatAdded.listingMemberIds.includes(currentUser.id);\n+┊   ┊373┊        ({creatorId, chatAdded}: {creatorId: string, chatAdded: Chat}, variables, {user: currentUser}: { user: User }) => {\n+┊   ┊374┊          return Number(creatorId) !== currentUser.id &&\n+┊   ┊375┊            !!chatAdded.listingMembers.find((user: User) => user.id === currentUser.id);\n ┊320┊376┊        }),\n ┊321┊377┊    }\n ┊322┊378┊  },\n ┊323┊379┊  Chat: {\n-┊324┊   ┊    name: (chat: Chat, args: any, {user: currentUser}: {user: User}): string => chat.name ? chat.name : users\n-┊325┊   ┊      .find(user => user.id === chat.allTimeMemberIds.find(userId => userId !== currentUser.id))!.name,\n-┊326┊   ┊    picture: (chat: Chat, args: any, {user: currentUser}: {user: User}) => chat.name ? chat.picture : users\n-┊327┊   ┊      .find(user => user.id === chat.allTimeMemberIds.find(userId => userId !== currentUser.id))!.picture,\n-┊328┊   ┊    allTimeMembers: (chat: Chat): User[] => users.filter(user => chat.allTimeMemberIds.includes(user.id)),\n-┊329┊   ┊    listingMembers: (chat: Chat): User[] => users.filter(user => chat.listingMemberIds.includes(user.id)),\n-┊330┊   ┊    actualGroupMembers: (chat: Chat): User[] => users.filter(user => chat.actualGroupMemberIds && chat.actualGroupMemberIds.includes(user.id)),\n-┊331┊   ┊    admins: (chat: Chat): User[] => users.filter(user => chat.adminIds && chat.adminIds.includes(user.id)),\n-┊332┊   ┊    owner: (chat: Chat): User | null => users.find(user => chat.ownerId === user.id) || null,\n-┊333┊   ┊    messages: (chat: Chat, {amount = null}: {amount: number}, {user: currentUser}: {user: User}): Message[] => {\n-┊334┊   ┊      const messages = chat.messages\n-┊335┊   ┊      .filter(message => message.holderIds.includes(currentUser.id))\n-┊336┊   ┊      .sort((a, b) => b.createdAt - a.createdAt) || <Message[]>[];\n-┊337┊   ┊      return (amount ? messages.slice(0, amount) : messages).reverse();\n+┊   ┊380┊    name: async (chat: Chat, args: any, {user: currentUser, connection}: {user: User, connection: Connection}): Promise<string | null> => {\n+┊   ┊381┊      if (chat.name) {\n+┊   ┊382┊        return chat.name;\n+┊   ┊383┊      }\n+┊   ┊384┊      const user = await connection\n+┊   ┊385┊        .createQueryBuilder(User, \"user\")\n+┊   ┊386┊        .where('user.id != :userId', {userId: currentUser.id})\n+┊   ┊387┊        .innerJoin('user.allTimeMemberChats', 'allTimeMemberChats', 'allTimeMemberChats.id = :chatId', {chatId: chat.id})\n+┊   ┊388┊        .getOne();\n+┊   ┊389┊      return user && user.name || null;\n+┊   ┊390┊    },\n+┊   ┊391┊    picture: async (chat: Chat, args: any, {user: currentUser, connection}: {user: User, connection: Connection}): Promise<string | null> => {\n+┊   ┊392┊      if (chat.name) {\n+┊   ┊393┊        return chat.picture;\n+┊   ┊394┊      }\n+┊   ┊395┊      const user = await connection\n+┊   ┊396┊        .createQueryBuilder(User, \"user\")\n+┊   ┊397┊        .where('user.id != :userId', {userId: currentUser.id})\n+┊   ┊398┊        .innerJoin('user.allTimeMemberChats', 'allTimeMemberChats', 'allTimeMemberChats.id = :chatId', {chatId: chat.id})\n+┊   ┊399┊        .getOne();\n+┊   ┊400┊      return user ? user.picture : null;\n+┊   ┊401┊    },\n+┊   ┊402┊    allTimeMembers: async (chat: Chat, args: any, {user: currentUser, connection}: {user: User, connection: Connection}): Promise<User[]> => {\n+┊   ┊403┊      return await connection\n+┊   ┊404┊        .createQueryBuilder(User, \"user\")\n+┊   ┊405┊        .innerJoin('user.allTimeMemberChats', 'allTimeMemberChats', 'allTimeMemberChats.id = :chatId', {chatId: chat.id})\n+┊   ┊406┊        .getMany();\n+┊   ┊407┊    },\n+┊   ┊408┊    listingMembers: async (chat: Chat, args: any, {user: currentUser, connection}: {user: User, connection: Connection}): Promise<User[]> => {\n+┊   ┊409┊      return await connection\n+┊   ┊410┊        .createQueryBuilder(User, \"user\")\n+┊   ┊411┊        .innerJoin('user.listingMemberChats', 'listingMemberChats', 'listingMemberChats.id = :chatId', {chatId: chat.id})\n+┊   ┊412┊        .getMany();\n+┊   ┊413┊    },\n+┊   ┊414┊    actualGroupMembers: async (chat: Chat, args: any, {user: currentUser, connection}: {user: User, connection: Connection}): Promise<User[]> => {\n+┊   ┊415┊      return await connection\n+┊   ┊416┊        .createQueryBuilder(User, \"user\")\n+┊   ┊417┊        .innerJoin('user.actualGroupMemberChats', 'actualGroupMemberChats', 'actualGroupMemberChats.id = :chatId', {chatId: chat.id})\n+┊   ┊418┊        .getMany();\n+┊   ┊419┊    },\n+┊   ┊420┊    admins: async (chat: Chat, args: any, {user: currentUser, connection}: {user: User, connection: Connection}): Promise<User[]> => {\n+┊   ┊421┊      return await connection\n+┊   ┊422┊        .createQueryBuilder(User, \"user\")\n+┊   ┊423┊        .innerJoin('user.adminChats', 'adminChats', 'adminChats.id = :chatId', {chatId: chat.id})\n+┊   ┊424┊        .getMany();\n ┊338┊425┊    },\n-┊339┊   ┊    unreadMessages: (chat: Chat, args: any, {user: currentUser}: {user: User}): number => chat.messages\n-┊340┊   ┊      .filter(message => message.holderIds.includes(currentUser.id) &&\n-┊341┊   ┊        message.recipients.find(recipient => recipient.userId === currentUser.id && !recipient.readAt))\n-┊342┊   ┊      .length,\n-┊343┊   ┊    isGroup: (chat: Chat): boolean => !!chat.name,\n+┊   ┊426┊    owner: async (chat: Chat, args: any, {user: currentUser, connection}: {user: User, connection: Connection}): Promise<User | null> => {\n+┊   ┊427┊      return await connection\n+┊   ┊428┊        .createQueryBuilder(User, \"user\")\n+┊   ┊429┊        .innerJoin('user.ownerChats', 'ownerChats', 'ownerChats.id = :chatId', {chatId: chat.id})\n+┊   ┊430┊        .getOne() || null;\n+┊   ┊431┊    },\n+┊   ┊432┊    messages: async (chat: Chat, {amount = null}: {amount: number}, {user: currentUser, connection}: {user: User, connection: Connection}): Promise<Message[]> => {\n+┊   ┊433┊      const query = connection\n+┊   ┊434┊        .createQueryBuilder(Message, \"message\")\n+┊   ┊435┊        .innerJoin('message.chat', 'chat', 'chat.id = :chatId', {chatId: chat.id})\n+┊   ┊436┊        .innerJoin('message.holders', 'holders', 'holders.id = :userId', {userId: currentUser.id})\n+┊   ┊437┊        .orderBy({\"message.createdAt\": \"DESC\"});\n+┊   ┊438┊      return (amount ? await query.take(amount).getMany() : await query.getMany()).reverse();\n+┊   ┊439┊    },\n+┊   ┊440┊    unreadMessages: async (chat: Chat, args: any, {user: currentUser, connection}: {user: User, connection: Connection}): Promise<number> => {\n+┊   ┊441┊      return await connection\n+┊   ┊442┊        .createQueryBuilder(Message, \"message\")\n+┊   ┊443┊        .innerJoin('message.chat', 'chat', 'chat.id = :chatId', {chatId: chat.id})\n+┊   ┊444┊        .innerJoin('message.recipients', 'recipients', 'recipients.user.id = :userId AND recipients.readAt IS NULL', {userId: currentUser.id})\n+┊   ┊445┊        .getCount();\n+┊   ┊446┊    },\n+┊   ┊447┊    isGroup: (chat: Chat) => !!chat.name,\n ┊344┊448┊  },\n ┊345┊449┊  Message: {\n-┊346┊   ┊    chat: (message: Message): Chat | null => chats.find(chat => message.chatId === chat.id) || null,\n-┊347┊   ┊    sender: (message: Message): User | null => users.find(user => user.id === message.senderId) || null,\n-┊348┊   ┊    holders: (message: Message): User[] => users.filter(user => message.holderIds.includes(user.id)),\n-┊349┊   ┊    ownership: (message: Message, args: any, {user: currentUser}: {user: User}): boolean => message.senderId === currentUser.id,\n-┊350┊   ┊  },\n-┊351┊   ┊  Recipient: {\n-┊352┊   ┊    user: (recipient: Recipient): User | null => users.find(user => recipient.userId === user.id) || null,\n-┊353┊   ┊    message: (recipient: Recipient): Message | null => {\n-┊354┊   ┊      const chat = chats.find(chat => recipient.chatId === chat.id);\n-┊355┊   ┊      return chat ? chat.messages.find(message => recipient.messageId === message.id) || null : null;\n+┊   ┊450┊    sender: async (message: Message, args: any, {user: currentUser, connection}: {user: User, connection: Connection}): Promise<User | null> => {\n+┊   ┊451┊      return (await connection\n+┊   ┊452┊        .createQueryBuilder(User, \"user\")\n+┊   ┊453┊        .innerJoin('user.senderMessages', 'senderMessages', 'senderMessages.id = :messageId', {messageId: message.id})\n+┊   ┊454┊        .getOne()) || null;\n+┊   ┊455┊    },\n+┊   ┊456┊    ownership: async (message: Message, args: any, {user: currentUser, connection}: {user: User, connection: Connection}): Promise<boolean> => {\n+┊   ┊457┊      return !!(await connection\n+┊   ┊458┊        .createQueryBuilder(User, \"user\")\n+┊   ┊459┊        .whereInIds(currentUser.id)\n+┊   ┊460┊        .innerJoin('user.senderMessages', 'senderMessages', 'senderMessages.id = :messageId', {messageId: message.id})\n+┊   ┊461┊        .getCount());\n+┊   ┊462┊    },\n+┊   ┊463┊    recipients: async (message: Message, args: any, {user: currentUser, connection}: {user: User, connection: Connection}): Promise<Recipient[]> => {\n+┊   ┊464┊      return await connection\n+┊   ┊465┊        .createQueryBuilder(Recipient, \"recipient\")\n+┊   ┊466┊        .innerJoinAndSelect('recipient.message', 'message', 'message.id = :messageId', {messageId: message.id})\n+┊   ┊467┊        .innerJoinAndSelect('recipient.user', 'user')\n+┊   ┊468┊        .innerJoinAndSelect('recipient.chat', 'chat')\n+┊   ┊469┊        .getMany();\n+┊   ┊470┊    },\n+┊   ┊471┊    holders: async (message: Message, args: any, {user: currentUser, connection}: {user: User, connection: Connection}): Promise<User[]> => {\n+┊   ┊472┊      return await connection\n+┊   ┊473┊        .createQueryBuilder(User, \"user\")\n+┊   ┊474┊        .innerJoin('user.holderMessages', 'holderMessages', 'holderMessages.id = :messageId', {messageId: message.id})\n+┊   ┊475┊        .getMany();\n+┊   ┊476┊    },\n+┊   ┊477┊    chat: async (message: Message, args: any, {user: currentUser, connection}: {user: User, connection: Connection}): Promise<Chat | null> => {\n+┊   ┊478┊      return (await connection\n+┊   ┊479┊        .createQueryBuilder(Chat, \"chat\")\n+┊   ┊480┊        .innerJoin('chat.messages', 'messages', 'messages.id = :messageId', {messageId: message.id})\n+┊   ┊481┊        .getOne()) || null;\n ┊356┊482┊    },\n-┊357┊   ┊    chat: (recipient: Recipient): Chat | null => chats.find(chat => recipient.chatId === chat.id) || null,\n ┊358┊483┊  },\n ┊359┊484┊};\n```\n\n[}]: #\n\n`QueryBuilder` is one of the most powerful features of `TypeORM` - it allows you to build SQL queries using elegant and convenient syntax, execute them and get automatically transformed entities.\n\nYou can find more informations on `TypeORM` on http://typeorm.io\n\nThe best part is that you won't have to do anything on the client, everything will be completely transparent to it, even if migrated from NoSQL-like db structure to a relational one!\nOf course, you could remove the custom normalization for the messages because now they have their own table and they are no longer embedded (so they have unique IDs), but we could leave it as well in order to be free to use any kind of backend."
          }
        ]
      }
    ]
  }
]
