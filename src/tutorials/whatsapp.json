[
  {
    "repoUrl": "",
    "branchName": "master",
    "historyBranchName": "master-history",
    "releases": [
      {
        "releaseVersion": "1.0.0",
        "releaseDate": "2018-05-29 02:31:38 +0800",
        "tagName": "master@1.0.0",
        "tagRevision": "4c2efb56b417eb9092932b5b6e0082255d6f009d",
        "historyRevision": "081a60b9b08e105e5b9e2bc824243b0ebdfa97a0",
        "changesDiff": "diff --git a/.angular-cli.json b/.angular-cli.json\ndeleted file mode 100644\nindex 542e27b..0000000\n--- a/.angular-cli.json\n+++ /dev/null\n@@ -1,60 +0,0 @@\n-{\n-  \"$schema\": \"./node_modules/@angular/cli/lib/config/schema.json\",\n-  \"project\": {\n-    \"name\": \"whatsapp-client-angularcli-material\"\n-  },\n-  \"apps\": [\n-    {\n-      \"root\": \"src\",\n-      \"outDir\": \"dist\",\n-      \"assets\": [\n-        \"assets\",\n-        \"favicon.ico\"\n-      ],\n-      \"index\": \"index.html\",\n-      \"main\": \"main.ts\",\n-      \"polyfills\": \"polyfills.ts\",\n-      \"test\": \"test.ts\",\n-      \"tsconfig\": \"tsconfig.app.json\",\n-      \"testTsconfig\": \"tsconfig.spec.json\",\n-      \"prefix\": \"app\",\n-      \"styles\": [\n-        \"styles.scss\"\n-      ],\n-      \"scripts\": [],\n-      \"environmentSource\": \"environments/environment.ts\",\n-      \"environments\": {\n-        \"dev\": \"environments/environment.ts\",\n-        \"prod\": \"environments/environment.prod.ts\"\n-      }\n-    }\n-  ],\n-  \"e2e\": {\n-    \"protractor\": {\n-      \"config\": \"./protractor.conf.js\"\n-    }\n-  },\n-  \"lint\": [\n-    {\n-      \"project\": \"src/tsconfig.app.json\",\n-      \"exclude\": \"**/node_modules/**\"\n-    },\n-    {\n-      \"project\": \"src/tsconfig.spec.json\",\n-      \"exclude\": \"**/node_modules/**\"\n-    },\n-    {\n-      \"project\": \"e2e/tsconfig.e2e.json\",\n-      \"exclude\": \"**/node_modules/**\"\n-    }\n-  ],\n-  \"test\": {\n-    \"karma\": {\n-      \"config\": \"./karma.conf.js\"\n-    }\n-  },\n-  \"defaults\": {\n-    \"styleExt\": \"scss\",\n-    \"component\": {}\n-  }\n-}\ndiff --git a/.gitignore b/.gitignore\nindex 22657a5..b600fc4 100644\n--- a/.gitignore\n+++ b/.gitignore\n@@ -2,7 +2,6 @@\n \n # compiled output\n /dist\n-/dist-server\n /tmp\n /out-tsc\n \n@@ -31,13 +30,10 @@\n /coverage\n /libpeerconnection.log\n npm-debug.log\n+yarn-error.log\n testem.log\n /typings\n \n-# e2e\n-/e2e/*.js\n-/e2e/*.map\n-\n # System Files\n .DS_Store\n Thumbs.db\ndiff --git a/angular.json b/angular.json\nnew file mode 100644\nindex 0000000..3d9af93\n--- /dev/null\n+++ b/angular.json\n@@ -0,0 +1,126 @@\n+{\n+  \"$schema\": \"./node_modules/@angular/cli/lib/config/schema.json\",\n+  \"version\": 1,\n+  \"newProjectRoot\": \"projects\",\n+  \"projects\": {\n+    \"whatsapp-client-angularcli-material\": {\n+      \"root\": \"\",\n+      \"sourceRoot\": \"src\",\n+      \"projectType\": \"application\",\n+      \"prefix\": \"app\",\n+      \"schematics\": {\n+        \"@schematics/angular:component\": {\n+          \"styleext\": \"scss\"\n+        }\n+      },\n+      \"architect\": {\n+        \"build\": {\n+          \"builder\": \"@angular-devkit/build-angular:browser\",\n+          \"options\": {\n+            \"outputPath\": \"dist/whatsapp-client-angularcli-material\",\n+            \"index\": \"src/index.html\",\n+            \"main\": \"src/main.ts\",\n+            \"polyfills\": \"src/polyfills.ts\",\n+            \"tsConfig\": \"src/tsconfig.app.json\",\n+            \"assets\": [\n+              \"src/favicon.ico\",\n+              \"src/assets\"\n+            ],\n+            \"styles\": [\n+              \"src/styles.scss\"\n+            ],\n+            \"scripts\": []\n+          },\n+          \"configurations\": {\n+            \"production\": {\n+              \"fileReplacements\": [\n+                {\n+                  \"replace\": \"src/environments/environment.ts\",\n+                  \"with\": \"src/environments/environment.prod.ts\"\n+                }\n+              ],\n+              \"optimization\": true,\n+              \"outputHashing\": \"all\",\n+              \"sourceMap\": false,\n+              \"extractCss\": true,\n+              \"namedChunks\": false,\n+              \"aot\": true,\n+              \"extractLicenses\": true,\n+              \"vendorChunk\": false,\n+              \"buildOptimizer\": true\n+            }\n+          }\n+        },\n+        \"serve\": {\n+          \"builder\": \"@angular-devkit/build-angular:dev-server\",\n+          \"options\": {\n+            \"browserTarget\": \"whatsapp-client-angularcli-material:build\"\n+          },\n+          \"configurations\": {\n+            \"production\": {\n+              \"browserTarget\": \"whatsapp-client-angularcli-material:build:production\"\n+            }\n+          }\n+        },\n+        \"extract-i18n\": {\n+          \"builder\": \"@angular-devkit/build-angular:extract-i18n\",\n+          \"options\": {\n+            \"browserTarget\": \"whatsapp-client-angularcli-material:build\"\n+          }\n+        },\n+        \"test\": {\n+          \"builder\": \"@angular-devkit/build-angular:karma\",\n+          \"options\": {\n+            \"main\": \"src/test.ts\",\n+            \"polyfills\": \"src/polyfills.ts\",\n+            \"tsConfig\": \"src/tsconfig.spec.json\",\n+            \"karmaConfig\": \"src/karma.conf.js\",\n+            \"styles\": [\n+              \"styles.scss\"\n+            ],\n+            \"scripts\": [],\n+            \"assets\": [\n+              \"src/favicon.ico\",\n+              \"src/assets\"\n+            ]\n+          }\n+        },\n+        \"lint\": {\n+          \"builder\": \"@angular-devkit/build-angular:tslint\",\n+          \"options\": {\n+            \"tsConfig\": [\n+              \"src/tsconfig.app.json\",\n+              \"src/tsconfig.spec.json\"\n+            ],\n+            \"exclude\": [\n+              \"**/node_modules/**\"\n+            ]\n+          }\n+        }\n+      }\n+    },\n+    \"whatsapp-client-angularcli-material-e2e\": {\n+      \"root\": \"e2e/\",\n+      \"projectType\": \"application\",\n+      \"architect\": {\n+        \"e2e\": {\n+          \"builder\": \"@angular-devkit/build-angular:protractor\",\n+          \"options\": {\n+            \"protractorConfig\": \"e2e/protractor.conf.js\",\n+            \"devServerTarget\": \"whatsapp-client-angularcli-material:serve\"\n+          }\n+        },\n+        \"lint\": {\n+          \"builder\": \"@angular-devkit/build-angular:tslint\",\n+          \"options\": {\n+            \"tsConfig\": \"e2e/tsconfig.e2e.json\",\n+            \"exclude\": [\n+              \"**/node_modules/**\"\n+            ]\n+          }\n+        }\n+      }\n+    }\n+  },\n+  \"defaultProject\": \"whatsapp-client-angularcli-material\"\n+}\n\\ No newline at end of file\ndiff --git a/protractor.conf.js b/e2e/protractor.conf.js\nsimilarity index 86%\nrename from protractor.conf.js\nrename to e2e/protractor.conf.js\nindex 7ee3b5e..86776a3 100644\n--- a/protractor.conf.js\n+++ b/e2e/protractor.conf.js\n@@ -6,7 +6,7 @@ const { SpecReporter } = require('jasmine-spec-reporter');\n exports.config = {\n   allScriptsTimeout: 11000,\n   specs: [\n-    './e2e/**/*.e2e-spec.ts'\n+    './src/**/*.e2e-spec.ts'\n   ],\n   capabilities: {\n     'browserName': 'chrome'\n@@ -21,8 +21,8 @@ exports.config = {\n   },\n   onPrepare() {\n     require('ts-node').register({\n-      project: 'e2e/tsconfig.e2e.json'\n+      project: require('path').join(__dirname, './tsconfig.e2e.json')\n     });\n     jasmine.getEnv().addReporter(new SpecReporter({ spec: { displayStacktrace: true } }));\n   }\n-};\n+};\n\\ No newline at end of file\ndiff --git a/e2e/app.e2e-spec.ts b/e2e/src/app.e2e-spec.ts\nsimilarity index 81%\nrename from e2e/app.e2e-spec.ts\nrename to e2e/src/app.e2e-spec.ts\nindex aaf19d5..e42d1f9 100644\n--- a/e2e/app.e2e-spec.ts\n+++ b/e2e/src/app.e2e-spec.ts\n@@ -1,6 +1,6 @@\n import { AppPage } from './app.po';\n \n-describe('whatsapp-client-angularcli-material App', () => {\n+describe('workspace-project App', () => {\n   let page: AppPage;\n \n   beforeEach(() => {\ndiff --git a/e2e/app.po.ts b/e2e/src/app.po.ts\nsimilarity index 100%\nrename from e2e/app.po.ts\nrename to e2e/src/app.po.ts\ndiff --git a/e2e/tsconfig.e2e.json b/e2e/tsconfig.e2e.json\nindex 1d9e5ed..a6dd622 100644\n--- a/e2e/tsconfig.e2e.json\n+++ b/e2e/tsconfig.e2e.json\n@@ -1,8 +1,7 @@\n {\n   \"extends\": \"../tsconfig.json\",\n   \"compilerOptions\": {\n-    \"outDir\": \"../out-tsc/e2e\",\n-    \"baseUrl\": \"./\",\n+    \"outDir\": \"../out-tsc/app\",\n     \"module\": \"commonjs\",\n     \"target\": \"es5\",\n     \"types\": [\n@@ -11,4 +10,4 @@\n       \"node\"\n     ]\n   }\n-}\n+}\n\\ No newline at end of file\ndiff --git a/package.json b/package.json\nindex 7229a04..b2da7ed 100644\n--- a/package.json\n+++ b/package.json\n@@ -1,69 +1,69 @@\n {\n   \"name\": \"whatsapp-client-angularcli-material\",\n   \"version\": \"0.0.0\",\n-  \"license\": \"MIT\",\n   \"scripts\": {\n     \"ng\": \"ng\",\n     \"start\": \"ng serve\",\n-    \"build\": \"ng build --prod\",\n+    \"build\": \"ng build\",\n     \"test\": \"ng test\",\n     \"lint\": \"ng lint\",\n     \"e2e\": \"ng e2e\",\n-    \"generator\": \"gql-gen --url http://localhost:3000/graphql --template ts --out ./src/types.d.ts \\\"./src/graphql/**/*.ts\\\"\"\n+    \"generator\": \"gql-gen --schema http://localhost:3000/graphql --template ts --out ./src/types.d.ts \\\"./src/graphql/**/*.ts\\\"\"\n   },\n   \"private\": true,\n   \"dependencies\": {\n-    \"@angular/animations\": \"5.2.5\",\n-    \"@angular/cdk\": \"5.2.1\",\n-    \"@angular/common\": \"5.2.5\",\n-    \"@angular/compiler\": \"5.2.5\",\n-    \"@angular/core\": \"5.2.5\",\n-    \"@angular/flex-layout\": \"2.0.0-beta.12\",\n-    \"@angular/forms\": \"5.2.5\",\n-    \"@angular/http\": \"5.2.5\",\n-    \"@angular/material\": \"5.2.1\",\n-    \"@angular/platform-browser\": \"5.2.5\",\n-    \"@angular/platform-browser-dynamic\": \"5.2.5\",\n-    \"@angular/router\": \"5.2.5\",\n-    \"ajv\": \"6.1.1\",\n-    \"apollo-angular\": \"1.0.1\",\n-    \"apollo-angular-link-http\": \"1.0.2-beta.0\",\n-    \"apollo-cache-inmemory\": \"1.1.9\",\n-    \"apollo-client\": \"2.2.5\",\n-    \"apollo-link\": \"1.1.0\",\n-    \"apollo-link-ws\": \"1.0.5\",\n-    \"apollo-utilities\": \"1.0.8\",\n-    \"core-js\": \"2.5.3\",\n-    \"graphql\": \"0.12.3\",\n-    \"graphql-tag\": \"2.7.3\",\n+    \"@angular/animations\": \"6.0.0\",\n+    \"@angular/cdk\": \"6.0.1\",\n+    \"@angular/common\": \"6.0.0\",\n+    \"@angular/compiler\": \"6.0.0\",\n+    \"@angular/core\": \"6.0.0\",\n+    \"@angular/flex-layout\": \"6.0.0-beta.15\",\n+    \"@angular/forms\": \"6.0.0\",\n+    \"@angular/http\": \"6.0.0\",\n+    \"@angular/material\": \"6.0.1\",\n+    \"@angular/platform-browser\": \"6.0.0\",\n+    \"@angular/platform-browser-dynamic\": \"6.0.0\",\n+    \"@angular/router\": \"6.0.0\",\n+    \"apollo-angular\": \"1.1.0-rc.0\",\n+    \"apollo-angular-link-http\": \"1.1.0-rc.0\",\n+    \"apollo-cache-inmemory\": \"1.2.1\",\n+    \"apollo-client\": \"2.3.1\",\n+    \"apollo-link\": \"1.2.2\",\n+    \"apollo-link-ws\": \"1.0.8\",\n+    \"apollo-utilities\": \"1.0.12\",\n+    \"core-js\": \"2.5.6\",\n+    \"graphql\": \"0.13.2\",\n+    \"graphql-tag\": \"2.9.2\",\n     \"hammerjs\": \"2.0.8\",\n-    \"moment\": \"2.20.1\",\n-    \"ng2-truncate\": \"1.3.11\",\n-    \"ngx-selectable-list\": \"1.1.0\",\n-    \"rxjs\": \"5.5.6\",\n-    \"subscriptions-transport-ws\": \"0.9.5\",\n-    \"zone.js\": \"0.8.20\"\n+    \"moment\": \"2.22.1\",\n+    \"ng2-truncate\": \"1.3.17\",\n+    \"ngx-selectable-list\": \"^1.2.1\",\n+    \"rxjs\": \"6.1.0\",\n+    \"subscriptions-transport-ws\": \"0.9.9\",\n+    \"zone.js\": \"0.8.26\"\n   },\n   \"devDependencies\": {\n-    \"@angular/cli\": \"1.7.0\",\n-    \"@angular/compiler-cli\": \"5.2.5\",\n-    \"@angular/language-service\": \"5.2.5\",\n-    \"@types/graphql\": \"0.12.4\",\n-    \"@types/jasmine\": \"2.8.6\",\n+    \"@angular-devkit/build-angular\": \"0.6.0\",\n+    \"@angular/cli\": \"6.0.0\",\n+    \"@angular/compiler-cli\": \"6.0.0\",\n+    \"@angular/language-service\": \"6.0.0\",\n+    \"@types/graphql\": \"0.13.0\",\n+    \"@types/jasmine\": \"2.8.7\",\n     \"@types/jasminewd2\": \"2.0.3\",\n-    \"@types/node\": \"6.0.101\",\n-    \"codelyzer\": \"4.1.0\",\n-    \"graphql-code-generator\": \"0.8.14\",\n-    \"jasmine-core\": \"2.8.0\",\n+    \"@types/node\": \"8.9.5\",\n+    \"codelyzer\": \"4.2.1\",\n+    \"graphql-code-generator\": \"0.9.1\",\n+    \"graphql-codegen-typescript-template\": \"0.9.1\",\n+    \"jasmine-core\": \"2.99.1\",\n     \"jasmine-spec-reporter\": \"4.2.1\",\n-    \"karma\": \"2.0.0\",\n+    \"karma\": \"1.7.1\",\n     \"karma-chrome-launcher\": \"2.2.0\",\n-    \"karma-coverage-istanbul-reporter\": \"1.4.1\",\n-    \"karma-jasmine\": \"1.1.1\",\n+    \"karma-coverage-istanbul-reporter\": \"1.4.2\",\n+    \"karma-jasmine\": \"1.1.2\",\n     \"karma-jasmine-html-reporter\": \"0.2.2\",\n-    \"protractor\": \"5.1.2\",\n-    \"ts-node\": \"4.1.0\",\n+    \"protractor\": \"5.3.1\",\n+    \"ts-node\": \"5.0.1\",\n     \"tslint\": \"5.9.1\",\n-    \"typescript\": \"2.5.3\"\n+    \"typescript\": \"2.7.2\"\n   }\n }\ndiff --git a/package.json.orig b/package.json.orig\ndeleted file mode 100644\nindex e025965..0000000\n--- a/package.json.orig\n+++ /dev/null\n@@ -1,61 +0,0 @@\n-{\n-  \"name\": \"whatsapp-client-angularcli-material\",\n-  \"version\": \"0.0.0\",\n-  \"license\": \"MIT\",\n-  \"scripts\": {\n-    \"ng\": \"ng\",\n-    \"start\": \"ng serve\",\n-    \"build\": \"ng build --prod\",\n-    \"test\": \"ng test\",\n-    \"lint\": \"ng lint\",\n-    \"e2e\": \"ng e2e\"\n-  },\n-  \"private\": true,\n-  \"dependencies\": {\n-    \"@angular/animations\": \"5.2.5\",\n-    \"@angular/common\": \"5.2.5\",\n-    \"@angular/compiler\": \"5.2.5\",\n-    \"@angular/core\": \"5.2.5\",\n-    \"@angular/forms\": \"5.2.5\",\n-    \"@angular/http\": \"5.2.5\",\n-    \"@angular/platform-browser\": \"5.2.5\",\n-    \"@angular/platform-browser-dynamic\": \"5.2.5\",\n-    \"@angular/router\": \"5.2.5\",\n-    \"ajv\": \"6.1.1\",\n-    \"apollo-angular\": \"1.0.1\",\n-    \"apollo-angular-link-http\": \"1.0.2-beta.0\",\n-    \"apollo-cache-inmemory\": \"1.1.9\",\n-    \"apollo-client\": \"2.2.5\",\n-    \"apollo-link\": \"1.1.0\",\n-    \"core-js\": \"2.5.3\",\n-    \"graphql\": \"0.12.3\",\n-    \"graphql-tag\": \"2.7.3\",\n-    \"rxjs\": \"5.5.6\",\n-    \"zone.js\": \"0.8.20\"\n-  },\n-  \"devDependencies\": {\n-    \"@angular/cli\": \"1.7.0\",\n-    \"@angular/compiler-cli\": \"5.2.5\",\n-    \"@angular/language-service\": \"5.2.5\",\n-<<<<<<< HEAD\n-    \"@types/graphql\": \"^0.12.4\",\n-=======\n-    \"@types/graphql\": \"0.12.4\",\n->>>>>>> 48ac17b... Step 1.2: Add chats service\n-    \"@types/jasmine\": \"2.8.6\",\n-    \"@types/jasminewd2\": \"2.0.3\",\n-    \"@types/node\": \"6.0.101\",\n-    \"codelyzer\": \"4.1.0\",\n-    \"jasmine-core\": \"2.8.0\",\n-    \"jasmine-spec-reporter\": \"4.2.1\",\n-    \"karma\": \"2.0.0\",\n-    \"karma-chrome-launcher\": \"2.2.0\",\n-    \"karma-coverage-istanbul-reporter\": \"1.4.1\",\n-    \"karma-jasmine\": \"1.1.1\",\n-    \"karma-jasmine-html-reporter\": \"0.2.2\",\n-    \"protractor\": \"5.1.2\",\n-    \"ts-node\": \"4.1.0\",\n-    \"tslint\": \"5.9.1\",\n-    \"typescript\": \"2.5.3\"\n-  }\n-}\ndiff --git a/src/app/app.module.ts b/src/app/app.module.ts\nindex d81a15c..356b000 100644\n--- a/src/app/app.module.ts\n+++ b/src/app/app.module.ts\n@@ -1,7 +1,6 @@\n import { BrowserModule } from '@angular/platform-browser';\n import { NgModule } from '@angular/core';\n \n-\n import { AppComponent } from './app.component';\n import {HTTP_INTERCEPTORS, HttpClientModule} from '@angular/common/http';\n import {HttpLink, HttpLinkModule, Options} from 'apollo-angular-link-http';\n@@ -18,7 +17,6 @@ import {OperationDefinitionNode} from 'graphql';\n import {split} from 'apollo-link';\n import {WebSocketLink} from 'apollo-link-ws';\n import {LoginService} from './login/services/login.service';\n-\n const routes: Routes = [];\n \n @NgModule({\n@@ -44,7 +42,7 @@ const routes: Routes = [];\n       provide: HTTP_INTERCEPTORS,\n       useClass: AuthInterceptor,\n       multi: true,\n-    }\n+    },\n   ],\n   bootstrap: [AppComponent]\n })\n@@ -67,7 +65,7 @@ export class AppModule {\n \n     const link = split(\n       ({ query }) => {\n-        const { kind, operation } = <OperationDefinitionNode>getMainDefinition(query);\n+        const { kind, operation } = <OperationDefinitionNode>getMainDefinition(<any>query);\n         return kind === 'OperationDefinition' && operation === 'subscription';\n       },\n       subscriptionLink,\ndiff --git a/src/app/chat-viewer/chat-viewer.module.ts b/src/app/chat-viewer/chat-viewer.module.ts\nindex dac388a..030ee57 100644\n--- a/src/app/chat-viewer/chat-viewer.module.ts\n+++ b/src/app/chat-viewer/chat-viewer.module.ts\n@@ -11,7 +11,7 @@ import {MessagesListComponent} from './components/messages-list/messages-list.co\n import {MessageItemComponent} from './components/message-item/message-item.component';\n import {NewMessageComponent} from './components/new-message/new-message.component';\n import {SharedModule} from '../shared/shared.module';\n-import {SelectableListModule} from 'ngx-selectable-list';\n+import {NgxSelectableListModule} from 'ngx-selectable-list';\n import {AuthGuard} from '../login/services/auth.guard';\n \n const routes: Routes = [\n@@ -46,7 +46,7 @@ const routes: Routes = [\n     FormsModule,\n     // Feature modules\n     SharedModule,\n-    SelectableListModule,\n+    NgxSelectableListModule,\n   ],\n   providers: [\n     ChatsService,\ndiff --git a/src/app/chat-viewer/components/messages-list/messages-list.component.ts b/src/app/chat-viewer/components/messages-list/messages-list.component.ts\nindex f123280..c6bc667 100644\n--- a/src/app/chat-viewer/components/messages-list/messages-list.component.ts\n+++ b/src/app/chat-viewer/components/messages-list/messages-list.component.ts\n@@ -8,7 +8,7 @@ import {SelectableListDirective} from 'ngx-selectable-list';\n     <mat-list>\n       <mat-list-item *ngFor=\"let message of messages\">\n         <app-message-item [item]=\"message\" [isGroup]=\"isGroup\"\n-                          appSelectableItem></app-message-item>\n+                          libSelectableItem></app-message-item>\n       </mat-list-item>\n     </mat-list>\n     <ng-content *ngIf=\"selectableListDirective.selecting\"></ng-content>\ndiff --git a/src/app/chat-viewer/containers/chat/chat.component.spec.ts b/src/app/chat-viewer/containers/chat/chat.component.spec.ts\nindex 930cf89..1bef7f3 100644\n--- a/src/app/chat-viewer/containers/chat/chat.component.spec.ts\n+++ b/src/app/chat-viewer/containers/chat/chat.component.spec.ts\n@@ -10,14 +10,14 @@ import {HttpLink, HttpLinkModule, Options} from 'apollo-angular-link-http';\n import {defaultDataIdFromObject, InMemoryCache} from 'apollo-cache-inmemory';\n import {RouterTestingModule} from '@angular/router/testing';\n import {ActivatedRoute} from '@angular/router';\n-import {of} from 'rxjs/observable/of';\n+import {of} from 'rxjs';\n import {By} from '@angular/platform-browser';\n import {FormsModule} from '@angular/forms';\n import {SharedModule} from '../../../shared/shared.module';\n import {NewMessageComponent} from '../../components/new-message/new-message.component';\n import {MessagesListComponent} from '../../components/messages-list/messages-list.component';\n import {MessageItemComponent} from '../../components/message-item/message-item.component';\n-import {SelectableListModule} from 'ngx-selectable-list';\n+import {NgxSelectableListModule} from 'ngx-selectable-list';\n import {LoginService} from '../../../login/services/login.service';\n \n describe('ChatComponent', () => {\n@@ -110,7 +110,7 @@ describe('ChatComponent', () => {\n         HttpLinkModule,\n         HttpClientTestingModule,\n         RouterTestingModule,\n-        SelectableListModule,\n+        NgxSelectableListModule,\n       ],\n       providers: [\n         ChatsService,\ndiff --git a/src/app/chat-viewer/containers/chat/chat.component.ts b/src/app/chat-viewer/containers/chat/chat.component.ts\nindex a8be4f1..9c48c14 100644\n--- a/src/app/chat-viewer/containers/chat/chat.component.ts\n+++ b/src/app/chat-viewer/containers/chat/chat.component.ts\n@@ -2,8 +2,9 @@ import {Component, OnInit} from '@angular/core';\n import {ActivatedRoute, Router} from '@angular/router';\n import {ChatsService} from '../../../services/chats.service';\n import {GetChat} from '../../../../types';\n-import {combineLatest} from 'rxjs/observable/combineLatest';\n+import {combineLatest} from 'rxjs';\n import {Location} from '@angular/common';\n+import {QueryRef} from 'apollo-angular';\n \n @Component({\n   template: `\n@@ -15,7 +16,7 @@ import {Location} from '@angular/common';\n     </app-toolbar>\n     <div class=\"container\">\n       <app-messages-list [items]=\"messages\" [isGroup]=\"isGroup\"\n-                         appSelectableList=\"multiple_press\" (multiple)=\"deleteMessages($event)\">\n+                         libSelectableList=\"multiple_press\" (multiple)=\"deleteMessages($event)\">\n         <app-confirm-selection #confirmSelection></app-confirm-selection>\n       </app-messages-list>\n       <app-new-message (newMessage)=\"addMessage($event)\"></app-new-message>\n@@ -29,6 +30,7 @@ export class ChatComponent implements OnInit {\n   name: string;\n   isGroup: boolean;\n   optimisticUI: boolean;\n+  query: QueryRef<GetChat.Query>;\n \n   constructor(private route: ActivatedRoute,\n               private router: Router,\n@@ -56,8 +58,12 @@ export class ChatComponent implements OnInit {\n           });\n         }\n \n-        this.chatsService.getChat(chatId, this.optimisticUI).chat$.subscribe(chat => {\n-          this.messages = chat.messages;\n+        const {query$, chat$} = this.chatsService.getChat(chatId, this.optimisticUI);\n+\n+        query$.subscribe(query => this.query = query);\n+\n+        chat$.subscribe(chat => {\n+          this.messages = chat.messageFeed.messages;\n           this.name = chat.name;\n           this.isGroup = chat.isGroup;\n         });\n@@ -69,7 +75,8 @@ export class ChatComponent implements OnInit {\n   }\n \n   addMessage(content: string) {\n-    this.chatsService.addMessage(this.chatId, content).subscribe();\n+    // this.chatsService.addMessage(this.chatId, content).subscribe();\n+    this.chatsService.moreMessages(this.query, this.chatId);\n   }\n \n   deleteMessages(messageIds: string[]) {\ndiff --git a/src/app/chats-creation/chats-creation.module.ts b/src/app/chats-creation/chats-creation.module.ts\nindex f8a9754..0504e39 100644\n--- a/src/app/chats-creation/chats-creation.module.ts\n+++ b/src/app/chats-creation/chats-creation.module.ts\n@@ -15,7 +15,7 @@ import {NewGroupComponent} from './containers/new-group/new-group.component';\n import {NewChatComponent} from './containers/new-chat/new-chat.component';\n import {NewGroupDetailsComponent} from './components/new-group-details/new-group-details.component';\n import {SharedModule} from '../shared/shared.module';\n-import {SelectableListModule} from 'ngx-selectable-list';\n+import {NgxSelectableListModule} from 'ngx-selectable-list';\n import {AuthGuard} from '../login/services/auth.guard';\n \n const routes: Routes = [\n@@ -50,7 +50,7 @@ const routes: Routes = [\n     // Forms\n     FormsModule,\n     // Feature modules\n-    SelectableListModule,\n+    NgxSelectableListModule,\n     SharedModule,\n   ],\n   providers: [\ndiff --git a/src/app/chats-creation/components/users-list/users-list.component.ts b/src/app/chats-creation/components/users-list/users-list.component.ts\nindex 96d5421..c01a8f8 100644\n--- a/src/app/chats-creation/components/users-list/users-list.component.ts\n+++ b/src/app/chats-creation/components/users-list/users-list.component.ts\n@@ -8,7 +8,7 @@ import {SelectableListDirective} from 'ngx-selectable-list';\n     <mat-list>\n       <mat-list-item *ngFor=\"let user of users\">\n         <app-user-item [item]=\"user\"\n-                       appSelectableItem></app-user-item>\n+                       libSelectableItem></app-user-item>\n       </mat-list-item>\n     </mat-list>\n     <ng-content *ngIf=\"selectableListDirective.selecting\"></ng-content>\ndiff --git a/src/app/chats-creation/containers/new-chat/new-chat.component.ts b/src/app/chats-creation/containers/new-chat/new-chat.component.ts\nindex 91820c8..1559ee1 100644\n--- a/src/app/chats-creation/containers/new-chat/new-chat.component.ts\n+++ b/src/app/chats-creation/containers/new-chat/new-chat.component.ts\n@@ -21,7 +21,7 @@ import {ChatsService} from '../../../services/chats.service';\n     </div>\n \n     <app-users-list [items]=\"users\"\n-                    appSelectableList=\"single\" (single)=\"addChat($event)\">\n+                    libSelectableList=\"single\" (single)=\"addChat($event)\">\n     </app-users-list>\n   `,\n   styleUrls: ['new-chat.component.scss'],\ndiff --git a/src/app/chats-creation/containers/new-group/new-group.component.ts b/src/app/chats-creation/containers/new-group/new-group.component.ts\nindex 19e9fb9..93586cd 100644\n--- a/src/app/chats-creation/containers/new-group/new-group.component.ts\n+++ b/src/app/chats-creation/containers/new-group/new-group.component.ts\n@@ -14,7 +14,7 @@ import {ChatsService} from '../../../services/chats.service';\n     </app-toolbar>\n \n     <app-users-list *ngIf=\"!recipientIds.length\" [items]=\"users\"\n-                    appSelectableList=\"multiple_tap\" (multiple)=\"selectUsers($event)\">\n+                    libSelectableList=\"multiple_tap\" (multiple)=\"selectUsers($event)\">\n       <app-confirm-selection #confirmSelection icon=\"arrow_forward\"></app-confirm-selection>\n     </app-users-list>\n     <app-new-group-details *ngIf=\"recipientIds.length\" [users]=\"getSelectedUsers()\"\ndiff --git a/src/app/chats-lister/chats-lister.module.ts b/src/app/chats-lister/chats-lister.module.ts\nindex 0e86163..714ccce 100644\n--- a/src/app/chats-lister/chats-lister.module.ts\n+++ b/src/app/chats-lister/chats-lister.module.ts\n@@ -11,7 +11,7 @@ import {ChatsComponent} from './containers/chats/chats.component';\n import {ChatsListComponent} from './components/chats-list/chats-list.component';\n import {TruncateModule} from 'ng2-truncate';\n import {SharedModule} from '../shared/shared.module';\n-import {SelectableListModule} from 'ngx-selectable-list';\n+import {NgxSelectableListModule} from 'ngx-selectable-list';\n import {AuthGuard} from '../login/services/auth.guard';\n \n const routes: Routes = [\n@@ -42,7 +42,7 @@ const routes: Routes = [\n     TruncateModule,\n     // Feature modules\n     SharedModule,\n-    SelectableListModule,\n+    NgxSelectableListModule,\n   ],\n   providers: [\n     ChatsService,\ndiff --git a/src/app/chats-lister/components/chat-item/chat-item.component.ts b/src/app/chats-lister/components/chat-item/chat-item.component.ts\nindex afd5b1d..dae6050 100644\n--- a/src/app/chats-lister/components/chat-item/chat-item.component.ts\n+++ b/src/app/chats-lister/components/chat-item/chat-item.component.ts\n@@ -9,7 +9,9 @@ import {GetChats} from '../../../../types';\n           <img *ngIf=\"chat.picture\" [src]=\"chat.picture\" width=\"48\" height=\"48\">\n           <div>{{ chat.name }} [id: {{ chat.id }}]</div>\n         </div>\n-        <div class=\"chat-content\">{{ chat.messages[chat.messages.length - 1]?.content | truncate : 20 : '...' }}</div>\n+        <div class=\"chat-content\">\n+          {{ chat.messageFeed.messages[chat.messageFeed.messages.length - 1]?.content | truncate : 20 : '...' }}\n+        </div>\n     </div>\n   `,\n   styleUrls: ['chat-item.component.scss'],\ndiff --git a/src/app/chats-lister/components/chats-list/chats-list.component.ts b/src/app/chats-lister/components/chats-list/chats-list.component.ts\nindex 161d07c..0a13405 100644\n--- a/src/app/chats-lister/components/chats-list/chats-list.component.ts\n+++ b/src/app/chats-lister/components/chats-list/chats-list.component.ts\n@@ -8,7 +8,7 @@ import {SelectableListDirective} from 'ngx-selectable-list';\n     <mat-list>\n       <mat-list-item *ngFor=\"let chat of chats\">\n         <app-chat-item [item]=\"chat\"\n-                       appSelectableItem></app-chat-item>\n+                       libSelectableItem></app-chat-item>\n       </mat-list-item>\n     </mat-list>\n     <ng-content *ngIf=\"selectableListDirective.selecting\"></ng-content>\ndiff --git a/src/app/chats-lister/containers/chats/chats.component.spec.ts b/src/app/chats-lister/containers/chats/chats.component.spec.ts\nindex 0377385..e7835d0 100644\n--- a/src/app/chats-lister/containers/chats/chats.component.spec.ts\n+++ b/src/app/chats-lister/containers/chats/chats.component.spec.ts\n@@ -13,7 +13,7 @@ import {HttpLink, HttpLinkModule, Options} from 'apollo-angular-link-http';\n import {defaultDataIdFromObject, InMemoryCache} from 'apollo-cache-inmemory';\n import {By} from '@angular/platform-browser';\n import {RouterTestingModule} from '@angular/router/testing';\n-import {SelectableListModule} from 'ngx-selectable-list';\n+import {NgxSelectableListModule} from 'ngx-selectable-list';\n import {LoginService} from '../../../login/services/login.service';\n \n describe('ChatsComponent', () => {\n@@ -332,7 +332,7 @@ describe('ChatsComponent', () => {\n         HttpLinkModule,\n         HttpClientTestingModule,\n         RouterTestingModule,\n-        SelectableListModule,\n+        NgxSelectableListModule,\n       ],\n       providers: [\n         ChatsService,\ndiff --git a/src/app/chats-lister/containers/chats/chats.component.ts b/src/app/chats-lister/containers/chats/chats.component.ts\nindex 69ce46c..6f78b4a 100644\n--- a/src/app/chats-lister/containers/chats/chats.component.ts\n+++ b/src/app/chats-lister/containers/chats/chats.component.ts\n@@ -1,6 +1,6 @@\n import {Component, OnInit} from '@angular/core';\n import {ChatsService} from '../../../services/chats.service';\n-import {Observable} from 'rxjs/Observable';\n+import {Observable} from 'rxjs';\n import {GetChats} from '../../../../types';\n import {Router} from '@angular/router';\n \n@@ -29,7 +29,7 @@ import {Router} from '@angular/router';\n     </mat-menu>\n \n     <app-chats-list [items]=\"chats$ | async\"\n-                    appSelectableList=\"both\"\n+                    libSelectableList=\"both\"\n                     (single)=\"goToChat($event)\" (multiple)=\"deleteChats($event)\" (isSelecting)=\"isSelecting = $event\">\n       <app-confirm-selection #confirmSelection></app-confirm-selection>\n     </app-chats-list>\ndiff --git a/src/app/login/services/auth.interceptor.ts b/src/app/login/services/auth.interceptor.ts\nindex c0dc097..9f374dd 100644\n--- a/src/app/login/services/auth.interceptor.ts\n+++ b/src/app/login/services/auth.interceptor.ts\n@@ -1,6 +1,6 @@\n import {Injectable} from '@angular/core';\n import {HttpEvent, HttpHandler, HttpInterceptor, HttpRequest} from '@angular/common/http';\n-import {Observable} from 'rxjs/Observable';\n+import {Observable} from 'rxjs';\n import {LoginService} from './login.service';\n \n @Injectable()\ndiff --git a/src/app/services/chats.service.ts b/src/app/services/chats.service.ts\nindex 6bd09bd..1c737bc 100644\n--- a/src/app/services/chats.service.ts\n+++ b/src/app/services/chats.service.ts\n@@ -1,10 +1,10 @@\n-import {ApolloQueryResult, MutationOptions, WatchQueryOptions} from 'apollo-client';\n+import {ApolloQueryResult, FetchMoreOptions, FetchMoreQueryOptions, MutationOptions, WatchQueryOptions} from 'apollo-client';\n import {concat, map, share, switchMap} from 'rxjs/operators';\n import {Apollo, QueryRef} from 'apollo-angular';\n import {Injectable} from '@angular/core';\n import {getChatsQuery} from '../../graphql/getChats.query';\n import {\n-  AddChat, AddGroup, AddMessage, GetChat, GetChats, GetUsers, MessageAdded, RemoveAllMessages, RemoveChat,\n+  AddChat, AddGroup, AddMessage, GetChat, GetChats, GetUsers, MessageAdded, MoreMessages, RemoveAllMessages, RemoveChat,\n   RemoveMessages\n } from '../../types';\n import {getChatQuery} from '../../graphql/getChat.query';\n@@ -14,20 +14,20 @@ import {DocumentNode} from 'graphql';\n import {removeAllMessagesMutation} from '../../graphql/removeAllMessages.mutation';\n import {removeMessagesMutation} from '../../graphql/removeMessages.mutation';\n import {getUsersQuery} from '../../graphql/getUsers.query';\n-import {Observable} from 'rxjs/Observable';\n+import {Observable, AsyncSubject, of} from 'rxjs';\n import {addChatMutation} from '../../graphql/addChat.mutation';\n import {addGroupMutation} from '../../graphql/addGroup.mutation';\n import * as moment from 'moment';\n-import {AsyncSubject} from 'rxjs/AsyncSubject';\n-import {of} from 'rxjs/observable/of';\n import {FetchResult} from 'apollo-link';\n import {LoginService} from '../login/services/login.service';\n import {chatAddedSubscription} from '../../graphql/chatAdded.subscription';\n import {messageAddedSubscription} from '../../graphql/messageAdded.subscription';\n+import {moreMessagesQuery} from '../../graphql/moreMessages.query';\n \n @Injectable()\n export class ChatsService {\n-  messagesAmount = 3;\n+  chatsMessagesAmount = 2;\n+  chatMessagesAmount = 5;\n   getChatsWq: QueryRef<GetChats.Query>;\n   chats$: Observable<GetChats.Chats[]>;\n   chats: GetChats.Chats[];\n@@ -39,12 +39,15 @@ export class ChatsService {\n     this.getChatsWq = this.apollo.watchQuery<GetChats.Query>(<WatchQueryOptions>{\n       query: getChatsQuery,\n       variables: {\n-        amount: this.messagesAmount,\n+        amount: this.chatsMessagesAmount,\n       },\n     });\n \n     this.getChatsWq.subscribeToMore({\n       document: chatAddedSubscription,\n+      variables: {\n+        amount: this.chatsMessagesAmount,\n+      },\n       updateQuery: (prev: GetChats.Query, { subscriptionData }) => {\n         if (!subscriptionData.data) {\n           return prev;\n@@ -73,20 +76,25 @@ export class ChatsService {\n           const {chat}: GetChat.Query = this.apollo.getClient().readQuery({\n             query: getChatQuery, variables: {\n               chatId: newMessage.chat.id,\n+              amount: this.chatMessagesAmount,\n             }\n           });\n \n           // Add our message from the mutation to the end.\n-          chat.messages.push(newMessage);\n+          chat.messageFeed.messages.push(newMessage);\n           // Write our data back to the cache.\n-          this.apollo.getClient().writeQuery({ query: getChatQuery, data: {chat} });\n+          this.apollo.getClient().writeQuery({\n+            query: getChatQuery,\n+            variables: {chatId: newMessage.chat.id, amount: this.chatMessagesAmount},\n+            data: {chat} });\n         } catch {\n           console.error('The chat we received an update for does not exist in the store');\n         }\n \n         return Object.assign({}, prev, {\n-          chats: [...prev.chats.map(_chat =>\n-            _chat.id === newMessage.chat.id ? {..._chat, messages: [..._chat.messages, newMessage]} : _chat)]\n+          chats: [...prev.chats.map(chat => chat.id === newMessage.chat.id ? {\n+            ...chat, messageFeed: {...chat.messageFeed, messages: [...chat.messageFeed.messages, newMessage]}\n+          } : chat)]\n         });\n       }\n     });\n@@ -105,7 +113,7 @@ export class ChatsService {\n     return {query: this.getChatsWq, chats$: this.chats$};\n   }\n \n-  getChat(chatId: string, oui?: boolean) {\n+  getChat(chatId: string, oui?: boolean, amount?: number) {\n     const _chat = this.chats && this.chats.find(chat => chat.id === chatId) || {\n       id: chatId,\n       name: '',\n@@ -113,7 +121,11 @@ export class ChatsService {\n       allTimeMembers: [],\n       unreadMessages: 0,\n       isGroup: false,\n-      messages: [],\n+      messageFeed: {\n+        hasNextPage: false,\n+        cursor: null,\n+        messages: [],\n+      },\n     };\n     const chat$FromCache = of<GetChat.Chat>(_chat);\n \n@@ -122,6 +134,7 @@ export class ChatsService {\n         query: getChatQuery,\n         variables: {\n           chatId: id,\n+          amount: this.chatMessagesAmount,\n         }\n       });\n     };\n@@ -154,6 +167,34 @@ export class ChatsService {\n     return {query$: this.getChatWqSubject.asObservable(), chat$};\n   }\n \n+  moreMessages(query: QueryRef<GetChat.Query>, chatId: string) {\n+    const {data: {chat: {messageFeed}}} = query.getLastResult();\n+    if (messageFeed.hasNextPage) {\n+      query.fetchMore({\n+        query: moreMessagesQuery,\n+        variables: {\n+          chatId,\n+          amount: this.chatMessagesAmount,\n+          before: messageFeed.cursor,\n+        },\n+        updateQuery: (previousResult: GetChat.Query, { fetchMoreResult }) => {\n+          return {\n+            chat: {\n+              ...previousResult.chat,\n+              messageFeed: {\n+                ...fetchMoreResult.chat.messageFeed,\n+                messages: [\n+                  ...fetchMoreResult.chat.messageFeed.messages,\n+                  ...previousResult.chat.messageFeed.messages,\n+                ],\n+              },\n+            },\n+          };\n+        },\n+      });\n+    }\n+  }\n+\n   addMessage(chatId: string, content: string) {\n     return this.apollo.mutate(<MutationOptions>{\n       mutation: addMessageMutation,\n@@ -166,14 +207,17 @@ export class ChatsService {\n         addMessage: {\n           id: ChatsService.getRandomId(),\n           __typename: 'Message',\n-          senderId: this.loginService.getUser().id,\n+          chat: {\n+            id: chatId,\n+            __typename: 'Chat',\n+          },\n           sender: {\n             id: this.loginService.getUser().id,\n             __typename: 'User',\n             name: this.loginService.getUser().name,\n           },\n           content,\n-          createdAt: moment().unix(),\n+          createdAt: new Date(),\n           type: 0,\n           recipients: [],\n           ownership: true,\n@@ -186,12 +230,13 @@ export class ChatsService {\n           const {chat}: GetChat.Query = store.readQuery({\n             query: getChatQuery, variables: {\n               chatId,\n+              amount: this.chatMessagesAmount,\n             }\n           });\n           // Add our message from the mutation to the end.\n-          chat.messages.push(addMessage);\n+          chat.messageFeed.messages.push(addMessage);\n           // Write our data back to the cache.\n-          store.writeQuery({ query: getChatQuery, data: {chat} });\n+          store.writeQuery({ query: getChatQuery, variables: {chatId, amount: this.chatMessagesAmount}, data: {chat} });\n         }\n         // Update last message cache\n         {\n@@ -199,16 +244,16 @@ export class ChatsService {\n           const {chats}: GetChats.Query = store.readQuery({\n             query: getChatsQuery,\n             variables: <GetChats.Variables>{\n-              amount: this.messagesAmount,\n+              amount: this.chatsMessagesAmount,\n             },\n           });\n           // Add our comment from the mutation to the end.\n-          chats.find(chat => chat.id === chatId).messages.push(addMessage);\n+          chats.find(chat => chat.id === chatId).messageFeed.messages.push(addMessage);\n           // Write our data back to the cache.\n           store.writeQuery({\n             query: getChatsQuery,\n             variables: <GetChats.Variables>{\n-              amount: this.messagesAmount,\n+              amount: this.chatsMessagesAmount,\n             },\n             data: {\n               chats,\n@@ -234,7 +279,7 @@ export class ChatsService {\n         const {chats}: GetChats.Query = store.readQuery({\n           query: getChatsQuery,\n           variables: <GetChats.Variables>{\n-            amount: this.messagesAmount,\n+            amount: this.chatsMessagesAmount,\n           },\n         });\n         // Remove the chat (mutable)\n@@ -247,7 +292,7 @@ export class ChatsService {\n         store.writeQuery({\n           query: getChatsQuery,\n           variables: <GetChats.Variables>{\n-            amount: this.messagesAmount,\n+            amount: this.chatsMessagesAmount,\n           },\n           data: {\n             chats,\n@@ -286,18 +331,19 @@ export class ChatsService {\n           const {chat}: GetChat.Query = store.readQuery({\n             query: getChatQuery, variables: {\n               chatId,\n+              amount: this.chatMessagesAmount,\n             }\n           });\n           // Remove the messages (mutable)\n           removeMessages.forEach(messageId => {\n-            for (const index of chat.messages.keys()) {\n-              if (chat.messages[index].id === messageId) {\n-                chat.messages.splice(index, 1);\n+            for (const index of chat.messageFeed.messages.keys()) {\n+              if (chat.messageFeed.messages[index].id === messageId) {\n+                chat.messageFeed.messages.splice(index, 1);\n               }\n             }\n           });\n           // Write our data back to the cache.\n-          store.writeQuery({ query: getChatQuery, data: {chat} });\n+          store.writeQuery({ query: getChatQuery, variables: {chatId, amount: this.chatMessagesAmount}, data: {chat} });\n         }\n         // Update last message cache\n         {\n@@ -305,18 +351,18 @@ export class ChatsService {\n           const {chats}: GetChats.Query = store.readQuery({\n             query: getChatsQuery,\n             variables: <GetChats.Variables>{\n-              amount: this.messagesAmount,\n+              amount: this.chatsMessagesAmount,\n             },\n           });\n           // Fix last message\n-          chats.find(chat => chat.id === chatId).messages = messages\n+          chats.find(chat => chat.id === chatId).messageFeed.messages = messages\n             .filter(message => !ids.includes(message.id))\n             .sort((a, b) => Number(b.createdAt) - Number(a.createdAt)) || [];\n           // Write our data back to the cache.\n           store.writeQuery({\n             query: getChatsQuery,\n             variables: <GetChats.Variables>{\n-              amount: this.messagesAmount,\n+              amount: this.chatsMessagesAmount,\n             },\n             data: {\n               chats,\n@@ -371,7 +417,12 @@ export class ChatsService {\n             }\n           ],\n           unreadMessages: 0,\n-          messages: [],\n+          messageFeed: {\n+            __typename: 'MessageFeed',\n+            hasNextPage: false,\n+            cursor: null,\n+            messages: [],\n+          },\n           isGroup: false,\n         },\n       },\n@@ -380,7 +431,7 @@ export class ChatsService {\n         const {chats}: GetChats.Query = store.readQuery({\n           query: getChatsQuery,\n           variables: <GetChats.Variables>{\n-            amount: this.messagesAmount,\n+            amount: this.chatsMessagesAmount,\n           },\n         });\n         // Add our comment from the mutation to the end.\n@@ -389,7 +440,7 @@ export class ChatsService {\n         store.writeQuery({\n           query: getChatsQuery,\n           variables: <GetChats.Variables>{\n-            amount: this.messagesAmount,\n+            amount: this.chatsMessagesAmount,\n           },\n           data: {\n             chats,\n@@ -423,7 +474,12 @@ export class ChatsService {\n             ...recipientIds.map(id => ({id, __typename: 'User'})),\n           ],\n           unreadMessages: 0,\n-          messages: [],\n+          messageFeed: {\n+            __typename: 'MessageFeed',\n+            hasNextPage: false,\n+            cursor: null,\n+            messages: [],\n+          },\n           isGroup: true,\n         },\n       },\n@@ -432,7 +488,7 @@ export class ChatsService {\n         const {chats}: GetChats.Query = store.readQuery({\n           query: getChatsQuery,\n           variables: <GetChats.Variables>{\n-            amount: this.messagesAmount,\n+            amount: this.chatsMessagesAmount,\n           },\n         });\n         // Add our comment from the mutation to the end.\n@@ -441,7 +497,7 @@ export class ChatsService {\n         store.writeQuery({\n           query: getChatsQuery,\n           variables: <GetChats.Variables>{\n-            amount: this.messagesAmount,\n+            amount: this.chatsMessagesAmount,\n           },\n           data: {\n             chats,\ndiff --git a/src/browserslist b/src/browserslist\nnew file mode 100644\nindex 0000000..8e09ab4\n--- /dev/null\n+++ b/src/browserslist\n@@ -0,0 +1,9 @@\n+# This file is currently used by autoprefixer to adjust CSS to support the below specified browsers\n+# For additional information regarding the format and rule options, please see:\n+# https://github.com/browserslist/browserslist#queries\n+# For IE 9-11 support, please uncomment the last line of the file and adjust as needed\n+> 0.5%\n+last 2 versions\n+Firefox ESR\n+not dead\n+# IE 9-11\n\\ No newline at end of file\ndiff --git a/src/environments/environment.ts b/src/environments/environment.ts\nindex b7f639a..012182e 100644\n--- a/src/environments/environment.ts\n+++ b/src/environments/environment.ts\n@@ -1,8 +1,15 @@\n-// The file contents for the current environment will overwrite these during build.\n-// The build system defaults to the dev environment which uses `environment.ts`, but if you do\n-// `ng build --env=prod` then `environment.prod.ts` will be used instead.\n-// The list of which env maps to which file can be found in `.angular-cli.json`.\n+// This file can be replaced during build by using the `fileReplacements` array.\n+// `ng build ---prod` replaces `environment.ts` with `environment.prod.ts`.\n+// The list of file replacements can be found in `angular.json`.\n \n export const environment = {\n   production: false\n };\n+\n+/*\n+ * In development mode, to ignore zone related error stack frames such as\n+ * `zone.run`, `zoneDelegate.invokeTask` for easier debugging, you can\n+ * import the following file, but please comment it out in production mode\n+ * because it will have performance impact when throw error\n+ */\n+// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\ndiff --git a/src/graphql/addChat.mutation.ts b/src/graphql/addChat.mutation.ts\nindex cf33eba..3e4da4c 100644\n--- a/src/graphql/addChat.mutation.ts\n+++ b/src/graphql/addChat.mutation.ts\n@@ -6,8 +6,12 @@ export const addChatMutation = gql`\n   mutation AddChat($recipientId: ID!) {\n     addChat(recipientId: $recipientId) {\n       ...ChatWithoutMessages\n-      messages {\n-        ...Message\n+      messageFeed {\n+        hasNextPage,\n+        cursor,\n+        messages {\n+          ...Message\n+        }\n       }\n     }\n   }\ndiff --git a/src/graphql/addGroup.mutation.ts b/src/graphql/addGroup.mutation.ts\nindex 8fb2362..07eeb21 100644\n--- a/src/graphql/addGroup.mutation.ts\n+++ b/src/graphql/addGroup.mutation.ts\n@@ -6,8 +6,12 @@ export const addGroupMutation = gql`\n   mutation AddGroup($recipientIds: [ID!]!, $groupName: String!) {\n     addGroup(recipientIds: $recipientIds, groupName: $groupName) {\n       ...ChatWithoutMessages\n-      messages {\n-        ...Message\n+      messageFeed {\n+        hasNextPage,\n+        cursor,\n+        messages {\n+          ...Message\n+        }\n       }\n     }\n   }\ndiff --git a/src/graphql/chatAdded.subscription.ts b/src/graphql/chatAdded.subscription.ts\nindex 9f6afe5..e6f194d 100644\n--- a/src/graphql/chatAdded.subscription.ts\n+++ b/src/graphql/chatAdded.subscription.ts\n@@ -3,11 +3,15 @@ import {fragments} from './fragment';\n \n // We use the gql tag to parse our query string into a query document\n export const chatAddedSubscription = gql`\n-  subscription chatAdded {\n+  subscription chatAdded($amount: Int!) {\n     chatAdded {\n       ...ChatWithoutMessages\n-      messages {\n-        ...Message\n+      messageFeed(amount: $amount) {\n+        hasNextPage,\n+        cursor,\n+        messages {\n+          ...Message\n+        }\n       }\n     }\n   }\ndiff --git a/src/graphql/getChat.query.ts b/src/graphql/getChat.query.ts\nindex 621c4b9..5386633 100644\n--- a/src/graphql/getChat.query.ts\n+++ b/src/graphql/getChat.query.ts\n@@ -3,11 +3,15 @@ import {fragments} from './fragment';\n \n // We use the gql tag to parse our query string into a query document\n export const getChatQuery = gql`\n-  query GetChat($chatId: ID!) {\n+  query GetChat($chatId: ID!, $amount: Int!) {\n     chat(chatId: $chatId) {\n       ...ChatWithoutMessages\n-      messages {\n-        ...Message\n+      messageFeed(amount: $amount) {\n+        hasNextPage,\n+        cursor,\n+        messages {\n+          ...Message\n+        }\n       }\n     }\n   }\ndiff --git a/src/graphql/getChats.query.ts b/src/graphql/getChats.query.ts\nindex 44e6d96..127a70d 100644\n--- a/src/graphql/getChats.query.ts\n+++ b/src/graphql/getChats.query.ts\n@@ -3,11 +3,15 @@ import {fragments} from './fragment';\n \n // We use the gql tag to parse our query string into a query document\n export const getChatsQuery = gql`\n-  query GetChats($amount: Int) {\n+  query GetChats($amount: Int!) {\n     chats {\n       ...ChatWithoutMessages\n-      messages(amount: $amount) {\n-        ...Message\n+      messageFeed(amount: $amount) {\n+        hasNextPage,\n+        cursor,\n+        messages {\n+          ...Message\n+        }\n       }\n     }\n   }\ndiff --git a/src/graphql/moreMessages.query.ts b/src/graphql/moreMessages.query.ts\nnew file mode 100644\nindex 0000000..369d028\n--- /dev/null\n+++ b/src/graphql/moreMessages.query.ts\n@@ -0,0 +1,19 @@\n+import gql from 'graphql-tag';\n+import {fragments} from './fragment';\n+\n+// We use the gql tag to parse our query string into a query document\n+export const moreMessagesQuery = gql`\n+  query MoreMessages($chatId: ID!, $amount: Int!, $before: String!) {\n+    chat(chatId: $chatId) {\n+      messageFeed(amount: $amount, before: $before) {\n+        hasNextPage,\n+        cursor,\n+        messages {\n+          ...Message\n+        }\n+      }\n+    }\n+  }\n+\n+  ${fragments['message']}\n+`;\ndiff --git a/karma.conf.js b/src/karma.conf.js\nsimilarity index 76%\nrename from karma.conf.js\nrename to src/karma.conf.js\nindex 68c2f7c..aa9f74a 100644\n--- a/karma.conf.js\n+++ b/src/karma.conf.js\n@@ -4,24 +4,22 @@\n module.exports = function (config) {\n   config.set({\n     basePath: '',\n-    frameworks: ['jasmine', '@angular/cli'],\n+    frameworks: ['jasmine', '@angular-devkit/build-angular'],\n     plugins: [\n       require('karma-jasmine'),\n       require('karma-chrome-launcher'),\n       require('karma-jasmine-html-reporter'),\n       require('karma-coverage-istanbul-reporter'),\n-      require('@angular/cli/plugins/karma')\n+      require('@angular-devkit/build-angular/plugins/karma')\n     ],\n-    client:{\n+    client: {\n       clearContext: false // leave Jasmine Spec Runner output visible in browser\n     },\n     coverageIstanbulReporter: {\n-      reports: [ 'html', 'lcovonly' ],\n+      dir: require('path').join(__dirname, '../coverage'),\n+      reports: ['html', 'lcovonly'],\n       fixWebpackSourcePaths: true\n     },\n-    angularCli: {\n-      environment: 'dev'\n-    },\n     reporters: ['progress', 'kjhtml'],\n     port: 9876,\n     colors: true,\ndiff --git a/src/polyfills.ts b/src/polyfills.ts\nindex af84770..d310405 100644\n--- a/src/polyfills.ts\n+++ b/src/polyfills.ts\n@@ -47,8 +47,9 @@ import 'core-js/es7/reflect';\n \n \n /**\n- * Required to support Web Animations `@angular/platform-browser/animations`.\n- * Needed for: All but Chrome, Firefox and Opera. http://caniuse.com/#feat=web-animation\n+ * Web Animations `@angular/platform-browser/animations`\n+ * Only required if AnimationBuilder is used within the application and using IE/Edge or Safari.\n+ * Standard animation support in Angular DOES NOT require any polyfills (as of Angular 6.0).\n  **/\n // import 'web-animations-js';  // Run `npm install --save web-animations-js`.\n \ndiff --git a/src/tsconfig.app.json b/src/tsconfig.app.json\nindex 39ba8db..722c370 100644\n--- a/src/tsconfig.app.json\n+++ b/src/tsconfig.app.json\n@@ -2,12 +2,11 @@\n   \"extends\": \"../tsconfig.json\",\n   \"compilerOptions\": {\n     \"outDir\": \"../out-tsc/app\",\n-    \"baseUrl\": \"./\",\n     \"module\": \"es2015\",\n     \"types\": []\n   },\n   \"exclude\": [\n-    \"test.ts\",\n+    \"src/test.ts\",\n     \"**/*.spec.ts\"\n   ]\n }\ndiff --git a/src/tsconfig.spec.json b/src/tsconfig.spec.json\nindex ac22a29..8f7cede 100644\n--- a/src/tsconfig.spec.json\n+++ b/src/tsconfig.spec.json\n@@ -2,7 +2,6 @@\n   \"extends\": \"../tsconfig.json\",\n   \"compilerOptions\": {\n     \"outDir\": \"../out-tsc/spec\",\n-    \"baseUrl\": \"./\",\n     \"module\": \"commonjs\",\n     \"types\": [\n       \"jasmine\",\n@@ -10,7 +9,8 @@\n     ]\n   },\n   \"files\": [\n-    \"test.ts\"\n+    \"test.ts\",\n+    \"polyfills.ts\"\n   ],\n   \"include\": [\n     \"**/*.spec.ts\",\ndiff --git a/src/tslint.json b/src/tslint.json\nnew file mode 100644\nindex 0000000..52e2c1a\n--- /dev/null\n+++ b/src/tslint.json\n@@ -0,0 +1,17 @@\n+{\n+    \"extends\": \"../tslint.json\",\n+    \"rules\": {\n+        \"directive-selector\": [\n+            true,\n+            \"attribute\",\n+            \"app\",\n+            \"camelCase\"\n+        ],\n+        \"component-selector\": [\n+            true,\n+            \"element\",\n+            \"app\",\n+            \"kebab-case\"\n+        ]\n+    }\n+}\ndiff --git a/src/types.d.ts b/src/types.d.ts\nindex b1986ca..b4b3c22 100644\n--- a/src/types.d.ts\n+++ b/src/types.d.ts\n@@ -1,321 +1,446 @@\n /* tslint:disable */\n \n+/** A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar. */\n+export type DateTime = any;\n+\n export interface Query {\n-  users: User[]; \n-  chats: Chat[]; \n-  chat?: Chat | null; \n+  users?: User[] | null;\n+  chats?: Chat[] | null;\n+  chat?: Chat | null;\n }\n \n export interface User {\n-  id: string; \n-  name?: string | null; \n-  picture?: string | null; \n-  phone?: string | null; \n+  id: string;\n+  name?: string | null;\n+  picture?: string | null;\n+  phone?: string | null;\n }\n \n export interface Chat {\n-  id: string; /* May be a chat or a group */\n-  name?: string | null; /* Computed for chats */\n-  picture?: string | null; /* Computed for chats */\n-  allTimeMembers: User[]; /* All members, current and past ones. */\n-  listingMembers: User[]; /* Whoever gets the chat listed. For groups includes past members who still didn&#x27;t delete the group. */\n-  actualGroupMembers: User[]; /* Actual members of the group (they are not the only ones who get the group listed). Null for chats. */\n-  admins: User[]; /* Null for chats */\n-  owner?: User | null; /* If null the group is read-only. Null for chats. */\n-  messages: Message[]; \n-  unreadMessages: number; /* Computed property */\n-  isGroup: boolean; /* Computed property */\n+  id: string /** May be a chat or a group */;\n+  name?: string | null /** Computed for chats */;\n+  picture?: string | null /** Computed for chats */;\n+  allTimeMembers: User[] /** All members, current and past ones. */;\n+  listingMembers: User[] /** Whoever gets the chat listed. For groups includes past members who still didn't delete the group. */;\n+  actualGroupMembers: User[] /** Actual members of the group (they are not the only ones who get the group listed). Null for chats. */;\n+  admins?: User[] | null /** Null for chats */;\n+  owner?: User | null /** If null the group is read-only. Null for chats. */;\n+  messages: (Message | null)[];\n+  messageFeed?: MessageFeed | null /** Return messages in a a Feed Wrapper with cursor based pagination */;\n+  unreadMessages: number /** Computed property */;\n+  isGroup: boolean /** Computed property */;\n }\n \n export interface Message {\n-  id: string; \n-  sender: User; \n-  chat: Chat; \n-  content: string; \n-  createdAt: string; \n-  type: number; /* FIXME: should return MessageType */\n-  recipients: Recipient[]; /* Whoever received the message */\n-  holders: User[]; /* Whoever still holds a copy of the message. Cannot be null because the message gets deleted otherwise */\n-  ownership: boolean; /* Computed property */\n+  id: string;\n+  sender: User;\n+  chat: Chat;\n+  content: string;\n+  createdAt: DateTime;\n+  type: number /** FIXME: should return MessageType */;\n+  recipients: Recipient[] /** Whoever received the message */;\n+  holders: User[] /** Whoever still holds a copy of the message. Cannot be null because the message gets deleted otherwise */;\n+  ownership: boolean /** Computed property */;\n }\n \n export interface Recipient {\n-  user: User; \n-  message: Message; \n-  receivedAt?: string | null; \n-  readAt?: string | null; \n+  user: User;\n+  message: Message;\n+  chat: Chat;\n+  receivedAt?: DateTime | null;\n+  readAt?: DateTime | null;\n+}\n+\n+export interface MessageFeed {\n+  hasNextPage: boolean;\n+  cursor?: string | null;\n+  messages: (Message | null)[];\n }\n \n export interface Mutation {\n-  addChat?: Chat | null; \n-  addGroup?: Chat | null; \n-  removeChat?: string | null; \n-  addMessage?: Message | null; \n-  removeMessages?: string[] | null; \n-  addMembers?: string[] | null; \n-  removeMembers?: string[] | null; \n-  addAdmins?: string[] | null; \n-  removeAdmins?: string[] | null; \n-  setGroupName?: string | null; \n-  setGroupPicture?: string | null; \n-  markAsReceived?: boolean | null; \n-  markAsRead?: boolean | null; \n+  addChat?: Chat | null;\n+  addGroup?: Chat | null;\n+  removeChat?: string | null;\n+  addMessage?: Message | null;\n+  removeMessages?: (string | null)[] | null;\n+  addMembers?: (string | null)[] | null;\n+  removeMembers?: (string | null)[] | null;\n+  addAdmins?: (string | null)[] | null;\n+  removeAdmins?: (string | null)[] | null;\n+  setGroupName?: string | null;\n+  setGroupPicture?: string | null;\n+  markAsReceived?: boolean | null;\n+  markAsRead?: boolean | null;\n }\n \n export interface Subscription {\n-  messageAdded?: Message | null; \n-  chatAdded?: Chat | null; \n+  messageAdded?: Message | null;\n+  chatAdded?: Chat | null;\n }\n export interface ChatQueryArgs {\n-  chatId: string; \n+  chatId: string;\n }\n export interface MessagesChatArgs {\n-  amount?: number | null; \n+  amount?: number | null;\n+  before?: string | null;\n+}\n+export interface MessageFeedChatArgs {\n+  amount?: number | null;\n+  before?: string | null;\n }\n export interface AddChatMutationArgs {\n-  recipientId: string; \n+  recipientId: string;\n }\n export interface AddGroupMutationArgs {\n-  recipientIds: string[]; \n-  groupName: string; \n+  recipientIds: string[];\n+  groupName: string;\n }\n export interface RemoveChatMutationArgs {\n-  chatId: string; \n+  chatId: string;\n }\n export interface AddMessageMutationArgs {\n-  chatId: string; \n-  content: string; \n+  chatId: string;\n+  content: string;\n }\n export interface RemoveMessagesMutationArgs {\n-  chatId: string; \n-  messageIds?: string[] | null; \n-  all?: boolean | null; \n+  chatId: string;\n+  messageIds?: (string | null)[] | null;\n+  all?: boolean | null;\n }\n export interface AddMembersMutationArgs {\n-  groupId: string; \n-  userIds: string[]; \n+  groupId: string;\n+  userIds: string[];\n }\n export interface RemoveMembersMutationArgs {\n-  groupId: string; \n-  userIds: string[]; \n+  groupId: string;\n+  userIds: string[];\n }\n export interface AddAdminsMutationArgs {\n-  groupId: string; \n-  userIds: string[]; \n+  groupId: string;\n+  userIds: string[];\n }\n export interface RemoveAdminsMutationArgs {\n-  groupId: string; \n-  userIds: string[]; \n+  groupId: string;\n+  userIds: string[];\n }\n export interface SetGroupNameMutationArgs {\n-  groupId: string; \n+  groupId: string;\n }\n export interface SetGroupPictureMutationArgs {\n-  groupId: string; \n+  groupId: string;\n }\n export interface MarkAsReceivedMutationArgs {\n-  chatId: string; \n+  chatId: string;\n }\n export interface MarkAsReadMutationArgs {\n-  chatId: string; \n+  chatId: string;\n }\n export interface MessageAddedSubscriptionArgs {\n-  chatId?: string | null; \n+  chatId?: string | null;\n }\n \n-export type MessageType = \"LOCATION\" | \"TEXT\" | \"PICTURE\";\n-\n+export enum MessageType {\n+  LOCATION = \"LOCATION\",\n+  TEXT = \"TEXT\",\n+  PICTURE = \"PICTURE\"\n+}\n export namespace AddChat {\n   export type Variables = {\n     recipientId: string;\n-  }\n+  };\n \n   export type Mutation = {\n-    addChat?: AddChat | null; \n-  } \n+    __typename?: \"Mutation\";\n+    addChat?: AddChat | null;\n+  };\n \n   export type AddChat = {\n-    messages: Messages[]; \n-  } & ChatWithoutMessages.Fragment\n+    __typename?: \"Chat\";\n+    messageFeed?: MessageFeed | null;\n+  } & ChatWithoutMessages.Fragment;\n \n-  export type Messages = Message.Fragment\n+  export type MessageFeed = {\n+    __typename?: \"MessageFeed\";\n+    hasNextPage: boolean;\n+    cursor?: string | null;\n+    messages: (Messages | null)[];\n+  };\n+\n+  export type Messages = Message.Fragment;\n }\n export namespace AddGroup {\n   export type Variables = {\n     recipientIds: string[];\n     groupName: string;\n-  }\n+  };\n \n   export type Mutation = {\n-    addGroup?: AddGroup | null; \n-  } \n+    __typename?: \"Mutation\";\n+    addGroup?: AddGroup | null;\n+  };\n \n   export type AddGroup = {\n-    messages: Messages[]; \n-  } & ChatWithoutMessages.Fragment\n+    __typename?: \"Chat\";\n+    messageFeed?: MessageFeed | null;\n+  } & ChatWithoutMessages.Fragment;\n+\n+  export type MessageFeed = {\n+    __typename?: \"MessageFeed\";\n+    hasNextPage: boolean;\n+    cursor?: string | null;\n+    messages: (Messages | null)[];\n+  };\n \n-  export type Messages = Message.Fragment\n+  export type Messages = Message.Fragment;\n }\n export namespace AddMessage {\n   export type Variables = {\n     chatId: string;\n     content: string;\n-  }\n+  };\n \n   export type Mutation = {\n-    addMessage?: AddMessage | null; \n-  } \n+    __typename?: \"Mutation\";\n+    addMessage?: AddMessage | null;\n+  };\n \n-  export type AddMessage = Message.Fragment\n+  export type AddMessage = Message.Fragment;\n }\n export namespace ChatAdded {\n   export type Variables = {\n-  }\n+    amount: number;\n+  };\n \n   export type Subscription = {\n-    chatAdded?: ChatAdded | null; \n-  } \n+    __typename?: \"Subscription\";\n+    chatAdded?: ChatAdded | null;\n+  };\n \n   export type ChatAdded = {\n-    messages: Messages[]; \n-  } & ChatWithoutMessages.Fragment\n+    __typename?: \"Chat\";\n+    messageFeed?: MessageFeed | null;\n+  } & ChatWithoutMessages.Fragment;\n+\n+  export type MessageFeed = {\n+    __typename?: \"MessageFeed\";\n+    hasNextPage: boolean;\n+    cursor?: string | null;\n+    messages: (Messages | null)[];\n+  };\n \n-  export type Messages = Message.Fragment\n+  export type Messages = Message.Fragment;\n }\n export namespace GetChat {\n   export type Variables = {\n     chatId: string;\n-  }\n+    amount: number;\n+  };\n \n   export type Query = {\n-    chat?: Chat | null; \n-  } \n+    __typename?: \"Query\";\n+    chat?: Chat | null;\n+  };\n \n   export type Chat = {\n-    messages: Messages[]; \n-  } & ChatWithoutMessages.Fragment\n+    __typename?: \"Chat\";\n+    messageFeed?: MessageFeed | null;\n+  } & ChatWithoutMessages.Fragment;\n \n-  export type Messages = Message.Fragment\n+  export type MessageFeed = {\n+    __typename?: \"MessageFeed\";\n+    hasNextPage: boolean;\n+    cursor?: string | null;\n+    messages: (Messages | null)[];\n+  };\n+\n+  export type Messages = Message.Fragment;\n }\n export namespace GetChats {\n   export type Variables = {\n-    amount?: number | null;\n-  }\n+    amount: number;\n+  };\n \n   export type Query = {\n-    chats: Chats[]; \n-  } \n+    __typename?: \"Query\";\n+    chats?: Chats[] | null;\n+  };\n \n   export type Chats = {\n-    messages: Messages[]; \n-  } & ChatWithoutMessages.Fragment\n+    __typename?: \"Chat\";\n+    messageFeed?: MessageFeed | null;\n+  } & ChatWithoutMessages.Fragment;\n+\n+  export type MessageFeed = {\n+    __typename?: \"MessageFeed\";\n+    hasNextPage: boolean;\n+    cursor?: string | null;\n+    messages: (Messages | null)[];\n+  };\n \n-  export type Messages = Message.Fragment\n+  export type Messages = Message.Fragment;\n }\n export namespace GetUsers {\n-  export type Variables = {\n-  }\n+  export type Variables = {};\n \n   export type Query = {\n-    users: Users[]; \n-  } \n+    __typename?: \"Query\";\n+    users?: Users[] | null;\n+  };\n \n   export type Users = {\n-    id: string; \n-    name?: string | null; \n-    picture?: string | null; \n-  } \n+    __typename?: \"User\";\n+    id: string;\n+    name?: string | null;\n+    picture?: string | null;\n+  };\n }\n export namespace MessageAdded {\n   export type Variables = {\n     chatId?: string | null;\n-  }\n+  };\n \n   export type Subscription = {\n-    messageAdded?: MessageAdded | null; \n-  } \n+    __typename?: \"Subscription\";\n+    messageAdded?: MessageAdded | null;\n+  };\n \n   export type MessageAdded = {\n-    chat: Chat; \n-  } & Message.Fragment\n+    __typename?: \"Message\";\n+    chat: Chat;\n+  } & Message.Fragment;\n \n   export type Chat = {\n-    id: string; \n-  } \n+    __typename?: \"Chat\";\n+    id: string;\n+  };\n+}\n+export namespace MoreMessages {\n+  export type Variables = {\n+    chatId: string;\n+    amount: number;\n+    before: string;\n+  };\n+\n+  export type Query = {\n+    __typename?: \"Query\";\n+    chat?: Chat | null;\n+  };\n+\n+  export type Chat = {\n+    __typename?: \"Chat\";\n+    messageFeed?: MessageFeed | null;\n+  };\n+\n+  export type MessageFeed = {\n+    __typename?: \"MessageFeed\";\n+    hasNextPage: boolean;\n+    cursor?: string | null;\n+    messages: (Messages | null)[];\n+  };\n+\n+  export type Messages = Message.Fragment;\n }\n export namespace RemoveAllMessages {\n   export type Variables = {\n     chatId: string;\n     all?: boolean | null;\n-  }\n+  };\n \n   export type Mutation = {\n-    removeMessages?: string[] | null; \n-  } \n+    __typename?: \"Mutation\";\n+    removeMessages?: (string | null)[] | null;\n+  };\n }\n export namespace RemoveChat {\n   export type Variables = {\n     chatId: string;\n-  }\n+  };\n \n   export type Mutation = {\n-    removeChat?: string | null; \n-  } \n+    __typename?: \"Mutation\";\n+    removeChat?: string | null;\n+  };\n }\n export namespace RemoveMessages {\n   export type Variables = {\n     chatId: string;\n-    messageIds?: string[] | null;\n-  }\n+    messageIds?: (string | null)[] | null;\n+  };\n \n   export type Mutation = {\n-    removeMessages?: string[] | null; \n-  } \n+    __typename?: \"Mutation\";\n+    removeMessages?: (string | null)[] | null;\n+  };\n }\n \n export namespace ChatWithoutMessages {\n   export type Fragment = {\n-    id: string; \n-    name?: string | null; \n-    picture?: string | null; \n-    allTimeMembers: AllTimeMembers[]; \n-    unreadMessages: number; \n-    isGroup: boolean; \n-  } \n+    __typename?: \"Chat\";\n+    id: string;\n+    name?: string | null;\n+    picture?: string | null;\n+    allTimeMembers: AllTimeMembers[];\n+    unreadMessages: number;\n+    isGroup: boolean;\n+  };\n \n   export type AllTimeMembers = {\n-    id: string; \n-  } \n+    __typename?: \"User\";\n+    id: string;\n+  };\n }\n \n export namespace Message {\n   export type Fragment = {\n-    id: string; \n-    sender: Sender; \n-    content: string; \n-    createdAt: string; \n-    type: number; \n-    recipients: Recipients[]; \n-    ownership: boolean; \n-  } \n+    __typename?: \"Message\";\n+    id: string;\n+    chat: Chat;\n+    sender: Sender;\n+    content: string;\n+    createdAt: DateTime;\n+    type: number;\n+    recipients: Recipients[];\n+    ownership: boolean;\n+  };\n+\n+  export type Chat = {\n+    __typename?: \"Chat\";\n+    id: string;\n+  };\n \n   export type Sender = {\n-    id: string; \n-    name?: string | null; \n-  } \n+    __typename?: \"User\";\n+    id: string;\n+    name?: string | null;\n+  };\n \n   export type Recipients = {\n-    user: User; \n-    message: Message; \n-    receivedAt?: string | null; \n-    readAt?: string | null; \n-  } \n+    __typename?: \"Recipient\";\n+    user: User;\n+    message: Message;\n+    chat: __Chat;\n+    receivedAt?: DateTime | null;\n+    readAt?: DateTime | null;\n+  };\n \n   export type User = {\n-    id: string; \n-  } \n+    __typename?: \"User\";\n+    id: string;\n+  };\n \n   export type Message = {\n-    id: string; \n-  } \n+    __typename?: \"Message\";\n+    id: string;\n+    chat: _Chat;\n+  };\n+\n+  export type _Chat = {\n+    __typename?: \"Chat\";\n+    id: string;\n+  };\n+\n+  export type __Chat = {\n+    __typename?: \"Chat\";\n+    id: string;\n+  };\n }\ndiff --git a/src/typings.d.ts b/src/typings.d.ts\ndeleted file mode 100644\nindex ef5c7bd..0000000\n--- a/src/typings.d.ts\n+++ /dev/null\n@@ -1,5 +0,0 @@\n-/* SystemJS module definition */\n-declare var module: NodeModule;\n-interface NodeModule {\n-  id: string;\n-}\ndiff --git a/tsconfig.json b/tsconfig.json\nindex d8195f3..9431dd1 100644\n--- a/tsconfig.json\n+++ b/tsconfig.json\n@@ -1,6 +1,7 @@\n {\n   \"compileOnSave\": false,\n   \"compilerOptions\": {\n+    \"baseUrl\": \"./\",\n     \"outDir\": \"./dist/out-tsc\",\n     \"sourceMap\": true,\n     \"declaration\": false,\ndiff --git a/tslint.json b/tslint.json\nindex 9963d6c..3ea984c 100644\n--- a/tslint.json\n+++ b/tslint.json\n@@ -18,7 +18,6 @@\n     \"forin\": true,\n     \"import-blacklist\": [\n       true,\n-      \"rxjs\",\n       \"rxjs/Rx\"\n     ],\n     \"import-spacing\": true,\n@@ -117,18 +116,6 @@\n       \"check-separator\",\n       \"check-type\"\n     ],\n-    \"directive-selector\": [\n-      true,\n-      \"attribute\",\n-      \"app\",\n-      \"camelCase\"\n-    ],\n-    \"component-selector\": [\n-      true,\n-      \"element\",\n-      \"app\",\n-      \"kebab-case\"\n-    ],\n     \"no-output-on-prefix\": true,\n     \"use-input-property-decorator\": true,\n     \"use-output-property-decorator\": true,\n",
        "manuals": [
          {
            "manualTitle": "Initial commit",
            "stepRevision": "f493748ad9dcfa0a086df8fb720cecfddf2caeb3",
            "manualView": "A newly created Tortilla project. For more information, see https://github.com/Urigo/tortilla."
          },
          {
            "manualTitle": "Step 1: Chats listing",
            "stepRevision": "ea4f6a77579a6155973ec15b1f3d7004c7aca273",
            "manualView": ""
          },
          {
            "manualTitle": "Step 2: graphql-code-generator",
            "stepRevision": "6617ab80c0d3c6da8e6747ec44f07b0fcfccf3f6",
            "manualView": ""
          },
          {
            "manualTitle": "Step 3: Testing",
            "stepRevision": "974eae42a44824d0c2f957fdb46a233071b0a55a",
            "manualView": ""
          },
          {
            "manualTitle": "Step 4: Chat viewer",
            "stepRevision": "99ce45f851e0b5069db24830270fd84d07036a5c",
            "manualView": ""
          },
          {
            "manualTitle": "Step 5: Mutations",
            "stepRevision": "d59dea0f149ab588d970dbd170d7c9ec3ca246ed",
            "manualView": ""
          },
          {
            "manualTitle": "Step 6: Update the store",
            "stepRevision": "e51f2a77fd80e90af93078e524bb334157af8fb8",
            "manualView": ""
          },
          {
            "manualTitle": "Step 7: Messages and chat removal",
            "stepRevision": "148a2e06f5bd247aa1e79d681cb859cafe3b3993",
            "manualView": ""
          },
          {
            "manualTitle": "Step 8: Chats creation",
            "stepRevision": "975d54081463479be2688d02457e55afce9be288",
            "manualView": ""
          },
          {
            "manualTitle": "Step 9: Zero latency on slow 3g networks",
            "stepRevision": "e34d1593bd10fc5ff36f95b39eec512461e7fc03",
            "manualView": ""
          },
          {
            "manualTitle": "Step 10: Authentication",
            "stepRevision": "a576c35409b922d81c65534c7f431a617a41210e",
            "manualView": ""
          },
          {
            "manualTitle": "Step 11: Subscriptions",
            "stepRevision": "e966adac0318b17ed22f371382f4f792be942ff1",
            "manualView": ""
          }
        ]
      },
      {
        "releaseVersion": "0.1.0",
        "releaseDate": "2018-05-29 00:49:36 +0800",
        "tagName": "master@0.1.0",
        "tagRevision": "95e7d26714cca92a76714faa980424f7050c71a8",
        "historyRevision": "99d54aaedf770542323317fa04f180b9cba5455a",
        "changesDiff": "diff --git a/.angular-cli.json b/.angular-cli.json\nnew file mode 100644\nindex 0000000..542e27b\n--- /dev/null\n+++ b/.angular-cli.json\n@@ -0,0 +1,60 @@\n+{\n+  \"$schema\": \"./node_modules/@angular/cli/lib/config/schema.json\",\n+  \"project\": {\n+    \"name\": \"whatsapp-client-angularcli-material\"\n+  },\n+  \"apps\": [\n+    {\n+      \"root\": \"src\",\n+      \"outDir\": \"dist\",\n+      \"assets\": [\n+        \"assets\",\n+        \"favicon.ico\"\n+      ],\n+      \"index\": \"index.html\",\n+      \"main\": \"main.ts\",\n+      \"polyfills\": \"polyfills.ts\",\n+      \"test\": \"test.ts\",\n+      \"tsconfig\": \"tsconfig.app.json\",\n+      \"testTsconfig\": \"tsconfig.spec.json\",\n+      \"prefix\": \"app\",\n+      \"styles\": [\n+        \"styles.scss\"\n+      ],\n+      \"scripts\": [],\n+      \"environmentSource\": \"environments/environment.ts\",\n+      \"environments\": {\n+        \"dev\": \"environments/environment.ts\",\n+        \"prod\": \"environments/environment.prod.ts\"\n+      }\n+    }\n+  ],\n+  \"e2e\": {\n+    \"protractor\": {\n+      \"config\": \"./protractor.conf.js\"\n+    }\n+  },\n+  \"lint\": [\n+    {\n+      \"project\": \"src/tsconfig.app.json\",\n+      \"exclude\": \"**/node_modules/**\"\n+    },\n+    {\n+      \"project\": \"src/tsconfig.spec.json\",\n+      \"exclude\": \"**/node_modules/**\"\n+    },\n+    {\n+      \"project\": \"e2e/tsconfig.e2e.json\",\n+      \"exclude\": \"**/node_modules/**\"\n+    }\n+  ],\n+  \"test\": {\n+    \"karma\": {\n+      \"config\": \"./karma.conf.js\"\n+    }\n+  },\n+  \"defaults\": {\n+    \"styleExt\": \"scss\",\n+    \"component\": {}\n+  }\n+}\ndiff --git a/.editorconfig b/.editorconfig\nnew file mode 100644\nindex 0000000..6e87a00\n--- /dev/null\n+++ b/.editorconfig\n@@ -0,0 +1,13 @@\n+# Editor configuration, see http://editorconfig.org\n+root = true\n+\n+[*]\n+charset = utf-8\n+indent_style = space\n+indent_size = 2\n+insert_final_newline = true\n+trim_trailing_whitespace = true\n+\n+[*.md]\n+max_line_length = off\n+trim_trailing_whitespace = false\ndiff --git a/.gitignore b/.gitignore\nnew file mode 100644\nindex 0000000..22657a5\n--- /dev/null\n+++ b/.gitignore\n@@ -0,0 +1,46 @@\n+# See http://help.github.com/ignore-files/ for more about ignoring files.\n+\n+# compiled output\n+/dist\n+/dist-server\n+/tmp\n+/out-tsc\n+\n+# dependencies\n+/node_modules\n+\n+# IDEs and editors\n+/.idea\n+.project\n+.classpath\n+.c9/\n+*.launch\n+.settings/\n+*.sublime-workspace\n+\n+# IDE - VSCode\n+.vscode/*\n+!.vscode/settings.json\n+!.vscode/tasks.json\n+!.vscode/launch.json\n+!.vscode/extensions.json\n+\n+# misc\n+/.sass-cache\n+/connect.lock\n+/coverage\n+/libpeerconnection.log\n+npm-debug.log\n+testem.log\n+/typings\n+\n+# e2e\n+/e2e/*.js\n+/e2e/*.map\n+\n+# System Files\n+.DS_Store\n+Thumbs.db\n+\n+#Tortilla\n+package-lock.json\ndiff --git a/.tortilla/manuals/templates/root.tmpl b/.tortilla/manuals/templates/root.tmpl\nnew file mode 100644\nindex 0000000..37c481e\n--- /dev/null\n+++ b/.tortilla/manuals/templates/root.tmpl\n@@ -0,0 +1 @@\n+A newly created Tortilla project. For more information, see https://github.com/Urigo/tortilla.\n\\ No newline at end of file\ndiff --git a/.tortilla/manuals/templates/step1.tmpl b/.tortilla/manuals/templates/step1.tmpl\nnew file mode 100644\nindex 0000000..e69de29\ndiff --git a/.tortilla/manuals/templates/step10.tmpl b/.tortilla/manuals/templates/step10.tmpl\nnew file mode 100644\nindex 0000000..e69de29\ndiff --git a/.tortilla/manuals/templates/step11.tmpl b/.tortilla/manuals/templates/step11.tmpl\nnew file mode 100644\nindex 0000000..e69de29\ndiff --git a/.tortilla/manuals/templates/step2.tmpl b/.tortilla/manuals/templates/step2.tmpl\nnew file mode 100644\nindex 0000000..e69de29\ndiff --git a/.tortilla/manuals/templates/step3.tmpl b/.tortilla/manuals/templates/step3.tmpl\nnew file mode 100644\nindex 0000000..e69de29\ndiff --git a/.tortilla/manuals/templates/step4.tmpl b/.tortilla/manuals/templates/step4.tmpl\nnew file mode 100644\nindex 0000000..e69de29\ndiff --git a/.tortilla/manuals/templates/step5.tmpl b/.tortilla/manuals/templates/step5.tmpl\nnew file mode 100644\nindex 0000000..e69de29\ndiff --git a/.tortilla/manuals/templates/step6.tmpl b/.tortilla/manuals/templates/step6.tmpl\nnew file mode 100644\nindex 0000000..e69de29\ndiff --git a/.tortilla/manuals/templates/step7.tmpl b/.tortilla/manuals/templates/step7.tmpl\nnew file mode 100644\nindex 0000000..e69de29\ndiff --git a/.tortilla/manuals/templates/step8.tmpl b/.tortilla/manuals/templates/step8.tmpl\nnew file mode 100644\nindex 0000000..e69de29\ndiff --git a/.tortilla/manuals/templates/step9.tmpl b/.tortilla/manuals/templates/step9.tmpl\nnew file mode 100644\nindex 0000000..e69de29\ndiff --git a/.travis.yml b/.travis.yml\nnew file mode 100644\nindex 0000000..b90ab94\n--- /dev/null\n+++ b/.travis.yml\n@@ -0,0 +1,20 @@\n+dist: trusty\n+sudo: required\n+\n+branches:\n+  except:\n+  - master-step1\n+  - master-step2\n+\n+language: node_js\n+node_js:\n+  - \"8\"\n+\n+cache:\n+  directories:\n+     - ./node_modules\n+\n+script:\n+  # Use Chromium instead of Chrome.\n+  - export CHROME_BIN=chromium-browser\n+  - npm run test\ndiff --git a/e2e/app.e2e-spec.ts b/e2e/app.e2e-spec.ts\nnew file mode 100644\nindex 0000000..aaf19d5\n--- /dev/null\n+++ b/e2e/app.e2e-spec.ts\n@@ -0,0 +1,14 @@\n+import { AppPage } from './app.po';\n+\n+describe('whatsapp-client-angularcli-material App', () => {\n+  let page: AppPage;\n+\n+  beforeEach(() => {\n+    page = new AppPage();\n+  });\n+\n+  it('should display welcome message', () => {\n+    page.navigateTo();\n+    expect(page.getParagraphText()).toEqual('Welcome to app!');\n+  });\n+});\ndiff --git a/e2e/app.po.ts b/e2e/app.po.ts\nnew file mode 100644\nindex 0000000..82ea75b\n--- /dev/null\n+++ b/e2e/app.po.ts\n@@ -0,0 +1,11 @@\n+import { browser, by, element } from 'protractor';\n+\n+export class AppPage {\n+  navigateTo() {\n+    return browser.get('/');\n+  }\n+\n+  getParagraphText() {\n+    return element(by.css('app-root h1')).getText();\n+  }\n+}\ndiff --git a/e2e/tsconfig.e2e.json b/e2e/tsconfig.e2e.json\nnew file mode 100644\nindex 0000000..1d9e5ed\n--- /dev/null\n+++ b/e2e/tsconfig.e2e.json\n@@ -0,0 +1,14 @@\n+{\n+  \"extends\": \"../tsconfig.json\",\n+  \"compilerOptions\": {\n+    \"outDir\": \"../out-tsc/e2e\",\n+    \"baseUrl\": \"./\",\n+    \"module\": \"commonjs\",\n+    \"target\": \"es5\",\n+    \"types\": [\n+      \"jasmine\",\n+      \"jasminewd2\",\n+      \"node\"\n+    ]\n+  }\n+}\ndiff --git a/karma.conf.js b/karma.conf.js\nnew file mode 100644\nindex 0000000..68c2f7c\n--- /dev/null\n+++ b/karma.conf.js\n@@ -0,0 +1,33 @@\n+// Karma configuration file, see link for more information\n+// https://karma-runner.github.io/1.0/config/configuration-file.html\n+\n+module.exports = function (config) {\n+  config.set({\n+    basePath: '',\n+    frameworks: ['jasmine', '@angular/cli'],\n+    plugins: [\n+      require('karma-jasmine'),\n+      require('karma-chrome-launcher'),\n+      require('karma-jasmine-html-reporter'),\n+      require('karma-coverage-istanbul-reporter'),\n+      require('@angular/cli/plugins/karma')\n+    ],\n+    client:{\n+      clearContext: false // leave Jasmine Spec Runner output visible in browser\n+    },\n+    coverageIstanbulReporter: {\n+      reports: [ 'html', 'lcovonly' ],\n+      fixWebpackSourcePaths: true\n+    },\n+    angularCli: {\n+      environment: 'dev'\n+    },\n+    reporters: ['progress', 'kjhtml'],\n+    port: 9876,\n+    colors: true,\n+    logLevel: config.LOG_INFO,\n+    autoWatch: true,\n+    browsers: ['ChromeHeadless'],\n+    singleRun: true\n+  });\n+};\ndiff --git a/package.json b/package.json\nnew file mode 100644\nindex 0000000..7229a04\n--- /dev/null\n+++ b/package.json\n@@ -0,0 +1,69 @@\n+{\n+  \"name\": \"whatsapp-client-angularcli-material\",\n+  \"version\": \"0.0.0\",\n+  \"license\": \"MIT\",\n+  \"scripts\": {\n+    \"ng\": \"ng\",\n+    \"start\": \"ng serve\",\n+    \"build\": \"ng build --prod\",\n+    \"test\": \"ng test\",\n+    \"lint\": \"ng lint\",\n+    \"e2e\": \"ng e2e\",\n+    \"generator\": \"gql-gen --url http://localhost:3000/graphql --template ts --out ./src/types.d.ts \\\"./src/graphql/**/*.ts\\\"\"\n+  },\n+  \"private\": true,\n+  \"dependencies\": {\n+    \"@angular/animations\": \"5.2.5\",\n+    \"@angular/cdk\": \"5.2.1\",\n+    \"@angular/common\": \"5.2.5\",\n+    \"@angular/compiler\": \"5.2.5\",\n+    \"@angular/core\": \"5.2.5\",\n+    \"@angular/flex-layout\": \"2.0.0-beta.12\",\n+    \"@angular/forms\": \"5.2.5\",\n+    \"@angular/http\": \"5.2.5\",\n+    \"@angular/material\": \"5.2.1\",\n+    \"@angular/platform-browser\": \"5.2.5\",\n+    \"@angular/platform-browser-dynamic\": \"5.2.5\",\n+    \"@angular/router\": \"5.2.5\",\n+    \"ajv\": \"6.1.1\",\n+    \"apollo-angular\": \"1.0.1\",\n+    \"apollo-angular-link-http\": \"1.0.2-beta.0\",\n+    \"apollo-cache-inmemory\": \"1.1.9\",\n+    \"apollo-client\": \"2.2.5\",\n+    \"apollo-link\": \"1.1.0\",\n+    \"apollo-link-ws\": \"1.0.5\",\n+    \"apollo-utilities\": \"1.0.8\",\n+    \"core-js\": \"2.5.3\",\n+    \"graphql\": \"0.12.3\",\n+    \"graphql-tag\": \"2.7.3\",\n+    \"hammerjs\": \"2.0.8\",\n+    \"moment\": \"2.20.1\",\n+    \"ng2-truncate\": \"1.3.11\",\n+    \"ngx-selectable-list\": \"1.1.0\",\n+    \"rxjs\": \"5.5.6\",\n+    \"subscriptions-transport-ws\": \"0.9.5\",\n+    \"zone.js\": \"0.8.20\"\n+  },\n+  \"devDependencies\": {\n+    \"@angular/cli\": \"1.7.0\",\n+    \"@angular/compiler-cli\": \"5.2.5\",\n+    \"@angular/language-service\": \"5.2.5\",\n+    \"@types/graphql\": \"0.12.4\",\n+    \"@types/jasmine\": \"2.8.6\",\n+    \"@types/jasminewd2\": \"2.0.3\",\n+    \"@types/node\": \"6.0.101\",\n+    \"codelyzer\": \"4.1.0\",\n+    \"graphql-code-generator\": \"0.8.14\",\n+    \"jasmine-core\": \"2.8.0\",\n+    \"jasmine-spec-reporter\": \"4.2.1\",\n+    \"karma\": \"2.0.0\",\n+    \"karma-chrome-launcher\": \"2.2.0\",\n+    \"karma-coverage-istanbul-reporter\": \"1.4.1\",\n+    \"karma-jasmine\": \"1.1.1\",\n+    \"karma-jasmine-html-reporter\": \"0.2.2\",\n+    \"protractor\": \"5.1.2\",\n+    \"ts-node\": \"4.1.0\",\n+    \"tslint\": \"5.9.1\",\n+    \"typescript\": \"2.5.3\"\n+  }\n+}\ndiff --git a/package.json.orig b/package.json.orig\nnew file mode 100644\nindex 0000000..e025965\n--- /dev/null\n+++ b/package.json.orig\n@@ -0,0 +1,61 @@\n+{\n+  \"name\": \"whatsapp-client-angularcli-material\",\n+  \"version\": \"0.0.0\",\n+  \"license\": \"MIT\",\n+  \"scripts\": {\n+    \"ng\": \"ng\",\n+    \"start\": \"ng serve\",\n+    \"build\": \"ng build --prod\",\n+    \"test\": \"ng test\",\n+    \"lint\": \"ng lint\",\n+    \"e2e\": \"ng e2e\"\n+  },\n+  \"private\": true,\n+  \"dependencies\": {\n+    \"@angular/animations\": \"5.2.5\",\n+    \"@angular/common\": \"5.2.5\",\n+    \"@angular/compiler\": \"5.2.5\",\n+    \"@angular/core\": \"5.2.5\",\n+    \"@angular/forms\": \"5.2.5\",\n+    \"@angular/http\": \"5.2.5\",\n+    \"@angular/platform-browser\": \"5.2.5\",\n+    \"@angular/platform-browser-dynamic\": \"5.2.5\",\n+    \"@angular/router\": \"5.2.5\",\n+    \"ajv\": \"6.1.1\",\n+    \"apollo-angular\": \"1.0.1\",\n+    \"apollo-angular-link-http\": \"1.0.2-beta.0\",\n+    \"apollo-cache-inmemory\": \"1.1.9\",\n+    \"apollo-client\": \"2.2.5\",\n+    \"apollo-link\": \"1.1.0\",\n+    \"core-js\": \"2.5.3\",\n+    \"graphql\": \"0.12.3\",\n+    \"graphql-tag\": \"2.7.3\",\n+    \"rxjs\": \"5.5.6\",\n+    \"zone.js\": \"0.8.20\"\n+  },\n+  \"devDependencies\": {\n+    \"@angular/cli\": \"1.7.0\",\n+    \"@angular/compiler-cli\": \"5.2.5\",\n+    \"@angular/language-service\": \"5.2.5\",\n+<<<<<<< HEAD\n+    \"@types/graphql\": \"^0.12.4\",\n+=======\n+    \"@types/graphql\": \"0.12.4\",\n+>>>>>>> 48ac17b... Step 1.2: Add chats service\n+    \"@types/jasmine\": \"2.8.6\",\n+    \"@types/jasminewd2\": \"2.0.3\",\n+    \"@types/node\": \"6.0.101\",\n+    \"codelyzer\": \"4.1.0\",\n+    \"jasmine-core\": \"2.8.0\",\n+    \"jasmine-spec-reporter\": \"4.2.1\",\n+    \"karma\": \"2.0.0\",\n+    \"karma-chrome-launcher\": \"2.2.0\",\n+    \"karma-coverage-istanbul-reporter\": \"1.4.1\",\n+    \"karma-jasmine\": \"1.1.1\",\n+    \"karma-jasmine-html-reporter\": \"0.2.2\",\n+    \"protractor\": \"5.1.2\",\n+    \"ts-node\": \"4.1.0\",\n+    \"tslint\": \"5.9.1\",\n+    \"typescript\": \"2.5.3\"\n+  }\n+}\ndiff --git a/protractor.conf.js b/protractor.conf.js\nnew file mode 100644\nindex 0000000..7ee3b5e\n--- /dev/null\n+++ b/protractor.conf.js\n@@ -0,0 +1,28 @@\n+// Protractor configuration file, see link for more information\n+// https://github.com/angular/protractor/blob/master/lib/config.ts\n+\n+const { SpecReporter } = require('jasmine-spec-reporter');\n+\n+exports.config = {\n+  allScriptsTimeout: 11000,\n+  specs: [\n+    './e2e/**/*.e2e-spec.ts'\n+  ],\n+  capabilities: {\n+    'browserName': 'chrome'\n+  },\n+  directConnect: true,\n+  baseUrl: 'http://localhost:4200/',\n+  framework: 'jasmine',\n+  jasmineNodeOpts: {\n+    showColors: true,\n+    defaultTimeoutInterval: 30000,\n+    print: function() {}\n+  },\n+  onPrepare() {\n+    require('ts-node').register({\n+      project: 'e2e/tsconfig.e2e.json'\n+    });\n+    jasmine.getEnv().addReporter(new SpecReporter({ spec: { displayStacktrace: true } }));\n+  }\n+};\ndiff --git a/renovate.json b/renovate.json\nnew file mode 100644\nindex 0000000..7516e39\n--- /dev/null\n+++ b/renovate.json\n@@ -0,0 +1,19 @@\n+{\n+  \"extends\": [\n+    \"config:base\",\n+    \":automergeMajor\"\n+  ],\n+  \"baseBranches\": [\n+    \"master-step3\",\n+    \"master-step4\",\n+    \"master-step5\",\n+    \"master-step6\",\n+    \"master-step7\",\n+    \"master-step8\",\n+    \"master-step9\",\n+    \"master-step10\",\n+    \"master-step11\"\n+  ],\n+  \"prHourlyLimit\": 60,\n+  \"recreateClosed\": true\n+}\ndiff --git a/src/app/app.component.scss b/src/app/app.component.scss\nnew file mode 100644\nindex 0000000..e69de29\ndiff --git a/src/app/app.component.ts b/src/app/app.component.ts\nnew file mode 100644\nindex 0000000..61feda0\n--- /dev/null\n+++ b/src/app/app.component.ts\n@@ -0,0 +1,12 @@\n+import { Component } from '@angular/core';\n+\n+@Component({\n+  selector: 'app-root',\n+  template: `\n+    <router-outlet></router-outlet>\n+  `,\n+  styleUrls: ['./app.component.scss']\n+})\n+export class AppComponent {\n+  title = 'app';\n+}\ndiff --git a/src/app/app.module.ts b/src/app/app.module.ts\nnew file mode 100644\nindex 0000000..d81a15c\n--- /dev/null\n+++ b/src/app/app.module.ts\n@@ -0,0 +1,89 @@\n+import { BrowserModule } from '@angular/platform-browser';\n+import { NgModule } from '@angular/core';\n+\n+\n+import { AppComponent } from './app.component';\n+import {HTTP_INTERCEPTORS, HttpClientModule} from '@angular/common/http';\n+import {HttpLink, HttpLinkModule, Options} from 'apollo-angular-link-http';\n+import {Apollo, ApolloModule} from 'apollo-angular';\n+import {defaultDataIdFromObject, InMemoryCache} from 'apollo-cache-inmemory';\n+import {ChatsListerModule} from './chats-lister/chats-lister.module';\n+import {RouterModule, Routes} from '@angular/router';\n+import {ChatViewerModule} from './chat-viewer/chat-viewer.module';\n+import {ChatsCreationModule} from './chats-creation/chats-creation.module';\n+import {LoginModule} from './login/login.module';\n+import {AuthInterceptor} from './login/services/auth.interceptor';\n+import {getMainDefinition} from 'apollo-utilities';\n+import {OperationDefinitionNode} from 'graphql';\n+import {split} from 'apollo-link';\n+import {WebSocketLink} from 'apollo-link-ws';\n+import {LoginService} from './login/services/login.service';\n+\n+const routes: Routes = [];\n+\n+@NgModule({\n+  declarations: [\n+    AppComponent\n+  ],\n+  imports: [\n+    BrowserModule,\n+    // Apollo\n+    ApolloModule,\n+    HttpLinkModule,\n+    HttpClientModule,\n+    // Routing\n+    RouterModule.forRoot(routes),\n+    // Feature modules\n+    ChatsListerModule,\n+    ChatViewerModule,\n+    ChatsCreationModule,\n+    LoginModule,\n+  ],\n+  providers: [\n+    {\n+      provide: HTTP_INTERCEPTORS,\n+      useClass: AuthInterceptor,\n+      multi: true,\n+    }\n+  ],\n+  bootstrap: [AppComponent]\n+})\n+export class AppModule {\n+  constructor(\n+    apollo: Apollo,\n+    httpLink: HttpLink,\n+    loginService: LoginService,\n+  ) {\n+    const subscriptionLink = new WebSocketLink({\n+      uri:\n+        'ws://localhost:3000/subscriptions',\n+      options: {\n+        reconnect: true,\n+        connectionParams: () => ({\n+          authToken: loginService.getAuthHeader() || null\n+        })\n+      }\n+    });\n+\n+    const link = split(\n+      ({ query }) => {\n+        const { kind, operation } = <OperationDefinitionNode>getMainDefinition(query);\n+        return kind === 'OperationDefinition' && operation === 'subscription';\n+      },\n+      subscriptionLink,\n+      httpLink.create(<Options>{uri: 'http://localhost:3000/graphql'})\n+    );\n+\n+    apollo.create({\n+      link,\n+      cache: new InMemoryCache({\n+        dataIdFromObject: (object: any) => {\n+          switch (object.__typename) {\n+            case 'Message': return `${object.chat.id}:${object.id}`; // use `chatId` prefix and `messageId` as the primary key\n+            default: return defaultDataIdFromObject(object); // fall back to default handling\n+          }\n+        }\n+      }),\n+    });\n+  }\n+}\ndiff --git a/src/app/chat-viewer/chat-viewer.module.ts b/src/app/chat-viewer/chat-viewer.module.ts\nnew file mode 100644\nindex 0000000..dac388a\n--- /dev/null\n+++ b/src/app/chat-viewer/chat-viewer.module.ts\n@@ -0,0 +1,56 @@\n+import { BrowserModule } from '@angular/platform-browser';\n+import { NgModule } from '@angular/core';\n+\n+import {BrowserAnimationsModule} from '@angular/platform-browser/animations';\n+import {MatButtonModule, MatGridListModule, MatIconModule, MatListModule, MatMenuModule, MatToolbarModule} from '@angular/material';\n+import {RouterModule, Routes} from '@angular/router';\n+import {FormsModule} from '@angular/forms';\n+import {ChatsService} from '../services/chats.service';\n+import {ChatComponent} from './containers/chat/chat.component';\n+import {MessagesListComponent} from './components/messages-list/messages-list.component';\n+import {MessageItemComponent} from './components/message-item/message-item.component';\n+import {NewMessageComponent} from './components/new-message/new-message.component';\n+import {SharedModule} from '../shared/shared.module';\n+import {SelectableListModule} from 'ngx-selectable-list';\n+import {AuthGuard} from '../login/services/auth.guard';\n+\n+const routes: Routes = [\n+  {\n+    path: 'chat', children: [\n+      {path: ':id', canActivate: [AuthGuard], component: ChatComponent},\n+    ],\n+  },\n+];\n+\n+@NgModule({\n+  declarations: [\n+    ChatComponent,\n+    MessagesListComponent,\n+    MessageItemComponent,\n+    NewMessageComponent,\n+  ],\n+  imports: [\n+    BrowserModule,\n+    // Material\n+    MatToolbarModule,\n+    MatMenuModule,\n+    MatIconModule,\n+    MatButtonModule,\n+    MatListModule,\n+    MatGridListModule,\n+    // Animations\n+    BrowserAnimationsModule,\n+    // Routing\n+    RouterModule.forChild(routes),\n+    // Forms\n+    FormsModule,\n+    // Feature modules\n+    SharedModule,\n+    SelectableListModule,\n+  ],\n+  providers: [\n+    ChatsService,\n+  ],\n+})\n+export class ChatViewerModule {\n+}\ndiff --git a/src/app/chat-viewer/components/message-item/message-item.component.scss b/src/app/chat-viewer/components/message-item/message-item.component.scss\nnew file mode 100644\nindex 0000000..d680766\n--- /dev/null\n+++ b/src/app/chat-viewer/components/message-item/message-item.component.scss\n@@ -0,0 +1,18 @@\n+:host {\n+  display: flex;\n+  width: 100%;\n+}\n+\n+.message {\n+  max-width: 75%;\n+  background-color: lightgoldenrodyellow;\n+\n+  &.mine {\n+    background-color: lightcyan;\n+    margin-left: auto;\n+  }\n+\n+  .message-sender {\n+    font-size: small;\n+  }\n+}\ndiff --git a/src/app/chat-viewer/components/message-item/message-item.component.ts b/src/app/chat-viewer/components/message-item/message-item.component.ts\nnew file mode 100644\nindex 0000000..c556072\n--- /dev/null\n+++ b/src/app/chat-viewer/components/message-item/message-item.component.ts\n@@ -0,0 +1,22 @@\n+import {Component, Input} from '@angular/core';\n+import {GetChat} from '../../../../types';\n+\n+@Component({\n+  selector: 'app-message-item',\n+  template: `\n+    <div class=\"message\"\n+         [ngClass]=\"{'mine': message.ownership}\">\n+      <div *ngIf=\"isGroup && !message.ownership\" class=\"message-sender\">{{ message.sender.name }}</div>\n+      <div>{{ message.content }}</div>\n+    </div>\n+  `,\n+  styleUrls: ['message-item.component.scss'],\n+})\n+export class MessageItemComponent {\n+  // tslint:disable-next-line:no-input-rename\n+  @Input('item')\n+  message: GetChat.Messages;\n+\n+  @Input()\n+  isGroup: boolean;\n+}\ndiff --git a/src/app/chat-viewer/components/messages-list/messages-list.component.scss b/src/app/chat-viewer/components/messages-list/messages-list.component.scss\nnew file mode 100644\nindex 0000000..ed1ac7c\n--- /dev/null\n+++ b/src/app/chat-viewer/components/messages-list/messages-list.component.scss\n@@ -0,0 +1,12 @@\n+:host {\n+  display: block;\n+  height: 100%;\n+  overflow-y: scroll;\n+  background-color: aliceblue;\n+}\n+\n+/*\n+:host::-webkit-scrollbar {\n+  display: none;\n+}\n+*/\ndiff --git a/src/app/chat-viewer/components/messages-list/messages-list.component.ts b/src/app/chat-viewer/components/messages-list/messages-list.component.ts\nnew file mode 100644\nindex 0000000..f123280\n--- /dev/null\n+++ b/src/app/chat-viewer/components/messages-list/messages-list.component.ts\n@@ -0,0 +1,27 @@\n+import {Component, Input} from '@angular/core';\n+import {GetChat} from '../../../../types';\n+import {SelectableListDirective} from 'ngx-selectable-list';\n+\n+@Component({\n+  selector: 'app-messages-list',\n+  template: `\n+    <mat-list>\n+      <mat-list-item *ngFor=\"let message of messages\">\n+        <app-message-item [item]=\"message\" [isGroup]=\"isGroup\"\n+                          appSelectableItem></app-message-item>\n+      </mat-list-item>\n+    </mat-list>\n+    <ng-content *ngIf=\"selectableListDirective.selecting\"></ng-content>\n+  `,\n+  styleUrls: ['messages-list.component.scss'],\n+})\n+export class MessagesListComponent {\n+  // tslint:disable-next-line:no-input-rename\n+  @Input('items')\n+  messages: GetChat.Messages[];\n+\n+  @Input()\n+  isGroup: boolean;\n+\n+  constructor(public selectableListDirective: SelectableListDirective) {}\n+}\ndiff --git a/src/app/chat-viewer/components/new-message/new-message.component.scss b/src/app/chat-viewer/components/new-message/new-message.component.scss\nnew file mode 100644\nindex 0000000..da4ed4f\n--- /dev/null\n+++ b/src/app/chat-viewer/components/new-message/new-message.component.scss\n@@ -0,0 +1,13 @@\n+:host {\n+  display: flex;\n+  height: 8vh;\n+}\n+\n+input {\n+  width: 100%;\n+}\n+\n+button {\n+  width: 8vh;\n+  min-width: 56px;\n+}\ndiff --git a/src/app/chat-viewer/components/new-message/new-message.component.ts b/src/app/chat-viewer/components/new-message/new-message.component.ts\nnew file mode 100644\nindex 0000000..10b526c\n--- /dev/null\n+++ b/src/app/chat-viewer/components/new-message/new-message.component.ts\n@@ -0,0 +1,34 @@\n+import {Component, EventEmitter, Input, Output} from '@angular/core';\n+\n+@Component({\n+  selector: 'app-new-message',\n+  template: `\n+    <input type=\"text\" [(ngModel)]=\"message\" (keyup)=\"onInputKeyup($event)\"/>\n+    <button mat-button (click)=\"emitMessage()\" [disabled]=\"disabled\">\n+      <mat-icon aria-label=\"Icon-button with a send icon\">send</mat-icon>\n+    </button>\n+  `,\n+  styleUrls: ['new-message.component.scss'],\n+})\n+export class NewMessageComponent {\n+  @Input()\n+  disabled: boolean;\n+\n+  @Output()\n+  newMessage = new EventEmitter<string>();\n+\n+  message = '';\n+\n+  onInputKeyup({ keyCode }: KeyboardEvent) {\n+    if (keyCode === 13) {\n+      this.emitMessage();\n+    }\n+  }\n+\n+  emitMessage() {\n+    if (this.message && !this.disabled) {\n+      this.newMessage.emit(this.message);\n+      this.message = '';\n+    }\n+  }\n+}\ndiff --git a/src/app/chat-viewer/containers/chat/chat.component.scss b/src/app/chat-viewer/containers/chat/chat.component.scss\nnew file mode 100644\nindex 0000000..56ffb7e\n--- /dev/null\n+++ b/src/app/chat-viewer/containers/chat/chat.component.scss\n@@ -0,0 +1,10 @@\n+.container {\n+  display: flex;\n+  flex-flow: column;\n+  justify-content: space-between;\n+  height: calc(100vh - 8vh);\n+\n+  app-confirm-selection {\n+    bottom: 10vh;\n+  }\n+}\ndiff --git a/src/app/chat-viewer/containers/chat/chat.component.spec.ts b/src/app/chat-viewer/containers/chat/chat.component.spec.ts\nnew file mode 100644\nindex 0000000..930cf89\n--- /dev/null\n+++ b/src/app/chat-viewer/containers/chat/chat.component.spec.ts\n@@ -0,0 +1,180 @@\n+import { async, ComponentFixture, TestBed } from '@angular/core/testing';\n+\n+import { ChatComponent } from './chat.component';\n+import {DebugElement, NO_ERRORS_SCHEMA} from '@angular/core';\n+import {MatButtonModule, MatGridListModule, MatIconModule, MatListModule, MatMenuModule, MatToolbarModule} from '@angular/material';\n+import {ChatsService} from '../../../services/chats.service';\n+import {Apollo} from 'apollo-angular';\n+import {HttpClientTestingModule, HttpTestingController} from '@angular/common/http/testing';\n+import {HttpLink, HttpLinkModule, Options} from 'apollo-angular-link-http';\n+import {defaultDataIdFromObject, InMemoryCache} from 'apollo-cache-inmemory';\n+import {RouterTestingModule} from '@angular/router/testing';\n+import {ActivatedRoute} from '@angular/router';\n+import {of} from 'rxjs/observable/of';\n+import {By} from '@angular/platform-browser';\n+import {FormsModule} from '@angular/forms';\n+import {SharedModule} from '../../../shared/shared.module';\n+import {NewMessageComponent} from '../../components/new-message/new-message.component';\n+import {MessagesListComponent} from '../../components/messages-list/messages-list.component';\n+import {MessageItemComponent} from '../../components/message-item/message-item.component';\n+import {SelectableListModule} from 'ngx-selectable-list';\n+import {LoginService} from '../../../login/services/login.service';\n+\n+describe('ChatComponent', () => {\n+  let component: ChatComponent;\n+  let fixture: ComponentFixture<ChatComponent>;\n+  let el: DebugElement;\n+\n+  let httpMock: HttpTestingController;\n+  let httpLink: HttpLink;\n+  let apollo: Apollo;\n+\n+  const chat: any = {\n+    id: '1',\n+    __typename: 'Chat',\n+    name: 'Avery Stewart',\n+    picture: 'https://randomuser.me/api/portraits/thumb/women/1.jpg',\n+    allTimeMembers: [\n+      {\n+        id: '1',\n+        __typename: 'User',\n+      },\n+      {\n+        id: '3',\n+        __typename: 'User',\n+      }\n+    ],\n+    unreadMessages: 1,\n+    isGroup: false,\n+    messages: [\n+      {\n+        id: '1',\n+        chat: {\n+          id: '1',\n+          __typename: 'Chat',\n+        },\n+        __typename: 'Message',\n+        sender: {\n+          id: '3',\n+          __typename: 'User',\n+          name: 'Avery Stewart'\n+        },\n+        content: 'Yep!',\n+        createdAt: '1514035700',\n+        type: 0,\n+        recipients: [\n+          {\n+            user: {\n+              id: '1',\n+              __typename: 'User',\n+            },\n+            message: {\n+              id: '1',\n+              __typename: 'Message',\n+              chat: {\n+                id: '1',\n+                __typename: 'Chat',\n+              },\n+            },\n+            __typename: 'Recipient',\n+            chat: {\n+              id: '1',\n+              __typename: 'Chat',\n+            },\n+            receivedAt: null,\n+            readAt: null\n+          }\n+        ],\n+        ownership: false\n+      }\n+    ],\n+  };\n+\n+  beforeEach(async(() => {\n+    TestBed.configureTestingModule({\n+      declarations: [\n+        ChatComponent,\n+        MessagesListComponent,\n+        MessageItemComponent,\n+        NewMessageComponent,\n+      ],\n+      imports: [\n+        MatToolbarModule,\n+        MatMenuModule,\n+        MatIconModule,\n+        MatButtonModule,\n+        MatListModule,\n+        MatGridListModule,\n+        FormsModule,\n+        SharedModule,\n+        HttpLinkModule,\n+        HttpClientTestingModule,\n+        RouterTestingModule,\n+        SelectableListModule,\n+      ],\n+      providers: [\n+        ChatsService,\n+        Apollo,\n+        {\n+          provide: ActivatedRoute,\n+          useValue: {\n+            params: of({ id: chat.id }),\n+            queryParams: of({}),\n+          }\n+        },\n+        LoginService,\n+      ],\n+      schemas: [NO_ERRORS_SCHEMA]\n+    })\n+      .compileComponents();\n+\n+    httpMock = TestBed.get(HttpTestingController);\n+    httpLink = TestBed.get(HttpLink);\n+    apollo = TestBed.get(Apollo);\n+\n+    apollo.create({\n+      link: httpLink.create(<Options>{ uri: 'http://localhost:3000/graphql' }),\n+      cache: new InMemoryCache({\n+        dataIdFromObject: (object: any) => {\n+          switch (object.__typename) {\n+            case 'Message': return `${object.chat.id}:${object.id}`; // use `chatId` prefix and `messageId` as the primary key\n+            default: return defaultDataIdFromObject(object); // fall back to default handling\n+          }\n+        }\n+      }),\n+    });\n+  }));\n+\n+  beforeEach(() => {\n+    fixture = TestBed.createComponent(ChatComponent);\n+    component = fixture.componentInstance;\n+    fixture.detectChanges();\n+    httpMock.expectOne(httpReq => httpReq.body.operationName === 'chatAdded', 'call to chatAdded api');\n+    httpMock.expectOne(httpReq => httpReq.body.operationName === 'messageAdded', 'call to messageAdded api');\n+    httpMock.expectOne(httpReq => httpReq.body.operationName === 'GetChats', 'call to getChats api');\n+    const req = httpMock.expectOne(httpReq => httpReq.body.operationName === 'GetChat', 'call to getChat api');\n+    req.flush({\n+      data: {\n+        chat\n+      }\n+    });\n+  });\n+\n+  it('should create', () => {\n+    expect(component).toBeTruthy();\n+  });\n+\n+  it('should display the chat', () => {\n+    fixture.whenStable().then(() => {\n+      fixture.detectChanges();\n+      el = fixture.debugElement;\n+      expect(el.query(By.css(`app-toolbar > mat-toolbar > div > div`)).nativeElement.textContent).toContain(chat.name);\n+      for (let i = 0; i < chat.messages.length; i++) {\n+        expect(el.query(By.css(`app-messages-list > mat-list > mat-list-item:nth-child(${i + 1}) > div > app-message-item > div`))\n+          .nativeElement.textContent).toContain(chat.messages[i].content);\n+      }\n+    });\n+\n+    httpMock.verify();\n+  });\n+});\ndiff --git a/src/app/chat-viewer/containers/chat/chat.component.ts b/src/app/chat-viewer/containers/chat/chat.component.ts\nnew file mode 100644\nindex 0000000..a8be4f1\n--- /dev/null\n+++ b/src/app/chat-viewer/containers/chat/chat.component.ts\n@@ -0,0 +1,78 @@\n+import {Component, OnInit} from '@angular/core';\n+import {ActivatedRoute, Router} from '@angular/router';\n+import {ChatsService} from '../../../services/chats.service';\n+import {GetChat} from '../../../../types';\n+import {combineLatest} from 'rxjs/observable/combineLatest';\n+import {Location} from '@angular/common';\n+\n+@Component({\n+  template: `\n+    <app-toolbar>\n+      <button class=\"navigation\" mat-button (click)=\"goToChats()\">\n+        <mat-icon aria-label=\"Icon-button with an arrow back icon\">arrow_back</mat-icon>\n+      </button>\n+      <div class=\"title\">{{ name }}</div>\n+    </app-toolbar>\n+    <div class=\"container\">\n+      <app-messages-list [items]=\"messages\" [isGroup]=\"isGroup\"\n+                         appSelectableList=\"multiple_press\" (multiple)=\"deleteMessages($event)\">\n+        <app-confirm-selection #confirmSelection></app-confirm-selection>\n+      </app-messages-list>\n+      <app-new-message (newMessage)=\"addMessage($event)\"></app-new-message>\n+    </div>\n+  `,\n+  styleUrls: ['./chat.component.scss']\n+})\n+export class ChatComponent implements OnInit {\n+  chatId: string;\n+  messages: GetChat.Messages[];\n+  name: string;\n+  isGroup: boolean;\n+  optimisticUI: boolean;\n+\n+  constructor(private route: ActivatedRoute,\n+              private router: Router,\n+              private location: Location,\n+              private chatsService: ChatsService) {\n+  }\n+\n+  ngOnInit() {\n+    combineLatest(this.route.params, this.route.queryParams,\n+      (params: { id: string }, queryParams: { oui?: boolean }) => ({params, queryParams}))\n+      .subscribe(({params: {id: chatId}, queryParams: {oui}}) => {\n+        this.chatId = chatId;\n+\n+        this.optimisticUI = oui;\n+\n+        if (this.optimisticUI) {\n+          // We are using fake IDs generated by the Optimistic UI\n+          this.chatsService.addChat$.subscribe(({data: {addChat, addGroup}}) => {\n+            this.chatId = addChat ? addChat.id : addGroup.id;\n+            console.log(`Switching from the Optimistic UI id ${chatId} to ${this.chatId}`);\n+            // Rewrite the URL\n+            this.location.go(`chat/${this.chatId}`);\n+            // Optimistic UI no more\n+            this.optimisticUI = false;\n+          });\n+        }\n+\n+        this.chatsService.getChat(chatId, this.optimisticUI).chat$.subscribe(chat => {\n+          this.messages = chat.messages;\n+          this.name = chat.name;\n+          this.isGroup = chat.isGroup;\n+        });\n+      });\n+  }\n+\n+  goToChats() {\n+    this.router.navigate(['/chats']);\n+  }\n+\n+  addMessage(content: string) {\n+    this.chatsService.addMessage(this.chatId, content).subscribe();\n+  }\n+\n+  deleteMessages(messageIds: string[]) {\n+    this.chatsService.removeMessages(this.chatId, this.messages, messageIds).subscribe();\n+  }\n+}\ndiff --git a/src/app/chats-creation/chats-creation.module.ts b/src/app/chats-creation/chats-creation.module.ts\nnew file mode 100644\nindex 0000000..f8a9754\n--- /dev/null\n+++ b/src/app/chats-creation/chats-creation.module.ts\n@@ -0,0 +1,61 @@\n+import { BrowserModule } from '@angular/platform-browser';\n+import { NgModule } from '@angular/core';\n+\n+import {BrowserAnimationsModule} from '@angular/platform-browser/animations';\n+import {\n+  MatButtonModule, MatFormFieldModule, MatGridListModule, MatIconModule, MatInputModule, MatListModule, MatMenuModule,\n+  MatToolbarModule\n+} from '@angular/material';\n+import {RouterModule, Routes} from '@angular/router';\n+import {FormsModule} from '@angular/forms';\n+import {ChatsService} from '../services/chats.service';\n+import {UserItemComponent} from './components/user-item/user-item.component';\n+import {UsersListComponent} from './components/users-list/users-list.component';\n+import {NewGroupComponent} from './containers/new-group/new-group.component';\n+import {NewChatComponent} from './containers/new-chat/new-chat.component';\n+import {NewGroupDetailsComponent} from './components/new-group-details/new-group-details.component';\n+import {SharedModule} from '../shared/shared.module';\n+import {SelectableListModule} from 'ngx-selectable-list';\n+import {AuthGuard} from '../login/services/auth.guard';\n+\n+const routes: Routes = [\n+  {path: 'new-chat', canActivate: [AuthGuard], component: NewChatComponent},\n+  {path: 'new-group', canActivate: [AuthGuard], component: NewGroupComponent},\n+];\n+\n+@NgModule({\n+  declarations: [\n+    NewChatComponent,\n+    UsersListComponent,\n+    NewGroupComponent,\n+    UserItemComponent,\n+    NewGroupDetailsComponent,\n+  ],\n+  imports: [\n+    BrowserModule,\n+    // Animations (for Material)\n+    BrowserAnimationsModule,\n+    // Material\n+    MatToolbarModule,\n+    MatMenuModule,\n+    MatIconModule,\n+    MatButtonModule,\n+    MatListModule,\n+    MatGridListModule,\n+    MatInputModule,\n+    MatFormFieldModule,\n+    MatGridListModule,\n+    // Routing\n+    RouterModule.forChild(routes),\n+    // Forms\n+    FormsModule,\n+    // Feature modules\n+    SelectableListModule,\n+    SharedModule,\n+  ],\n+  providers: [\n+    ChatsService,\n+  ],\n+})\n+export class ChatsCreationModule {\n+}\ndiff --git a/src/app/chats-creation/components/new-group-details/new-group-details.component.scss b/src/app/chats-creation/components/new-group-details/new-group-details.component.scss\nnew file mode 100644\nindex 0000000..458b376\n--- /dev/null\n+++ b/src/app/chats-creation/components/new-group-details/new-group-details.component.scss\n@@ -0,0 +1,25 @@\n+:host {\n+  display: block;\n+}\n+\n+div {\n+  padding: 16px;\n+  mat-form-field {\n+    width: 100%;\n+  }\n+}\n+\n+.new-group {\n+  position: absolute;\n+  bottom: 5vw;\n+  right: 5vw;\n+}\n+\n+.users {\n+  display: flex;\n+  flex-flow: row wrap;\n+  img {\n+    flex: 0 1 8vh;\n+    height: 8vh;\n+  }\n+}\ndiff --git a/src/app/chats-creation/components/new-group-details/new-group-details.component.ts b/src/app/chats-creation/components/new-group-details/new-group-details.component.ts\nnew file mode 100644\nindex 0000000..dd6554c\n--- /dev/null\n+++ b/src/app/chats-creation/components/new-group-details/new-group-details.component.ts\n@@ -0,0 +1,34 @@\n+import {Component, EventEmitter, Input, Output} from '@angular/core';\n+import {GetUsers} from '../../../../types';\n+\n+@Component({\n+  selector: 'app-new-group-details',\n+  template: `\n+    <div>\n+      <mat-form-field>\n+        <input matInput placeholder=\"Group name\" [(ngModel)]=\"groupName\">\n+      </mat-form-field>\n+    </div>\n+    <button [disabled]=\"!groupName\" class=\"new-group\" mat-fab color=\"primary\" (click)=\"emitGroupDetails()\">\n+      <mat-icon aria-label=\"Icon-button with a + icon\">arrow_forward</mat-icon>\n+    </button>\n+    <div>Members</div>\n+    <div class=\"users\">\n+      <img *ngFor=\"let user of users;\" [src]=\"user.picture\"/>\n+    </div>\n+  `,\n+  styleUrls: ['new-group-details.component.scss'],\n+})\n+export class NewGroupDetailsComponent {\n+  groupName: string;\n+  @Input()\n+  users: GetUsers.Users[];\n+  @Output()\n+  groupDetails = new EventEmitter<string>();\n+\n+  emitGroupDetails() {\n+    if (this.groupDetails) {\n+      this.groupDetails.emit(this.groupName);\n+    }\n+  }\n+}\ndiff --git a/src/app/chats-creation/components/user-item/user-item.component.scss b/src/app/chats-creation/components/user-item/user-item.component.scss\nnew file mode 100644\nindex 0000000..9d7b0cf\n--- /dev/null\n+++ b/src/app/chats-creation/components/user-item/user-item.component.scss\n@@ -0,0 +1,28 @@\n+:host {\n+  display: block;\n+  width: 100%;\n+  height: 100%;\n+}\n+\n+button {\n+  padding: 0;\n+  display: flex;\n+  align-items: center;\n+  height: 100%;\n+  width: 100%;\n+  border: none;\n+\n+  div:first-of-type {\n+    display: flex;\n+    justify-content: center;\n+    align-items: center;\n+\n+    img {\n+      max-width: 100%;\n+    }\n+  }\n+\n+  div:nth-of-type(2) {\n+    padding-left: 16px;\n+  }\n+}\ndiff --git a/src/app/chats-creation/components/user-item/user-item.component.ts b/src/app/chats-creation/components/user-item/user-item.component.ts\nnew file mode 100644\nindex 0000000..75257e1\n--- /dev/null\n+++ b/src/app/chats-creation/components/user-item/user-item.component.ts\n@@ -0,0 +1,20 @@\n+import {Component, Input} from '@angular/core';\n+import {GetUsers} from '../../../../types';\n+\n+@Component({\n+  selector: 'app-user-item',\n+  template: `\n+    <button mat-menu-item>\n+      <div>\n+        <img [src]=\"user.picture\" *ngIf=\"user.picture\">\n+      </div>\n+      <div>{{ user.name }}</div>\n+    </button>\n+  `,\n+  styleUrls: ['user-item.component.scss']\n+})\n+export class UserItemComponent {\n+  // tslint:disable-next-line:no-input-rename\n+  @Input('item')\n+  user: GetUsers.Users;\n+}\ndiff --git a/src/app/chats-creation/components/users-list/users-list.component.scss b/src/app/chats-creation/components/users-list/users-list.component.scss\nnew file mode 100644\nindex 0000000..5d4e87f\n--- /dev/null\n+++ b/src/app/chats-creation/components/users-list/users-list.component.scss\n@@ -0,0 +1,3 @@\n+:host {\n+  display: block;\n+}\ndiff --git a/src/app/chats-creation/components/users-list/users-list.component.ts b/src/app/chats-creation/components/users-list/users-list.component.ts\nnew file mode 100644\nindex 0000000..96d5421\n--- /dev/null\n+++ b/src/app/chats-creation/components/users-list/users-list.component.ts\n@@ -0,0 +1,24 @@\n+import {Component, Input} from '@angular/core';\n+import {GetUsers} from '../../../../types';\n+import {SelectableListDirective} from 'ngx-selectable-list';\n+\n+@Component({\n+  selector: 'app-users-list',\n+  template: `\n+    <mat-list>\n+      <mat-list-item *ngFor=\"let user of users\">\n+        <app-user-item [item]=\"user\"\n+                       appSelectableItem></app-user-item>\n+      </mat-list-item>\n+    </mat-list>\n+    <ng-content *ngIf=\"selectableListDirective.selecting\"></ng-content>\n+  `,\n+  styleUrls: ['users-list.component.scss'],\n+})\n+export class UsersListComponent {\n+  // tslint:disable-next-line:no-input-rename\n+  @Input('items')\n+  users: GetUsers.Users[];\n+\n+  constructor(public selectableListDirective: SelectableListDirective) {}\n+}\ndiff --git a/src/app/chats-creation/containers/new-chat/new-chat.component.scss b/src/app/chats-creation/containers/new-chat/new-chat.component.scss\nnew file mode 100644\nindex 0000000..ec7b4f8\n--- /dev/null\n+++ b/src/app/chats-creation/containers/new-chat/new-chat.component.scss\n@@ -0,0 +1,23 @@\n+.new-group {\n+  display: flex;\n+  height: 8vh;\n+  align-items: center;\n+\n+  div:first-of-type {\n+    height: 8vh;\n+    width: 8vh;\n+    display: flex;\n+    justify-content: center;\n+    align-items: center;\n+\n+    mat-icon {\n+      height: 5vh;\n+      width: 5vh;\n+      font-size: 5vh;\n+    }\n+  }\n+\n+  div:nth-of-type(2) {\n+    padding: 16px;\n+  }\n+}\ndiff --git a/src/app/chats-creation/containers/new-chat/new-chat.component.ts b/src/app/chats-creation/containers/new-chat/new-chat.component.ts\nnew file mode 100644\nindex 0000000..91820c8\n--- /dev/null\n+++ b/src/app/chats-creation/containers/new-chat/new-chat.component.ts\n@@ -0,0 +1,60 @@\n+import {Component, OnInit} from '@angular/core';\n+import {Location} from '@angular/common';\n+import {Router} from '@angular/router';\n+import {AddChat, GetUsers} from '../../../../types';\n+import {ChatsService} from '../../../services/chats.service';\n+\n+@Component({\n+  template: `\n+    <app-toolbar>\n+      <button class=\"navigation\" mat-button (click)=\"goBack()\">\n+        <mat-icon aria-label=\"Icon-button with an arrow back icon\">arrow_back</mat-icon>\n+      </button>\n+      <div class=\"title\">New chat</div>\n+    </app-toolbar>\n+\n+    <div class=\"new-group\" (click)=\"goToNewGroup()\">\n+      <div>\n+        <mat-icon aria-label=\"Icon-button with a group add icon\">group_add</mat-icon>\n+      </div>\n+      <div>New group</div>\n+    </div>\n+\n+    <app-users-list [items]=\"users\"\n+                    appSelectableList=\"single\" (single)=\"addChat($event)\">\n+    </app-users-list>\n+  `,\n+  styleUrls: ['new-chat.component.scss'],\n+})\n+export class NewChatComponent implements OnInit {\n+  users: GetUsers.Users[];\n+\n+  constructor(private router: Router,\n+              private location: Location,\n+              private chatsService: ChatsService) {}\n+\n+  ngOnInit () {\n+    this.chatsService.getUsers().users$.subscribe(users => this.users = users);\n+  }\n+\n+  goBack() {\n+    this.location.back();\n+  }\n+\n+  goToNewGroup() {\n+    this.router.navigate(['/new-group']);\n+  }\n+\n+  addChat(recipientId: string) {\n+    const chatId = this.chatsService.getChatId(recipientId);\n+    if (chatId) {\n+      // Chat is already listed for the current user\n+      this.router.navigate(['/chat', chatId]);\n+    } else {\n+      // Generate id for Optimistic UI\n+      const ouiId = ChatsService.getRandomId();\n+      this.chatsService.addChat(recipientId, this.users, ouiId).subscribe();\n+      this.router.navigate(['/chat', ouiId], {queryParams: {oui: true}, skipLocationChange: true});\n+    }\n+  }\n+}\ndiff --git a/src/app/chats-creation/containers/new-group/new-group.component.scss b/src/app/chats-creation/containers/new-group/new-group.component.scss\nnew file mode 100644\nindex 0000000..e69de29\ndiff --git a/src/app/chats-creation/containers/new-group/new-group.component.ts b/src/app/chats-creation/containers/new-group/new-group.component.ts\nnew file mode 100644\nindex 0000000..19e9fb9\n--- /dev/null\n+++ b/src/app/chats-creation/containers/new-group/new-group.component.ts\n@@ -0,0 +1,60 @@\n+import {Component, OnInit} from '@angular/core';\n+import {Location} from '@angular/common';\n+import {Router} from '@angular/router';\n+import {AddGroup, GetUsers} from '../../../../types';\n+import {ChatsService} from '../../../services/chats.service';\n+\n+@Component({\n+  template: `\n+    <app-toolbar>\n+      <button class=\"navigation\" mat-button (click)=\"goBack()\">\n+        <mat-icon aria-label=\"Icon-button with an arrow back icon\">arrow_back</mat-icon>\n+      </button>\n+      <div class=\"title\">New group</div>\n+    </app-toolbar>\n+\n+    <app-users-list *ngIf=\"!recipientIds.length\" [items]=\"users\"\n+                    appSelectableList=\"multiple_tap\" (multiple)=\"selectUsers($event)\">\n+      <app-confirm-selection #confirmSelection icon=\"arrow_forward\"></app-confirm-selection>\n+    </app-users-list>\n+    <app-new-group-details *ngIf=\"recipientIds.length\" [users]=\"getSelectedUsers()\"\n+                           (groupDetails)=\"addGroup($event)\"></app-new-group-details>\n+  `,\n+  styleUrls: ['new-group.component.scss'],\n+})\n+export class NewGroupComponent implements OnInit {\n+  users: GetUsers.Users[];\n+  recipientIds: string[] = [];\n+\n+  constructor(private router: Router,\n+              private location: Location,\n+              private chatsService: ChatsService) {}\n+\n+  ngOnInit () {\n+    this.chatsService.getUsers().users$.subscribe(users => this.users = users);\n+  }\n+\n+  goBack() {\n+    if (this.recipientIds.length) {\n+      this.recipientIds = [];\n+    } else {\n+      this.location.back();\n+    }\n+  }\n+\n+  selectUsers(recipientIds: string[]) {\n+    this.recipientIds = recipientIds;\n+  }\n+\n+  getSelectedUsers() {\n+    return this.users.filter(user => this.recipientIds.includes(user.id));\n+  }\n+\n+  addGroup(groupName: string) {\n+    if (groupName && this.recipientIds.length) {\n+      const ouiId = ChatsService.getRandomId();\n+      this.chatsService.addGroup(this.recipientIds, groupName, ouiId).subscribe();\n+      this.router.navigate(['/chat', ouiId], {queryParams: {oui: true}, skipLocationChange: true});\n+    }\n+  }\n+}\ndiff --git a/src/app/chats-lister/chats-lister.module.ts b/src/app/chats-lister/chats-lister.module.ts\nnew file mode 100644\nindex 0000000..0e86163\n--- /dev/null\n+++ b/src/app/chats-lister/chats-lister.module.ts\n@@ -0,0 +1,52 @@\n+import { BrowserModule } from '@angular/platform-browser';\n+import { NgModule } from '@angular/core';\n+\n+import {BrowserAnimationsModule} from '@angular/platform-browser/animations';\n+import {MatButtonModule, MatIconModule, MatListModule, MatMenuModule} from '@angular/material';\n+import {RouterModule, Routes} from '@angular/router';\n+import {FormsModule} from '@angular/forms';\n+import {ChatsService} from '../services/chats.service';\n+import {ChatItemComponent} from './components/chat-item/chat-item.component';\n+import {ChatsComponent} from './containers/chats/chats.component';\n+import {ChatsListComponent} from './components/chats-list/chats-list.component';\n+import {TruncateModule} from 'ng2-truncate';\n+import {SharedModule} from '../shared/shared.module';\n+import {SelectableListModule} from 'ngx-selectable-list';\n+import {AuthGuard} from '../login/services/auth.guard';\n+\n+const routes: Routes = [\n+  {path: '', redirectTo: 'chats', pathMatch: 'full'},\n+  {path: 'chats', canActivate: [AuthGuard], component: ChatsComponent},\n+];\n+\n+@NgModule({\n+  declarations: [\n+    ChatsComponent,\n+    ChatsListComponent,\n+    ChatItemComponent,\n+  ],\n+  imports: [\n+    BrowserModule,\n+    // Material\n+    MatMenuModule,\n+    MatIconModule,\n+    MatButtonModule,\n+    MatListModule,\n+    // Animations\n+    BrowserAnimationsModule,\n+    // Routing\n+    RouterModule.forChild(routes),\n+    // Forms\n+    FormsModule,\n+    // Truncate Pipe\n+    TruncateModule,\n+    // Feature modules\n+    SharedModule,\n+    SelectableListModule,\n+  ],\n+  providers: [\n+    ChatsService,\n+  ],\n+})\n+export class ChatsListerModule {\n+}\ndiff --git a/src/app/chats-lister/components/chat-item/chat-item.component.scss b/src/app/chats-lister/components/chat-item/chat-item.component.scss\nnew file mode 100644\nindex 0000000..78a5e41\n--- /dev/null\n+++ b/src/app/chats-lister/components/chat-item/chat-item.component.scss\n@@ -0,0 +1,17 @@\n+:host {\n+  display: block;\n+  width: 100%;\n+}\n+\n+.chat-row {\n+  padding: 0;\n+  display: flex;\n+  width: 100%;\n+  justify-content: space-between;\n+  align-items: center;\n+\n+  .chat-recipient {\n+    display: flex;\n+    width: 60%;\n+  }\n+}\ndiff --git a/src/app/chats-lister/components/chat-item/chat-item.component.spec.ts b/src/app/chats-lister/components/chat-item/chat-item.component.spec.ts\nnew file mode 100644\nindex 0000000..8dc38a0\n--- /dev/null\n+++ b/src/app/chats-lister/components/chat-item/chat-item.component.spec.ts\n@@ -0,0 +1,107 @@\n+import { async, ComponentFixture, TestBed } from '@angular/core/testing';\n+\n+import { ChatItemComponent } from './chat-item.component';\n+import {DebugElement} from '@angular/core';\n+import {By} from '@angular/platform-browser';\n+import {TruncateModule} from 'ng2-truncate';\n+\n+describe('ChatItemComponent', () => {\n+  let component: ChatItemComponent;\n+  let fixture: ComponentFixture<ChatItemComponent>;\n+  let el: DebugElement;\n+\n+  const chat: any = {\n+    id: '1',\n+    __typename: 'Chat',\n+    name: 'Niccolo\\' Belli',\n+    picture: null,\n+    allTimeMembers: [\n+      {\n+        id: '1',\n+        __typename: 'User',\n+      },\n+      {\n+        id: '2',\n+        __typename: 'User',\n+      }\n+    ],\n+    unreadMessages: 0,\n+    isGroup: false,\n+    messages: [\n+      {\n+        id: '1',\n+        chat: {\n+          id: '1',\n+          __typename: 'Chat',\n+        },\n+        __typename: 'Message',\n+        sender: {\n+          id: '1',\n+          __typename: 'User',\n+          name: 'Niccolo\\' Belli',\n+        },\n+        content: 'Hello! How are you? A lot happened since last time',\n+        createdAt: '1513435525',\n+        type: 1,\n+        recipients: [\n+          {\n+            user: {\n+              id: '2',\n+              __typename: 'User',\n+            },\n+            message: {\n+              id: '1',\n+              __typename: 'Message',\n+              chat: {\n+                id: '1',\n+                __typename: 'Chat',\n+              },\n+            },\n+            __typename: 'Recipient',\n+            chat: {\n+              id: '1',\n+              __typename: 'Chat',\n+            },\n+            receivedAt: null,\n+            readAt: null,\n+          }\n+        ],\n+        ownership: true,\n+      }\n+    ],\n+  };\n+\n+  beforeEach(async(() => {\n+    TestBed.configureTestingModule({\n+      declarations: [ ChatItemComponent ],\n+      imports: [TruncateModule]\n+    })\n+    .compileComponents();\n+  }));\n+\n+  beforeEach(() => {\n+    fixture = TestBed.createComponent(ChatItemComponent);\n+    component = fixture.componentInstance;\n+    component.chat = chat;\n+    fixture.detectChanges();\n+    el = fixture.debugElement;\n+  });\n+\n+  it('should create', () => {\n+    expect(component).toBeTruthy();\n+  });\n+\n+  it('should contain the chat name', () => {\n+    expect(el.query(By.css('.chat-recipient > div:first-child')).nativeElement.textContent).toContain(chat.name);\n+  });\n+\n+  it('should contain the first couple of characters of the message content', () => {\n+    expect(el.query(By.css('.chat-content')).nativeElement.textContent)\n+      .toContain(chat.messages[chat.messages.length - 1].content.slice(0, 20));\n+  });\n+\n+  it('should not contain the latest characters of the message content', () => {\n+    expect(el.query(By.css('.chat-content')).nativeElement.textContent)\n+      .not.toContain(chat.messages[chat.messages.length - 1].content.slice(20));\n+  });\n+});\ndiff --git a/src/app/chats-lister/components/chat-item/chat-item.component.ts b/src/app/chats-lister/components/chat-item/chat-item.component.ts\nnew file mode 100644\nindex 0000000..afd5b1d\n--- /dev/null\n+++ b/src/app/chats-lister/components/chat-item/chat-item.component.ts\n@@ -0,0 +1,21 @@\n+import {Component, EventEmitter, Input, Output} from '@angular/core';\n+import {GetChats} from '../../../../types';\n+\n+@Component({\n+  selector: 'app-chat-item',\n+  template: `\n+    <div class=\"chat-row\">\n+        <div class=\"chat-recipient\">\n+          <img *ngIf=\"chat.picture\" [src]=\"chat.picture\" width=\"48\" height=\"48\">\n+          <div>{{ chat.name }} [id: {{ chat.id }}]</div>\n+        </div>\n+        <div class=\"chat-content\">{{ chat.messages[chat.messages.length - 1]?.content | truncate : 20 : '...' }}</div>\n+    </div>\n+  `,\n+  styleUrls: ['chat-item.component.scss'],\n+})\n+export class ChatItemComponent {\n+  // tslint:disable-next-line:no-input-rename\n+  @Input('item')\n+  chat: GetChats.Chats;\n+}\ndiff --git a/src/app/chats-lister/components/chats-list/chats-list.component.scss b/src/app/chats-lister/components/chats-list/chats-list.component.scss\nnew file mode 100644\nindex 0000000..5d4e87f\n--- /dev/null\n+++ b/src/app/chats-lister/components/chats-list/chats-list.component.scss\n@@ -0,0 +1,3 @@\n+:host {\n+  display: block;\n+}\ndiff --git a/src/app/chats-lister/components/chats-list/chats-list.component.ts b/src/app/chats-lister/components/chats-list/chats-list.component.ts\nnew file mode 100644\nindex 0000000..161d07c\n--- /dev/null\n+++ b/src/app/chats-lister/components/chats-list/chats-list.component.ts\n@@ -0,0 +1,24 @@\n+import {Component, Input} from '@angular/core';\n+import {GetChats} from '../../../../types';\n+import {SelectableListDirective} from 'ngx-selectable-list';\n+\n+@Component({\n+  selector: 'app-chats-list',\n+  template: `\n+    <mat-list>\n+      <mat-list-item *ngFor=\"let chat of chats\">\n+        <app-chat-item [item]=\"chat\"\n+                       appSelectableItem></app-chat-item>\n+      </mat-list-item>\n+    </mat-list>\n+    <ng-content *ngIf=\"selectableListDirective.selecting\"></ng-content>\n+  `,\n+  styleUrls: ['chats-list.component.scss'],\n+})\n+export class ChatsListComponent {\n+  // tslint:disable-next-line:no-input-rename\n+  @Input('items')\n+  chats: GetChats.Chats[];\n+\n+  constructor(public selectableListDirective: SelectableListDirective) {}\n+}\ndiff --git a/src/app/chats-lister/containers/chats/chats.component.scss b/src/app/chats-lister/containers/chats/chats.component.scss\nnew file mode 100644\nindex 0000000..79e6e09\n--- /dev/null\n+++ b/src/app/chats-lister/containers/chats/chats.component.scss\n@@ -0,0 +1,5 @@\n+.chat-button {\n+  position: absolute;\n+  bottom: 5vw;\n+  right: 5vw;\n+}\ndiff --git a/src/app/chats-lister/containers/chats/chats.component.spec.ts b/src/app/chats-lister/containers/chats/chats.component.spec.ts\nnew file mode 100644\nindex 0000000..0377385\n--- /dev/null\n+++ b/src/app/chats-lister/containers/chats/chats.component.spec.ts\n@@ -0,0 +1,393 @@\n+import { async, ComponentFixture, TestBed } from '@angular/core/testing';\n+\n+import { ChatsComponent } from './chats.component';\n+import {DebugElement, NO_ERRORS_SCHEMA} from '@angular/core';\n+import {ChatsListComponent} from '../../components/chats-list/chats-list.component';\n+import {ChatItemComponent} from '../../components/chat-item/chat-item.component';\n+import {TruncateModule} from 'ng2-truncate';\n+import {MatButtonModule, MatIconModule, MatListModule, MatMenuModule} from '@angular/material';\n+import {ChatsService} from '../../../services/chats.service';\n+import {Apollo} from 'apollo-angular';\n+import {HttpClientTestingModule, HttpTestingController} from '@angular/common/http/testing';\n+import {HttpLink, HttpLinkModule, Options} from 'apollo-angular-link-http';\n+import {defaultDataIdFromObject, InMemoryCache} from 'apollo-cache-inmemory';\n+import {By} from '@angular/platform-browser';\n+import {RouterTestingModule} from '@angular/router/testing';\n+import {SelectableListModule} from 'ngx-selectable-list';\n+import {LoginService} from '../../../login/services/login.service';\n+\n+describe('ChatsComponent', () => {\n+  let component: ChatsComponent;\n+  let fixture: ComponentFixture<ChatsComponent>;\n+  let el: DebugElement;\n+\n+  let httpMock: HttpTestingController;\n+  let httpLink: HttpLink;\n+  let apollo: Apollo;\n+\n+  const chats: any = [\n+    {\n+      id: '1',\n+      __typename: 'Chat',\n+      name: 'Avery Stewart',\n+      picture: 'https://randomuser.me/api/portraits/thumb/women/1.jpg',\n+      allTimeMembers: [\n+        {\n+          id: '1',\n+          __typename: 'User',\n+        },\n+        {\n+          id: '3',\n+          __typename: 'User',\n+        }\n+      ],\n+      unreadMessages: 1,\n+      isGroup: false,\n+      messages: [\n+        {\n+          id: '1',\n+          chat: {\n+            id: '1',\n+            __typename: 'Chat',\n+          },\n+          __typename: 'Message',\n+          sender: {\n+            id: '3',\n+            __typename: 'User',\n+            name: 'Avery Stewart'\n+          },\n+          content: 'Yep!',\n+          createdAt: '1514035700',\n+          type: 0,\n+          recipients: [\n+            {\n+              user: {\n+                id: '1',\n+                __typename: 'User',\n+              },\n+              message: {\n+                id: '1',\n+                __typename: 'Message',\n+                chat: {\n+                  id: '1',\n+                  __typename: 'Chat',\n+                },\n+              },\n+              __typename: 'Recipient',\n+              chat: {\n+                id: '1',\n+                __typename: 'Chat',\n+              },\n+              receivedAt: null,\n+              readAt: null,\n+            }\n+          ],\n+          ownership: false,\n+        }\n+      ],\n+    },\n+    {\n+      id: '2',\n+      __typename: 'Chat',\n+      name: 'Katie Peterson',\n+      picture: 'https://randomuser.me/api/portraits/thumb/women/2.jpg',\n+      allTimeMembers: [\n+        {\n+          id: '1',\n+          __typename: 'User',\n+        },\n+        {\n+          id: '4',\n+          __typename: 'User',\n+        }\n+      ],\n+      unreadMessages: 0,\n+      isGroup: false,\n+      messages: [\n+        {\n+          id: '1',\n+          chat: {\n+            id: '2',\n+            __typename: 'Chat',\n+          },\n+          __typename: 'Message',\n+          sender: {\n+            id: '1',\n+            __typename: 'User',\n+            name: 'Ethan Gonzalez'\n+          },\n+          content: 'Hey, it\\'s me',\n+          createdAt: '1514031800',\n+          type: 0,\n+          recipients: [\n+            {\n+              user: {\n+                id: '4',\n+                __typename: 'User',\n+              },\n+              message: {\n+                id: '1',\n+                __typename: 'Message',\n+                chat: {\n+                  id: '2',\n+                  __typename: 'Chat',\n+                },\n+              },\n+              __typename: 'Recipient',\n+              chat: {\n+                id: '2',\n+                __typename: 'Chat',\n+              },\n+              receivedAt: null,\n+              readAt: null,\n+            }\n+          ],\n+          ownership: true\n+        }\n+      ],\n+    },\n+    {\n+      id: '3',\n+      __typename: 'Chat',\n+      name: 'Ray Edwards',\n+      picture: 'https://randomuser.me/api/portraits/thumb/men/3.jpg',\n+      allTimeMembers: [\n+        {\n+          id: '1',\n+          __typename: 'User',\n+        },\n+        {\n+          id: '5',\n+          __typename: 'User',\n+        }\n+      ],\n+      unreadMessages: 0,\n+      isGroup: false,\n+      messages: [\n+        {\n+          id: '1',\n+          __typename: 'Message',\n+          chat: {\n+            id: '3',\n+            __typename: 'Chat',\n+          },\n+          sender: {\n+            id: '1',\n+            __typename: 'User',\n+            name: 'Ethan Gonzalez'\n+          },\n+          content: 'You still there?',\n+          createdAt: '1514010200',\n+          type: 0,\n+          recipients: [\n+            {\n+              user: {\n+                id: '5',\n+                __typename: 'User',\n+              },\n+              message: {\n+                id: '1',\n+                __typename: 'Message',\n+                chat: {\n+                  id: '3',\n+                  __typename: 'Chat',\n+                },\n+              },\n+              __typename: 'Recipient',\n+              chat: {\n+                id: '3',\n+                __typename: 'Chat',\n+              },\n+              receivedAt: null,\n+              readAt: null\n+            }\n+          ],\n+          ownership: true\n+        }\n+      ],\n+    },\n+    {\n+      id: '6',\n+      __typename: 'Chat',\n+      name: 'Niccolò Belli',\n+      picture: 'https://randomuser.me/api/portraits/thumb/men/4.jpg',\n+      allTimeMembers: [\n+        {\n+          id: '1',\n+          __typename: 'User',\n+        },\n+        {\n+          id: '6',\n+          __typename: 'User',\n+        }\n+      ],\n+      unreadMessages: 0,\n+      messages: [],\n+      isGroup: false\n+    },\n+    {\n+      id: '8',\n+      __typename: 'Chat',\n+      name: 'A user 0 group',\n+      picture: 'https://randomuser.me/api/portraits/thumb/lego/1.jpg',\n+      allTimeMembers: [\n+        {\n+          id: '1',\n+          __typename: 'User',\n+        },\n+        {\n+          id: '3',\n+          __typename: 'User',\n+        },\n+        {\n+          id: '4',\n+          __typename: 'User',\n+        },\n+        {\n+          id: '6',\n+          __typename: 'User',\n+        },\n+      ],\n+      unreadMessages: 1,\n+      isGroup: true,\n+      messages: [\n+        {\n+          id: '1',\n+          __typename: 'Message',\n+          chat: {\n+            id: '8',\n+            __typename: 'Chat',\n+          },\n+          sender: {\n+            id: '4',\n+            __typename: 'User',\n+            name: 'Katie Peterson'\n+          },\n+          content: 'Awesome!',\n+          createdAt: '1512830000',\n+          type: 0,\n+          recipients: [\n+            {\n+              user: {\n+                id: '1',\n+                __typename: 'User',\n+              },\n+              message: {\n+                id: '1',\n+                __typename: 'Message',\n+                chat: {\n+                  id: '8',\n+                  __typename: 'Chat',\n+                },\n+              },\n+              __typename: 'Recipient',\n+              chat: {\n+                id: '8',\n+                __typename: 'Chat',\n+              },\n+              receivedAt: null,\n+              readAt: null\n+            },\n+            {\n+              user: {\n+                id: '6',\n+                __typename: 'User',\n+              },\n+              message: {\n+                id: '1',\n+                __typename: 'Message',\n+                chat: {\n+                  id: '8',\n+                  __typename: 'Chat',\n+                },\n+              },\n+              __typename: 'Recipient',\n+              chat: {\n+                id: '8',\n+                __typename: 'Chat',\n+              },\n+              receivedAt: null,\n+              readAt: null\n+            }\n+          ],\n+          ownership: false\n+        }\n+      ],\n+    },\n+  ];\n+\n+  beforeEach(async(() => {\n+    TestBed.configureTestingModule({\n+      declarations: [\n+        ChatsComponent,\n+        ChatsListComponent,\n+        ChatItemComponent\n+      ],\n+      imports: [\n+        MatMenuModule,\n+        MatIconModule,\n+        MatButtonModule,\n+        MatListModule,\n+        TruncateModule,\n+        HttpLinkModule,\n+        HttpClientTestingModule,\n+        RouterTestingModule,\n+        SelectableListModule,\n+      ],\n+      providers: [\n+        ChatsService,\n+        Apollo,\n+        LoginService,\n+      ],\n+      schemas: [NO_ERRORS_SCHEMA]\n+    })\n+      .compileComponents();\n+\n+    httpMock = TestBed.get(HttpTestingController);\n+    httpLink = TestBed.get(HttpLink);\n+    apollo = TestBed.get(Apollo);\n+\n+    apollo.create({\n+      link: httpLink.create(<Options>{ uri: 'http://localhost:3000/graphql' }),\n+      cache: new InMemoryCache({\n+        dataIdFromObject: (object: any) => {\n+          switch (object.__typename) {\n+            case 'Message': return `${object.chat.id}:${object.id}`; // use `chatId` prefix and `messageId` as the primary key\n+            default: return defaultDataIdFromObject(object); // fall back to default handling\n+          }\n+        }\n+      }),\n+    });\n+  }));\n+\n+  beforeEach(() => {\n+    fixture = TestBed.createComponent(ChatsComponent);\n+    component = fixture.componentInstance;\n+    fixture.detectChanges();\n+    httpMock.expectOne(httpReq => httpReq.body.operationName === 'chatAdded', 'call to chatAdded api');\n+    httpMock.expectOne(httpReq => httpReq.body.operationName === 'messageAdded', 'call to messageAdded api');\n+    const req = httpMock.expectOne(httpReq => httpReq.body.operationName === 'GetChats', 'call to getChats api');\n+    req.flush({\n+      data: {\n+        chats\n+      }\n+    });\n+  });\n+\n+  it('should create', () => {\n+    expect(component).toBeTruthy();\n+  });\n+\n+  it('should display the chats', () => {\n+    fixture.whenStable().then(() => {\n+      fixture.detectChanges();\n+      el = fixture.debugElement;\n+      for (let i = 0; i < chats.length; i++) {\n+        expect(el.query(By.css(`app-chats-list > mat-list > mat-list-item:nth-child(${i + 1}) > div > app-chat-item > div > div > div`))\n+          .nativeElement.textContent).toContain(chats[i].name);\n+      }\n+    });\n+\n+    httpMock.verify();\n+  });\n+});\ndiff --git a/src/app/chats-lister/containers/chats/chats.component.ts b/src/app/chats-lister/containers/chats/chats.component.ts\nnew file mode 100644\nindex 0000000..69ce46c\n--- /dev/null\n+++ b/src/app/chats-lister/containers/chats/chats.component.ts\n@@ -0,0 +1,68 @@\n+import {Component, OnInit} from '@angular/core';\n+import {ChatsService} from '../../../services/chats.service';\n+import {Observable} from 'rxjs/Observable';\n+import {GetChats} from '../../../../types';\n+import {Router} from '@angular/router';\n+\n+@Component({\n+  template: `\n+    <app-toolbar>\n+      <div class=\"title\">Whatsapp Clone</div>\n+      <button mat-icon-button [matMenuTriggerFor]=\"menu\" class=\"menu\">\n+        <mat-icon>more_vert</mat-icon>\n+      </button>\n+    </app-toolbar>\n+\n+    <mat-menu #menu=\"matMenu\">\n+      <button mat-menu-item>\n+        <mat-icon>dialpad</mat-icon>\n+        <span>Redial</span>\n+      </button>\n+      <button mat-menu-item disabled>\n+        <mat-icon>voicemail</mat-icon>\n+        <span>Check voicemail</span>\n+      </button>\n+      <button mat-menu-item>\n+        <mat-icon>notifications_off</mat-icon>\n+        <span>Disable alerts</span>\n+      </button>\n+    </mat-menu>\n+\n+    <app-chats-list [items]=\"chats$ | async\"\n+                    appSelectableList=\"both\"\n+                    (single)=\"goToChat($event)\" (multiple)=\"deleteChats($event)\" (isSelecting)=\"isSelecting = $event\">\n+      <app-confirm-selection #confirmSelection></app-confirm-selection>\n+    </app-chats-list>\n+\n+    <button *ngIf=\"!isSelecting\" class=\"chat-button\" mat-fab color=\"primary\" (click)=\"goToNewChat()\">\n+      <mat-icon aria-label=\"Icon-button with a + icon\">add</mat-icon>\n+    </button>\n+  `,\n+  styleUrls: ['./chats.component.scss'],\n+})\n+export class ChatsComponent implements OnInit {\n+  chats$: Observable<GetChats.Chats[]>;\n+  isSelecting = false;\n+\n+  constructor(private chatsService: ChatsService,\n+              private router: Router) {\n+  }\n+\n+  ngOnInit() {\n+    this.chats$ = this.chatsService.getChats().chats$;\n+  }\n+\n+  goToChat(chatId: string) {\n+    this.router.navigate(['/chat', chatId]);\n+  }\n+\n+  goToNewChat() {\n+    this.router.navigate(['/new-chat']);\n+  }\n+\n+  deleteChats(chatIds: string[]) {\n+    chatIds.forEach(chatId => {\n+      this.chatsService.removeChat(chatId).subscribe();\n+    });\n+  }\n+}\ndiff --git a/src/app/login/containers/login.component.scss b/src/app/login/containers/login.component.scss\nnew file mode 100644\nindex 0000000..1897a22\n--- /dev/null\n+++ b/src/app/login/containers/login.component.scss\n@@ -0,0 +1,18 @@\n+:host {\n+  display: block;\n+}\n+\n+form:first-of-type {\n+  margin-top: 24px;\n+  margin-bottom: 48px;\n+}\n+\n+label {\n+  display: block;\n+  margin-top: 4px;\n+  margin-bottom: 4px;\n+}\n+\n+.error {\n+  color: red;\n+}\ndiff --git a/src/app/login/containers/login.component.ts b/src/app/login/containers/login.component.ts\nnew file mode 100644\nindex 0000000..51f5582\n--- /dev/null\n+++ b/src/app/login/containers/login.component.ts\n@@ -0,0 +1,133 @@\n+import {Component} from '@angular/core';\n+import {HttpClient} from '@angular/common/http';\n+import {FormBuilder, Validators} from '@angular/forms';\n+// import {matchOtherValidator} from '@moebius/ng-validators';\n+import {Router} from '@angular/router';\n+import {User} from '../../../types';\n+import {LoginService} from '../services/login.service';\n+\n+@Component({\n+  selector: 'app-login',\n+  template: `\n+    <form (ngSubmit)=\"signIn()\" [formGroup]=\"signInForm\" novalidate>\n+      <fieldset fxLayout=\"column\" fxLayoutGap=\"17px\">\n+        <legend>Sign in</legend>\n+        <div>\n+          <label>Username</label>\n+          <input formControlName=\"username\" autocomplete=\"username\" type=\"text\">\n+        </div>\n+        <div class=\"error\" *ngIf=\"signInForm.get('username').hasError('required') && signInForm.get('username').touched\">\n+          Username is required\n+        </div>\n+\n+        <div>\n+          <label>Password</label>\n+          <input formControlName=\"password\" autocomplete=\"current-password\" type=\"password\">\n+        </div>\n+        <div class=\"error\" *ngIf=\"signInForm.get('password').hasError('required') && signInForm.get('password').touched\">\n+          Password is required\n+        </div>\n+\n+        <button type=\"submit\" [disabled]=\"signInForm.invalid\">Sign in</button>\n+      </fieldset>\n+    </form>\n+\n+    <form (ngSubmit)=\"signUp()\" [formGroup]=\"signUpForm\" novalidate>\n+      <fieldset fxLayout=\"column\" fxLayoutGap=\"17px\">\n+        <legend>Sign up</legend>\n+        <div>\n+          <label>Name</label>\n+          <input formControlName=\"name\" type=\"text\">\n+        </div>\n+\n+        <div>\n+          <label>Username</label>\n+          <input formControlName=\"username\" autocomplete=\"username\" type=\"text\">\n+        </div>\n+        <div class=\"error\" *ngIf=\"signUpForm.get('username').hasError('required') && signUpForm.get('username').touched\">\n+          Username is required\n+        </div>\n+\n+        <div>\n+          <label>Password</label>\n+          <input formControlName=\"newPassword\" autocomplete=\"new-password\" type=\"password\">\n+        </div>\n+        <div class=\"error\" *ngIf=\"signUpForm.get('newPassword').hasError('required') && signUpForm.get('newPassword').touched\">\n+          Password is required\n+        </div>\n+\n+        <div>\n+          <label>Password</label>\n+          <input formControlName=\"confirmPassword\" type=\"password\">\n+        </div>\n+        <div class=\"error\" *ngIf=\"signUpForm.get('confirmPassword').hasError('required') && signUpForm.get('confirmPassword').touched\">\n+          Passwords must match\n+        </div>\n+\n+        <button type=\"submit\" [disabled]=\"signUpForm.invalid\">Sign up</button>\n+      </fieldset>\n+    </form>\n+  `,\n+  styleUrls: ['./login.component.scss'],\n+})\n+export class LoginComponent {\n+  signInForm = this.fb.group({\n+    username: [null, [\n+      Validators.required,\n+    ]],\n+    password: [null, [\n+      Validators.required,\n+    ]],\n+  });\n+\n+  signUpForm = this.fb.group({\n+    name: [null, [\n+      Validators.required,\n+    ]],\n+    username: [null, [\n+      Validators.required,\n+    ]],\n+    newPassword: [null, [\n+      Validators.required,\n+    ]],\n+    confirmPassword: [null, [\n+      Validators.required,\n+      // matchOtherValidator('newPassword'),\n+    ]],\n+  });\n+\n+  constructor(private http: HttpClient,\n+              private fb: FormBuilder,\n+              private router: Router,\n+              private loginService: LoginService) {}\n+\n+  signIn() {\n+    const {username, password} = this.signInForm.value;\n+    const auth = `Basic ${btoa(`${username}:${password}`)}`;\n+    this.http.post('http://localhost:3000/signin', null, {\n+      headers: {\n+        Authorization: auth,\n+      }\n+    }).subscribe((user: User) => {\n+      this.loginService.storeAuthHeader(auth);\n+      this.loginService.storeUser(user);\n+      this.router.navigate(['/chats']);\n+    }, err => console.error(err));\n+  }\n+\n+  signUp() {\n+    const {username, newPassword: password, name} = this.signInForm.value;\n+    const auth = `Basic ${btoa(`${username}:${password}`)}`;\n+    this.http.post('http://localhost:3000/signup', {\n+      name,\n+    }, {\n+      headers: {\n+        Authorization: auth,\n+      }\n+    }).subscribe((user: User) => {\n+      this.loginService.storeAuthHeader(auth);\n+      this.loginService.storeUser(user);\n+      this.router.navigate(['/chats']);\n+    }, err => console.error(err));\n+  }\n+}\ndiff --git a/src/app/login/login.module.ts b/src/app/login/login.module.ts\nnew file mode 100644\nindex 0000000..9fdda69\n--- /dev/null\n+++ b/src/app/login/login.module.ts\n@@ -0,0 +1,52 @@\n+import {RouterModule, Routes} from '@angular/router';\n+import {NgModule} from '@angular/core';\n+import {TruncateModule} from 'ng2-truncate';\n+import {MatButtonModule, MatIconModule, MatListModule, MatMenuModule} from '@angular/material';\n+import {SharedModule} from '../shared/shared.module';\n+import {BrowserModule} from '@angular/platform-browser';\n+import {FormsModule, ReactiveFormsModule} from '@angular/forms';\n+import {BrowserAnimationsModule} from '@angular/platform-browser/animations';\n+import {LoginComponent} from './containers/login.component';\n+import {FlexLayoutModule} from '@angular/flex-layout';\n+import {AuthInterceptor} from './services/auth.interceptor';\n+import {AuthGuard} from './services/auth.guard';\n+import {LoginService} from './services/login.service';\n+\n+\n+const routes: Routes = [\n+  {path: 'login', component: LoginComponent},\n+];\n+\n+@NgModule({\n+  declarations: [\n+    LoginComponent,\n+  ],\n+  imports: [\n+    BrowserModule,\n+    // Material\n+    MatMenuModule,\n+    MatIconModule,\n+    MatButtonModule,\n+    MatListModule,\n+    // Animations\n+    BrowserAnimationsModule,\n+    // Flex layout\n+    FlexLayoutModule,\n+    // Routing\n+    RouterModule.forChild(routes),\n+    // Forms\n+    FormsModule,\n+    ReactiveFormsModule,\n+    // Truncate Pipe\n+    TruncateModule,\n+    // Feature modules\n+    SharedModule,\n+  ],\n+  providers: [\n+    LoginService,\n+    AuthInterceptor,\n+    AuthGuard,\n+  ],\n+})\n+export class LoginModule {\n+}\ndiff --git a/src/app/login/services/auth.guard.ts b/src/app/login/services/auth.guard.ts\nnew file mode 100644\nindex 0000000..e67307b\n--- /dev/null\n+++ b/src/app/login/services/auth.guard.ts\n@@ -0,0 +1,18 @@\n+import {Injectable} from '@angular/core';\n+import {CanActivate, Router} from '@angular/router';\n+import {LoginService} from './login.service';\n+\n+@Injectable()\n+export class AuthGuard implements CanActivate {\n+  constructor(private router: Router,\n+              private loginService: LoginService) {}\n+\n+  canActivate() {\n+    if (this.loginService.getAuthHeader()) {\n+      return true;\n+    } else {\n+      this.router.navigate(['/login']);\n+      return false;\n+    }\n+  }\n+}\ndiff --git a/src/app/login/services/auth.interceptor.ts b/src/app/login/services/auth.interceptor.ts\nnew file mode 100644\nindex 0000000..c0dc097\n--- /dev/null\n+++ b/src/app/login/services/auth.interceptor.ts\n@@ -0,0 +1,20 @@\n+import {Injectable} from '@angular/core';\n+import {HttpEvent, HttpHandler, HttpInterceptor, HttpRequest} from '@angular/common/http';\n+import {Observable} from 'rxjs/Observable';\n+import {LoginService} from './login.service';\n+\n+@Injectable()\n+export class AuthInterceptor implements HttpInterceptor {\n+  constructor(private loginService: LoginService) {}\n+  intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n+    const auth = this.loginService.getAuthHeader();\n+    if (auth) {\n+      request = request.clone({\n+        setHeaders: {\n+          Authorization: auth,\n+        }\n+      });\n+    }\n+    return next.handle(request);\n+  }\n+}\ndiff --git a/src/app/login/services/login.service.ts b/src/app/login/services/login.service.ts\nnew file mode 100644\nindex 0000000..1a4c3e3\n--- /dev/null\n+++ b/src/app/login/services/login.service.ts\n@@ -0,0 +1,24 @@\n+import { Injectable } from '@angular/core';\n+import {User} from '../../../types';\n+\n+@Injectable()\n+export class LoginService {\n+\n+  constructor() { }\n+\n+  storeAuthHeader(auth: string) {\n+    localStorage.setItem('Authorization', auth);\n+  }\n+\n+  getAuthHeader(): string {\n+    return localStorage.getItem('Authorization');\n+  }\n+\n+  storeUser(user: User) {\n+    localStorage.setItem('user', JSON.stringify(user));\n+  }\n+\n+  getUser(): User {\n+    return JSON.parse(localStorage.getItem('user'));\n+  }\n+}\ndiff --git a/src/app/services/chats.service.spec.ts b/src/app/services/chats.service.spec.ts\nnew file mode 100644\nindex 0000000..c4b3754\n--- /dev/null\n+++ b/src/app/services/chats.service.spec.ts\n@@ -0,0 +1,360 @@\n+import { TestBed, inject } from '@angular/core/testing';\n+\n+import { ChatsService } from './chats.service';\n+import {Apollo} from 'apollo-angular';\n+import {HttpLink, HttpLinkModule, Options} from 'apollo-angular-link-http';\n+import {HttpClientTestingModule, HttpTestingController} from '@angular/common/http/testing';\n+import {defaultDataIdFromObject, InMemoryCache} from 'apollo-cache-inmemory';\n+import {LoginService} from '../login/services/login.service';\n+\n+describe('ChatsService', () => {\n+  let httpMock: HttpTestingController;\n+  let httpLink: HttpLink;\n+  let apollo: Apollo;\n+\n+  const chats: any = [\n+    {\n+      id: '1',\n+      __typename: 'Chat',\n+      name: 'Avery Stewart',\n+      picture: 'https://randomuser.me/api/portraits/thumb/women/1.jpg',\n+      allTimeMembers: [\n+        {\n+          id: '1',\n+          __typename: 'User',\n+        },\n+        {\n+          id: '3',\n+          __typename: 'User',\n+        }\n+      ],\n+      unreadMessages: 1,\n+      isGroup: false,\n+      messages: [\n+        {\n+          id: '1',\n+          chat: {\n+            id: '1',\n+            __typename: 'Chat',\n+          },\n+          __typename: 'Message',\n+          sender: {\n+            id: '3',\n+            __typename: 'User',\n+            name: 'Avery Stewart'\n+          },\n+          content: 'Yep!',\n+          createdAt: '1514035700',\n+          type: 0,\n+          recipients: [\n+            {\n+              user: {\n+                id: '1',\n+                __typename: 'User',\n+              },\n+              message: {\n+                id: '1',\n+                __typename: 'Message',\n+                chat: {\n+                  id: '1',\n+                  __typename: 'Chat',\n+                },\n+              },\n+              __typename: 'Recipient',\n+              chat: {\n+                id: '1',\n+                __typename: 'Chat',\n+              },\n+              receivedAt: null,\n+              readAt: null,\n+            }\n+          ],\n+          ownership: false,\n+        }\n+      ],\n+    },\n+    {\n+      id: '2',\n+      __typename: 'Chat',\n+      name: 'Katie Peterson',\n+      picture: 'https://randomuser.me/api/portraits/thumb/women/2.jpg',\n+      allTimeMembers: [\n+        {\n+          id: '1',\n+          __typename: 'User',\n+        },\n+        {\n+          id: '4',\n+          __typename: 'User',\n+        }\n+      ],\n+      unreadMessages: 0,\n+      isGroup: false,\n+      messages: [\n+        {\n+          id: '1',\n+          chat: {\n+            id: '2',\n+            __typename: 'Chat',\n+          },\n+          __typename: 'Message',\n+          sender: {\n+            id: '1',\n+            __typename: 'User',\n+            name: 'Ethan Gonzalez'\n+          },\n+          content: 'Hey, it\\'s me',\n+          createdAt: '1514031800',\n+          type: 0,\n+          recipients: [\n+            {\n+              user: {\n+                id: '4',\n+                __typename: 'User',\n+              },\n+              message: {\n+                id: '1',\n+                __typename: 'Message',\n+                chat: {\n+                  id: '2',\n+                  __typename: 'Chat',\n+                },\n+              },\n+              __typename: 'Recipient',\n+              chat: {\n+                id: '2',\n+                __typename: 'Chat',\n+              },\n+              receivedAt: null,\n+              readAt: null,\n+            }\n+          ],\n+          ownership: true\n+        }\n+      ],\n+    },\n+    {\n+      id: '3',\n+      __typename: 'Chat',\n+      name: 'Ray Edwards',\n+      picture: 'https://randomuser.me/api/portraits/thumb/men/3.jpg',\n+      allTimeMembers: [\n+        {\n+          id: '1',\n+          __typename: 'User',\n+        },\n+        {\n+          id: '5',\n+          __typename: 'User',\n+        }\n+      ],\n+      unreadMessages: 0,\n+      isGroup: false,\n+      messages: [\n+        {\n+          id: '1',\n+          __typename: 'Message',\n+          chat: {\n+            id: '3',\n+            __typename: 'Chat',\n+          },\n+          sender: {\n+            id: '1',\n+            __typename: 'User',\n+            name: 'Ethan Gonzalez'\n+          },\n+          content: 'You still there?',\n+          createdAt: '1514010200',\n+          type: 0,\n+          recipients: [\n+            {\n+              user: {\n+                id: '5',\n+                __typename: 'User',\n+              },\n+              message: {\n+                id: '1',\n+                __typename: 'Message',\n+                chat: {\n+                  id: '3',\n+                  __typename: 'Chat',\n+                },\n+              },\n+              __typename: 'Recipient',\n+              chat: {\n+                id: '3',\n+                __typename: 'Chat',\n+              },\n+              receivedAt: null,\n+              readAt: null\n+            }\n+          ],\n+          ownership: true\n+        }\n+      ],\n+    },\n+    {\n+      id: '6',\n+      __typename: 'Chat',\n+      name: 'Niccolò Belli',\n+      picture: 'https://randomuser.me/api/portraits/thumb/men/4.jpg',\n+      allTimeMembers: [\n+        {\n+          id: '1',\n+          __typename: 'User',\n+        },\n+        {\n+          id: '6',\n+          __typename: 'User',\n+        }\n+      ],\n+      unreadMessages: 0,\n+      messages: [],\n+      isGroup: false\n+    },\n+    {\n+      id: '8',\n+      __typename: 'Chat',\n+      name: 'A user 0 group',\n+      picture: 'https://randomuser.me/api/portraits/thumb/lego/1.jpg',\n+      allTimeMembers: [\n+        {\n+          id: '1',\n+          __typename: 'User',\n+        },\n+        {\n+          id: '3',\n+          __typename: 'User',\n+        },\n+        {\n+          id: '4',\n+          __typename: 'User',\n+        },\n+        {\n+          id: '6',\n+          __typename: 'User',\n+        },\n+      ],\n+      unreadMessages: 1,\n+      isGroup: true,\n+      messages: [\n+        {\n+          id: '1',\n+          __typename: 'Message',\n+          chat: {\n+            id: '8',\n+            __typename: 'Chat',\n+          },\n+          sender: {\n+            id: '4',\n+            __typename: 'User',\n+            name: 'Katie Peterson'\n+          },\n+          content: 'Awesome!',\n+          createdAt: '1512830000',\n+          type: 0,\n+          recipients: [\n+            {\n+              user: {\n+                id: '1',\n+                __typename: 'User',\n+              },\n+              message: {\n+                id: '1',\n+                __typename: 'Message',\n+                chat: {\n+                  id: '8',\n+                  __typename: 'Chat',\n+                },\n+              },\n+              __typename: 'Recipient',\n+              chat: {\n+                id: '8',\n+                __typename: 'Chat',\n+              },\n+              receivedAt: null,\n+              readAt: null\n+            },\n+            {\n+              user: {\n+                id: '6',\n+                __typename: 'User',\n+              },\n+              message: {\n+                id: '1',\n+                __typename: 'Message',\n+                chat: {\n+                  id: '8',\n+                  __typename: 'Chat',\n+                },\n+              },\n+              __typename: 'Recipient',\n+              chat: {\n+                id: '8',\n+                __typename: 'Chat',\n+              },\n+              receivedAt: null,\n+              readAt: null\n+            }\n+          ],\n+          ownership: false\n+        }\n+      ],\n+    },\n+  ];\n+\n+  beforeEach(() => {\n+    TestBed.configureTestingModule({\n+      imports: [\n+        HttpLinkModule,\n+        // HttpClientModule,\n+        HttpClientTestingModule,\n+      ],\n+      providers: [\n+        ChatsService,\n+        Apollo,\n+        LoginService,\n+      ]\n+    });\n+\n+    httpMock = TestBed.get(HttpTestingController);\n+    httpLink = TestBed.get(HttpLink);\n+    apollo = TestBed.get(Apollo);\n+\n+    apollo.create({\n+      link: httpLink.create(<Options>{ uri: 'http://localhost:3000/graphql' }),\n+      cache: new InMemoryCache({\n+        dataIdFromObject: (object: any) => {\n+          switch (object.__typename) {\n+            case 'Message': return `${object.chat.id}:${object.id}`; // use `chatId` prefix and `messageId` as the primary key\n+            default: return defaultDataIdFromObject(object); // fall back to default handling\n+          }\n+        }\n+      }),\n+    });\n+  });\n+\n+  it('should be created', inject([ChatsService], (service: ChatsService) => {\n+    expect(service).toBeTruthy();\n+  }));\n+\n+  it('should get chats', inject([ChatsService], (service: ChatsService) => {\n+    service.getChats().chats$.subscribe(_chats => {\n+      expect(_chats.length).toEqual(chats.length);\n+      for (let i = 0; i < _chats.length; i++) {\n+        expect(_chats[i]).toEqual(chats[i]);\n+      }\n+    });\n+\n+    httpMock.expectOne(httpReq => httpReq.body.operationName === 'chatAdded', 'call to chatAdded api');\n+    httpMock.expectOne(httpReq => httpReq.body.operationName === 'messageAdded', 'call to messageAdded api');\n+    const req = httpMock.expectOne(httpReq => httpReq.body.operationName === 'GetChats', 'call to getChats api');\n+    expect(req.request.method).toBe('POST');\n+    req.flush({\n+      data: {\n+        chats\n+      }\n+    });\n+    httpMock.verify();\n+  }));\n+});\ndiff --git a/src/app/services/chats.service.ts b/src/app/services/chats.service.ts\nnew file mode 100644\nindex 0000000..6bd09bd\n--- /dev/null\n+++ b/src/app/services/chats.service.ts\n@@ -0,0 +1,454 @@\n+import {ApolloQueryResult, MutationOptions, WatchQueryOptions} from 'apollo-client';\n+import {concat, map, share, switchMap} from 'rxjs/operators';\n+import {Apollo, QueryRef} from 'apollo-angular';\n+import {Injectable} from '@angular/core';\n+import {getChatsQuery} from '../../graphql/getChats.query';\n+import {\n+  AddChat, AddGroup, AddMessage, GetChat, GetChats, GetUsers, MessageAdded, RemoveAllMessages, RemoveChat,\n+  RemoveMessages\n+} from '../../types';\n+import {getChatQuery} from '../../graphql/getChat.query';\n+import {addMessageMutation} from '../../graphql/addMessage.mutation';\n+import {removeChatMutation} from '../../graphql/removeChat.mutation';\n+import {DocumentNode} from 'graphql';\n+import {removeAllMessagesMutation} from '../../graphql/removeAllMessages.mutation';\n+import {removeMessagesMutation} from '../../graphql/removeMessages.mutation';\n+import {getUsersQuery} from '../../graphql/getUsers.query';\n+import {Observable} from 'rxjs/Observable';\n+import {addChatMutation} from '../../graphql/addChat.mutation';\n+import {addGroupMutation} from '../../graphql/addGroup.mutation';\n+import * as moment from 'moment';\n+import {AsyncSubject} from 'rxjs/AsyncSubject';\n+import {of} from 'rxjs/observable/of';\n+import {FetchResult} from 'apollo-link';\n+import {LoginService} from '../login/services/login.service';\n+import {chatAddedSubscription} from '../../graphql/chatAdded.subscription';\n+import {messageAddedSubscription} from '../../graphql/messageAdded.subscription';\n+\n+@Injectable()\n+export class ChatsService {\n+  messagesAmount = 3;\n+  getChatsWq: QueryRef<GetChats.Query>;\n+  chats$: Observable<GetChats.Chats[]>;\n+  chats: GetChats.Chats[];\n+  getChatWqSubject: AsyncSubject<QueryRef<GetChat.Query>>;\n+  addChat$: Observable<FetchResult<AddChat.Mutation | AddGroup.Mutation>>;\n+\n+  constructor(private apollo: Apollo,\n+              private loginService: LoginService) {\n+    this.getChatsWq = this.apollo.watchQuery<GetChats.Query>(<WatchQueryOptions>{\n+      query: getChatsQuery,\n+      variables: {\n+        amount: this.messagesAmount,\n+      },\n+    });\n+\n+    this.getChatsWq.subscribeToMore({\n+      document: chatAddedSubscription,\n+      updateQuery: (prev: GetChats.Query, { subscriptionData }) => {\n+        if (!subscriptionData.data) {\n+          return prev;\n+        }\n+\n+        const newChat: GetChats.Chats = subscriptionData.data.chatAdded;\n+\n+        return Object.assign({}, prev, {\n+          chats: [...prev.chats, newChat]\n+        });\n+      }\n+    });\n+\n+    this.getChatsWq.subscribeToMore({\n+      document: messageAddedSubscription,\n+      updateQuery: (prev: GetChats.Query, { subscriptionData }) => {\n+        if (!subscriptionData.data) {\n+          return prev;\n+        }\n+\n+        const newMessage: MessageAdded.MessageAdded = subscriptionData.data.messageAdded;\n+\n+        // We need to update the cache for both Chat and Chats. The following updates the cache for Chat.\n+        try {\n+          // Read the data from our cache for this query.\n+          const {chat}: GetChat.Query = this.apollo.getClient().readQuery({\n+            query: getChatQuery, variables: {\n+              chatId: newMessage.chat.id,\n+            }\n+          });\n+\n+          // Add our message from the mutation to the end.\n+          chat.messages.push(newMessage);\n+          // Write our data back to the cache.\n+          this.apollo.getClient().writeQuery({ query: getChatQuery, data: {chat} });\n+        } catch {\n+          console.error('The chat we received an update for does not exist in the store');\n+        }\n+\n+        return Object.assign({}, prev, {\n+          chats: [...prev.chats.map(_chat =>\n+            _chat.id === newMessage.chat.id ? {..._chat, messages: [..._chat.messages, newMessage]} : _chat)]\n+        });\n+      }\n+    });\n+\n+    this.chats$ = this.getChatsWq.valueChanges.pipe(\n+      map((result: ApolloQueryResult<GetChats.Query>) => result.data.chats)\n+    );\n+    this.chats$.subscribe(chats => this.chats = chats);\n+  }\n+\n+  static getRandomId() {\n+    return String(Math.round(Math.random() * 1000000000000));\n+  }\n+\n+  getChats() {\n+    return {query: this.getChatsWq, chats$: this.chats$};\n+  }\n+\n+  getChat(chatId: string, oui?: boolean) {\n+    const _chat = this.chats && this.chats.find(chat => chat.id === chatId) || {\n+      id: chatId,\n+      name: '',\n+      picture: null,\n+      allTimeMembers: [],\n+      unreadMessages: 0,\n+      isGroup: false,\n+      messages: [],\n+    };\n+    const chat$FromCache = of<GetChat.Chat>(_chat);\n+\n+    const getApolloWatchQuery = (id: string) => {\n+      return this.apollo.watchQuery<GetChat.Query>({\n+        query: getChatQuery,\n+        variables: {\n+          chatId: id,\n+        }\n+      });\n+    };\n+\n+    let chat$: Observable<GetChat.Chat>;\n+    this.getChatWqSubject = new AsyncSubject();\n+\n+    if (oui) {\n+      chat$ = chat$FromCache.pipe(\n+        concat(this.addChat$.pipe(\n+          switchMap(({ data: { addChat, addGroup } }) => {\n+            const query = getApolloWatchQuery(addChat ? addChat.id : addGroup.id);\n+            this.getChatWqSubject.next(query);\n+            this.getChatWqSubject.complete();\n+            return query.valueChanges.pipe(\n+              map((result: ApolloQueryResult<GetChat.Query>) => result.data.chat)\n+            );\n+          }))\n+        ));\n+    } else {\n+      const query = getApolloWatchQuery(chatId);\n+      this.getChatWqSubject.next(query);\n+      this.getChatWqSubject.complete();\n+      chat$ = chat$FromCache.pipe(\n+        concat(query.valueChanges.pipe(\n+          map((result: ApolloQueryResult<GetChat.Query>) => result.data.chat)\n+        )));\n+    }\n+\n+    return {query$: this.getChatWqSubject.asObservable(), chat$};\n+  }\n+\n+  addMessage(chatId: string, content: string) {\n+    return this.apollo.mutate(<MutationOptions>{\n+      mutation: addMessageMutation,\n+      variables: <AddMessage.Variables>{\n+        chatId,\n+        content,\n+      },\n+      optimisticResponse: {\n+        __typename: 'Mutation',\n+        addMessage: {\n+          id: ChatsService.getRandomId(),\n+          __typename: 'Message',\n+          senderId: this.loginService.getUser().id,\n+          sender: {\n+            id: this.loginService.getUser().id,\n+            __typename: 'User',\n+            name: this.loginService.getUser().name,\n+          },\n+          content,\n+          createdAt: moment().unix(),\n+          type: 0,\n+          recipients: [],\n+          ownership: true,\n+        },\n+      },\n+      update: (store, { data: { addMessage } }: {data: AddMessage.Mutation}) => {\n+        // Update the messages cache\n+        {\n+          // Read the data from our cache for this query.\n+          const {chat}: GetChat.Query = store.readQuery({\n+            query: getChatQuery, variables: {\n+              chatId,\n+            }\n+          });\n+          // Add our message from the mutation to the end.\n+          chat.messages.push(addMessage);\n+          // Write our data back to the cache.\n+          store.writeQuery({ query: getChatQuery, data: {chat} });\n+        }\n+        // Update last message cache\n+        {\n+          // Read the data from our cache for this query.\n+          const {chats}: GetChats.Query = store.readQuery({\n+            query: getChatsQuery,\n+            variables: <GetChats.Variables>{\n+              amount: this.messagesAmount,\n+            },\n+          });\n+          // Add our comment from the mutation to the end.\n+          chats.find(chat => chat.id === chatId).messages.push(addMessage);\n+          // Write our data back to the cache.\n+          store.writeQuery({\n+            query: getChatsQuery,\n+            variables: <GetChats.Variables>{\n+              amount: this.messagesAmount,\n+            },\n+            data: {\n+              chats,\n+            },\n+          });\n+        }\n+      },\n+    });\n+  }\n+\n+  removeChat(chatId: string) {\n+    return this.apollo.mutate({\n+      mutation: removeChatMutation,\n+      variables: <RemoveChat.Variables>{\n+        chatId,\n+      },\n+      optimisticResponse: {\n+        __typename: 'Mutation',\n+        removeChat: chatId,\n+      },\n+      update: (store, { data: { removeChat } }) => {\n+        // Read the data from our cache for this query.\n+        const {chats}: GetChats.Query = store.readQuery({\n+          query: getChatsQuery,\n+          variables: <GetChats.Variables>{\n+            amount: this.messagesAmount,\n+          },\n+        });\n+        // Remove the chat (mutable)\n+        for (const index of chats.keys()) {\n+          if (chats[index].id === removeChat) {\n+            chats.splice(index, 1);\n+          }\n+        }\n+        // Write our data back to the cache.\n+        store.writeQuery({\n+          query: getChatsQuery,\n+          variables: <GetChats.Variables>{\n+            amount: this.messagesAmount,\n+          },\n+          data: {\n+            chats,\n+          },\n+        });\n+      },\n+    });\n+  }\n+\n+  removeMessages(chatId: string, messages: GetChat.Messages[], messageIdsOrAll: string[] | boolean) {\n+    let variables: RemoveMessages.Variables | RemoveAllMessages.Variables;\n+    let ids: string[] = [];\n+    let mutation: DocumentNode;\n+\n+    if (typeof messageIdsOrAll === 'boolean') {\n+      variables = {chatId, all: messageIdsOrAll} as RemoveAllMessages.Variables;\n+      ids = messages.map(message => message.id);\n+      mutation = removeAllMessagesMutation;\n+    } else {\n+      variables = {chatId, messageIds: messageIdsOrAll} as RemoveMessages.Variables;\n+      ids = messageIdsOrAll;\n+      mutation = removeMessagesMutation;\n+    }\n+\n+    return this.apollo.mutate(<MutationOptions>{\n+      mutation,\n+      variables,\n+      optimisticResponse: {\n+        __typename: 'Mutation',\n+        removeMessages: ids,\n+      },\n+      update: (store, { data: { removeMessages } }: {data: RemoveMessages.Mutation | RemoveAllMessages.Mutation}) => {\n+        // Update the messages cache\n+        {\n+          // Read the data from our cache for this query.\n+          const {chat}: GetChat.Query = store.readQuery({\n+            query: getChatQuery, variables: {\n+              chatId,\n+            }\n+          });\n+          // Remove the messages (mutable)\n+          removeMessages.forEach(messageId => {\n+            for (const index of chat.messages.keys()) {\n+              if (chat.messages[index].id === messageId) {\n+                chat.messages.splice(index, 1);\n+              }\n+            }\n+          });\n+          // Write our data back to the cache.\n+          store.writeQuery({ query: getChatQuery, data: {chat} });\n+        }\n+        // Update last message cache\n+        {\n+          // Read the data from our cache for this query.\n+          const {chats}: GetChats.Query = store.readQuery({\n+            query: getChatsQuery,\n+            variables: <GetChats.Variables>{\n+              amount: this.messagesAmount,\n+            },\n+          });\n+          // Fix last message\n+          chats.find(chat => chat.id === chatId).messages = messages\n+            .filter(message => !ids.includes(message.id))\n+            .sort((a, b) => Number(b.createdAt) - Number(a.createdAt)) || [];\n+          // Write our data back to the cache.\n+          store.writeQuery({\n+            query: getChatsQuery,\n+            variables: <GetChats.Variables>{\n+              amount: this.messagesAmount,\n+            },\n+            data: {\n+              chats,\n+            },\n+          });\n+        }\n+      },\n+    });\n+  }\n+\n+  getUsers() {\n+    const query = this.apollo.watchQuery<GetUsers.Query>(<WatchQueryOptions>{\n+      query: getUsersQuery,\n+    });\n+    const users$ = query.valueChanges.pipe(\n+      map((result: ApolloQueryResult<GetUsers.Query>) => result.data.users)\n+    );\n+\n+    return {query, users$};\n+  }\n+\n+  // Checks if the chat is listed for the current user and returns the id\n+  getChatId(recipientId: string) {\n+    const _chat = this.chats.find(chat => {\n+      return !chat.isGroup && !!chat.allTimeMembers.find(user => user.id === this.loginService.getUser().id) &&\n+        !!chat.allTimeMembers.find(user => user.id === recipientId);\n+    });\n+    return _chat ? _chat.id : false;\n+  }\n+\n+  addChat(recipientId: string, users: GetUsers.Users[], ouiId: string) {\n+    this.addChat$ = this.apollo.mutate({\n+      mutation: addChatMutation,\n+      variables: <AddChat.Variables>{\n+        recipientId,\n+      },\n+      optimisticResponse: {\n+        __typename: 'Mutation',\n+        addChat: {\n+          id: ouiId,\n+          __typename: 'Chat',\n+          name: users.find(user => user.id === recipientId).name,\n+          picture: users.find(user => user.id === recipientId).picture,\n+          allTimeMembers: [\n+            {\n+              id: this.loginService.getUser().id,\n+              __typename: 'User',\n+            },\n+            {\n+              id: recipientId,\n+              __typename: 'User',\n+            }\n+          ],\n+          unreadMessages: 0,\n+          messages: [],\n+          isGroup: false,\n+        },\n+      },\n+      update: (store, { data: { addChat } }) => {\n+        // Read the data from our cache for this query.\n+        const {chats}: GetChats.Query = store.readQuery({\n+          query: getChatsQuery,\n+          variables: <GetChats.Variables>{\n+            amount: this.messagesAmount,\n+          },\n+        });\n+        // Add our comment from the mutation to the end.\n+        chats.push(addChat);\n+        // Write our data back to the cache.\n+        store.writeQuery({\n+          query: getChatsQuery,\n+          variables: <GetChats.Variables>{\n+            amount: this.messagesAmount,\n+          },\n+          data: {\n+            chats,\n+          },\n+        });\n+      },\n+    }).pipe(share());\n+    return this.addChat$;\n+  }\n+\n+  addGroup(recipientIds: string[], groupName: string, ouiId: string) {\n+    this.addChat$ = this.apollo.mutate({\n+      mutation: addGroupMutation,\n+      variables: <AddGroup.Variables>{\n+        recipientIds,\n+        groupName,\n+      },\n+      optimisticResponse: {\n+        __typename: 'Mutation',\n+        addGroup: {\n+          id: ouiId,\n+          __typename: 'Chat',\n+          name: groupName,\n+          picture: 'https://randomuser.me/api/portraits/thumb/lego/1.jpg',\n+          userIds: [this.loginService.getUser().id, recipientIds],\n+          allTimeMembers: [\n+            {\n+              id: this.loginService.getUser().id,\n+              __typename: 'User',\n+            },\n+            ...recipientIds.map(id => ({id, __typename: 'User'})),\n+          ],\n+          unreadMessages: 0,\n+          messages: [],\n+          isGroup: true,\n+        },\n+      },\n+      update: (store, { data: { addGroup } }) => {\n+        // Read the data from our cache for this query.\n+        const {chats}: GetChats.Query = store.readQuery({\n+          query: getChatsQuery,\n+          variables: <GetChats.Variables>{\n+            amount: this.messagesAmount,\n+          },\n+        });\n+        // Add our comment from the mutation to the end.\n+        chats.push(addGroup);\n+        // Write our data back to the cache.\n+        store.writeQuery({\n+          query: getChatsQuery,\n+          variables: <GetChats.Variables>{\n+            amount: this.messagesAmount,\n+          },\n+          data: {\n+            chats,\n+          },\n+        });\n+      },\n+    }).pipe(share());\n+    return this.addChat$;\n+  }\n+}\ndiff --git a/src/app/shared/components/confirm-selection/confirm-selection.component.scss b/src/app/shared/components/confirm-selection/confirm-selection.component.scss\nnew file mode 100644\nindex 0000000..7809636\n--- /dev/null\n+++ b/src/app/shared/components/confirm-selection/confirm-selection.component.scss\n@@ -0,0 +1,6 @@\n+:host {\n+  display: block;\n+  position: absolute;\n+  bottom: 5vw;\n+  right: 5vw;\n+}\ndiff --git a/src/app/shared/components/confirm-selection/confirm-selection.component.ts b/src/app/shared/components/confirm-selection/confirm-selection.component.ts\nnew file mode 100644\nindex 0000000..26bd9a9\n--- /dev/null\n+++ b/src/app/shared/components/confirm-selection/confirm-selection.component.ts\n@@ -0,0 +1,21 @@\n+import {Component, EventEmitter, Input, Output} from '@angular/core';\n+\n+@Component({\n+  selector: 'app-confirm-selection',\n+  template: `\n+    <button mat-fab color=\"primary\" (click)=\"handleClick()\">\n+      <mat-icon aria-label=\"Icon-button\">{{ icon }}</mat-icon>\n+    </button>\n+  `,\n+  styleUrls: ['./confirm-selection.component.scss'],\n+})\n+export class ConfirmSelectionComponent {\n+  @Input()\n+  icon = 'delete';\n+  @Output()\n+  emitClick = new EventEmitter<null>();\n+\n+  handleClick() {\n+    this.emitClick.emit();\n+  }\n+}\ndiff --git a/src/app/shared/components/toolbar/toolbar.component.scss b/src/app/shared/components/toolbar/toolbar.component.scss\nnew file mode 100644\nindex 0000000..974207c\n--- /dev/null\n+++ b/src/app/shared/components/toolbar/toolbar.component.scss\n@@ -0,0 +1,13 @@\n+:host {\n+  display: block;\n+  height: 8vh;\n+}\n+\n+.mat-toolbar {\n+  justify-content: space-between;\n+  height: 100%;\n+\n+  .left-block {\n+    display: flex;\n+  }\n+}\ndiff --git a/src/app/shared/components/toolbar/toolbar.component.ts b/src/app/shared/components/toolbar/toolbar.component.ts\nnew file mode 100644\nindex 0000000..d986d30\n--- /dev/null\n+++ b/src/app/shared/components/toolbar/toolbar.component.ts\n@@ -0,0 +1,18 @@\n+import {Component} from '@angular/core';\n+\n+@Component({\n+  selector: 'app-toolbar',\n+  template: `\n+    <mat-toolbar>\n+      <div class=\"left-block\">\n+        <ng-content select=\".navigation\"></ng-content>\n+        <ng-content select=\".title\"></ng-content>\n+      </div>\n+      <ng-content select=\".menu\"></ng-content>\n+    </mat-toolbar>\n+  `,\n+  styleUrls: ['./toolbar.component.scss']\n+})\n+export class ToolbarComponent {\n+\n+}\ndiff --git a/src/app/shared/shared.module.ts b/src/app/shared/shared.module.ts\nnew file mode 100644\nindex 0000000..5d48eea\n--- /dev/null\n+++ b/src/app/shared/shared.module.ts\n@@ -0,0 +1,33 @@\n+import {BrowserModule} from '@angular/platform-browser';\n+import {NgModule} from '@angular/core';\n+\n+import {MatButtonModule, MatIconModule, MatToolbarModule} from '@angular/material';\n+import {ToolbarComponent} from './components/toolbar/toolbar.component';\n+import {FormsModule} from '@angular/forms';\n+import {BrowserAnimationsModule} from '@angular/platform-browser/animations';\n+import {ConfirmSelectionComponent} from './components/confirm-selection/confirm-selection.component';\n+\n+@NgModule({\n+  declarations: [\n+    ToolbarComponent,\n+    ConfirmSelectionComponent,\n+  ],\n+  imports: [\n+    BrowserModule,\n+    // Material\n+    MatToolbarModule,\n+    MatIconModule,\n+    MatButtonModule,\n+    // Animations\n+    BrowserAnimationsModule,\n+    // Forms\n+    FormsModule,\n+  ],\n+  providers: [],\n+  exports: [\n+    ToolbarComponent,\n+    ConfirmSelectionComponent,\n+  ],\n+})\n+export class SharedModule {\n+}\ndiff --git a/src/assets/.gitkeep b/src/assets/.gitkeep\nnew file mode 100644\nindex 0000000..e69de29\ndiff --git a/src/environments/environment.prod.ts b/src/environments/environment.prod.ts\nnew file mode 100644\nindex 0000000..3612073\n--- /dev/null\n+++ b/src/environments/environment.prod.ts\n@@ -0,0 +1,3 @@\n+export const environment = {\n+  production: true\n+};\ndiff --git a/src/environments/environment.ts b/src/environments/environment.ts\nnew file mode 100644\nindex 0000000..b7f639a\n--- /dev/null\n+++ b/src/environments/environment.ts\n@@ -0,0 +1,8 @@\n+// The file contents for the current environment will overwrite these during build.\n+// The build system defaults to the dev environment which uses `environment.ts`, but if you do\n+// `ng build --env=prod` then `environment.prod.ts` will be used instead.\n+// The list of which env maps to which file can be found in `.angular-cli.json`.\n+\n+export const environment = {\n+  production: false\n+};\ndiff --git a/src/favicon.ico b/src/favicon.ico\nnew file mode 100644\nindex 0000000..8081c7c\nBinary files /dev/null and b/src/favicon.ico differ\ndiff --git a/src/graphql/addChat.mutation.ts b/src/graphql/addChat.mutation.ts\nnew file mode 100644\nindex 0000000..cf33eba\n--- /dev/null\n+++ b/src/graphql/addChat.mutation.ts\n@@ -0,0 +1,17 @@\n+import gql from 'graphql-tag';\n+import {fragments} from './fragment';\n+\n+// We use the gql tag to parse our query string into a query document\n+export const addChatMutation = gql`\n+  mutation AddChat($recipientId: ID!) {\n+    addChat(recipientId: $recipientId) {\n+      ...ChatWithoutMessages\n+      messages {\n+        ...Message\n+      }\n+    }\n+  }\n+\n+  ${fragments['chatWithoutMessages']}\n+  ${fragments['message']}\n+`;\ndiff --git a/src/graphql/addGroup.mutation.ts b/src/graphql/addGroup.mutation.ts\nnew file mode 100644\nindex 0000000..8fb2362\n--- /dev/null\n+++ b/src/graphql/addGroup.mutation.ts\n@@ -0,0 +1,17 @@\n+import gql from 'graphql-tag';\n+import {fragments} from './fragment';\n+\n+// We use the gql tag to parse our query string into a query document\n+export const addGroupMutation = gql`\n+  mutation AddGroup($recipientIds: [ID!]!, $groupName: String!) {\n+    addGroup(recipientIds: $recipientIds, groupName: $groupName) {\n+      ...ChatWithoutMessages\n+      messages {\n+        ...Message\n+      }\n+    }\n+  }\n+\n+  ${fragments['chatWithoutMessages']}\n+  ${fragments['message']}\n+`;\ndiff --git a/src/graphql/addMessage.mutation.ts b/src/graphql/addMessage.mutation.ts\nnew file mode 100644\nindex 0000000..abcd58d\n--- /dev/null\n+++ b/src/graphql/addMessage.mutation.ts\n@@ -0,0 +1,13 @@\n+import gql from 'graphql-tag';\n+import {fragments} from './fragment';\n+\n+// We use the gql tag to parse our query string into a query document\n+export const addMessageMutation = gql`\n+  mutation AddMessage($chatId: ID!, $content: String!) {\n+    addMessage(chatId: $chatId, content: $content) {\n+      ...Message\n+    }\n+  }\n+\n+  ${fragments['message']}\n+`;\ndiff --git a/src/graphql/chatAdded.subscription.ts b/src/graphql/chatAdded.subscription.ts\nnew file mode 100644\nindex 0000000..9f6afe5\n--- /dev/null\n+++ b/src/graphql/chatAdded.subscription.ts\n@@ -0,0 +1,17 @@\n+import gql from 'graphql-tag';\n+import {fragments} from './fragment';\n+\n+// We use the gql tag to parse our query string into a query document\n+export const chatAddedSubscription = gql`\n+  subscription chatAdded {\n+    chatAdded {\n+      ...ChatWithoutMessages\n+      messages {\n+        ...Message\n+      }\n+    }\n+  }\n+\n+  ${fragments['chatWithoutMessages']}\n+  ${fragments['message']}\n+`;\ndiff --git a/src/graphql/fragment.ts b/src/graphql/fragment.ts\nnew file mode 100644\nindex 0000000..fae680e\n--- /dev/null\n+++ b/src/graphql/fragment.ts\n@@ -0,0 +1,51 @@\n+import gql from 'graphql-tag';\n+import {DocumentNode} from 'graphql';\n+\n+export const fragments: {\n+  [key: string]: DocumentNode\n+} = {\n+  chatWithoutMessages: gql`\n+    fragment ChatWithoutMessages on Chat {\n+      id\n+      name\n+      picture\n+      allTimeMembers {\n+        id\n+      }\n+      unreadMessages\n+      isGroup\n+    }\n+  `,\n+  message: gql`\n+    fragment Message on Message {\n+      id\n+      chat {\n+        id\n+      }\n+      sender {\n+        id\n+        name\n+      }\n+      content\n+      createdAt\n+      type\n+      recipients {\n+        user {\n+          id\n+        }\n+        message {\n+          id\n+          chat {\n+            id\n+          }\n+        }\n+        chat {\n+          id\n+        }\n+        receivedAt\n+        readAt\n+      }\n+      ownership\n+    }\n+  `,\n+};\ndiff --git a/src/graphql/getChat.query.ts b/src/graphql/getChat.query.ts\nnew file mode 100644\nindex 0000000..621c4b9\n--- /dev/null\n+++ b/src/graphql/getChat.query.ts\n@@ -0,0 +1,17 @@\n+import gql from 'graphql-tag';\n+import {fragments} from './fragment';\n+\n+// We use the gql tag to parse our query string into a query document\n+export const getChatQuery = gql`\n+  query GetChat($chatId: ID!) {\n+    chat(chatId: $chatId) {\n+      ...ChatWithoutMessages\n+      messages {\n+        ...Message\n+      }\n+    }\n+  }\n+\n+  ${fragments['chatWithoutMessages']}\n+  ${fragments['message']}\n+`;\ndiff --git a/src/graphql/getChats.query.ts b/src/graphql/getChats.query.ts\nnew file mode 100644\nindex 0000000..44e6d96\n--- /dev/null\n+++ b/src/graphql/getChats.query.ts\n@@ -0,0 +1,17 @@\n+import gql from 'graphql-tag';\n+import {fragments} from './fragment';\n+\n+// We use the gql tag to parse our query string into a query document\n+export const getChatsQuery = gql`\n+  query GetChats($amount: Int) {\n+    chats {\n+      ...ChatWithoutMessages\n+      messages(amount: $amount) {\n+        ...Message\n+      }\n+    }\n+  }\n+\n+  ${fragments['chatWithoutMessages']}\n+  ${fragments['message']}\n+`;\ndiff --git a/src/graphql/getUsers.query.ts b/src/graphql/getUsers.query.ts\nnew file mode 100644\nindex 0000000..ddb62a6\n--- /dev/null\n+++ b/src/graphql/getUsers.query.ts\n@@ -0,0 +1,12 @@\n+import gql from 'graphql-tag';\n+\n+// We use the gql tag to parse our query string into a query document\n+export const getUsersQuery = gql`\n+  query GetUsers {\n+    users {\n+      id,\n+      name,\n+      picture,\n+    }\n+  }\n+`;\ndiff --git a/src/graphql/messageAdded.subscription.ts b/src/graphql/messageAdded.subscription.ts\nnew file mode 100644\nindex 0000000..9132e1b\n--- /dev/null\n+++ b/src/graphql/messageAdded.subscription.ts\n@@ -0,0 +1,16 @@\n+import gql from 'graphql-tag';\n+import {fragments} from './fragment';\n+\n+// We use the gql tag to parse our query string into a query document\n+export const messageAddedSubscription = gql`\n+  subscription messageAdded($chatId: ID) {\n+    messageAdded(chatId: $chatId) {\n+      ...Message\n+      chat {\n+        id,\n+      },\n+    }\n+  }\n+\n+  ${fragments['message']}\n+`;\ndiff --git a/src/graphql/removeAllMessages.mutation.ts b/src/graphql/removeAllMessages.mutation.ts\nnew file mode 100644\nindex 0000000..65a89b8\n--- /dev/null\n+++ b/src/graphql/removeAllMessages.mutation.ts\n@@ -0,0 +1,8 @@\n+import gql from 'graphql-tag';\n+\n+// We use the gql tag to parse our query string into a query document\n+export const removeAllMessagesMutation = gql`\n+  mutation RemoveAllMessages($chatId: ID!, $all: Boolean) {\n+    removeMessages(chatId: $chatId, all: $all)\n+  }\n+`;\ndiff --git a/src/graphql/removeChat.mutation.ts b/src/graphql/removeChat.mutation.ts\nnew file mode 100644\nindex 0000000..8f432d5\n--- /dev/null\n+++ b/src/graphql/removeChat.mutation.ts\n@@ -0,0 +1,8 @@\n+import gql from 'graphql-tag';\n+\n+// We use the gql tag to parse our query string into a query document\n+export const removeChatMutation = gql`\n+  mutation RemoveChat($chatId: ID!) {\n+    removeChat(chatId: $chatId)\n+  }\n+`;\ndiff --git a/src/graphql/removeMessages.mutation.ts b/src/graphql/removeMessages.mutation.ts\nnew file mode 100644\nindex 0000000..f5c676f\n--- /dev/null\n+++ b/src/graphql/removeMessages.mutation.ts\n@@ -0,0 +1,8 @@\n+import gql from 'graphql-tag';\n+\n+// We use the gql tag to parse our query string into a query document\n+export const removeMessagesMutation = gql`\n+  mutation RemoveMessages($chatId: ID!, $messageIds: [ID]) {\n+    removeMessages(chatId: $chatId, messageIds: $messageIds)\n+  }\n+`;\ndiff --git a/src/index.html b/src/index.html\nnew file mode 100644\nindex 0000000..db90117\n--- /dev/null\n+++ b/src/index.html\n@@ -0,0 +1,16 @@\n+<!doctype html>\n+<html lang=\"en\">\n+<head>\n+  <meta charset=\"utf-8\">\n+  <title>WhatsappClientAngularcliMaterial</title>\n+  <base href=\"/\">\n+\n+  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1, user-scalable=no\">\n+  <link rel=\"icon\" type=\"image/x-icon\" href=\"favicon.ico\">\n+  <!-- Material icons -->\n+  <link href=\"https://fonts.googleapis.com/icon?family=Material+Icons\" rel=\"stylesheet\">\n+</head>\n+<body>\n+  <app-root></app-root>\n+</body>\n+</html>\ndiff --git a/src/main.ts b/src/main.ts\nnew file mode 100644\nindex 0000000..27d19d9\n--- /dev/null\n+++ b/src/main.ts\n@@ -0,0 +1,15 @@\n+import { enableProdMode } from '@angular/core';\n+import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n+\n+import { AppModule } from './app/app.module';\n+import { environment } from './environments/environment';\n+\n+// Material gestures\n+import 'hammerjs';\n+\n+if (environment.production) {\n+  enableProdMode();\n+}\n+\n+platformBrowserDynamic().bootstrapModule(AppModule)\n+  .catch(err => console.log(err));\ndiff --git a/src/polyfills.ts b/src/polyfills.ts\nnew file mode 100644\nindex 0000000..af84770\n--- /dev/null\n+++ b/src/polyfills.ts\n@@ -0,0 +1,79 @@\n+/**\n+ * This file includes polyfills needed by Angular and is loaded before the app.\n+ * You can add your own extra polyfills to this file.\n+ *\n+ * This file is divided into 2 sections:\n+ *   1. Browser polyfills. These are applied before loading ZoneJS and are sorted by browsers.\n+ *   2. Application imports. Files imported after ZoneJS that should be loaded before your main\n+ *      file.\n+ *\n+ * The current setup is for so-called \"evergreen\" browsers; the last versions of browsers that\n+ * automatically update themselves. This includes Safari >= 10, Chrome >= 55 (including Opera),\n+ * Edge >= 13 on the desktop, and iOS 10 and Chrome on mobile.\n+ *\n+ * Learn more in https://angular.io/docs/ts/latest/guide/browser-support.html\n+ */\n+\n+/***************************************************************************************************\n+ * BROWSER POLYFILLS\n+ */\n+\n+/** IE9, IE10 and IE11 requires all of the following polyfills. **/\n+// import 'core-js/es6/symbol';\n+// import 'core-js/es6/object';\n+// import 'core-js/es6/function';\n+// import 'core-js/es6/parse-int';\n+// import 'core-js/es6/parse-float';\n+// import 'core-js/es6/number';\n+// import 'core-js/es6/math';\n+// import 'core-js/es6/string';\n+// import 'core-js/es6/date';\n+// import 'core-js/es6/array';\n+// import 'core-js/es6/regexp';\n+// import 'core-js/es6/map';\n+// import 'core-js/es6/weak-map';\n+// import 'core-js/es6/set';\n+\n+/** IE10 and IE11 requires the following for NgClass support on SVG elements */\n+// import 'classlist.js';  // Run `npm install --save classlist.js`.\n+\n+/** IE10 and IE11 requires the following for the Reflect API. */\n+// import 'core-js/es6/reflect';\n+\n+\n+/** Evergreen browsers require these. **/\n+// Used for reflect-metadata in JIT. If you use AOT (and only Angular decorators), you can remove.\n+import 'core-js/es7/reflect';\n+\n+\n+/**\n+ * Required to support Web Animations `@angular/platform-browser/animations`.\n+ * Needed for: All but Chrome, Firefox and Opera. http://caniuse.com/#feat=web-animation\n+ **/\n+// import 'web-animations-js';  // Run `npm install --save web-animations-js`.\n+\n+/**\n+ * By default, zone.js will patch all possible macroTask and DomEvents\n+ * user can disable parts of macroTask/DomEvents patch by setting following flags\n+ */\n+\n+ // (window as any).__Zone_disable_requestAnimationFrame = true; // disable patch requestAnimationFrame\n+ // (window as any).__Zone_disable_on_property = true; // disable patch onProperty such as onclick\n+ // (window as any).__zone_symbol__BLACK_LISTED_EVENTS = ['scroll', 'mousemove']; // disable patch specified eventNames\n+\n+ /*\n+ * in IE/Edge developer tools, the addEventListener will also be wrapped by zone.js\n+ * with the following flag, it will bypass `zone.js` patch for IE/Edge\n+ */\n+// (window as any).__Zone_enable_cross_context_check = true;\n+\n+/***************************************************************************************************\n+ * Zone JS is required by default for Angular itself.\n+ */\n+import 'zone.js/dist/zone';  // Included with Angular CLI.\n+\n+\n+\n+/***************************************************************************************************\n+ * APPLICATION IMPORTS\n+ */\ndiff --git a/src/styles.scss b/src/styles.scss\nnew file mode 100644\nindex 0000000..efd56a4\n--- /dev/null\n+++ b/src/styles.scss\n@@ -0,0 +1,8 @@\n+/* You can add global styles to this file, and also import other style files */\n+\n+/* Meterial theme */\n+@import \"~@angular/material/prebuilt-themes/indigo-pink.css\";\n+\n+body {\n+  margin: 0;\n+}\ndiff --git a/src/test.ts b/src/test.ts\nnew file mode 100644\nindex 0000000..25a1ed7\n--- /dev/null\n+++ b/src/test.ts\n@@ -0,0 +1,23 @@\n+// This file is required by karma.conf.js and loads recursively all the .spec and framework files\n+\n+import 'zone.js/dist/zone-testing';\n+import { getTestBed } from '@angular/core/testing';\n+import {\n+  BrowserDynamicTestingModule,\n+  platformBrowserDynamicTesting\n+} from '@angular/platform-browser-dynamic/testing';\n+\n+// Material gestures\n+import 'hammerjs';\n+\n+declare const require: any;\n+\n+// First, initialize the Angular testing environment.\n+getTestBed().initTestEnvironment(\n+  BrowserDynamicTestingModule,\n+  platformBrowserDynamicTesting()\n+);\n+// Then we find all the tests.\n+const context = require.context('./', true, /\\.spec\\.ts$/);\n+// And load the modules.\n+context.keys().map(context);\ndiff --git a/src/tsconfig.app.json b/src/tsconfig.app.json\nnew file mode 100644\nindex 0000000..39ba8db\n--- /dev/null\n+++ b/src/tsconfig.app.json\n@@ -0,0 +1,13 @@\n+{\n+  \"extends\": \"../tsconfig.json\",\n+  \"compilerOptions\": {\n+    \"outDir\": \"../out-tsc/app\",\n+    \"baseUrl\": \"./\",\n+    \"module\": \"es2015\",\n+    \"types\": []\n+  },\n+  \"exclude\": [\n+    \"test.ts\",\n+    \"**/*.spec.ts\"\n+  ]\n+}\ndiff --git a/src/tsconfig.spec.json b/src/tsconfig.spec.json\nnew file mode 100644\nindex 0000000..ac22a29\n--- /dev/null\n+++ b/src/tsconfig.spec.json\n@@ -0,0 +1,19 @@\n+{\n+  \"extends\": \"../tsconfig.json\",\n+  \"compilerOptions\": {\n+    \"outDir\": \"../out-tsc/spec\",\n+    \"baseUrl\": \"./\",\n+    \"module\": \"commonjs\",\n+    \"types\": [\n+      \"jasmine\",\n+      \"node\"\n+    ]\n+  },\n+  \"files\": [\n+    \"test.ts\"\n+  ],\n+  \"include\": [\n+    \"**/*.spec.ts\",\n+    \"**/*.d.ts\"\n+  ]\n+}\ndiff --git a/src/types.d.ts b/src/types.d.ts\nnew file mode 100644\nindex 0000000..b1986ca\n--- /dev/null\n+++ b/src/types.d.ts\n@@ -0,0 +1,321 @@\n+/* tslint:disable */\n+\n+export interface Query {\n+  users: User[]; \n+  chats: Chat[]; \n+  chat?: Chat | null; \n+}\n+\n+export interface User {\n+  id: string; \n+  name?: string | null; \n+  picture?: string | null; \n+  phone?: string | null; \n+}\n+\n+export interface Chat {\n+  id: string; /* May be a chat or a group */\n+  name?: string | null; /* Computed for chats */\n+  picture?: string | null; /* Computed for chats */\n+  allTimeMembers: User[]; /* All members, current and past ones. */\n+  listingMembers: User[]; /* Whoever gets the chat listed. For groups includes past members who still didn&#x27;t delete the group. */\n+  actualGroupMembers: User[]; /* Actual members of the group (they are not the only ones who get the group listed). Null for chats. */\n+  admins: User[]; /* Null for chats */\n+  owner?: User | null; /* If null the group is read-only. Null for chats. */\n+  messages: Message[]; \n+  unreadMessages: number; /* Computed property */\n+  isGroup: boolean; /* Computed property */\n+}\n+\n+export interface Message {\n+  id: string; \n+  sender: User; \n+  chat: Chat; \n+  content: string; \n+  createdAt: string; \n+  type: number; /* FIXME: should return MessageType */\n+  recipients: Recipient[]; /* Whoever received the message */\n+  holders: User[]; /* Whoever still holds a copy of the message. Cannot be null because the message gets deleted otherwise */\n+  ownership: boolean; /* Computed property */\n+}\n+\n+export interface Recipient {\n+  user: User; \n+  message: Message; \n+  receivedAt?: string | null; \n+  readAt?: string | null; \n+}\n+\n+export interface Mutation {\n+  addChat?: Chat | null; \n+  addGroup?: Chat | null; \n+  removeChat?: string | null; \n+  addMessage?: Message | null; \n+  removeMessages?: string[] | null; \n+  addMembers?: string[] | null; \n+  removeMembers?: string[] | null; \n+  addAdmins?: string[] | null; \n+  removeAdmins?: string[] | null; \n+  setGroupName?: string | null; \n+  setGroupPicture?: string | null; \n+  markAsReceived?: boolean | null; \n+  markAsRead?: boolean | null; \n+}\n+\n+export interface Subscription {\n+  messageAdded?: Message | null; \n+  chatAdded?: Chat | null; \n+}\n+export interface ChatQueryArgs {\n+  chatId: string; \n+}\n+export interface MessagesChatArgs {\n+  amount?: number | null; \n+}\n+export interface AddChatMutationArgs {\n+  recipientId: string; \n+}\n+export interface AddGroupMutationArgs {\n+  recipientIds: string[]; \n+  groupName: string; \n+}\n+export interface RemoveChatMutationArgs {\n+  chatId: string; \n+}\n+export interface AddMessageMutationArgs {\n+  chatId: string; \n+  content: string; \n+}\n+export interface RemoveMessagesMutationArgs {\n+  chatId: string; \n+  messageIds?: string[] | null; \n+  all?: boolean | null; \n+}\n+export interface AddMembersMutationArgs {\n+  groupId: string; \n+  userIds: string[]; \n+}\n+export interface RemoveMembersMutationArgs {\n+  groupId: string; \n+  userIds: string[]; \n+}\n+export interface AddAdminsMutationArgs {\n+  groupId: string; \n+  userIds: string[]; \n+}\n+export interface RemoveAdminsMutationArgs {\n+  groupId: string; \n+  userIds: string[]; \n+}\n+export interface SetGroupNameMutationArgs {\n+  groupId: string; \n+}\n+export interface SetGroupPictureMutationArgs {\n+  groupId: string; \n+}\n+export interface MarkAsReceivedMutationArgs {\n+  chatId: string; \n+}\n+export interface MarkAsReadMutationArgs {\n+  chatId: string; \n+}\n+export interface MessageAddedSubscriptionArgs {\n+  chatId?: string | null; \n+}\n+\n+export type MessageType = \"LOCATION\" | \"TEXT\" | \"PICTURE\";\n+\n+export namespace AddChat {\n+  export type Variables = {\n+    recipientId: string;\n+  }\n+\n+  export type Mutation = {\n+    addChat?: AddChat | null; \n+  } \n+\n+  export type AddChat = {\n+    messages: Messages[]; \n+  } & ChatWithoutMessages.Fragment\n+\n+  export type Messages = Message.Fragment\n+}\n+export namespace AddGroup {\n+  export type Variables = {\n+    recipientIds: string[];\n+    groupName: string;\n+  }\n+\n+  export type Mutation = {\n+    addGroup?: AddGroup | null; \n+  } \n+\n+  export type AddGroup = {\n+    messages: Messages[]; \n+  } & ChatWithoutMessages.Fragment\n+\n+  export type Messages = Message.Fragment\n+}\n+export namespace AddMessage {\n+  export type Variables = {\n+    chatId: string;\n+    content: string;\n+  }\n+\n+  export type Mutation = {\n+    addMessage?: AddMessage | null; \n+  } \n+\n+  export type AddMessage = Message.Fragment\n+}\n+export namespace ChatAdded {\n+  export type Variables = {\n+  }\n+\n+  export type Subscription = {\n+    chatAdded?: ChatAdded | null; \n+  } \n+\n+  export type ChatAdded = {\n+    messages: Messages[]; \n+  } & ChatWithoutMessages.Fragment\n+\n+  export type Messages = Message.Fragment\n+}\n+export namespace GetChat {\n+  export type Variables = {\n+    chatId: string;\n+  }\n+\n+  export type Query = {\n+    chat?: Chat | null; \n+  } \n+\n+  export type Chat = {\n+    messages: Messages[]; \n+  } & ChatWithoutMessages.Fragment\n+\n+  export type Messages = Message.Fragment\n+}\n+export namespace GetChats {\n+  export type Variables = {\n+    amount?: number | null;\n+  }\n+\n+  export type Query = {\n+    chats: Chats[]; \n+  } \n+\n+  export type Chats = {\n+    messages: Messages[]; \n+  } & ChatWithoutMessages.Fragment\n+\n+  export type Messages = Message.Fragment\n+}\n+export namespace GetUsers {\n+  export type Variables = {\n+  }\n+\n+  export type Query = {\n+    users: Users[]; \n+  } \n+\n+  export type Users = {\n+    id: string; \n+    name?: string | null; \n+    picture?: string | null; \n+  } \n+}\n+export namespace MessageAdded {\n+  export type Variables = {\n+    chatId?: string | null;\n+  }\n+\n+  export type Subscription = {\n+    messageAdded?: MessageAdded | null; \n+  } \n+\n+  export type MessageAdded = {\n+    chat: Chat; \n+  } & Message.Fragment\n+\n+  export type Chat = {\n+    id: string; \n+  } \n+}\n+export namespace RemoveAllMessages {\n+  export type Variables = {\n+    chatId: string;\n+    all?: boolean | null;\n+  }\n+\n+  export type Mutation = {\n+    removeMessages?: string[] | null; \n+  } \n+}\n+export namespace RemoveChat {\n+  export type Variables = {\n+    chatId: string;\n+  }\n+\n+  export type Mutation = {\n+    removeChat?: string | null; \n+  } \n+}\n+export namespace RemoveMessages {\n+  export type Variables = {\n+    chatId: string;\n+    messageIds?: string[] | null;\n+  }\n+\n+  export type Mutation = {\n+    removeMessages?: string[] | null; \n+  } \n+}\n+\n+export namespace ChatWithoutMessages {\n+  export type Fragment = {\n+    id: string; \n+    name?: string | null; \n+    picture?: string | null; \n+    allTimeMembers: AllTimeMembers[]; \n+    unreadMessages: number; \n+    isGroup: boolean; \n+  } \n+\n+  export type AllTimeMembers = {\n+    id: string; \n+  } \n+}\n+\n+export namespace Message {\n+  export type Fragment = {\n+    id: string; \n+    sender: Sender; \n+    content: string; \n+    createdAt: string; \n+    type: number; \n+    recipients: Recipients[]; \n+    ownership: boolean; \n+  } \n+\n+  export type Sender = {\n+    id: string; \n+    name?: string | null; \n+  } \n+\n+  export type Recipients = {\n+    user: User; \n+    message: Message; \n+    receivedAt?: string | null; \n+    readAt?: string | null; \n+  } \n+\n+  export type User = {\n+    id: string; \n+  } \n+\n+  export type Message = {\n+    id: string; \n+  } \n+}\ndiff --git a/src/typings.d.ts b/src/typings.d.ts\nnew file mode 100644\nindex 0000000..ef5c7bd\n--- /dev/null\n+++ b/src/typings.d.ts\n@@ -0,0 +1,5 @@\n+/* SystemJS module definition */\n+declare var module: NodeModule;\n+interface NodeModule {\n+  id: string;\n+}\ndiff --git a/tsconfig.json b/tsconfig.json\nnew file mode 100644\nindex 0000000..d8195f3\n--- /dev/null\n+++ b/tsconfig.json\n@@ -0,0 +1,21 @@\n+{\n+  \"compileOnSave\": false,\n+  \"compilerOptions\": {\n+    \"outDir\": \"./dist/out-tsc\",\n+    \"sourceMap\": true,\n+    \"declaration\": false,\n+    \"moduleResolution\": \"node\",\n+    \"emitDecoratorMetadata\": true,\n+    \"experimentalDecorators\": true,\n+    \"downlevelIteration\": true,\n+    \"target\": \"es5\",\n+    \"typeRoots\": [\n+      \"node_modules/@types\"\n+    ],\n+    \"lib\": [\n+      \"es2017\",\n+      \"dom\",\n+      \"esnext.asynciterable\"\n+    ]\n+  }\n+}\ndiff --git a/tslint.json b/tslint.json\nnew file mode 100644\nindex 0000000..9963d6c\n--- /dev/null\n+++ b/tslint.json\n@@ -0,0 +1,143 @@\n+{\n+  \"rulesDirectory\": [\n+    \"node_modules/codelyzer\"\n+  ],\n+  \"rules\": {\n+    \"arrow-return-shorthand\": true,\n+    \"callable-types\": true,\n+    \"class-name\": true,\n+    \"comment-format\": [\n+      true,\n+      \"check-space\"\n+    ],\n+    \"curly\": true,\n+    \"deprecation\": {\n+      \"severity\": \"warn\"\n+    },\n+    \"eofline\": true,\n+    \"forin\": true,\n+    \"import-blacklist\": [\n+      true,\n+      \"rxjs\",\n+      \"rxjs/Rx\"\n+    ],\n+    \"import-spacing\": true,\n+    \"indent\": [\n+      true,\n+      \"spaces\"\n+    ],\n+    \"interface-over-type-literal\": true,\n+    \"label-position\": true,\n+    \"max-line-length\": [\n+      true,\n+      140\n+    ],\n+    \"member-access\": false,\n+    \"member-ordering\": [\n+      true,\n+      {\n+        \"order\": [\n+          \"static-field\",\n+          \"instance-field\",\n+          \"static-method\",\n+          \"instance-method\"\n+        ]\n+      }\n+    ],\n+    \"no-arg\": true,\n+    \"no-bitwise\": true,\n+    \"no-console\": [\n+      true,\n+      \"debug\",\n+      \"info\",\n+      \"time\",\n+      \"timeEnd\",\n+      \"trace\"\n+    ],\n+    \"no-construct\": true,\n+    \"no-debugger\": true,\n+    \"no-duplicate-super\": true,\n+    \"no-empty\": false,\n+    \"no-empty-interface\": true,\n+    \"no-eval\": true,\n+    \"no-inferrable-types\": [\n+      true,\n+      \"ignore-params\"\n+    ],\n+    \"no-misused-new\": true,\n+    \"no-non-null-assertion\": true,\n+    \"no-shadowed-variable\": true,\n+    \"no-string-literal\": false,\n+    \"no-string-throw\": true,\n+    \"no-switch-case-fall-through\": true,\n+    \"no-trailing-whitespace\": true,\n+    \"no-unnecessary-initializer\": true,\n+    \"no-unused-expression\": true,\n+    \"no-use-before-declare\": true,\n+    \"no-var-keyword\": true,\n+    \"object-literal-sort-keys\": false,\n+    \"one-line\": [\n+      true,\n+      \"check-open-brace\",\n+      \"check-catch\",\n+      \"check-else\",\n+      \"check-whitespace\"\n+    ],\n+    \"prefer-const\": true,\n+    \"quotemark\": [\n+      true,\n+      \"single\"\n+    ],\n+    \"radix\": true,\n+    \"semicolon\": [\n+      true,\n+      \"always\"\n+    ],\n+    \"triple-equals\": [\n+      true,\n+      \"allow-null-check\"\n+    ],\n+    \"typedef-whitespace\": [\n+      true,\n+      {\n+        \"call-signature\": \"nospace\",\n+        \"index-signature\": \"nospace\",\n+        \"parameter\": \"nospace\",\n+        \"property-declaration\": \"nospace\",\n+        \"variable-declaration\": \"nospace\"\n+      }\n+    ],\n+    \"unified-signatures\": true,\n+    \"variable-name\": false,\n+    \"whitespace\": [\n+      true,\n+      \"check-branch\",\n+      \"check-decl\",\n+      \"check-operator\",\n+      \"check-separator\",\n+      \"check-type\"\n+    ],\n+    \"directive-selector\": [\n+      true,\n+      \"attribute\",\n+      \"app\",\n+      \"camelCase\"\n+    ],\n+    \"component-selector\": [\n+      true,\n+      \"element\",\n+      \"app\",\n+      \"kebab-case\"\n+    ],\n+    \"no-output-on-prefix\": true,\n+    \"use-input-property-decorator\": true,\n+    \"use-output-property-decorator\": true,\n+    \"use-host-property-decorator\": true,\n+    \"no-input-rename\": true,\n+    \"no-output-rename\": true,\n+    \"use-life-cycle-interface\": true,\n+    \"use-pipe-transform-interface\": true,\n+    \"component-class-suffix\": true,\n+    \"directive-class-suffix\": true\n+  }\n+}\n",
        "manuals": [
          {
            "manualTitle": "Initial commit",
            "stepRevision": "f493748ad9dcfa0a086df8fb720cecfddf2caeb3",
            "manualView": "A newly created Tortilla project. For more information, see https://github.com/Urigo/tortilla."
          },
          {
            "manualTitle": "Step 1: Chats listing",
            "stepRevision": "ea4f6a77579a6155973ec15b1f3d7004c7aca273",
            "manualView": ""
          },
          {
            "manualTitle": "Step 2: graphql-code-generator",
            "stepRevision": "6617ab80c0d3c6da8e6747ec44f07b0fcfccf3f6",
            "manualView": ""
          },
          {
            "manualTitle": "Step 3: Testing",
            "stepRevision": "974eae42a44824d0c2f957fdb46a233071b0a55a",
            "manualView": ""
          },
          {
            "manualTitle": "Step 4: Chat viewer",
            "stepRevision": "99ce45f851e0b5069db24830270fd84d07036a5c",
            "manualView": ""
          },
          {
            "manualTitle": "Step 5: Mutations",
            "stepRevision": "d59dea0f149ab588d970dbd170d7c9ec3ca246ed",
            "manualView": ""
          },
          {
            "manualTitle": "Step 6: Update the store",
            "stepRevision": "e51f2a77fd80e90af93078e524bb334157af8fb8",
            "manualView": ""
          },
          {
            "manualTitle": "Step 7: Messages and chat removal",
            "stepRevision": "148a2e06f5bd247aa1e79d681cb859cafe3b3993",
            "manualView": ""
          },
          {
            "manualTitle": "Step 8: Chats creation",
            "stepRevision": "975d54081463479be2688d02457e55afce9be288",
            "manualView": ""
          },
          {
            "manualTitle": "Step 9: Zero latency on slow 3g networks",
            "stepRevision": "e34d1593bd10fc5ff36f95b39eec512461e7fc03",
            "manualView": ""
          },
          {
            "manualTitle": "Step 10: Authentication",
            "stepRevision": "a576c35409b922d81c65534c7f431a617a41210e",
            "manualView": ""
          },
          {
            "manualTitle": "Step 11: Subscriptions",
            "stepRevision": "e966adac0318b17ed22f371382f4f792be942ff1",
            "manualView": ""
          }
        ]
      }
    ]
  }
]
